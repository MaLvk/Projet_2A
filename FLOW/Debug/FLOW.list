
FLOW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b3c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000161c8  0801b590  0801b590  0002b590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031758  08031758  000500c4  2**0
                  CONTENTS
  4 .ARM          00000008  08031758  08031758  00041758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031760  08031760  000500c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031760  08031760  00041760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031764  08031764  00041764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08031768  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004dd68  200000c8  0803182c  000500c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2004de30  0803182c  0005de30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f2f5  00000000  00000000  000500f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a54d  00000000  00000000  0009f3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003698  00000000  00000000  000a9938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003270  00000000  00000000  000acfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a0e7  00000000  00000000  000b0240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004ad08  00000000  00000000  000ea327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001294ed  00000000  00000000  0013502f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  0025e51c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ed14  00000000  00000000  0025e5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003a35  00000000  00000000  0026d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b578 	.word	0x0801b578

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	0801b578 	.word	0x0801b578

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2uiz>:
 8000b0c:	004a      	lsls	r2, r1, #1
 8000b0e:	d211      	bcs.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b14:	d211      	bcs.n	8000b3a <__aeabi_d2uiz+0x2e>
 8000b16:	d50d      	bpl.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b20:	d40e      	bmi.n	8000b40 <__aeabi_d2uiz+0x34>
 8000b22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_d2uiz+0x3a>
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b60:	f000 b96e 	b.w	8000e40 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	4604      	mov	r4, r0
 8000b84:	468c      	mov	ip, r1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8083 	bne.w	8000c92 <__udivmoddi4+0x116>
 8000b8c:	428a      	cmp	r2, r1
 8000b8e:	4617      	mov	r7, r2
 8000b90:	d947      	bls.n	8000c22 <__udivmoddi4+0xa6>
 8000b92:	fab2 f282 	clz	r2, r2
 8000b96:	b142      	cbz	r2, 8000baa <__udivmoddi4+0x2e>
 8000b98:	f1c2 0020 	rsb	r0, r2, #32
 8000b9c:	fa24 f000 	lsr.w	r0, r4, r0
 8000ba0:	4091      	lsls	r1, r2
 8000ba2:	4097      	lsls	r7, r2
 8000ba4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba8:	4094      	lsls	r4, r2
 8000baa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bae:	0c23      	lsrs	r3, r4, #16
 8000bb0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bb4:	fa1f fe87 	uxth.w	lr, r7
 8000bb8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x60>
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bce:	f080 8119 	bcs.w	8000e04 <__udivmoddi4+0x288>
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	f240 8116 	bls.w	8000e04 <__udivmoddi4+0x288>
 8000bd8:	3e02      	subs	r6, #2
 8000bda:	443b      	add	r3, r7
 8000bdc:	1a5b      	subs	r3, r3, r1
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf0:	45a6      	cmp	lr, r4
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x8c>
 8000bf4:	193c      	adds	r4, r7, r4
 8000bf6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bfa:	f080 8105 	bcs.w	8000e08 <__udivmoddi4+0x28c>
 8000bfe:	45a6      	cmp	lr, r4
 8000c00:	f240 8102 	bls.w	8000e08 <__udivmoddi4+0x28c>
 8000c04:	3802      	subs	r0, #2
 8000c06:	443c      	add	r4, r7
 8000c08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0c:	eba4 040e 	sub.w	r4, r4, lr
 8000c10:	2600      	movs	r6, #0
 8000c12:	b11d      	cbz	r5, 8000c1c <__udivmoddi4+0xa0>
 8000c14:	40d4      	lsrs	r4, r2
 8000c16:	2300      	movs	r3, #0
 8000c18:	e9c5 4300 	strd	r4, r3, [r5]
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	b902      	cbnz	r2, 8000c26 <__udivmoddi4+0xaa>
 8000c24:	deff      	udf	#255	; 0xff
 8000c26:	fab2 f282 	clz	r2, r2
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	d150      	bne.n	8000cd0 <__udivmoddi4+0x154>
 8000c2e:	1bcb      	subs	r3, r1, r7
 8000c30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c34:	fa1f f887 	uxth.w	r8, r7
 8000c38:	2601      	movs	r6, #1
 8000c3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c3e:	0c21      	lsrs	r1, r4, #16
 8000c40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb08 f30c 	mul.w	r3, r8, ip
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0xe4>
 8000c50:	1879      	adds	r1, r7, r1
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0xe2>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	f200 80e9 	bhi.w	8000e30 <__udivmoddi4+0x2b4>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1ac9      	subs	r1, r1, r3
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x10c>
 8000c78:	193c      	adds	r4, r7, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x10a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80d9 	bhi.w	8000e38 <__udivmoddi4+0x2bc>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e7bf      	b.n	8000c12 <__udivmoddi4+0x96>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0x12e>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80b1 	beq.w	8000dfe <__udivmoddi4+0x282>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x1cc>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0x140>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80b8 	bhi.w	8000e2c <__udivmoddi4+0x2b0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0103 	sbc.w	r1, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0a8      	beq.n	8000c1c <__udivmoddi4+0xa0>
 8000cca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0xa0>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd8:	4097      	lsls	r7, r2
 8000cda:	fa01 f002 	lsl.w	r0, r1, r2
 8000cde:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce2:	40d9      	lsrs	r1, r3
 8000ce4:	4330      	orrs	r0, r6
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cec:	fa1f f887 	uxth.w	r8, r7
 8000cf0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb06 f108 	mul.w	r1, r6, r8
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	fa04 f402 	lsl.w	r4, r4, r2
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x19c>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 808d 	bcs.w	8000e28 <__udivmoddi4+0x2ac>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 808a 	bls.w	8000e28 <__udivmoddi4+0x2ac>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b281      	uxth	r1, r0
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d28:	fb00 f308 	mul.w	r3, r0, r8
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0x1c4>
 8000d30:	1879      	adds	r1, r7, r1
 8000d32:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d36:	d273      	bcs.n	8000e20 <__udivmoddi4+0x2a4>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d971      	bls.n	8000e20 <__udivmoddi4+0x2a4>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	4439      	add	r1, r7
 8000d40:	1acb      	subs	r3, r1, r3
 8000d42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d46:	e778      	b.n	8000c3a <__udivmoddi4+0xbe>
 8000d48:	f1c6 0c20 	rsb	ip, r6, #32
 8000d4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d54:	431c      	orrs	r4, r3
 8000d56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d66:	431f      	orrs	r7, r3
 8000d68:	0c3b      	lsrs	r3, r7, #16
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fa1f f884 	uxth.w	r8, r4
 8000d72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d7e:	458a      	cmp	sl, r1
 8000d80:	fa02 f206 	lsl.w	r2, r2, r6
 8000d84:	fa00 f306 	lsl.w	r3, r0, r6
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x220>
 8000d8a:	1861      	adds	r1, r4, r1
 8000d8c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d90:	d248      	bcs.n	8000e24 <__udivmoddi4+0x2a8>
 8000d92:	458a      	cmp	sl, r1
 8000d94:	d946      	bls.n	8000e24 <__udivmoddi4+0x2a8>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4421      	add	r1, r4
 8000d9c:	eba1 010a 	sub.w	r1, r1, sl
 8000da0:	b2bf      	uxth	r7, r7
 8000da2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000daa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dae:	fb00 f808 	mul.w	r8, r0, r8
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x24a>
 8000db6:	19e7      	adds	r7, r4, r7
 8000db8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dbc:	d22e      	bcs.n	8000e1c <__udivmoddi4+0x2a0>
 8000dbe:	45b8      	cmp	r8, r7
 8000dc0:	d92c      	bls.n	8000e1c <__udivmoddi4+0x2a0>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4427      	add	r7, r4
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	eba7 0708 	sub.w	r7, r7, r8
 8000dce:	fba0 8902 	umull	r8, r9, r0, r2
 8000dd2:	454f      	cmp	r7, r9
 8000dd4:	46c6      	mov	lr, r8
 8000dd6:	4649      	mov	r1, r9
 8000dd8:	d31a      	bcc.n	8000e10 <__udivmoddi4+0x294>
 8000dda:	d017      	beq.n	8000e0c <__udivmoddi4+0x290>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x27a>
 8000dde:	ebb3 020e 	subs.w	r2, r3, lr
 8000de2:	eb67 0701 	sbc.w	r7, r7, r1
 8000de6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dea:	40f2      	lsrs	r2, r6
 8000dec:	ea4c 0202 	orr.w	r2, ip, r2
 8000df0:	40f7      	lsrs	r7, r6
 8000df2:	e9c5 2700 	strd	r2, r7, [r5]
 8000df6:	2600      	movs	r6, #0
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	462e      	mov	r6, r5
 8000e00:	4628      	mov	r0, r5
 8000e02:	e70b      	b.n	8000c1c <__udivmoddi4+0xa0>
 8000e04:	4606      	mov	r6, r0
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0x60>
 8000e08:	4618      	mov	r0, r3
 8000e0a:	e6fd      	b.n	8000c08 <__udivmoddi4+0x8c>
 8000e0c:	4543      	cmp	r3, r8
 8000e0e:	d2e5      	bcs.n	8000ddc <__udivmoddi4+0x260>
 8000e10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e14:	eb69 0104 	sbc.w	r1, r9, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	e7df      	b.n	8000ddc <__udivmoddi4+0x260>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e7d2      	b.n	8000dc6 <__udivmoddi4+0x24a>
 8000e20:	4660      	mov	r0, ip
 8000e22:	e78d      	b.n	8000d40 <__udivmoddi4+0x1c4>
 8000e24:	4681      	mov	r9, r0
 8000e26:	e7b9      	b.n	8000d9c <__udivmoddi4+0x220>
 8000e28:	4666      	mov	r6, ip
 8000e2a:	e775      	b.n	8000d18 <__udivmoddi4+0x19c>
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	e74a      	b.n	8000cc6 <__udivmoddi4+0x14a>
 8000e30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e34:	4439      	add	r1, r7
 8000e36:	e713      	b.n	8000c60 <__udivmoddi4+0xe4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	443c      	add	r4, r7
 8000e3c:	e724      	b.n	8000c88 <__udivmoddi4+0x10c>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	0000      	movs	r0, r0
	...

08000e48 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af02      	add	r7, sp, #8

	//uiDisplayBasic();

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000e4e:	4a36      	ldr	r2, [pc, #216]	; (8000f28 <audioLoop+0xe0>)
 8000e50:	2100      	movs	r1, #0
 8000e52:	4836      	ldr	r0, [pc, #216]	; (8000f2c <audioLoop+0xe4>)
 8000e54:	f019 f970 	bl	801a138 <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000e58:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <audioLoop+0xe8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]

	arm_rfft_fast_init_f32(&FFTStruct, FFTLength);
 8000e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e62:	4834      	ldr	r0, [pc, #208]	; (8000f34 <audioLoop+0xec>)
 8000e64:	f018 f82e 	bl	8018ec4 <arm_rfft_fast_init_f32>

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8000e68:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <audioLoop+0xf0>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e76:	4931      	ldr	r1, [pc, #196]	; (8000f3c <audioLoop+0xf4>)
 8000e78:	4831      	ldr	r0, [pc, #196]	; (8000f40 <audioLoop+0xf8>)
 8000e7a:	f004 f809 	bl	8004e90 <start_Audio_Processing>

	/* main audio loop */
	while (1) {

		accumulateInputLevels();
 8000e7e:	f000 f86f 	bl	8000f60 <accumulateInputLevels>
		count++;
 8000e82:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <audioLoop+0xfc>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <audioLoop+0xfc>)
 8000e8a:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <audioLoop+0xfc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b13      	cmp	r3, #19
 8000e92:	dd2a      	ble.n	8000eea <audioLoop+0xa2>
			count = 0;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <audioLoop+0xfc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
			inputLevelLavr = inputLevelL * 0.05;
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <audioLoop+0x100>)
 8000e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ea0:	a31f      	add	r3, pc, #124	; (adr r3, 8000f20 <audioLoop+0xd8>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fc1f 	bl	80006e8 <__aeabi_dmul>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4927      	ldr	r1, [pc, #156]	; (8000f4c <audioLoop+0x104>)
 8000eb0:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelRavr = inputLevelR * 0.05;
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <audioLoop+0x108>)
 8000eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eba:	a319      	add	r3, pc, #100	; (adr r3, 8000f20 <audioLoop+0xd8>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	f7ff fc12 	bl	80006e8 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4922      	ldr	r1, [pc, #136]	; (8000f54 <audioLoop+0x10c>)
 8000eca:	e9c1 2300 	strd	r2, r3, [r1]
			//osSignalSet(uiTaskHandle, 0x0002);
			//uiDisplayInputLevel(inputLevelL, inputLevelR);
			inputLevelL = 0.;
 8000ece:	491e      	ldr	r1, [pc, #120]	; (8000f48 <audioLoop+0x100>)
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 8000edc:	491c      	ldr	r1, [pc, #112]	; (8000f50 <audioLoop+0x108>)
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	e9c1 2300 	strd	r2, r3, [r1]
		}

		osSignalWait (0x0002, osWaitForever);
 8000eea:	463b      	mov	r3, r7
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f015 f846 	bl	8015f84 <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 1st half block */
		processAudio(buf_output, buf_input);
 8000ef8:	4910      	ldr	r1, [pc, #64]	; (8000f3c <audioLoop+0xf4>)
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <audioLoop+0xf8>)
 8000efc:	f000 f94c 	bl	8001198 <processAudio>

		osSignalWait (0x0001, osWaitForever);
 8000f00:	463b      	mov	r3, r7
 8000f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f06:	2101      	movs	r1, #1
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f015 f83b 	bl	8015f84 <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <audioLoop+0x110>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <audioLoop+0x114>)
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f93d 	bl	8001198 <processAudio>
		accumulateInputLevels();
 8000f1e:	e7ae      	b.n	8000e7e <audioLoop+0x36>
 8000f20:	9999999a 	.word	0x9999999a
 8000f24:	3fa99999 	.word	0x3fa99999
 8000f28:	0004e200 	.word	0x0004e200
 8000f2c:	c0096000 	.word	0xc0096000
 8000f30:	2000cd68 	.word	0x2000cd68
 8000f34:	20009540 	.word	0x20009540
 8000f38:	2000cf98 	.word	0x2000cf98
 8000f3c:	20008540 	.word	0x20008540
 8000f40:	2000a558 	.word	0x2000a558
 8000f44:	200000e4 	.word	0x200000e4
 8000f48:	200000f0 	.word	0x200000f0
 8000f4c:	2000cd58 	.word	0x2000cd58
 8000f50:	200000f8 	.word	0x200000f8
 8000f54:	2000cd60 	.word	0x2000cd60
 8000f58:	20000004 	.word	0x20000004
 8000f5c:	20000000 	.word	0x20000000

08000f60 <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	e016      	b.n	8000f9e <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 8000f70:	4a3e      	ldr	r2, [pc, #248]	; (800106c <accumulateInputLevels+0x10c>)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f78:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 8000f7a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dd05      	ble.n	8000f8e <accumulateInputLevels+0x2e>
			lvl += v;
 8000f82:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e004      	b.n	8000f98 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 8000f8e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fa4:	d3e4      	bcc.n	8000f70 <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f7ff fb24 	bl	80005f4 <__aeabi_ui2d>
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <accumulateInputLevels+0x110>)
 8000fb2:	f7ff fcc3 	bl	800093c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <accumulateInputLevels+0x114>)
 8000fc4:	f7ff fcba 	bl	800093c <__aeabi_ddiv>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <accumulateInputLevels+0x118>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff f9d1 	bl	800037c <__adddf3>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4926      	ldr	r1, [pc, #152]	; (8001078 <accumulateInputLevels+0x118>)
 8000fe0:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8000fe8:	2301      	movs	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	e016      	b.n	800101c <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_input[i];
 8000fee:	4a1f      	ldr	r2, [pc, #124]	; (800106c <accumulateInputLevels+0x10c>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff6:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 8000ff8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dd05      	ble.n	800100c <accumulateInputLevels+0xac>
			lvl += v;
 8001000:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e004      	b.n	8001016 <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 800100c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3302      	adds	r3, #2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001022:	d3e4      	bcc.n	8000fee <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff fae5 	bl	80005f4 <__aeabi_ui2d>
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <accumulateInputLevels+0x110>)
 8001030:	f7ff fc84 	bl	800093c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <accumulateInputLevels+0x114>)
 8001042:	f7ff fc7b 	bl	800093c <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <accumulateInputLevels+0x11c>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f7ff f992 	bl	800037c <__adddf3>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4907      	ldr	r1, [pc, #28]	; (800107c <accumulateInputLevels+0x11c>)
 800105e:	e9c1 2300 	strd	r2, r3, [r1]

}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20008540 	.word	0x20008540
 8001070:	40a00000 	.word	0x40a00000
 8001074:	40e00000 	.word	0x40e00000
 8001078:	200000f0 	.word	0x200000f0
 800107c:	200000f8 	.word	0x200000f8

08001080 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_FULL;
	osSignalSet(defaultTaskHandle, 0x0001);
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <HAL_SAI_RxCpltCallback+0x1c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	4618      	mov	r0, r3
 8001090:	f014 ff38 	bl	8015f04 <osSignalSet>
	return;
 8001094:	bf00      	nop
}
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000cdf0 	.word	0x2000cdf0

080010a0 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_HALF;
	osSignalSet(defaultTaskHandle, 0x0002);
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <HAL_SAI_RxHalfCpltCallback+0x1c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2102      	movs	r1, #2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f014 ff28 	bl	8015f04 <osSignalSet>
	return;
 80010b4:	bf00      	nop
}
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000cdf0 	.word	0x2000cdf0

080010c0 <readFromAudioScratch>:
// --------------------------- Audio scratch buffer ---------------------------

/**
 * Read a sample from the audio scratch buffer in SDRAM at position "pos"
 */
static float readFromAudioScratch(int pos) {
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <readFromAudioScratch+0x2c>)
 80010ca:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
	return *(__IO float*) pSdramAddress;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	ee07 3a90 	vmov	s15, r3

}
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	c0096000 	.word	0xc0096000

080010f0 <writeToAudioScratch>:

/**
 * Write the given value to the audio scratch buffer in SDRAM at position "pos"
 */
static void writeToAudioScratch(float val, int pos) {
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010fa:	6038      	str	r0, [r7, #0]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <writeToAudioScratch+0x2c>)
 80010fe:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
	*(__IO float*) pSdramAddress = val;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	601a      	str	r2, [r3, #0]

}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	c0096000 	.word	0xc0096000

08001120 <printIndex>:
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */



static void printIndex(uint32_t x){
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af02      	add	r7, sp, #8
 8001126:	6078      	str	r0, [r7, #4]
	char index[10];
	sprintf(index, "%lu Hz  ",x);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	490a      	ldr	r1, [pc, #40]	; (8001158 <printIndex+0x38>)
 8001130:	4618      	mov	r0, r3
 8001132:	f019 f967 	bl	801a404 <siprintf>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8001136:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800113a:	f003 fa11 	bl	8004560 <LCD_SetStrokeColor>
	LCD_DrawString(220,120,(uint8_t *)index, LEFT_MODE, true);
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	2301      	movs	r3, #1
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2303      	movs	r3, #3
 8001148:	2178      	movs	r1, #120	; 0x78
 800114a:	20dc      	movs	r0, #220	; 0xdc
 800114c:	f003 faee 	bl	800472c <LCD_DrawString>
}
 8001150:	bf00      	nop
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	0801b590 	.word	0x0801b590

0800115c <printdB>:

static void printdB(uint32_t x){
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af02      	add	r7, sp, #8
 8001162:	6078      	str	r0, [r7, #4]
	char dB[10];
	sprintf(dB, "%lu Hz  ",x);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	490a      	ldr	r1, [pc, #40]	; (8001194 <printdB+0x38>)
 800116c:	4618      	mov	r0, r3
 800116e:	f019 f949 	bl	801a404 <siprintf>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8001172:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001176:	f003 f9f3 	bl	8004560 <LCD_SetStrokeColor>
	LCD_DrawString(220,100,(uint8_t *)dB, LEFT_MODE, true);
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	2301      	movs	r3, #1
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2303      	movs	r3, #3
 8001184:	2164      	movs	r1, #100	; 0x64
 8001186:	20dc      	movs	r0, #220	; 0xdc
 8001188:	f003 fad0 	bl	800472c <LCD_DrawString>
}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0801b590 	.word	0x0801b590

08001198 <processAudio>:


static void processAudio(int16_t *out, int16_t *in) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]

	LED_On(); // for oscilloscope measurements...
 80011a2:	f003 f86b 	bl	800427c <LED_On>

	/* 16KHz -> 1000ms*16 = 1s*/
	int delay = (int) 16 * delayMs;
 80011a6:	4b90      	ldr	r3, [pc, #576]	; (80013e8 <processAudio+0x250>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	617b      	str	r3, [r7, #20]
	float32_t max=0;
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int index=0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28

	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
 80011bc:	e09c      	b.n	80012f8 <processAudio+0x160>

		//modulo AUDIO_SCRATCH_SIZE
		if(posScratch>AUDIO_SCRATCH_SIZE-1){
 80011be:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <processAudio+0x254>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a8b      	ldr	r2, [pc, #556]	; (80013f0 <processAudio+0x258>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	dd02      	ble.n	80011ce <processAudio+0x36>
			posScratch=0;
 80011c8:	4b88      	ldr	r3, [pc, #544]	; (80013ec <processAudio+0x254>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
		}

		if(fillScratch<delay){
 80011ce:	4b89      	ldr	r3, [pc, #548]	; (80013f4 <processAudio+0x25c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dd32      	ble.n	800123e <processAudio+0xa6>
			writeToAudioScratch((float)in[n],posScratch);
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ec:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <processAudio+0x254>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	f7ff ff7b 	bl	80010f0 <writeToAudioScratch>
			posScratch+=1;
 80011fa:	4b7c      	ldr	r3, [pc, #496]	; (80013ec <processAudio+0x254>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <processAudio+0x254>)
 8001202:	6013      	str	r3, [r2, #0]
			out[n] = (in[n]*volume)/100;
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	4413      	add	r3, r2
 800120c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001210:	461a      	mov	r2, r3
 8001212:	4b79      	ldr	r3, [pc, #484]	; (80013f8 <processAudio+0x260>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	fb03 f302 	mul.w	r3, r3, r2
 800121a:	4a78      	ldr	r2, [pc, #480]	; (80013fc <processAudio+0x264>)
 800121c:	fb82 1203 	smull	r1, r2, r2, r3
 8001220:	1152      	asrs	r2, r2, #5
 8001222:	17db      	asrs	r3, r3, #31
 8001224:	1ad1      	subs	r1, r2, r3
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	b20a      	sxth	r2, r1
 8001230:	801a      	strh	r2, [r3, #0]
			fillScratch+=1;
 8001232:	4b70      	ldr	r3, [pc, #448]	; (80013f4 <processAudio+0x25c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a6e      	ldr	r2, [pc, #440]	; (80013f4 <processAudio+0x25c>)
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e059      	b.n	80012f2 <processAudio+0x15a>
		}else{
			int j = posScratch-delay;
 800123e:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <processAudio+0x254>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	623b      	str	r3, [r7, #32]

			if(j<0){
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	da03      	bge.n	8001256 <processAudio+0xbe>
				j=j+AUDIO_SCRATCH_SIZE;
 800124e:	6a3a      	ldr	r2, [r7, #32]
 8001250:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <processAudio+0x268>)
 8001252:	4413      	add	r3, r2
 8001254:	623b      	str	r3, [r7, #32]
			}
			/* old:  */
			int16_t old = (int16_t) readFromAudioScratch(j);
 8001256:	6a38      	ldr	r0, [r7, #32]
 8001258:	f7ff ff32 	bl	80010c0 <readFromAudioScratch>
 800125c:	eef0 7a40 	vmov.f32	s15, s0
 8001260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001264:	ee17 3a90 	vmov	r3, s15
 8001268:	827b      	strh	r3, [r7, #18]

			float new = in[n]+(float)old/100*(delayFeed);
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800127e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128a:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 8001404 <processAudio+0x26c>
 800128e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001292:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <processAudio+0x270>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	edc7 7a03 	vstr	s15, [r7, #12]
			writeToAudioScratch((float)new,posScratch);
 80012aa:	4b50      	ldr	r3, [pc, #320]	; (80013ec <processAudio+0x254>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	ed97 0a03 	vldr	s0, [r7, #12]
 80012b4:	f7ff ff1c 	bl	80010f0 <writeToAudioScratch>
			posScratch+=1;
 80012b8:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <processAudio+0x254>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a4b      	ldr	r2, [pc, #300]	; (80013ec <processAudio+0x254>)
 80012c0:	6013      	str	r3, [r2, #0]
			out[n]= (new*volume)/100;
 80012c2:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <processAudio+0x260>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001404 <processAudio+0x26c>
 80012da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ea:	ee17 2a90 	vmov	r2, s15
 80012ee:	b212      	sxth	r2, r2
 80012f0:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	3301      	adds	r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fe:	f4ff af5e 	bcc.w	80011be <processAudio+0x26>
		}
	}
	/* array copy */
	for(int i=0;i<FFTLength;i++){
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	e016      	b.n	8001336 <processAudio+0x19e>
		FFTInput[i]=(float32_t) out[i]/32738;
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800140c <processAudio+0x274>
 8001320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001324:	4a3a      	ldr	r2, [pc, #232]	; (8001410 <processAudio+0x278>)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<FFTLength;i++){
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	3301      	adds	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133c:	dbe4      	blt.n	8001308 <processAudio+0x170>
	}
		/* fft -> dB fft */
	arm_rfft_fast_f32(&FFTStruct,FFTInput,FFTOutput,0);
 800133e:	2300      	movs	r3, #0
 8001340:	4a34      	ldr	r2, [pc, #208]	; (8001414 <processAudio+0x27c>)
 8001342:	4933      	ldr	r1, [pc, #204]	; (8001410 <processAudio+0x278>)
 8001344:	4834      	ldr	r0, [pc, #208]	; (8001418 <processAudio+0x280>)
 8001346:	f017 fe71 	bl	801902c <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(FFTOutput,FFTOutputMag,FFTLength/2);
 800134a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134e:	4933      	ldr	r1, [pc, #204]	; (800141c <processAudio+0x284>)
 8001350:	4830      	ldr	r0, [pc, #192]	; (8001414 <processAudio+0x27c>)
 8001352:	f018 facf 	bl	80198f4 <arm_cmplx_mag_f32>


	for(int i=5;i<FFTLength/2;i++){
 8001356:	2305      	movs	r3, #5
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	e017      	b.n	800138c <processAudio+0x1f4>
		if(max<FFTOutputMag[i]){
 800135c:	4a2f      	ldr	r2, [pc, #188]	; (800141c <processAudio+0x284>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800136c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	d507      	bpl.n	8001386 <processAudio+0x1ee>
			max=FFTOutputMag[i];
 8001376:	4a29      	ldr	r2, [pc, #164]	; (800141c <processAudio+0x284>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
			index=i;
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i=5;i<FFTLength/2;i++){
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	3301      	adds	r3, #1
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001392:	dbe3      	blt.n	800135c <processAudio+0x1c4>
		}

	}

	printIndex(index*5.556);
 8001394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001396:	f7ff f93d 	bl	8000614 <__aeabi_i2d>
 800139a:	a311      	add	r3, pc, #68	; (adr r3, 80013e0 <processAudio+0x248>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f9a2 	bl	80006e8 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fbae 	bl	8000b0c <__aeabi_d2uiz>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff feb4 	bl	8001120 <printIndex>
	printdB(max);
 80013b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c0:	ee17 0a90 	vmov	r0, s15
 80013c4:	f7ff feca 	bl	800115c <printdB>
	osSignalSet(uiTaskHandle, 0x0001);
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <processAudio+0x288>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2101      	movs	r1, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f014 fd98 	bl	8015f04 <osSignalSet>

	LED_Off();
 80013d4:	f002 ff5e 	bl	8004294 <LED_Off>
}
 80013d8:	bf00      	nop
 80013da:	3730      	adds	r7, #48	; 0x30
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	10624dd3 	.word	0x10624dd3
 80013e4:	40163958 	.word	0x40163958
 80013e8:	20000364 	.word	0x20000364
 80013ec:	200000e8 	.word	0x200000e8
 80013f0:	000270ff 	.word	0x000270ff
 80013f4:	200000ec 	.word	0x200000ec
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	51eb851f 	.word	0x51eb851f
 8001400:	00027100 	.word	0x00027100
 8001404:	42c80000 	.word	0x42c80000
 8001408:	20000368 	.word	0x20000368
 800140c:	46ffc400 	.word	0x46ffc400
 8001410:	20009558 	.word	0x20009558
 8001414:	2000bd58 	.word	0x2000bd58
 8001418:	20009540 	.word	0x20009540
 800141c:	2000b558 	.word	0x2000b558
 8001420:	2000d1bc 	.word	0x2000d1bc

08001424 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <vApplicationGetIdleTaskMemory+0x2c>)
 8001468:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <vApplicationGetIdleTaskMemory+0x30>)
 800146e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000100 	.word	0x20000100
 8001488:	20000158 	.word	0x20000158

0800148c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001490:	f3bf 8f4f 	dsb	sy
}
 8001494:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001496:	f3bf 8f6f 	isb	sy
}
 800149a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <SCB_EnableICache+0x48>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014a4:	f3bf 8f4f 	dsb	sy
}
 80014a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014aa:	f3bf 8f6f 	isb	sy
}
 80014ae:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <SCB_EnableICache+0x48>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <SCB_EnableICache+0x48>)
 80014b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014bc:	f3bf 8f4f 	dsb	sy
}
 80014c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014c2:	f3bf 8f6f 	isb	sy
}
 80014c6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80014dc:	f3bf 8f4f 	dsb	sy
}
 80014e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014e2:	f3bf 8f6f 	isb	sy
}
 80014e6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <SCB_InvalidateICache+0x30>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014f0:	f3bf 8f4f 	dsb	sy
}
 80014f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f6:	f3bf 8f6f 	isb	sy
}
 80014fa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <SCB_EnableDCache+0x84>)
 8001514:	2200      	movs	r2, #0
 8001516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800151a:	f3bf 8f4f 	dsb	sy
}
 800151e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <SCB_EnableDCache+0x84>)
 8001522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001526:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	0b5b      	lsrs	r3, r3, #13
 800152c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001530:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800153a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001544:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800154a:	4911      	ldr	r1, [pc, #68]	; (8001590 <SCB_EnableDCache+0x84>)
 800154c:	4313      	orrs	r3, r2
 800154e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1e5a      	subs	r2, r3, #1
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ef      	bne.n	800153c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e5a      	subs	r2, r3, #1
 8001560:	60fa      	str	r2, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1e5      	bne.n	8001532 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001566:	f3bf 8f4f 	dsb	sy
}
 800156a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <SCB_EnableDCache+0x84>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <SCB_EnableDCache+0x84>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001578:	f3bf 8f4f 	dsb	sy
}
 800157c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800157e:	f3bf 8f6f 	isb	sy
}
 8001582:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <SCB_InvalidateDCache+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015a2:	f3bf 8f4f 	dsb	sy
}
 80015a6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <SCB_InvalidateDCache+0x74>)
 80015aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ae:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	0b5b      	lsrs	r3, r3, #13
 80015b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015b8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80015cc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <SCB_InvalidateDCache+0x74>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	60ba      	str	r2, [r7, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ef      	bne.n	80015c4 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	60fa      	str	r2, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1e5      	bne.n	80015ba <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800160c:	b5b0      	push	{r4, r5, r7, lr}
 800160e:	b08e      	sub	sp, #56	; 0x38
 8001610:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 8001612:	f7ff ffbf 	bl	8001594 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001616:	f7ff ff5f 	bl	80014d8 <SCB_InvalidateICache>
	//SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800161a:	f005 f9b6 	bl	800698a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800161e:	f000 f873 	bl	8001708 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001622:	f001 f8d1 	bl	80027c8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001626:	f001 f80d 	bl	8002644 <MX_DMA_Init>
	MX_ADC3_Init();
 800162a:	f000 f92d 	bl	8001888 <MX_ADC3_Init>
	MX_CRC_Init();
 800162e:	f000 f97d 	bl	800192c <MX_CRC_Init>
	MX_DCMI_Init();
 8001632:	f000 f99d 	bl	8001970 <MX_DCMI_Init>
	MX_DMA2D_Init();
 8001636:	f000 f9cf 	bl	80019d8 <MX_DMA2D_Init>
	MX_FMC_Init();
 800163a:	f001 f871 	bl	8002720 <MX_FMC_Init>
	MX_I2C1_Init();
 800163e:	f000 f9fd 	bl	8001a3c <MX_I2C1_Init>
	MX_I2C3_Init();
 8001642:	f000 fa3b 	bl	8001abc <MX_I2C3_Init>
	MX_LTDC_Init();
 8001646:	f000 fa79 	bl	8001b3c <MX_LTDC_Init>
	MX_QUADSPI_Init();
 800164a:	f000 fafb 	bl	8001c44 <MX_QUADSPI_Init>
	MX_RTC_Init();
 800164e:	f000 fb3b 	bl	8001cc8 <MX_RTC_Init>
	MX_SAI2_Init();
 8001652:	f000 fbdf 	bl	8001e14 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 8001656:	f000 fc99 	bl	8001f8c <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 800165a:	f000 fcb7 	bl	8001fcc <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 800165e:	f000 fce5 	bl	800202c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001662:	f000 fd8f 	bl	8002184 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001666:	f000 fe03 	bl	8002270 <MX_TIM3_Init>
	MX_TIM5_Init();
 800166a:	f000 fe79 	bl	8002360 <MX_TIM5_Init>
	MX_TIM8_Init();
 800166e:	f000 feef 	bl	8002450 <MX_TIM8_Init>
	MX_TIM12_Init();
 8001672:	f000 ff41 	bl	80024f8 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 8001676:	f000 ff85 	bl	8002584 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 800167a:	f000 ffb3 	bl	80025e4 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 800167e:	f011 ff8f 	bl	80135a0 <MX_FATFS_Init>
	MX_LIBJPEG_Init();
 8001682:	f012 f9dd 	bl	8013a40 <MX_LIBJPEG_Init>
	/* USER CODE BEGIN 2 */

	MPU_Init();
 8001686:	f004 f86b 	bl	8005760 <MPU_Init>

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 800168a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800168e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001692:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 8001694:	f003 fcf0 	bl	8005078 <TS_Init>
	printf("Touchscreen Init: OK\n");
 8001698:	4816      	ldr	r0, [pc, #88]	; (80016f4 <main+0xe8>)
 800169a:	f018 fe9b 	bl	801a3d4 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 800169e:	f7ff fef5 	bl	800148c <SCB_EnableICache>
	SCB_EnableDCache();
 80016a2:	f7ff ff33 	bl	800150c <SCB_EnableDCache>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <main+0xec>)
 80016a8:	f107 041c 	add.w	r4, r7, #28
 80016ac:	461d      	mov	r5, r3
 80016ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f014 fbbf 	bl	8015e44 <osThreadCreate>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <main+0xf0>)
 80016ca:	6013      	str	r3, [r2, #0]

	/* definition and creation of uiTask */
	osThreadDef(uiTask, startUITask, osPriorityLow, 0, 2048); // 128 = stack size too small -> 1024 !
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <main+0xf4>)
 80016ce:	463c      	mov	r4, r7
 80016d0:	461d      	mov	r5, r3
 80016d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 80016de:	463b      	mov	r3, r7
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f014 fbae 	bl	8015e44 <osThreadCreate>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a06      	ldr	r2, [pc, #24]	; (8001704 <main+0xf8>)
 80016ec:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80016ee:	f014 fb86 	bl	8015dfe <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80016f2:	e7fe      	b.n	80016f2 <main+0xe6>
 80016f4:	0801b5b0 	.word	0x0801b5b0
 80016f8:	0801b5c8 	.word	0x0801b5c8
 80016fc:	2000cdf0 	.word	0x2000cdf0
 8001700:	0801b5e4 	.word	0x0801b5e4
 8001704:	2000d1bc 	.word	0x2000d1bc

08001708 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0b4      	sub	sp, #208	; 0xd0
 800170c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001712:	2230      	movs	r2, #48	; 0x30
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f018 fd0e 	bl	801a138 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	2284      	movs	r2, #132	; 0x84
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f018 fcff 	bl	801a138 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800173a:	f00a f881 	bl	800b840 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b4f      	ldr	r3, [pc, #316]	; (800187c <SystemClock_Config+0x174>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a4e      	ldr	r2, [pc, #312]	; (800187c <SystemClock_Config+0x174>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b4c      	ldr	r3, [pc, #304]	; (800187c <SystemClock_Config+0x174>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <SystemClock_Config+0x178>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a49      	ldr	r2, [pc, #292]	; (8001880 <SystemClock_Config+0x178>)
 800175c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <SystemClock_Config+0x178>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800176e:	2309      	movs	r3, #9
 8001770:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800177c:	2301      	movs	r3, #1
 800177e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001788:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800178c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001790:	2319      	movs	r3, #25
 8001792:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001796:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800179a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80017a4:	2309      	movs	r3, #9
 80017a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00b f86a 	bl	800c888 <HAL_RCC_OscConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0xb6>
	{
		Error_Handler();
 80017ba:	f001 fa6d 	bl	8002c98 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017be:	f00a f84f 	bl	800b860 <HAL_PWREx_EnableOverDrive>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80017c8:	f001 fa66 	bl	8002c98 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017cc:	230f      	movs	r3, #15
 80017ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80017ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017f2:	2106      	movs	r1, #6
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00b faeb 	bl	800cdd0 <HAL_RCC_ClockConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001800:	f001 fa4a 	bl	8002c98 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <SystemClock_Config+0x17c>)
 8001806:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001808:	2364      	movs	r3, #100	; 0x64
 800180a:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001810:	2302      	movs	r3, #2
 8001812:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001814:	2302      	movs	r3, #2
 8001816:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001818:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800181c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800181e:	2305      	movs	r3, #5
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 8001822:	2308      	movs	r3, #8
 8001824:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001826:	2303      	movs	r3, #3
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 800182a:	2301      	movs	r3, #1
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800183e:	2300      	movs	r3, #0
 8001840:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001842:	2300      	movs	r3, #0
 8001844:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001846:	2300      	movs	r3, #0
 8001848:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800184a:	2300      	movs	r3, #0
 800184c:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800184e:	2300      	movs	r3, #0
 8001850:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001852:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	4618      	mov	r0, r3
 8001866:	f00b fcbb 	bl	800d1e0 <HAL_RCCEx_PeriphCLKConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x16c>
	{
		Error_Handler();
 8001870:	f001 fa12 	bl	8002c98 <Error_Handler>
	}
}
 8001874:	bf00      	nop
 8001876:	37d0      	adds	r7, #208	; 0xd0
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000
 8001884:	01b14868 	.word	0x01b14868

08001888 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800188e:	463b      	mov	r3, r7
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_ADC3_Init+0x98>)
 800189c:	4a21      	ldr	r2, [pc, #132]	; (8001924 <MX_ADC3_Init+0x9c>)
 800189e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018a0:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <MX_ADC3_Init+0x98>)
 80018a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018a6:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <MX_ADC3_Init+0x98>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <MX_ADC3_Init+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <MX_ADC3_Init+0x98>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <MX_ADC3_Init+0x98>)
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <MX_ADC3_Init+0x98>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <MX_ADC3_Init+0x98>)
 80018ca:	4a17      	ldr	r2, [pc, #92]	; (8001928 <MX_ADC3_Init+0xa0>)
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_ADC3_Init+0x98>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_ADC3_Init+0x98>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_ADC3_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_ADC3_Init+0x98>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_ADC3_Init+0x98>)
 80018ea:	f005 f89f 	bl	8006a2c <HAL_ADC_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 80018f4:	f001 f9d0 	bl	8002c98 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80018f8:	2304      	movs	r3, #4
 80018fa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001904:	463b      	mov	r3, r7
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_ADC3_Init+0x98>)
 800190a:	f005 f8d3 	bl	8006ab4 <HAL_ADC_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8001914:	f001 f9c0 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2000d2b4 	.word	0x2000d2b4
 8001924:	40012200 	.word	0x40012200
 8001928:	0f000001 	.word	0x0f000001

0800192c <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <MX_CRC_Init+0x3c>)
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <MX_CRC_Init+0x40>)
 8001934:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_CRC_Init+0x3c>)
 8001938:	2200      	movs	r2, #0
 800193a:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <MX_CRC_Init+0x3c>)
 800193e:	2200      	movs	r2, #0
 8001940:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_CRC_Init+0x3c>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <MX_CRC_Init+0x3c>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_CRC_Init+0x3c>)
 8001950:	2201      	movs	r2, #1
 8001952:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_CRC_Init+0x3c>)
 8001956:	f005 fc81 	bl	800725c <HAL_CRC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8001960:	f001 f99a 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2000d068 	.word	0x2000d068
 800196c:	40023000 	.word	0x40023000

08001970 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_DCMI_Init+0x60>)
 8001976:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <MX_DCMI_Init+0x64>)
 8001978:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_DCMI_Init+0x60>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MX_DCMI_Init+0x60>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_DCMI_Init+0x60>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_DCMI_Init+0x60>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_DCMI_Init+0x60>)
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <MX_DCMI_Init+0x60>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_DCMI_Init+0x60>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_DCMI_Init+0x60>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_DCMI_Init+0x60>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <MX_DCMI_Init+0x60>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_DCMI_Init+0x60>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_DCMI_Init+0x60>)
 80019be:	f005 fd37 	bl	8007430 <HAL_DCMI_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 80019c8:	f001 f966 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000d2fc 	.word	0x2000d2fc
 80019d4:	50050000 	.word	0x50050000

080019d8 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_DMA2D_Init+0x5c>)
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <MX_DMA2D_Init+0x60>)
 80019e0:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_DMA2D_Init+0x5c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_DMA2D_Init+0x5c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_DMA2D_Init+0x5c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_DMA2D_Init+0x5c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_DMA2D_Init+0x5c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_DMA2D_Init+0x5c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <MX_DMA2D_Init+0x5c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a0c:	4809      	ldr	r0, [pc, #36]	; (8001a34 <MX_DMA2D_Init+0x5c>)
 8001a0e:	f006 fa6f 	bl	8007ef0 <HAL_DMA2D_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8001a18:	f001 f93e 	bl	8002c98 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_DMA2D_Init+0x5c>)
 8001a20:	f006 fcd4 	bl	80083cc <HAL_DMA2D_ConfigLayer>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8001a2a:	f001 f935 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000d520 	.word	0x2000d520
 8001a38:	4002b000 	.word	0x4002b000

08001a3c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a42:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <MX_I2C1_Init+0x78>)
 8001a44:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <MX_I2C1_Init+0x7c>)
 8001a4a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a76:	480e      	ldr	r0, [pc, #56]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a78:	f008 fe62 	bl	800a740 <HAL_I2C_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001a82:	f001 f909 	bl	8002c98 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a86:	2100      	movs	r1, #0
 8001a88:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a8a:	f009 fb63 	bl	800b154 <HAL_I2CEx_ConfigAnalogFilter>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001a94:	f001 f900 	bl	8002c98 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_I2C1_Init+0x74>)
 8001a9c:	f009 fba5 	bl	800b1ea <HAL_I2CEx_ConfigDigitalFilter>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001aa6:	f001 f8f7 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000d01c 	.word	0x2000d01c
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	00c0eaff 	.word	0x00c0eaff

08001abc <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <MX_I2C3_Init+0x78>)
 8001ac4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <MX_I2C3_Init+0x7c>)
 8001aca:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001af6:	480e      	ldr	r0, [pc, #56]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001af8:	f008 fe22 	bl	800a740 <HAL_I2C_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001b02:	f001 f8c9 	bl	8002c98 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b06:	2100      	movs	r1, #0
 8001b08:	4809      	ldr	r0, [pc, #36]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001b0a:	f009 fb23 	bl	800b154 <HAL_I2CEx_ConfigAnalogFilter>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001b14:	f001 f8c0 	bl	8002c98 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_I2C3_Init+0x74>)
 8001b1c:	f009 fb65 	bl	800b1ea <HAL_I2CEx_ConfigDigitalFilter>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8001b26:	f001 f8b7 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000cdf4 	.word	0x2000cdf4
 8001b34:	40005c00 	.word	0x40005c00
 8001b38:	00c0eaff 	.word	0x00c0eaff

08001b3c <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	; 0x38
 8001b40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2234      	movs	r2, #52	; 0x34
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f018 faf5 	bl	801a138 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b50:	4a3b      	ldr	r2, [pc, #236]	; (8001c40 <MX_LTDC_Init+0x104>)
 8001b52:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b6e:	2228      	movs	r2, #40	; 0x28
 8001b70:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b74:	2209      	movs	r2, #9
 8001b76:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b7a:	2235      	movs	r2, #53	; 0x35
 8001b7c:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b80:	220b      	movs	r2, #11
 8001b82:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b86:	f240 2215 	movw	r2, #533	; 0x215
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b8e:	f240 121b 	movw	r2, #283	; 0x11b
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b96:	f240 2235 	movw	r2, #565	; 0x235
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b9e:	f240 121d 	movw	r2, #285	; 0x11d
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001bac:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bbc:	481f      	ldr	r0, [pc, #124]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001bbe:	f009 fb61 	bl	800b284 <HAL_LTDC_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8001bc8:	f001 f866 	bl	8002c98 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001bd0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001bd4:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8001bda:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001bde:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001be0:	2302      	movs	r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001be4:	23ff      	movs	r3, #255	; 0xff
 8001be6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bf0:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001bf6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001bfc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001c02:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4806      	ldr	r0, [pc, #24]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001c22:	f009 fbff 	bl	800b424 <HAL_LTDC_ConfigLayer>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8001c2c:	f001 f834 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001c30:	f002 fc4c 	bl	80044cc <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3738      	adds	r7, #56	; 0x38
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000d20c 	.word	0x2000d20c
 8001c40:	40016800 	.word	0x40016800

08001c44 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <MX_QUADSPI_Init+0x80>)
 8001c4c:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c56:	2204      	movs	r2, #4
 8001c58:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c62:	2218      	movs	r2, #24
 8001c64:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c68:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001c6c:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c80:	480f      	ldr	r0, [pc, #60]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c82:	f009 fe3d 	bl	800b900 <HAL_QSPI_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 8001c8c:	f001 f804 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001c90:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001c92:	f002 ffc5 	bl	8004c20 <DISCO_QSPI_ResetMemory>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_QUADSPI_Init+0x5c>
 8001c9c:	f000 fffc 	bl	8002c98 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_QUADSPI_Init+0x7c>)
 8001ca2:	f002 ffff 	bl	8004ca4 <DISCO_QSPI_DummyCyclesCfg>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_QUADSPI_Init+0x6c>
 8001cac:	f000 fff4 	bl	8002c98 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001cb0:	f002 ff84 	bl	8004bbc <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001cb4:	205c      	movs	r0, #92	; 0x5c
 8001cb6:	f005 fa47 	bl	8007148 <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000d62c 	.word	0x2000d62c
 8001cc4:	a0001000 	.word	0xa0001000

08001cc8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b092      	sub	sp, #72	; 0x48
 8001ccc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	222c      	movs	r2, #44	; 0x2c
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f018 fa24 	bl	801a138 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001cf0:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <MX_RTC_Init+0x144>)
 8001cf2:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <MX_RTC_Init+0x148>)
 8001cf4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cf6:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <MX_RTC_Init+0x144>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001cfc:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <MX_RTC_Init+0x144>)
 8001cfe:	227f      	movs	r2, #127	; 0x7f
 8001d00:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001d02:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <MX_RTC_Init+0x144>)
 8001d04:	22ff      	movs	r2, #255	; 0xff
 8001d06:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d08:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <MX_RTC_Init+0x144>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d0e:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <MX_RTC_Init+0x144>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d14:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <MX_RTC_Init+0x144>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d1a:	483c      	ldr	r0, [pc, #240]	; (8001e0c <MX_RTC_Init+0x144>)
 8001d1c:	f00b ff94 	bl	800dc48 <HAL_RTC_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_RTC_Init+0x62>
	{
		Error_Handler();
 8001d26:	f000 ffb7 	bl	8002c98 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	482f      	ldr	r0, [pc, #188]	; (8001e0c <MX_RTC_Init+0x144>)
 8001d4e:	f00c f80d 	bl	800dd6c <HAL_RTC_SetTime>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001d58:	f000 ff9e 	bl	8002c98 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4823      	ldr	r0, [pc, #140]	; (8001e0c <MX_RTC_Init+0x144>)
 8001d7e:	f00c f8b3 	bl	800dee8 <HAL_RTC_SetDate>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001d88:	f000 ff86 	bl	8002c98 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4812      	ldr	r0, [pc, #72]	; (8001e0c <MX_RTC_Init+0x144>)
 8001dc4:	f00c f938 	bl	800e038 <HAL_RTC_SetAlarm>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 8001dce:	f000 ff63 	bl	8002c98 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 8001dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480b      	ldr	r0, [pc, #44]	; (8001e0c <MX_RTC_Init+0x144>)
 8001de0:	f00c f92a 	bl	800e038 <HAL_RTC_SetAlarm>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_RTC_Init+0x126>
	{
		Error_Handler();
 8001dea:	f000 ff55 	bl	8002c98 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001dee:	2202      	movs	r2, #2
 8001df0:	2100      	movs	r1, #0
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_RTC_Init+0x144>)
 8001df4:	f00c faaa 	bl	800e34c <HAL_RTCEx_SetTimeStamp>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 8001dfe:	f000 ff4b 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	3748      	adds	r7, #72	; 0x48
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000d3d0 	.word	0x2000d3d0
 8001e10:	40002800 	.word	0x40002800

08001e14 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001e18:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e1a:	4a59      	ldr	r2, [pc, #356]	; (8001f80 <MX_SAI2_Init+0x16c>)
 8001e1c:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e1e:	4b57      	ldr	r3, [pc, #348]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e24:	4b55      	ldr	r3, [pc, #340]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001e2a:	4b54      	ldr	r3, [pc, #336]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e30:	4b52      	ldr	r3, [pc, #328]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001e36:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e3c:	4b4f      	ldr	r3, [pc, #316]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001e42:	4b4e      	ldr	r3, [pc, #312]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e48:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001e4a:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001e50:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_8K; // SAI_AUDIO_FREQUENCY_48K;
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e58:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001e5c:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e64:	4b45      	ldr	r3, [pc, #276]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e6a:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e70:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e7e:	2220      	movs	r2, #32
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001e82:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e88:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e8a:	4b3c      	ldr	r3, [pc, #240]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001e90:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e96:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001e98:	4b38      	ldr	r3, [pc, #224]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x0000000A;
 8001eaa:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001eac:	220a      	movs	r2, #10
 8001eae:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001eb0:	4832      	ldr	r0, [pc, #200]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001eb2:	f00c faa1 	bl	800e3f8 <HAL_SAI_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8001ebc:	f000 feec 	bl	8002c98 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001ec2:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <MX_SAI2_Init+0x174>)
 8001ec4:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001ece:	2203      	movs	r2, #3
 8001ed0:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001ed4:	2280      	movs	r2, #128	; 0x80
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001f08:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f16:	2220      	movs	r2, #32
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f20:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f2e:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f3e:	2204      	movs	r2, #4
 8001f40:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A; //A for MIC/ 5 for LINE
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f44:	220a      	movs	r2, #10
 8001f46:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001f48:	480e      	ldr	r0, [pc, #56]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f4a:	f00c fa55 	bl	800e3f8 <HAL_SAI_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001f54:	f000 fea0 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <MX_SAI2_Init+0x168>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f66:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <MX_SAI2_Init+0x170>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f76:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000cf98 	.word	0x2000cf98
 8001f80:	40015c04 	.word	0x40015c04
 8001f84:	2000cd6c 	.word	0x2000cd6c
 8001f88:	40015c24 	.word	0x40015c24

08001f8c <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_SDMMC1_SD_Init+0x38>)
 8001f92:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <MX_SDMMC1_SD_Init+0x3c>)
 8001f94:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <MX_SDMMC1_SD_Init+0x38>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_SDMMC1_SD_Init+0x38>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_SDMMC1_SD_Init+0x38>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_SDMMC1_SD_Init+0x38>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <MX_SDMMC1_SD_Init+0x38>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <MX_SDMMC1_SD_Init+0x38>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	2000d0ec 	.word	0x2000d0ec
 8001fc8:	40012c00 	.word	0x40012c00

08001fcc <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8001fd0:	4b15      	ldr	r3, [pc, #84]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8001fd2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001fd6:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001fe4:	4b10      	ldr	r3, [pc, #64]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8002010:	2200      	movs	r2, #0
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002014:	4804      	ldr	r0, [pc, #16]	; (8002028 <MX_SPDIFRX_Init+0x5c>)
 8002016:	f00d fee5 	bl	800fde4 <HAL_SPDIFRX_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8002020:	f000 fe3a 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2000cf4c 	.word	0x2000cf4c

0800202c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b09a      	sub	sp, #104	; 0x68
 8002030:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800204c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	222c      	movs	r2, #44	; 0x2c
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f018 f866 	bl	801a138 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800206c:	4b43      	ldr	r3, [pc, #268]	; (800217c <MX_TIM1_Init+0x150>)
 800206e:	4a44      	ldr	r2, [pc, #272]	; (8002180 <MX_TIM1_Init+0x154>)
 8002070:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002072:	4b42      	ldr	r3, [pc, #264]	; (800217c <MX_TIM1_Init+0x150>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b40      	ldr	r3, [pc, #256]	; (800217c <MX_TIM1_Init+0x150>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800207e:	4b3f      	ldr	r3, [pc, #252]	; (800217c <MX_TIM1_Init+0x150>)
 8002080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002084:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002086:	4b3d      	ldr	r3, [pc, #244]	; (800217c <MX_TIM1_Init+0x150>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800208c:	4b3b      	ldr	r3, [pc, #236]	; (800217c <MX_TIM1_Init+0x150>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b3a      	ldr	r3, [pc, #232]	; (800217c <MX_TIM1_Init+0x150>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002098:	4838      	ldr	r0, [pc, #224]	; (800217c <MX_TIM1_Init+0x150>)
 800209a:	f00d feff 	bl	800fe9c <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 80020a4:	f000 fdf8 	bl	8002c98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ac:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020b2:	4619      	mov	r1, r3
 80020b4:	4831      	ldr	r0, [pc, #196]	; (800217c <MX_TIM1_Init+0x150>)
 80020b6:	f00e fa47 	bl	8010548 <HAL_TIM_ConfigClockSource>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 80020c0:	f000 fdea 	bl	8002c98 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020c4:	482d      	ldr	r0, [pc, #180]	; (800217c <MX_TIM1_Init+0x150>)
 80020c6:	f00d ffb9 	bl	801003c <HAL_TIM_PWM_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 80020d0:	f000 fde2 	bl	8002c98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020e4:	4619      	mov	r1, r3
 80020e6:	4825      	ldr	r0, [pc, #148]	; (800217c <MX_TIM1_Init+0x150>)
 80020e8:	f00e feb4 	bl	8010e54 <HAL_TIMEx_MasterConfigSynchronization>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80020f2:	f000 fdd1 	bl	8002c98 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f6:	2360      	movs	r3, #96	; 0x60
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fe:	2300      	movs	r3, #0
 8002100:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002102:	2300      	movs	r3, #0
 8002104:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002116:	2200      	movs	r2, #0
 8002118:	4619      	mov	r1, r3
 800211a:	4818      	ldr	r0, [pc, #96]	; (800217c <MX_TIM1_Init+0x150>)
 800211c:	f00e f904 	bl	8010328 <HAL_TIM_PWM_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8002126:	f000 fdb7 	bl	8002c98 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800213e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002142:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800214c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	4619      	mov	r1, r3
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <MX_TIM1_Init+0x150>)
 8002160:	f00e ff06 	bl	8010f70 <HAL_TIMEx_ConfigBreakDeadTime>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 800216a:	f000 fd95 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <MX_TIM1_Init+0x150>)
 8002170:	f001 fab4 	bl	80036dc <HAL_TIM_MspPostInit>

}
 8002174:	bf00      	nop
 8002176:	3768      	adds	r7, #104	; 0x68
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000d3f0 	.word	0x2000d3f0
 8002180:	40010000 	.word	0x40010000

08002184 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80021a4:	463b      	mov	r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]
 80021b2:	615a      	str	r2, [r3, #20]
 80021b4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <MX_TIM2_Init+0xe8>)
 80021b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021bc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80021be:	4b2b      	ldr	r3, [pc, #172]	; (800226c <MX_TIM2_Init+0xe8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <MX_TIM2_Init+0xe8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <MX_TIM2_Init+0xe8>)
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <MX_TIM2_Init+0xe8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <MX_TIM2_Init+0xe8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021de:	4823      	ldr	r0, [pc, #140]	; (800226c <MX_TIM2_Init+0xe8>)
 80021e0:	f00d fe5c 	bl	800fe9c <HAL_TIM_Base_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 80021ea:	f000 fd55 	bl	8002c98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f8:	4619      	mov	r1, r3
 80021fa:	481c      	ldr	r0, [pc, #112]	; (800226c <MX_TIM2_Init+0xe8>)
 80021fc:	f00e f9a4 	bl	8010548 <HAL_TIM_ConfigClockSource>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8002206:	f000 fd47 	bl	8002c98 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800220a:	4818      	ldr	r0, [pc, #96]	; (800226c <MX_TIM2_Init+0xe8>)
 800220c:	f00d ff16 	bl	801003c <HAL_TIM_PWM_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8002216:	f000 fd3f 	bl	8002c98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	4810      	ldr	r0, [pc, #64]	; (800226c <MX_TIM2_Init+0xe8>)
 800222a:	f00e fe13 	bl	8010e54 <HAL_TIMEx_MasterConfigSynchronization>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8002234:	f000 fd30 	bl	8002c98 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002238:	2360      	movs	r3, #96	; 0x60
 800223a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002248:	463b      	mov	r3, r7
 800224a:	2200      	movs	r2, #0
 800224c:	4619      	mov	r1, r3
 800224e:	4807      	ldr	r0, [pc, #28]	; (800226c <MX_TIM2_Init+0xe8>)
 8002250:	f00e f86a 	bl	8010328 <HAL_TIM_PWM_ConfigChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 800225a:	f000 fd1d 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800225e:	4803      	ldr	r0, [pc, #12]	; (800226c <MX_TIM2_Init+0xe8>)
 8002260:	f001 fa3c 	bl	80036dc <HAL_TIM_MspPostInit>

}
 8002264:	bf00      	nop
 8002266:	3738      	adds	r7, #56	; 0x38
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2000d560 	.word	0x2000d560

08002270 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002290:	463b      	mov	r3, r7
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	611a      	str	r2, [r3, #16]
 800229e:	615a      	str	r2, [r3, #20]
 80022a0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <MX_TIM3_Init+0xe8>)
 80022a4:	4a2d      	ldr	r2, [pc, #180]	; (800235c <MX_TIM3_Init+0xec>)
 80022a6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80022a8:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <MX_TIM3_Init+0xe8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <MX_TIM3_Init+0xe8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <MX_TIM3_Init+0xe8>)
 80022b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ba:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022bc:	4b26      	ldr	r3, [pc, #152]	; (8002358 <MX_TIM3_Init+0xe8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <MX_TIM3_Init+0xe8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022c8:	4823      	ldr	r0, [pc, #140]	; (8002358 <MX_TIM3_Init+0xe8>)
 80022ca:	f00d fde7 	bl	800fe9c <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 80022d4:	f000 fce0 	bl	8002c98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022e2:	4619      	mov	r1, r3
 80022e4:	481c      	ldr	r0, [pc, #112]	; (8002358 <MX_TIM3_Init+0xe8>)
 80022e6:	f00e f92f 	bl	8010548 <HAL_TIM_ConfigClockSource>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 80022f0:	f000 fcd2 	bl	8002c98 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022f4:	4818      	ldr	r0, [pc, #96]	; (8002358 <MX_TIM3_Init+0xe8>)
 80022f6:	f00d fea1 	bl	801003c <HAL_TIM_PWM_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8002300:	f000 fcca 	bl	8002c98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	4811      	ldr	r0, [pc, #68]	; (8002358 <MX_TIM3_Init+0xe8>)
 8002314:	f00e fd9e 	bl	8010e54 <HAL_TIMEx_MasterConfigSynchronization>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 800231e:	f000 fcbb 	bl	8002c98 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002322:	2360      	movs	r3, #96	; 0x60
 8002324:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002332:	463b      	mov	r3, r7
 8002334:	2200      	movs	r2, #0
 8002336:	4619      	mov	r1, r3
 8002338:	4807      	ldr	r0, [pc, #28]	; (8002358 <MX_TIM3_Init+0xe8>)
 800233a:	f00d fff5 	bl	8010328 <HAL_TIM_PWM_ConfigChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8002344:	f000 fca8 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002348:	4803      	ldr	r0, [pc, #12]	; (8002358 <MX_TIM3_Init+0xe8>)
 800234a:	f001 f9c7 	bl	80036dc <HAL_TIM_MspPostInit>

}
 800234e:	bf00      	nop
 8002350:	3738      	adds	r7, #56	; 0x38
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000d1c0 	.word	0x2000d1c0
 800235c:	40000400 	.word	0x40000400

08002360 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	; 0x38
 8002364:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002380:	463b      	mov	r3, r7
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	615a      	str	r2, [r3, #20]
 8002390:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <MX_TIM5_Init+0xe8>)
 8002394:	4a2d      	ldr	r2, [pc, #180]	; (800244c <MX_TIM5_Init+0xec>)
 8002396:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <MX_TIM5_Init+0xe8>)
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <MX_TIM5_Init+0xe8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <MX_TIM5_Init+0xe8>)
 80023a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023aa:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <MX_TIM5_Init+0xe8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b25      	ldr	r3, [pc, #148]	; (8002448 <MX_TIM5_Init+0xe8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023b8:	4823      	ldr	r0, [pc, #140]	; (8002448 <MX_TIM5_Init+0xe8>)
 80023ba:	f00d fd6f 	bl	800fe9c <HAL_TIM_Base_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 80023c4:	f000 fc68 	bl	8002c98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d2:	4619      	mov	r1, r3
 80023d4:	481c      	ldr	r0, [pc, #112]	; (8002448 <MX_TIM5_Init+0xe8>)
 80023d6:	f00e f8b7 	bl	8010548 <HAL_TIM_ConfigClockSource>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 80023e0:	f000 fc5a 	bl	8002c98 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023e4:	4818      	ldr	r0, [pc, #96]	; (8002448 <MX_TIM5_Init+0xe8>)
 80023e6:	f00d fe29 	bl	801003c <HAL_TIM_PWM_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 80023f0:	f000 fc52 	bl	8002c98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	4619      	mov	r1, r3
 8002402:	4811      	ldr	r0, [pc, #68]	; (8002448 <MX_TIM5_Init+0xe8>)
 8002404:	f00e fd26 	bl	8010e54 <HAL_TIMEx_MasterConfigSynchronization>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 800240e:	f000 fc43 	bl	8002c98 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002412:	2360      	movs	r3, #96	; 0x60
 8002414:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002422:	463b      	mov	r3, r7
 8002424:	220c      	movs	r2, #12
 8002426:	4619      	mov	r1, r3
 8002428:	4807      	ldr	r0, [pc, #28]	; (8002448 <MX_TIM5_Init+0xe8>)
 800242a:	f00d ff7d 	bl	8010328 <HAL_TIM_PWM_ConfigChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8002434:	f000 fc30 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8002438:	4803      	ldr	r0, [pc, #12]	; (8002448 <MX_TIM5_Init+0xe8>)
 800243a:	f001 f94f 	bl	80036dc <HAL_TIM_MspPostInit>

}
 800243e:	bf00      	nop
 8002440:	3738      	adds	r7, #56	; 0x38
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	2000d170 	.word	0x2000d170
 800244c:	40000c00 	.word	0x40000c00

08002450 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <MX_TIM8_Init+0xa0>)
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <MX_TIM8_Init+0xa4>)
 8002472:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8002474:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <MX_TIM8_Init+0xa0>)
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <MX_TIM8_Init+0xa0>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <MX_TIM8_Init+0xa0>)
 8002482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002486:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <MX_TIM8_Init+0xa0>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800248e:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <MX_TIM8_Init+0xa0>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <MX_TIM8_Init+0xa0>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800249a:	4815      	ldr	r0, [pc, #84]	; (80024f0 <MX_TIM8_Init+0xa0>)
 800249c:	f00d fcfe 	bl	800fe9c <HAL_TIM_Base_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 80024a6:	f000 fbf7 	bl	8002c98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ae:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	4619      	mov	r1, r3
 80024b6:	480e      	ldr	r0, [pc, #56]	; (80024f0 <MX_TIM8_Init+0xa0>)
 80024b8:	f00e f846 	bl	8010548 <HAL_TIM_ConfigClockSource>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 80024c2:	f000 fbe9 	bl	8002c98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4806      	ldr	r0, [pc, #24]	; (80024f0 <MX_TIM8_Init+0xa0>)
 80024d8:	f00e fcbc 	bl	8010e54 <HAL_TIMEx_MasterConfigSynchronization>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 80024e2:	f000 fbd9 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000cea0 	.word	0x2000cea0
 80024f4:	40010400 	.word	0x40010400

080024f8 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
 800250c:	615a      	str	r2, [r3, #20]
 800250e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <MX_TIM12_Init+0x84>)
 8002512:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <MX_TIM12_Init+0x88>)
 8002514:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <MX_TIM12_Init+0x84>)
 8002518:	2200      	movs	r2, #0
 800251a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <MX_TIM12_Init+0x84>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <MX_TIM12_Init+0x84>)
 8002524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002528:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <MX_TIM12_Init+0x84>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <MX_TIM12_Init+0x84>)
 8002532:	2200      	movs	r2, #0
 8002534:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002536:	4811      	ldr	r0, [pc, #68]	; (800257c <MX_TIM12_Init+0x84>)
 8002538:	f00d fd80 	bl	801003c <HAL_TIM_PWM_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 8002542:	f000 fba9 	bl	8002c98 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002546:	2360      	movs	r3, #96	; 0x60
 8002548:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2200      	movs	r2, #0
 800255a:	4619      	mov	r1, r3
 800255c:	4807      	ldr	r0, [pc, #28]	; (800257c <MX_TIM12_Init+0x84>)
 800255e:	f00d fee3 	bl	8010328 <HAL_TIM_PWM_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 8002568:	f000 fb96 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 800256c:	4803      	ldr	r0, [pc, #12]	; (800257c <MX_TIM12_Init+0x84>)
 800256e:	f001 f8b5 	bl	80036dc <HAL_TIM_MspPostInit>

}
 8002572:	bf00      	nop
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	2000d5ac 	.word	0x2000d5ac
 8002580:	40001800 	.word	0x40001800

08002584 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <MX_USART1_UART_Init+0x58>)
 800258a:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <MX_USART1_UART_Init+0x5c>)
 800258c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <MX_USART1_UART_Init+0x58>)
 8002590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002594:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_USART1_UART_Init+0x58>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <MX_USART1_UART_Init+0x58>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_USART1_UART_Init+0x58>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_USART1_UART_Init+0x58>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <MX_USART1_UART_Init+0x58>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_USART1_UART_Init+0x58>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <MX_USART1_UART_Init+0x58>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_USART1_UART_Init+0x58>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_USART1_UART_Init+0x58>)
 80025c8:	f00e fd6e 	bl	80110a8 <HAL_UART_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80025d2:	f000 fb61 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000d34c 	.word	0x2000d34c
 80025e0:	40011000 	.word	0x40011000

080025e4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <MX_USART6_UART_Init+0x58>)
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <MX_USART6_UART_Init+0x5c>)
 80025ec:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <MX_USART6_UART_Init+0x58>)
 80025f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_USART6_UART_Init+0x58>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_USART6_UART_Init+0x58>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_USART6_UART_Init+0x58>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_USART6_UART_Init+0x58>)
 800260a:	220c      	movs	r2, #12
 800260c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MX_USART6_UART_Init+0x58>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_USART6_UART_Init+0x58>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <MX_USART6_UART_Init+0x58>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_USART6_UART_Init+0x58>)
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <MX_USART6_UART_Init+0x58>)
 8002628:	f00e fd3e 	bl	80110a8 <HAL_UART_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8002632:	f000 fb31 	bl	8002c98 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2000d49c 	.word	0x2000d49c
 8002640:	40011400 	.word	0x40011400

08002644 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800264a:	4b32      	ldr	r3, [pc, #200]	; (8002714 <MX_DMA_Init+0xd0>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a31      	ldr	r2, [pc, #196]	; (8002714 <MX_DMA_Init+0xd0>)
 8002650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <MX_DMA_Init+0xd0>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002662:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <MX_DMA_Init+0xd4>)
 8002664:	4a2d      	ldr	r2, [pc, #180]	; (800271c <MX_DMA_Init+0xd8>)
 8002666:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <MX_DMA_Init+0xd4>)
 800266a:	2200      	movs	r2, #0
 800266c:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800266e:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <MX_DMA_Init+0xd4>)
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <MX_DMA_Init+0xd4>)
 8002676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800267a:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800267c:	4b26      	ldr	r3, [pc, #152]	; (8002718 <MX_DMA_Init+0xd4>)
 800267e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002682:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <MX_DMA_Init+0xd4>)
 8002686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800268a:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800268c:	4b22      	ldr	r3, [pc, #136]	; (8002718 <MX_DMA_Init+0xd4>)
 800268e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002692:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002694:	4b20      	ldr	r3, [pc, #128]	; (8002718 <MX_DMA_Init+0xd4>)
 8002696:	2200      	movs	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800269a:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <MX_DMA_Init+0xd4>)
 800269c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a0:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <MX_DMA_Init+0xd4>)
 80026a4:	2204      	movs	r2, #4
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <MX_DMA_Init+0xd4>)
 80026aa:	2203      	movs	r2, #3
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <MX_DMA_Init+0xd4>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <MX_DMA_Init+0xd4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80026ba:	4817      	ldr	r0, [pc, #92]	; (8002718 <MX_DMA_Init+0xd4>)
 80026bc:	f005 f802 	bl	80076c4 <HAL_DMA_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 80026c6:	f000 fae7 	bl	8002c98 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2105      	movs	r1, #5
 80026ce:	2038      	movs	r0, #56	; 0x38
 80026d0:	f004 fd10 	bl	80070f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026d4:	2038      	movs	r0, #56	; 0x38
 80026d6:	f004 fd29 	bl	800712c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2105      	movs	r1, #5
 80026de:	2039      	movs	r0, #57	; 0x39
 80026e0:	f004 fd08 	bl	80070f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80026e4:	2039      	movs	r0, #57	; 0x39
 80026e6:	f004 fd21 	bl	800712c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2105      	movs	r1, #5
 80026ee:	203c      	movs	r0, #60	; 0x3c
 80026f0:	f004 fd00 	bl	80070f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80026f4:	203c      	movs	r0, #60	; 0x3c
 80026f6:	f004 fd19 	bl	800712c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2105      	movs	r1, #5
 80026fe:	2046      	movs	r0, #70	; 0x46
 8002700:	f004 fcf8 	bl	80070f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002704:	2046      	movs	r0, #70	; 0x46
 8002706:	f004 fd11 	bl	800712c <HAL_NVIC_EnableIRQ>

}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	2000ce40 	.word	0x2000ce40
 800271c:	40026410 	.word	0x40026410

08002720 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
 8002734:	615a      	str	r2, [r3, #20]
 8002736:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002738:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <MX_FMC_Init+0xa0>)
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <MX_FMC_Init+0xa4>)
 800273c:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <MX_FMC_Init+0xa0>)
 800274c:	2204      	movs	r2, #4
 800274e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002752:	2210      	movs	r2, #16
 8002754:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002758:	2240      	movs	r2, #64	; 0x40
 800275a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <MX_FMC_Init+0xa0>)
 800275e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002762:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <MX_FMC_Init+0xa0>)
 800276c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002770:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <MX_FMC_Init+0xa0>)
 8002774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <MX_FMC_Init+0xa0>)
 800277c:	2200      	movs	r2, #0
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8002780:	2302      	movs	r3, #2
 8002782:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8002784:	2307      	movs	r3, #7
 8002786:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8002788:	2304      	movs	r3, #4
 800278a:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 800278c:	2307      	movs	r3, #7
 800278e:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8002790:	2303      	movs	r3, #3
 8002792:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8002794:	2302      	movs	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8002798:	2302      	movs	r3, #2
 800279a:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4807      	ldr	r0, [pc, #28]	; (80027c0 <MX_FMC_Init+0xa0>)
 80027a2:	f00d faa0 	bl	800fce6 <HAL_SDRAM_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 80027ac:	f000 fa74 	bl	8002c98 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80027b0:	f240 6003 	movw	r0, #1539	; 0x603
 80027b4:	f002 fc00 	bl	8004fb8 <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 80027b8:	bf00      	nop
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	2000d5f8 	.word	0x2000d5f8
 80027c4:	a0000140 	.word	0xa0000140

080027c8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b090      	sub	sp, #64	; 0x40
 80027cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]
 80027dc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80027de:	4baf      	ldr	r3, [pc, #700]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4aae      	ldr	r2, [pc, #696]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80027e4:	f043 0310 	orr.w	r3, r3, #16
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4bac      	ldr	r3, [pc, #688]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80027f6:	4ba9      	ldr	r3, [pc, #676]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4aa8      	ldr	r2, [pc, #672]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80027fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4ba6      	ldr	r3, [pc, #664]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	4ba3      	ldr	r3, [pc, #652]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4aa2      	ldr	r2, [pc, #648]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4ba0      	ldr	r3, [pc, #640]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	623b      	str	r3, [r7, #32]
 8002824:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002826:	4b9d      	ldr	r3, [pc, #628]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a9c      	ldr	r2, [pc, #624]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 800282c:	f043 0308 	orr.w	r3, r3, #8
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b9a      	ldr	r3, [pc, #616]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800283e:	4b97      	ldr	r3, [pc, #604]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a96      	ldr	r2, [pc, #600]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b94      	ldr	r3, [pc, #592]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	4b91      	ldr	r3, [pc, #580]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a90      	ldr	r2, [pc, #576]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b8e      	ldr	r3, [pc, #568]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800286e:	4b8b      	ldr	r3, [pc, #556]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a8a      	ldr	r2, [pc, #552]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002886:	4b85      	ldr	r3, [pc, #532]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a84      	ldr	r2, [pc, #528]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 800288c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800289e:	4b7f      	ldr	r3, [pc, #508]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a7e      	ldr	r2, [pc, #504]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80028a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80028b6:	4b79      	ldr	r3, [pc, #484]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a78      	ldr	r2, [pc, #480]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80028bc:	f043 0320 	orr.w	r3, r3, #32
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80028ce:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a72      	ldr	r2, [pc, #456]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80028d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b70      	ldr	r3, [pc, #448]	; (8002a9c <MX_GPIO_Init+0x2d4>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80028e6:	2201      	movs	r2, #1
 80028e8:	2120      	movs	r1, #32
 80028ea:	486d      	ldr	r0, [pc, #436]	; (8002aa0 <MX_GPIO_Init+0x2d8>)
 80028ec:	f006 f96c 	bl	8008bc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80028f0:	2200      	movs	r2, #0
 80028f2:	210e      	movs	r1, #14
 80028f4:	486b      	ldr	r0, [pc, #428]	; (8002aa4 <MX_GPIO_Init+0x2dc>)
 80028f6:	f006 f967 	bl	8008bc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80028fa:	2201      	movs	r2, #1
 80028fc:	2108      	movs	r1, #8
 80028fe:	486a      	ldr	r0, [pc, #424]	; (8002aa8 <MX_GPIO_Init+0x2e0>)
 8002900:	f006 f962 	bl	8008bc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002904:	2201      	movs	r2, #1
 8002906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800290a:	4866      	ldr	r0, [pc, #408]	; (8002aa4 <MX_GPIO_Init+0x2dc>)
 800290c:	f006 f95c 	bl	8008bc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002910:	2200      	movs	r2, #0
 8002912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002916:	4865      	ldr	r0, [pc, #404]	; (8002aac <MX_GPIO_Init+0x2e4>)
 8002918:	f006 f956 	bl	8008bc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800291c:	2200      	movs	r2, #0
 800291e:	21c8      	movs	r1, #200	; 0xc8
 8002920:	4863      	ldr	r0, [pc, #396]	; (8002ab0 <MX_GPIO_Init+0x2e8>)
 8002922:	f006 f951 	bl	8008bc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002926:	2308      	movs	r3, #8
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800292a:	2300      	movs	r3, #0
 800292c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002936:	4619      	mov	r1, r3
 8002938:	485e      	ldr	r0, [pc, #376]	; (8002ab4 <MX_GPIO_Init+0x2ec>)
 800293a:	f005 fe75 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800293e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002950:	230b      	movs	r3, #11
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002958:	4619      	mov	r1, r3
 800295a:	4855      	ldr	r0, [pc, #340]	; (8002ab0 <MX_GPIO_Init+0x2e8>)
 800295c:	f005 fe64 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002960:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002972:	230a      	movs	r3, #10
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800297a:	4619      	mov	r1, r3
 800297c:	484e      	ldr	r0, [pc, #312]	; (8002ab8 <MX_GPIO_Init+0x2f0>)
 800297e:	f005 fe53 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002988:	2300      	movs	r3, #0
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002994:	4619      	mov	r1, r3
 8002996:	4849      	ldr	r0, [pc, #292]	; (8002abc <MX_GPIO_Init+0x2f4>)
 8002998:	f005 fe46 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800299c:	2340      	movs	r3, #64	; 0x40
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80029a0:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <MX_GPIO_Init+0x2f8>)
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80029a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ac:	4619      	mov	r1, r3
 80029ae:	483c      	ldr	r0, [pc, #240]	; (8002aa0 <MX_GPIO_Init+0x2d8>)
 80029b0:	f005 fe3a 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80029b4:	2320      	movs	r3, #32
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b8:	2301      	movs	r3, #1
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c8:	4619      	mov	r1, r3
 80029ca:	4835      	ldr	r0, [pc, #212]	; (8002aa0 <MX_GPIO_Init+0x2d8>)
 80029cc:	f005 fe2c 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80029d0:	f241 030e 	movw	r3, #4110	; 0x100e
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d6:	2301      	movs	r3, #1
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e6:	4619      	mov	r1, r3
 80029e8:	482e      	ldr	r0, [pc, #184]	; (8002aa4 <MX_GPIO_Init+0x2dc>)
 80029ea:	f005 fe1d 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80029ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f4:	2300      	movs	r3, #0
 80029f6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80029fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a00:	4619      	mov	r1, r3
 8002a02:	4830      	ldr	r0, [pc, #192]	; (8002ac4 <MX_GPIO_Init+0x2fc>)
 8002a04:	f005 fe10 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4822      	ldr	r0, [pc, #136]	; (8002aa8 <MX_GPIO_Init+0x2e0>)
 8002a20:	f005 fe02 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002a24:	2310      	movs	r3, #16
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a34:	4619      	mov	r1, r3
 8002a36:	481a      	ldr	r0, [pc, #104]	; (8002aa0 <MX_GPIO_Init+0x2d8>)
 8002a38:	f005 fdf6 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002a3c:	f248 0304 	movw	r3, #32772	; 0x8004
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a42:	2300      	movs	r3, #0
 8002a44:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4816      	ldr	r0, [pc, #88]	; (8002aac <MX_GPIO_Init+0x2e4>)
 8002a52:	f005 fde9 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	480f      	ldr	r0, [pc, #60]	; (8002aac <MX_GPIO_Init+0x2e4>)
 8002a70:	f005 fdda 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002a74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a86:	4619      	mov	r1, r3
 8002a88:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <MX_GPIO_Init+0x2dc>)
 8002a8a:	f005 fdcd 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <MX_GPIO_Init+0x300>)
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e017      	b.n	8002acc <MX_GPIO_Init+0x304>
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40020c00 	.word	0x40020c00
 8002aa4:	40022000 	.word	0x40022000
 8002aa8:	40022800 	.word	0x40022800
 8002aac:	40021c00 	.word	0x40021c00
 8002ab0:	40021800 	.word	0x40021800
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40020400 	.word	0x40020400
 8002abc:	40022400 	.word	0x40022400
 8002ac0:	10120000 	.word	0x10120000
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	10110000 	.word	0x10110000
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4844      	ldr	r0, [pc, #272]	; (8002be8 <MX_GPIO_Init+0x420>)
 8002ad6:	f005 fda7 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002ada:	2310      	movs	r3, #16
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002aea:	230a      	movs	r3, #10
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af2:	4619      	mov	r1, r3
 8002af4:	483d      	ldr	r0, [pc, #244]	; (8002bec <MX_GPIO_Init+0x424>)
 8002af6:	f005 fd97 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002afa:	23c8      	movs	r3, #200	; 0xc8
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4837      	ldr	r0, [pc, #220]	; (8002bf0 <MX_GPIO_Init+0x428>)
 8002b12:	f005 fd89 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002b16:	2305      	movs	r3, #5
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b26:	230a      	movs	r3, #10
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4830      	ldr	r0, [pc, #192]	; (8002bf4 <MX_GPIO_Init+0x42c>)
 8002b32:	f005 fd79 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002b36:	2332      	movs	r3, #50	; 0x32
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b46:	230b      	movs	r3, #11
 8002b48:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4828      	ldr	r0, [pc, #160]	; (8002bf4 <MX_GPIO_Init+0x42c>)
 8002b52:	f005 fd69 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002b56:	2304      	movs	r3, #4
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b66:	4619      	mov	r1, r3
 8002b68:	4821      	ldr	r0, [pc, #132]	; (8002bf0 <MX_GPIO_Init+0x428>)
 8002b6a:	f005 fd5d 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b6e:	2386      	movs	r3, #134	; 0x86
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b7e:	230b      	movs	r3, #11
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b86:	4619      	mov	r1, r3
 8002b88:	481b      	ldr	r0, [pc, #108]	; (8002bf8 <MX_GPIO_Init+0x430>)
 8002b8a:	f005 fd4d 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002b8e:	2328      	movs	r3, #40	; 0x28
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4813      	ldr	r0, [pc, #76]	; (8002bf8 <MX_GPIO_Init+0x430>)
 8002baa:	f005 fd3d 	bl	8008628 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002bae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bc0:	2305      	movs	r3, #5
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc8:	4619      	mov	r1, r3
 8002bca:	480c      	ldr	r0, [pc, #48]	; (8002bfc <MX_GPIO_Init+0x434>)
 8002bcc:	f005 fd2c 	bl	8008628 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2105      	movs	r1, #5
 8002bd4:	2028      	movs	r0, #40	; 0x28
 8002bd6:	f004 fa8d 	bl	80070f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002bda:	2028      	movs	r0, #40	; 0x28
 8002bdc:	f004 faa6 	bl	800712c <HAL_NVIC_EnableIRQ>

}
 8002be0:	bf00      	nop
 8002be2:	3740      	adds	r7, #64	; 0x40
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40021c00 	.word	0x40021c00
 8002bf0:	40021800 	.word	0x40021800
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40020400 	.word	0x40020400

08002c00 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f017 fb47 	bl	801a29c <iprintf>
	printf("\n");
 8002c0e:	200a      	movs	r0, #10
 8002c10:	f017 fb5c 	bl	801a2cc <putchar>
	Error_Handler();
 8002c14:	f000 f840 	bl	8002c98 <Error_Handler>
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8002c28:	f015 fe56 	bl	80188d8 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 8002c2c:	4803      	ldr	r0, [pc, #12]	; (8002c3c <StartDefaultTask+0x1c>)
 8002c2e:	f017 fbd1 	bl	801a3d4 <puts>
	audioLoop();
 8002c32:	f7fe f909 	bl	8000e48 <audioLoop>
	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	int i=0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
	for(;;)
 8002c3a:	e7fe      	b.n	8002c3a <StartDefaultTask+0x1a>
 8002c3c:	0801b600 	.word	0x0801b600

08002c40 <startUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN startUITask */

	osDelay(200);
 8002c48:	20c8      	movs	r0, #200	; 0xc8
 8002c4a:	f013 f947 	bl	8015edc <osDelay>
	printf("StartLedTask\n");
 8002c4e:	4808      	ldr	r0, [pc, #32]	; (8002c70 <startUITask+0x30>)
 8002c50:	f017 fbc0 	bl	801a3d4 <puts>
	uiDisplayBasic();
 8002c54:	f001 f9c8 	bl	8003fe8 <uiDisplayBasic>
	/* Infinite loop */
	for(;;)
	{
		osSignalWait (0x0001, osWaitForever);
 8002c58:	463b      	mov	r3, r7
 8002c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f013 f98f 	bl	8015f84 <osSignalWait>
		uiDisplaySpectrum();
 8002c66:	f001 faaf 	bl	80041c8 <uiDisplaySpectrum>

		uiSliderDelay();
 8002c6a:	f001 fa3f 	bl	80040ec <uiSliderDelay>
		osSignalWait (0x0001, osWaitForever);
 8002c6e:	e7f3      	b.n	8002c58 <startUITask+0x18>
 8002c70:	0801b614 	.word	0x0801b614

08002c74 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002c86:	f003 fe8d 	bl	80069a4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40001000 	.word	0x40001000

08002c98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002c9c:	f001 fb06 	bl	80042ac <LED_Toggle>
		HAL_Delay(100);
 8002ca0:	2064      	movs	r0, #100	; 0x64
 8002ca2:	f003 fe9f 	bl	80069e4 <HAL_Delay>
		LED_Toggle();
 8002ca6:	e7f9      	b.n	8002c9c <Error_Handler+0x4>

08002ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	210f      	movs	r1, #15
 8002ce2:	f06f 0001 	mvn.w	r0, #1
 8002ce6:	f004 fa05 	bl	80070f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <HAL_ADC_MspInit+0xa4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d13c      	bne.n	8002d94 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_ADC_MspInit+0xa8>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <HAL_ADC_MspInit+0xa8>)
 8002d20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <HAL_ADC_MspInit+0xa8>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_ADC_MspInit+0xa8>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a1a      	ldr	r2, [pc, #104]	; (8002da0 <HAL_ADC_MspInit+0xa8>)
 8002d38:	f043 0320 	orr.w	r3, r3, #32
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <HAL_ADC_MspInit+0xa8>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_ADC_MspInit+0xa8>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <HAL_ADC_MspInit+0xa8>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_ADC_MspInit+0xa8>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002d62:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002d66:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	480b      	ldr	r0, [pc, #44]	; (8002da4 <HAL_ADC_MspInit+0xac>)
 8002d78:	f005 fc56 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d80:	2303      	movs	r3, #3
 8002d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4806      	ldr	r0, [pc, #24]	; (8002da8 <HAL_ADC_MspInit+0xb0>)
 8002d90:	f005 fc4a 	bl	8008628 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d94:	bf00      	nop
 8002d96:	3728      	adds	r7, #40	; 0x28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40012200 	.word	0x40012200
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40021400 	.word	0x40021400
 8002da8:	40020000 	.word	0x40020000

08002dac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <HAL_CRC_MspInit+0x38>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d10b      	bne.n	8002dd6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_CRC_MspInit+0x3c>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_CRC_MspInit+0x3c>)
 8002dc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HAL_CRC_MspInit+0x3c>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40023000 	.word	0x40023000
 8002de8:	40023800 	.word	0x40023800

08002dec <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08e      	sub	sp, #56	; 0x38
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a6c      	ldr	r2, [pc, #432]	; (8002fbc <HAL_DCMI_MspInit+0x1d0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f040 80d2 	bne.w	8002fb4 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002e10:	4b6b      	ldr	r3, [pc, #428]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e14:	4a6a      	ldr	r2, [pc, #424]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6353      	str	r3, [r2, #52]	; 0x34
 8002e1c:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e28:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	4a64      	ldr	r2, [pc, #400]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e2e:	f043 0310 	orr.w	r3, r3, #16
 8002e32:	6313      	str	r3, [r2, #48]	; 0x30
 8002e34:	4b62      	ldr	r3, [pc, #392]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e40:	4b5f      	ldr	r3, [pc, #380]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	4a5e      	ldr	r2, [pc, #376]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4c:	4b5c      	ldr	r3, [pc, #368]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e62:	6313      	str	r3, [r2, #48]	; 0x30
 8002e64:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	4b4d      	ldr	r3, [pc, #308]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	4a4c      	ldr	r2, [pc, #304]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6313      	str	r3, [r2, #48]	; 0x30
 8002e94:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <HAL_DCMI_MspInit+0x1d4>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002ea0:	2360      	movs	r3, #96	; 0x60
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2300      	movs	r3, #0
 8002eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002eb0:	230d      	movs	r3, #13
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4842      	ldr	r0, [pc, #264]	; (8002fc4 <HAL_DCMI_MspInit+0x1d8>)
 8002ebc:	f005 fbb4 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ed0:	230d      	movs	r3, #13
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed8:	4619      	mov	r1, r3
 8002eda:	483b      	ldr	r0, [pc, #236]	; (8002fc8 <HAL_DCMI_MspInit+0x1dc>)
 8002edc:	f005 fba4 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ef2:	230d      	movs	r3, #13
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efa:	4619      	mov	r1, r3
 8002efc:	4833      	ldr	r0, [pc, #204]	; (8002fcc <HAL_DCMI_MspInit+0x1e0>)
 8002efe:	f005 fb93 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002f02:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f14:	230d      	movs	r3, #13
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	482c      	ldr	r0, [pc, #176]	; (8002fd0 <HAL_DCMI_MspInit+0x1e4>)
 8002f20:	f005 fb82 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002f24:	2350      	movs	r3, #80	; 0x50
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f34:	230d      	movs	r3, #13
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4825      	ldr	r0, [pc, #148]	; (8002fd4 <HAL_DCMI_MspInit+0x1e8>)
 8002f40:	f005 fb72 	bl	8008628 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002f44:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f46:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <HAL_DCMI_MspInit+0x1f0>)
 8002f48:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002f4a:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f50:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f52:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f58:	4b1f      	ldr	r3, [pc, #124]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f64:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f6c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f74:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002f7c:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002f88:	4813      	ldr	r0, [pc, #76]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f8a:	f004 fb9b 	bl	80076c4 <HAL_DMA_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002f94:	f7ff fe80 	bl	8002c98 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002f9c:	649a      	str	r2, [r3, #72]	; 0x48
 8002f9e:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <HAL_DCMI_MspInit+0x1ec>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2105      	movs	r1, #5
 8002fa8:	204e      	movs	r0, #78	; 0x4e
 8002faa:	f004 f8a3 	bl	80070f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002fae:	204e      	movs	r0, #78	; 0x4e
 8002fb0:	f004 f8bc 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	3738      	adds	r7, #56	; 0x38
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	50050000 	.word	0x50050000
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	40021800 	.word	0x40021800
 8002fd0:	40021c00 	.word	0x40021c00
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	2000d08c 	.word	0x2000d08c
 8002fdc:	40026428 	.word	0x40026428

08002fe0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <HAL_DMA2D_MspInit+0x44>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d113      	bne.n	800301a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <HAL_DMA2D_MspInit+0x48>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <HAL_DMA2D_MspInit+0x48>)
 8002ff8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_DMA2D_MspInit+0x48>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800300a:	2200      	movs	r2, #0
 800300c:	2105      	movs	r1, #5
 800300e:	205a      	movs	r0, #90	; 0x5a
 8003010:	f004 f870 	bl	80070f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003014:	205a      	movs	r0, #90	; 0x5a
 8003016:	f004 f889 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	4002b000 	.word	0x4002b000
 8003028:	40023800 	.word	0x40023800

0800302c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08c      	sub	sp, #48	; 0x30
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2f      	ldr	r2, [pc, #188]	; (8003108 <HAL_I2C_MspInit+0xdc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d129      	bne.n	80030a2 <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <HAL_I2C_MspInit+0xe0>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	4a2e      	ldr	r2, [pc, #184]	; (800310c <HAL_I2C_MspInit+0xe0>)
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	6313      	str	r3, [r2, #48]	; 0x30
 800305a:	4b2c      	ldr	r3, [pc, #176]	; (800310c <HAL_I2C_MspInit+0xe0>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003066:	f44f 7340 	mov.w	r3, #768	; 0x300
 800306a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800306c:	2312      	movs	r3, #18
 800306e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003070:	2301      	movs	r3, #1
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003074:	2300      	movs	r3, #0
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003078:	2304      	movs	r3, #4
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4619      	mov	r1, r3
 8003082:	4823      	ldr	r0, [pc, #140]	; (8003110 <HAL_I2C_MspInit+0xe4>)
 8003084:	f005 fad0 	bl	8008628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_I2C_MspInit+0xe0>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	4a1f      	ldr	r2, [pc, #124]	; (800310c <HAL_I2C_MspInit+0xe0>)
 800308e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003092:	6413      	str	r3, [r2, #64]	; 0x40
 8003094:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_I2C_MspInit+0xe0>)
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80030a0:	e02d      	b.n	80030fe <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <HAL_I2C_MspInit+0xe8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d128      	bne.n	80030fe <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_I2C_MspInit+0xe0>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_I2C_MspInit+0xe0>)
 80030b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b6:	6313      	str	r3, [r2, #48]	; 0x30
 80030b8:	4b14      	ldr	r3, [pc, #80]	; (800310c <HAL_I2C_MspInit+0xe0>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80030c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80030c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ca:	2312      	movs	r3, #18
 80030cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d2:	2303      	movs	r3, #3
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030d6:	2304      	movs	r3, #4
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80030da:	f107 031c 	add.w	r3, r7, #28
 80030de:	4619      	mov	r1, r3
 80030e0:	480d      	ldr	r0, [pc, #52]	; (8003118 <HAL_I2C_MspInit+0xec>)
 80030e2:	f005 faa1 	bl	8008628 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_I2C_MspInit+0xe0>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4a08      	ldr	r2, [pc, #32]	; (800310c <HAL_I2C_MspInit+0xe0>)
 80030ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030f0:	6413      	str	r3, [r2, #64]	; 0x40
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_I2C_MspInit+0xe0>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
}
 80030fe:	bf00      	nop
 8003100:	3730      	adds	r7, #48	; 0x30
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40005400 	.word	0x40005400
 800310c:	40023800 	.word	0x40023800
 8003110:	40020400 	.word	0x40020400
 8003114:	40005c00 	.word	0x40005c00
 8003118:	40021c00 	.word	0x40021c00

0800311c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a15      	ldr	r2, [pc, #84]	; (8003180 <HAL_I2C_MspDeInit+0x64>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d110      	bne.n	8003150 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <HAL_I2C_MspDeInit+0x68>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a14      	ldr	r2, [pc, #80]	; (8003184 <HAL_I2C_MspDeInit+0x68>)
 8003134:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003138:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800313a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800313e:	4812      	ldr	r0, [pc, #72]	; (8003188 <HAL_I2C_MspDeInit+0x6c>)
 8003140:	f005 fc1e 	bl	8008980 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003144:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003148:	480f      	ldr	r0, [pc, #60]	; (8003188 <HAL_I2C_MspDeInit+0x6c>)
 800314a:	f005 fc19 	bl	8008980 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800314e:	e013      	b.n	8003178 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0d      	ldr	r2, [pc, #52]	; (800318c <HAL_I2C_MspDeInit+0x70>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10e      	bne.n	8003178 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_I2C_MspDeInit+0x68>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a09      	ldr	r2, [pc, #36]	; (8003184 <HAL_I2C_MspDeInit+0x68>)
 8003160:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	4809      	ldr	r0, [pc, #36]	; (8003190 <HAL_I2C_MspDeInit+0x74>)
 800316a:	f005 fc09 	bl	8008980 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800316e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003172:	4807      	ldr	r0, [pc, #28]	; (8003190 <HAL_I2C_MspDeInit+0x74>)
 8003174:	f005 fc04 	bl	8008980 <HAL_GPIO_DeInit>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40005400 	.word	0x40005400
 8003184:	40023800 	.word	0x40023800
 8003188:	40020400 	.word	0x40020400
 800318c:	40005c00 	.word	0x40005c00
 8003190:	40021c00 	.word	0x40021c00

08003194 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	; 0x38
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a51      	ldr	r2, [pc, #324]	; (80032f8 <HAL_LTDC_MspInit+0x164>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	f040 809b 	bne.w	80032ee <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	4a4f      	ldr	r2, [pc, #316]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 80031be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031c2:	6453      	str	r3, [r2, #68]	; 0x44
 80031c4:	4b4d      	ldr	r3, [pc, #308]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031cc:	623b      	str	r3, [r7, #32]
 80031ce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031d0:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	4a49      	ldr	r2, [pc, #292]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 80031d6:	f043 0310 	orr.w	r3, r3, #16
 80031da:	6313      	str	r3, [r2, #48]	; 0x30
 80031dc:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80031e8:	4b44      	ldr	r3, [pc, #272]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	4a43      	ldr	r2, [pc, #268]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 80031ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031f2:	6313      	str	r3, [r2, #48]	; 0x30
 80031f4:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003200:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 8003206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800320a:	6313      	str	r3, [r2, #48]	; 0x30
 800320c:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003218:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4a37      	ldr	r2, [pc, #220]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 800321e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003222:	6313      	str	r3, [r2, #48]	; 0x30
 8003224:	4b35      	ldr	r3, [pc, #212]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	4a31      	ldr	r2, [pc, #196]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	6313      	str	r3, [r2, #48]	; 0x30
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <HAL_LTDC_MspInit+0x168>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003248:	2310      	movs	r3, #16
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	2300      	movs	r3, #0
 8003256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003258:	230e      	movs	r3, #14
 800325a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800325c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003260:	4619      	mov	r1, r3
 8003262:	4827      	ldr	r0, [pc, #156]	; (8003300 <HAL_LTDC_MspInit+0x16c>)
 8003264:	f005 f9e0 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003268:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800327a:	230e      	movs	r3, #14
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800327e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003282:	4619      	mov	r1, r3
 8003284:	481f      	ldr	r0, [pc, #124]	; (8003304 <HAL_LTDC_MspInit+0x170>)
 8003286:	f005 f9cf 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800328a:	23f7      	movs	r3, #247	; 0xf7
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800329a:	230e      	movs	r3, #14
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800329e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a2:	4619      	mov	r1, r3
 80032a4:	4818      	ldr	r0, [pc, #96]	; (8003308 <HAL_LTDC_MspInit+0x174>)
 80032a6:	f005 f9bf 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80032aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80032bc:	2309      	movs	r3, #9
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80032c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c4:	4619      	mov	r1, r3
 80032c6:	4811      	ldr	r0, [pc, #68]	; (800330c <HAL_LTDC_MspInit+0x178>)
 80032c8:	f005 f9ae 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80032cc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032de:	230e      	movs	r3, #14
 80032e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80032e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e6:	4619      	mov	r1, r3
 80032e8:	4809      	ldr	r0, [pc, #36]	; (8003310 <HAL_LTDC_MspInit+0x17c>)
 80032ea:	f005 f99d 	bl	8008628 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80032ee:	bf00      	nop
 80032f0:	3738      	adds	r7, #56	; 0x38
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40016800 	.word	0x40016800
 80032fc:	40023800 	.word	0x40023800
 8003300:	40021000 	.word	0x40021000
 8003304:	40022400 	.word	0x40022400
 8003308:	40022800 	.word	0x40022800
 800330c:	40021800 	.word	0x40021800
 8003310:	40022000 	.word	0x40022000

08003314 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	; 0x30
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a3f      	ldr	r2, [pc, #252]	; (8003430 <HAL_QSPI_MspInit+0x11c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d178      	bne.n	8003428 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003336:	4b3f      	ldr	r3, [pc, #252]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	4a3e      	ldr	r2, [pc, #248]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	6393      	str	r3, [r2, #56]	; 0x38
 8003342:	4b3c      	ldr	r3, [pc, #240]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800334e:	4b39      	ldr	r3, [pc, #228]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a38      	ldr	r2, [pc, #224]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 8003354:	f043 0310 	orr.w	r3, r3, #16
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003366:	4b33      	ldr	r3, [pc, #204]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a32      	ldr	r2, [pc, #200]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800337e:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <HAL_QSPI_MspInit+0x120>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003396:	2304      	movs	r3, #4
 8003398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a2:	2303      	movs	r3, #3
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80033a6:	2309      	movs	r3, #9
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80033aa:	f107 031c 	add.w	r3, r7, #28
 80033ae:	4619      	mov	r1, r3
 80033b0:	4821      	ldr	r0, [pc, #132]	; (8003438 <HAL_QSPI_MspInit+0x124>)
 80033b2:	f005 f939 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80033b6:	2340      	movs	r3, #64	; 0x40
 80033b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c2:	2303      	movs	r3, #3
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80033c6:	230a      	movs	r3, #10
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80033ca:	f107 031c 	add.w	r3, r7, #28
 80033ce:	4619      	mov	r1, r3
 80033d0:	481a      	ldr	r0, [pc, #104]	; (800343c <HAL_QSPI_MspInit+0x128>)
 80033d2:	f005 f929 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033d6:	2304      	movs	r3, #4
 80033d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e2:	2303      	movs	r3, #3
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80033e6:	2309      	movs	r3, #9
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ea:	f107 031c 	add.w	r3, r7, #28
 80033ee:	4619      	mov	r1, r3
 80033f0:	4812      	ldr	r0, [pc, #72]	; (800343c <HAL_QSPI_MspInit+0x128>)
 80033f2:	f005 f919 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80033f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80033fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003408:	2309      	movs	r3, #9
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	4619      	mov	r1, r3
 8003412:	480b      	ldr	r0, [pc, #44]	; (8003440 <HAL_QSPI_MspInit+0x12c>)
 8003414:	f005 f908 	bl	8008628 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	2105      	movs	r1, #5
 800341c:	205c      	movs	r0, #92	; 0x5c
 800341e:	f003 fe69 	bl	80070f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003422:	205c      	movs	r0, #92	; 0x5c
 8003424:	f003 fe82 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003428:	bf00      	nop
 800342a:	3730      	adds	r7, #48	; 0x30
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	a0001000 	.word	0xa0001000
 8003434:	40023800 	.word	0x40023800
 8003438:	40021000 	.word	0x40021000
 800343c:	40020400 	.word	0x40020400
 8003440:	40020c00 	.word	0x40020c00

08003444 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a07      	ldr	r2, [pc, #28]	; (8003470 <HAL_RTC_MspInit+0x2c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d105      	bne.n	8003462 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <HAL_RTC_MspInit+0x30>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	4a06      	ldr	r2, [pc, #24]	; (8003474 <HAL_RTC_MspInit+0x30>)
 800345c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003460:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40002800 	.word	0x40002800
 8003474:	40023800 	.word	0x40023800

08003478 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a25      	ldr	r2, [pc, #148]	; (800352c <HAL_SD_MspInit+0xb4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d144      	bne.n	8003524 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800349a:	4b25      	ldr	r3, [pc, #148]	; (8003530 <HAL_SD_MspInit+0xb8>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	4a24      	ldr	r2, [pc, #144]	; (8003530 <HAL_SD_MspInit+0xb8>)
 80034a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034a4:	6453      	str	r3, [r2, #68]	; 0x44
 80034a6:	4b22      	ldr	r3, [pc, #136]	; (8003530 <HAL_SD_MspInit+0xb8>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b2:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <HAL_SD_MspInit+0xb8>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <HAL_SD_MspInit+0xb8>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <HAL_SD_MspInit+0xb8>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ca:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_SD_MspInit+0xb8>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a18      	ldr	r2, [pc, #96]	; (8003530 <HAL_SD_MspInit+0xb8>)
 80034d0:	f043 0308 	orr.w	r3, r3, #8
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b16      	ldr	r3, [pc, #88]	; (8003530 <HAL_SD_MspInit+0xb8>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80034e2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80034e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f0:	2303      	movs	r3, #3
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80034f4:	230c      	movs	r3, #12
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4619      	mov	r1, r3
 80034fe:	480d      	ldr	r0, [pc, #52]	; (8003534 <HAL_SD_MspInit+0xbc>)
 8003500:	f005 f892 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003504:	2304      	movs	r3, #4
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	2303      	movs	r3, #3
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003514:	230c      	movs	r3, #12
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4806      	ldr	r0, [pc, #24]	; (8003538 <HAL_SD_MspInit+0xc0>)
 8003520:	f005 f882 	bl	8008628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003524:	bf00      	nop
 8003526:	3728      	adds	r7, #40	; 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40023800 	.word	0x40023800
 8003534:	40020800 	.word	0x40020800
 8003538:	40020c00 	.word	0x40020c00

0800353c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800355c:	d127      	bne.n	80035ae <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800355e:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <HAL_SPDIFRX_MspInit+0x7c>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4a0f      	ldr	r2, [pc, #60]	; (80035b8 <HAL_SPDIFRX_MspInit+0x7c>)
 800357c:	f043 0308 	orr.w	r3, r3, #8
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
 8003582:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359a:	2300      	movs	r3, #0
 800359c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800359e:	2308      	movs	r3, #8
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	4804      	ldr	r0, [pc, #16]	; (80035bc <HAL_SPDIFRX_MspInit+0x80>)
 80035aa:	f005 f83d 	bl	8008628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80035ae:	bf00      	nop
 80035b0:	3728      	adds	r7, #40	; 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020c00 	.word	0x40020c00

080035c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	; 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <HAL_TIM_Base_MspInit+0xc8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10c      	bne.n	80035ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035d2:	4b2e      	ldr	r3, [pc, #184]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	4a2d      	ldr	r2, [pc, #180]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6453      	str	r3, [r2, #68]	; 0x44
 80035de:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80035ea:	e046      	b.n	800367a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f4:	d10c      	bne.n	8003610 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035f6:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a24      	ldr	r2, [pc, #144]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	69bb      	ldr	r3, [r7, #24]
}
 800360e:	e034      	b.n	800367a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <HAL_TIM_Base_MspInit+0xd0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10c      	bne.n	8003634 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	4a1b      	ldr	r2, [pc, #108]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 8003620:	f043 0302 	orr.w	r3, r3, #2
 8003624:	6413      	str	r3, [r2, #64]	; 0x40
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	697b      	ldr	r3, [r7, #20]
}
 8003632:	e022      	b.n	800367a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a16      	ldr	r2, [pc, #88]	; (8003694 <HAL_TIM_Base_MspInit+0xd4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10c      	bne.n	8003658 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	4a12      	ldr	r2, [pc, #72]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 8003644:	f043 0308 	orr.w	r3, r3, #8
 8003648:	6413      	str	r3, [r2, #64]	; 0x40
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	693b      	ldr	r3, [r7, #16]
}
 8003656:	e010      	b.n	800367a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <HAL_TIM_Base_MspInit+0xd8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d10b      	bne.n	800367a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	6453      	str	r3, [r2, #68]	; 0x44
 800366e:	4b07      	ldr	r3, [pc, #28]	; (800368c <HAL_TIM_Base_MspInit+0xcc>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
}
 800367a:	bf00      	nop
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40010000 	.word	0x40010000
 800368c:	40023800 	.word	0x40023800
 8003690:	40000400 	.word	0x40000400
 8003694:	40000c00 	.word	0x40000c00
 8003698:	40010400 	.word	0x40010400

0800369c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_TIM_PWM_MspInit+0x38>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10b      	bne.n	80036c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80036b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40001800 	.word	0x40001800
 80036d8:	40023800 	.word	0x40023800

080036dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a56      	ldr	r2, [pc, #344]	; (8003854 <HAL_TIM_MspPostInit+0x178>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d11d      	bne.n	800373a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fe:	4b56      	ldr	r3, [pc, #344]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4a55      	ldr	r2, [pc, #340]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6313      	str	r3, [r2, #48]	; 0x30
 800370a:	4b53      	ldr	r3, [pc, #332]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800371a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371c:	2302      	movs	r3, #2
 800371e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003728:	2301      	movs	r3, #1
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800372c:	f107 031c 	add.w	r3, r7, #28
 8003730:	4619      	mov	r1, r3
 8003732:	484a      	ldr	r0, [pc, #296]	; (800385c <HAL_TIM_MspPostInit+0x180>)
 8003734:	f004 ff78 	bl	8008628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003738:	e087      	b.n	800384a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d11d      	bne.n	8003780 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003744:	4b44      	ldr	r3, [pc, #272]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	4a43      	ldr	r2, [pc, #268]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6313      	str	r3, [r2, #48]	; 0x30
 8003750:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800375c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003762:	2302      	movs	r3, #2
 8003764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376a:	2300      	movs	r3, #0
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800376e:	2301      	movs	r3, #1
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003772:	f107 031c 	add.w	r3, r7, #28
 8003776:	4619      	mov	r1, r3
 8003778:	4838      	ldr	r0, [pc, #224]	; (800385c <HAL_TIM_MspPostInit+0x180>)
 800377a:	f004 ff55 	bl	8008628 <HAL_GPIO_Init>
}
 800377e:	e064      	b.n	800384a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a36      	ldr	r2, [pc, #216]	; (8003860 <HAL_TIM_MspPostInit+0x184>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d11c      	bne.n	80037c4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378a:	4b33      	ldr	r3, [pc, #204]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4a32      	ldr	r2, [pc, #200]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 8003790:	f043 0302 	orr.w	r3, r3, #2
 8003794:	6313      	str	r3, [r2, #48]	; 0x30
 8003796:	4b30      	ldr	r3, [pc, #192]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80037a2:	2310      	movs	r3, #16
 80037a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a6:	2302      	movs	r3, #2
 80037a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037b2:	2302      	movs	r3, #2
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80037b6:	f107 031c 	add.w	r3, r7, #28
 80037ba:	4619      	mov	r1, r3
 80037bc:	4829      	ldr	r0, [pc, #164]	; (8003864 <HAL_TIM_MspPostInit+0x188>)
 80037be:	f004 ff33 	bl	8008628 <HAL_GPIO_Init>
}
 80037c2:	e042      	b.n	800384a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a27      	ldr	r2, [pc, #156]	; (8003868 <HAL_TIM_MspPostInit+0x18c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d11c      	bne.n	8003808 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4a21      	ldr	r2, [pc, #132]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	6313      	str	r3, [r2, #48]	; 0x30
 80037da:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80037e6:	2301      	movs	r3, #1
 80037e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	2302      	movs	r3, #2
 80037ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f2:	2300      	movs	r3, #0
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80037f6:	2302      	movs	r3, #2
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80037fa:	f107 031c 	add.w	r3, r7, #28
 80037fe:	4619      	mov	r1, r3
 8003800:	481a      	ldr	r0, [pc, #104]	; (800386c <HAL_TIM_MspPostInit+0x190>)
 8003802:	f004 ff11 	bl	8008628 <HAL_GPIO_Init>
}
 8003806:	e020      	b.n	800384a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a18      	ldr	r2, [pc, #96]	; (8003870 <HAL_TIM_MspPostInit+0x194>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d11b      	bne.n	800384a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a10      	ldr	r2, [pc, #64]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 8003818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <HAL_TIM_MspPostInit+0x17c>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800382a:	2340      	movs	r3, #64	; 0x40
 800382c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003836:	2300      	movs	r3, #0
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800383a:	2309      	movs	r3, #9
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800383e:	f107 031c 	add.w	r3, r7, #28
 8003842:	4619      	mov	r1, r3
 8003844:	480b      	ldr	r0, [pc, #44]	; (8003874 <HAL_TIM_MspPostInit+0x198>)
 8003846:	f004 feef 	bl	8008628 <HAL_GPIO_Init>
}
 800384a:	bf00      	nop
 800384c:	3730      	adds	r7, #48	; 0x30
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40023800 	.word	0x40023800
 800385c:	40020000 	.word	0x40020000
 8003860:	40000400 	.word	0x40000400
 8003864:	40020400 	.word	0x40020400
 8003868:	40000c00 	.word	0x40000c00
 800386c:	40022000 	.word	0x40022000
 8003870:	40001800 	.word	0x40001800
 8003874:	40021c00 	.word	0x40021c00

08003878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	; 0x30
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 031c 	add.w	r3, r7, #28
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a3c      	ldr	r2, [pc, #240]	; (8003988 <HAL_UART_MspInit+0x110>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d145      	bne.n	8003926 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800389a:	4b3c      	ldr	r3, [pc, #240]	; (800398c <HAL_UART_MspInit+0x114>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	4a3b      	ldr	r2, [pc, #236]	; (800398c <HAL_UART_MspInit+0x114>)
 80038a0:	f043 0310 	orr.w	r3, r3, #16
 80038a4:	6453      	str	r3, [r2, #68]	; 0x44
 80038a6:	4b39      	ldr	r3, [pc, #228]	; (800398c <HAL_UART_MspInit+0x114>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b2:	4b36      	ldr	r3, [pc, #216]	; (800398c <HAL_UART_MspInit+0x114>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a35      	ldr	r2, [pc, #212]	; (800398c <HAL_UART_MspInit+0x114>)
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b33      	ldr	r3, [pc, #204]	; (800398c <HAL_UART_MspInit+0x114>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ca:	4b30      	ldr	r3, [pc, #192]	; (800398c <HAL_UART_MspInit+0x114>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a2f      	ldr	r2, [pc, #188]	; (800398c <HAL_UART_MspInit+0x114>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b2d      	ldr	r3, [pc, #180]	; (800398c <HAL_UART_MspInit+0x114>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038f2:	2307      	movs	r3, #7
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80038f6:	f107 031c 	add.w	r3, r7, #28
 80038fa:	4619      	mov	r1, r3
 80038fc:	4824      	ldr	r0, [pc, #144]	; (8003990 <HAL_UART_MspInit+0x118>)
 80038fe:	f004 fe93 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003910:	2300      	movs	r3, #0
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003914:	2307      	movs	r3, #7
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003918:	f107 031c 	add.w	r3, r7, #28
 800391c:	4619      	mov	r1, r3
 800391e:	481d      	ldr	r0, [pc, #116]	; (8003994 <HAL_UART_MspInit+0x11c>)
 8003920:	f004 fe82 	bl	8008628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003924:	e02c      	b.n	8003980 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_UART_MspInit+0x120>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d127      	bne.n	8003980 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_UART_MspInit+0x114>)
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	4a15      	ldr	r2, [pc, #84]	; (800398c <HAL_UART_MspInit+0x114>)
 8003936:	f043 0320 	orr.w	r3, r3, #32
 800393a:	6453      	str	r3, [r2, #68]	; 0x44
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_UART_MspInit+0x114>)
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003948:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_UART_MspInit+0x114>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4a0f      	ldr	r2, [pc, #60]	; (800398c <HAL_UART_MspInit+0x114>)
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	6313      	str	r3, [r2, #48]	; 0x30
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <HAL_UART_MspInit+0x114>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003960:	23c0      	movs	r3, #192	; 0xc0
 8003962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	2302      	movs	r3, #2
 8003966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396c:	2303      	movs	r3, #3
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003970:	2308      	movs	r3, #8
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003974:	f107 031c 	add.w	r3, r7, #28
 8003978:	4619      	mov	r1, r3
 800397a:	4808      	ldr	r0, [pc, #32]	; (800399c <HAL_UART_MspInit+0x124>)
 800397c:	f004 fe54 	bl	8008628 <HAL_GPIO_Init>
}
 8003980:	bf00      	nop
 8003982:	3730      	adds	r7, #48	; 0x30
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40011000 	.word	0x40011000
 800398c:	40023800 	.word	0x40023800
 8003990:	40020400 	.word	0x40020400
 8003994:	40020000 	.word	0x40020000
 8003998:	40011400 	.word	0x40011400
 800399c:	40020800 	.word	0x40020800

080039a0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80039b4:	4b3d      	ldr	r3, [pc, #244]	; (8003aac <HAL_FMC_MspInit+0x10c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d173      	bne.n	8003aa4 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 80039bc:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <HAL_FMC_MspInit+0x10c>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039c2:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <HAL_FMC_MspInit+0x110>)
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	4a3a      	ldr	r2, [pc, #232]	; (8003ab0 <HAL_FMC_MspInit+0x110>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6393      	str	r3, [r2, #56]	; 0x38
 80039ce:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <HAL_FMC_MspInit+0x110>)
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80039da:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039de:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	2302      	movs	r3, #2
 80039e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e8:	2303      	movs	r3, #3
 80039ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039ec:	230c      	movs	r3, #12
 80039ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	482f      	ldr	r0, [pc, #188]	; (8003ab4 <HAL_FMC_MspInit+0x114>)
 80039f6:	f004 fe17 	bl	8008628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80039fa:	f248 1333 	movw	r3, #33075	; 0x8133
 80039fe:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4828      	ldr	r0, [pc, #160]	; (8003ab8 <HAL_FMC_MspInit+0x118>)
 8003a16:	f004 fe07 	bl	8008628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003a1a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003a1e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a20:	2302      	movs	r3, #2
 8003a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a30:	1d3b      	adds	r3, r7, #4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4821      	ldr	r0, [pc, #132]	; (8003abc <HAL_FMC_MspInit+0x11c>)
 8003a36:	f004 fdf7 	bl	8008628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003a3a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a3e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a4c:	230c      	movs	r3, #12
 8003a4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	4619      	mov	r1, r3
 8003a54:	481a      	ldr	r0, [pc, #104]	; (8003ac0 <HAL_FMC_MspInit+0x120>)
 8003a56:	f004 fde7 	bl	8008628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003a5a:	2328      	movs	r3, #40	; 0x28
 8003a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a66:	2303      	movs	r3, #3
 8003a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a6a:	230c      	movs	r3, #12
 8003a6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4814      	ldr	r0, [pc, #80]	; (8003ac4 <HAL_FMC_MspInit+0x124>)
 8003a74:	f004 fdd8 	bl	8008628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003a78:	2308      	movs	r3, #8
 8003a7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a84:	2303      	movs	r3, #3
 8003a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a88:	230c      	movs	r3, #12
 8003a8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	480d      	ldr	r0, [pc, #52]	; (8003ac8 <HAL_FMC_MspInit+0x128>)
 8003a92:	f004 fdc9 	bl	8008628 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <HAL_FMC_MspInit+0x12c>)
 8003a98:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <HAL_FMC_MspInit+0x130>)
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_FMC_MspInit+0x130>)
 8003a9e:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <HAL_FMC_MspInit+0x12c>)
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8003aa2:	e000      	b.n	8003aa6 <HAL_FMC_MspInit+0x106>
    return;
 8003aa4:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000358 	.word	0x20000358
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40021800 	.word	0x40021800
 8003abc:	40020c00 	.word	0x40020c00
 8003ac0:	40021400 	.word	0x40021400
 8003ac4:	40021c00 	.word	0x40021c00
 8003ac8:	40020800 	.word	0x40020800
 8003acc:	2000d5f8 	.word	0x2000d5f8
 8003ad0:	2000ce40 	.word	0x2000ce40

08003ad4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003adc:	f7ff ff60 	bl	80039a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a6f      	ldr	r2, [pc, #444]	; (8003cb4 <HAL_SAI_MspInit+0x1cc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d175      	bne.n	8003be6 <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003afa:	4b6f      	ldr	r3, [pc, #444]	; (8003cb8 <HAL_SAI_MspInit+0x1d0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003b02:	4b6e      	ldr	r3, [pc, #440]	; (8003cbc <HAL_SAI_MspInit+0x1d4>)
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	4a6d      	ldr	r2, [pc, #436]	; (8003cbc <HAL_SAI_MspInit+0x1d4>)
 8003b08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b0e:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <HAL_SAI_MspInit+0x1d4>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003b1a:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_SAI_MspInit+0x1d0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	4a65      	ldr	r2, [pc, #404]	; (8003cb8 <HAL_SAI_MspInit+0x1d0>)
 8003b22:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8003b24:	2310      	movs	r3, #16
 8003b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b30:	2303      	movs	r3, #3
 8003b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003b34:	230a      	movs	r3, #10
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4860      	ldr	r0, [pc, #384]	; (8003cc0 <HAL_SAI_MspInit+0x1d8>)
 8003b40:	f004 fd72 	bl	8008628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003b44:	23e0      	movs	r3, #224	; 0xe0
 8003b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b50:	2302      	movs	r3, #2
 8003b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003b54:	230a      	movs	r3, #10
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4858      	ldr	r0, [pc, #352]	; (8003cc0 <HAL_SAI_MspInit+0x1d8>)
 8003b60:	f004 fd62 	bl	8008628 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003b64:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003b66:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_SAI_MspInit+0x1e0>)
 8003b68:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003b6a:	4b56      	ldr	r3, [pc, #344]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003b6c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003b70:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b72:	4b54      	ldr	r3, [pc, #336]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003b74:	2240      	movs	r2, #64	; 0x40
 8003b76:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b78:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003b7e:	4b51      	ldr	r3, [pc, #324]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b84:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b86:	4b4f      	ldr	r3, [pc, #316]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b8c:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b8e:	4b4d      	ldr	r3, [pc, #308]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003b90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b94:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003b96:	4b4b      	ldr	r3, [pc, #300]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b9c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003b9e:	4b49      	ldr	r3, [pc, #292]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003ba0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ba4:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003ba6:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003ba8:	2204      	movs	r2, #4
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003bac:	4b45      	ldr	r3, [pc, #276]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003bae:	2203      	movs	r2, #3
 8003bb0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003bb2:	4b44      	ldr	r3, [pc, #272]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003bb8:	4b42      	ldr	r3, [pc, #264]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003bbe:	4841      	ldr	r0, [pc, #260]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003bc0:	f003 fd80 	bl	80076c4 <HAL_DMA_Init>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8003bca:	f7ff f865 	bl	8002c98 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a3c      	ldr	r2, [pc, #240]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003bd2:	671a      	str	r2, [r3, #112]	; 0x70
 8003bd4:	4a3b      	ldr	r2, [pc, #236]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a39      	ldr	r2, [pc, #228]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003bde:	66da      	str	r2, [r3, #108]	; 0x6c
 8003be0:	4a38      	ldr	r2, [pc, #224]	; (8003cc4 <HAL_SAI_MspInit+0x1dc>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a38      	ldr	r2, [pc, #224]	; (8003ccc <HAL_SAI_MspInit+0x1e4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d15c      	bne.n	8003caa <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003bf0:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_SAI_MspInit+0x1d0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003bf8:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <HAL_SAI_MspInit+0x1d4>)
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	4a2f      	ldr	r2, [pc, #188]	; (8003cbc <HAL_SAI_MspInit+0x1d4>)
 8003bfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c02:	6453      	str	r3, [r2, #68]	; 0x44
 8003c04:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <HAL_SAI_MspInit+0x1d4>)
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003c10:	4b29      	ldr	r3, [pc, #164]	; (8003cb8 <HAL_SAI_MspInit+0x1d0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <HAL_SAI_MspInit+0x1d0>)
 8003c18:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003c2c:	230a      	movs	r3, #10
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	4619      	mov	r1, r3
 8003c36:	4826      	ldr	r0, [pc, #152]	; (8003cd0 <HAL_SAI_MspInit+0x1e8>)
 8003c38:	f004 fcf6 	bl	8008628 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c3e:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_SAI_MspInit+0x1f0>)
 8003c40:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c4e:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003c54:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c5a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c62:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c6a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003c6c:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c72:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c7a:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c7c:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003c82:	4814      	ldr	r0, [pc, #80]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c84:	f003 fd1e 	bl	80076c4 <HAL_DMA_Init>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003c8e:	f7ff f803 	bl	8002c98 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a0f      	ldr	r2, [pc, #60]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c96:	671a      	str	r2, [r3, #112]	; 0x70
 8003c98:	4a0e      	ldr	r2, [pc, #56]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003ca2:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ca4:	4a0b      	ldr	r2, [pc, #44]	; (8003cd4 <HAL_SAI_MspInit+0x1ec>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003caa:	bf00      	nop
 8003cac:	3728      	adds	r7, #40	; 0x28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40015c04 	.word	0x40015c04
 8003cb8:	2000035c 	.word	0x2000035c
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	2000d43c 	.word	0x2000d43c
 8003cc8:	40026470 	.word	0x40026470
 8003ccc:	40015c24 	.word	0x40015c24
 8003cd0:	40021800 	.word	0x40021800
 8003cd4:	2000ceec 	.word	0x2000ceec
 8003cd8:	400264b8 	.word	0x400264b8

08003cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003cec:	2200      	movs	r2, #0
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	2036      	movs	r0, #54	; 0x36
 8003cf2:	f003 f9ff 	bl	80070f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cf6:	2036      	movs	r0, #54	; 0x36
 8003cf8:	f003 fa18 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003cfc:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <HAL_InitTick+0xa0>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <HAL_InitTick+0xa0>)
 8003d02:	f043 0310 	orr.w	r3, r3, #16
 8003d06:	6413      	str	r3, [r2, #64]	; 0x40
 8003d08:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <HAL_InitTick+0xa0>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d14:	f107 0210 	add.w	r2, r7, #16
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f009 fa2c 	bl	800d17c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d24:	f009 fa02 	bl	800d12c <HAL_RCC_GetPCLK1Freq>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_InitTick+0xa4>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0c9b      	lsrs	r3, r3, #18
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <HAL_InitTick+0xa8>)
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <HAL_InitTick+0xac>)
 8003d40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <HAL_InitTick+0xa8>)
 8003d44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d48:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003d4a:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <HAL_InitTick+0xa8>)
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <HAL_InitTick+0xa8>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_InitTick+0xa8>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003d5c:	4809      	ldr	r0, [pc, #36]	; (8003d84 <HAL_InitTick+0xa8>)
 8003d5e:	f00c f89d 	bl	800fe9c <HAL_TIM_Base_Init>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003d68:	4806      	ldr	r0, [pc, #24]	; (8003d84 <HAL_InitTick+0xa8>)
 8003d6a:	f00c f8ef 	bl	800ff4c <HAL_TIM_Base_Start_IT>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	e000      	b.n	8003d74 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3730      	adds	r7, #48	; 0x30
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	431bde83 	.word	0x431bde83
 8003d84:	2000d678 	.word	0x2000d678
 8003d88:	40001000 	.word	0x40001000

08003d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d90:	e7fe      	b.n	8003d90 <NMI_Handler+0x4>

08003d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d96:	e7fe      	b.n	8003d96 <HardFault_Handler+0x4>

08003d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d9c:	e7fe      	b.n	8003d9c <MemManage_Handler+0x4>

08003d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003da2:	e7fe      	b.n	8003da2 <BusFault_Handler+0x4>

08003da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <UsageFault_Handler+0x4>

08003daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003dbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003dc0:	f004 ff36 	bl	8008c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <TIM6_DAC_IRQHandler+0x10>)
 8003dce:	f00c f98c 	bl	80100ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000d678 	.word	0x2000d678

08003ddc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <DMA2_Stream0_IRQHandler+0x10>)
 8003de2:	f003 fe0f 	bl	8007a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	2000ce40 	.word	0x2000ce40

08003df0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <DMA2_Stream1_IRQHandler+0x10>)
 8003df6:	f003 fe05 	bl	8007a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000d08c 	.word	0x2000d08c

08003e04 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <DMA2_Stream4_IRQHandler+0x10>)
 8003e0a:	f003 fdfb 	bl	8007a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	2000d43c 	.word	0x2000d43c

08003e18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <OTG_FS_IRQHandler+0x10>)
 8003e1e:	f005 f995 	bl	800914c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2004db1c 	.word	0x2004db1c

08003e2c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <DMA2_Stream7_IRQHandler+0x10>)
 8003e32:	f003 fde7 	bl	8007a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	2000ceec 	.word	0x2000ceec

08003e40 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <DCMI_IRQHandler+0x10>)
 8003e46:	f003 fb6d 	bl	8007524 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	2000d2fc 	.word	0x2000d2fc

08003e54 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <DMA2D_IRQHandler+0x10>)
 8003e5a:	f004 f9a7 	bl	80081ac <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	2000d520 	.word	0x2000d520

08003e68 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <QUADSPI_IRQHandler+0x10>)
 8003e6e:	f007 fdc3 	bl	800b9f8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2000d62c 	.word	0x2000d62c

08003e7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e00a      	b.n	8003ea4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e8e:	f3af 8000 	nop.w
 8003e92:	4601      	mov	r1, r0
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	60ba      	str	r2, [r7, #8]
 8003e9a:	b2ca      	uxtb	r2, r1
 8003e9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	dbf0      	blt.n	8003e8e <_read+0x12>
	}

return len;
 8003eac:	687b      	ldr	r3, [r7, #4]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b086      	sub	sp, #24
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e009      	b.n	8003edc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	60ba      	str	r2, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f9f5 	bl	80042c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	dbf1      	blt.n	8003ec8 <_write+0x12>
	}
	return len;
 8003ee4:	687b      	ldr	r3, [r7, #4]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <_close>:

int _close(int file)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
	return -1;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f16:	605a      	str	r2, [r3, #4]
	return 0;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <_isatty>:

int _isatty(int file)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
	return 1;
 8003f2e:	2301      	movs	r3, #1
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
	return 0;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f60:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <_sbrk+0x5c>)
 8003f62:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <_sbrk+0x60>)
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f6c:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <_sbrk+0x64>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <_sbrk+0x64>)
 8003f76:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <_sbrk+0x68>)
 8003f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f7a:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <_sbrk+0x64>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d207      	bcs.n	8003f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f88:	f016 f88e 	bl	801a0a8 <__errno>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	220c      	movs	r2, #12
 8003f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f96:	e009      	b.n	8003fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <_sbrk+0x64>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <_sbrk+0x64>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	4a05      	ldr	r2, [pc, #20]	; (8003fbc <_sbrk+0x64>)
 8003fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003faa:	68fb      	ldr	r3, [r7, #12]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20050000 	.word	0x20050000
 8003fb8:	00000400 	.word	0x00000400
 8003fbc:	20000360 	.word	0x20000360
 8003fc0:	2004de30 	.word	0x2004de30

08003fc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <SystemInit+0x20>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	4a05      	ldr	r2, [pc, #20]	; (8003fe4 <SystemInit+0x20>)
 8003fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <uiDisplayBasic>:
int time = 0;

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8003fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ff2:	f000 fb53 	bl	800469c <LCD_Clear>

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003ff6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003ffa:	f000 fab1 	bl	8004560 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004002:	f000 fadd 	bl	80045c0 <LCD_SetBackColor>
	LCD_SetFont(&Font16);
 8004006:	4822      	ldr	r0, [pc, #136]	; (8004090 <uiDisplayBasic+0xa8>)
 8004008:	f000 faf2 	bl	80045f0 <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 800400c:	2301      	movs	r3, #1
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	2301      	movs	r3, #1
 8004012:	4a20      	ldr	r2, [pc, #128]	; (8004094 <uiDisplayBasic+0xac>)
 8004014:	2100      	movs	r1, #0
 8004016:	2000      	movs	r0, #0
 8004018:	f000 fb88 	bl	800472c <LCD_DrawString>

	/* delay range */
	LCD_DrawRect(60,20,360,30);
 800401c:	231e      	movs	r3, #30
 800401e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8004022:	2114      	movs	r1, #20
 8004024:	203c      	movs	r0, #60	; 0x3c
 8004026:	f000 fc17 	bl	8004858 <LCD_DrawRect>
	/* Init Vol, Delay, Feed */
	LCD_SetFont(&Font12);
 800402a:	481b      	ldr	r0, [pc, #108]	; (8004098 <uiDisplayBasic+0xb0>)
 800402c:	f000 fae0 	bl	80045f0 <LCD_SetFont>
	LCD_DrawString(428,15,(uint8_t *) "Volume", LEFT_MODE, true);
 8004030:	2301      	movs	r3, #1
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2303      	movs	r3, #3
 8004036:	4a19      	ldr	r2, [pc, #100]	; (800409c <uiDisplayBasic+0xb4>)
 8004038:	210f      	movs	r1, #15
 800403a:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 800403e:	f000 fb75 	bl	800472c <LCD_DrawString>
	LCD_DrawString(440,245,(uint8_t *) "50 ", LEFT_MODE, true);
 8004042:	2301      	movs	r3, #1
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	2303      	movs	r3, #3
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <uiDisplayBasic+0xb8>)
 800404a:	21f5      	movs	r1, #245	; 0xf5
 800404c:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004050:	f000 fb6c 	bl	800472c <LCD_DrawString>
	LCD_SetFillColor(LCD_COLOR_RED);
 8004054:	4813      	ldr	r0, [pc, #76]	; (80040a4 <uiDisplayBasic+0xbc>)
 8004056:	f000 fa9b 	bl	8004590 <LCD_SetFillColor>
	LCD_FillRect(436,100+36,29,200-100);
 800405a:	2364      	movs	r3, #100	; 0x64
 800405c:	221d      	movs	r2, #29
 800405e:	2188      	movs	r1, #136	; 0x88
 8004060:	f44f 70da 	mov.w	r0, #436	; 0x1b4
 8004064:	f000 fc6a 	bl	800493c <LCD_FillRect>

	LCD_DrawString(LCD_SCREEN_WIDTH/2,60,(uint8_t *) "0 ms  ", LEFT_MODE, true);
 8004068:	2301      	movs	r3, #1
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2303      	movs	r3, #3
 800406e:	4a0e      	ldr	r2, [pc, #56]	; (80040a8 <uiDisplayBasic+0xc0>)
 8004070:	213c      	movs	r1, #60	; 0x3c
 8004072:	20f0      	movs	r0, #240	; 0xf0
 8004074:	f000 fb5a 	bl	800472c <LCD_DrawString>
	LCD_DrawString(200,60,(uint8_t *) "Delay", LEFT_MODE, true);
 8004078:	2301      	movs	r3, #1
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2303      	movs	r3, #3
 800407e:	4a0b      	ldr	r2, [pc, #44]	; (80040ac <uiDisplayBasic+0xc4>)
 8004080:	213c      	movs	r1, #60	; 0x3c
 8004082:	20c8      	movs	r0, #200	; 0xc8
 8004084:	f000 fb52 	bl	800472c <LCD_DrawString>
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000020 	.word	0x20000020
 8004094:	0801b624 	.word	0x0801b624
 8004098:	20000018 	.word	0x20000018
 800409c:	0801b63c 	.word	0x0801b63c
 80040a0:	0801b644 	.word	0x0801b644
 80040a4:	ffff0000 	.word	0xffff0000
 80040a8:	0801b648 	.word	0x0801b648
 80040ac:	0801b650 	.word	0x0801b650

080040b0 <printDelay>:

/*
 * Display All Params
 */
static void printDelay(uint32_t x){
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	6078      	str	r0, [r7, #4]
	char delay_char[10];
	sprintf(delay_char, "%lu ms  ",x);
 80040b8:	f107 0308 	add.w	r3, r7, #8
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	490a      	ldr	r1, [pc, #40]	; (80040e8 <printDelay+0x38>)
 80040c0:	4618      	mov	r0, r3
 80040c2:	f016 f99f 	bl	801a404 <siprintf>
	uint16_t X = LCD_SCREEN_WIDTH/2;
 80040c6:	23f0      	movs	r3, #240	; 0xf0
 80040c8:	82fb      	strh	r3, [r7, #22]
	uint16_t Y = 60;
 80040ca:	233c      	movs	r3, #60	; 0x3c
 80040cc:	82bb      	strh	r3, [r7, #20]
	LCD_DrawString(X,Y,(uint8_t *)delay_char, LEFT_MODE, true);
 80040ce:	f107 0208 	add.w	r2, r7, #8
 80040d2:	8ab9      	ldrh	r1, [r7, #20]
 80040d4:	8af8      	ldrh	r0, [r7, #22]
 80040d6:	2301      	movs	r3, #1
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2303      	movs	r3, #3
 80040dc:	f000 fb26 	bl	800472c <LCD_DrawString>
}
 80040e0:	bf00      	nop
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	0801b658 	.word	0x0801b658

080040ec <uiSliderDelay>:

/*
 * Range for delay value
 */
void uiSliderDelay(){
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b090      	sub	sp, #64	; 0x40
 80040f0:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 80040f2:	463b      	mov	r3, r7
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 ffc9 	bl	800508c <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 80040fa:	783b      	ldrb	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05b      	beq.n	80041b8 <uiSliderDelay+0xcc>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004100:	887b      	ldrh	r3, [r7, #2]
 8004102:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004104:	89bb      	ldrh	r3, [r7, #12]
 8004106:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 60;
 8004108:	233c      	movs	r3, #60	; 0x3c
 800410a:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 20;
 800410c:	2314      	movs	r3, #20
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 360;
 8004110:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 30;
 8004116:	231e      	movs	r3, #30
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 800411a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800411c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800411e:	429a      	cmp	r2, r3
 8004120:	da4a      	bge.n	80041b8 <uiSliderDelay+0xcc>
 8004122:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004124:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	440b      	add	r3, r1
 800412a:	429a      	cmp	r2, r3
 800412c:	da44      	bge.n	80041b8 <uiSliderDelay+0xcc>
 800412e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004132:	429a      	cmp	r2, r3
 8004134:	da40      	bge.n	80041b8 <uiSliderDelay+0xcc>
 8004136:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	440b      	add	r3, r1
 800413e:	429a      	cmp	r2, r3
 8004140:	da3a      	bge.n	80041b8 <uiSliderDelay+0xcc>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 8004142:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	1ad2      	subs	r2, r2, r3
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <uiSliderDelay+0xd4>)
 8004150:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <uiSliderDelay+0xd4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ffaa 	bl	80040b0 <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 800415c:	4819      	ldr	r0, [pc, #100]	; (80041c4 <uiSliderDelay+0xd8>)
 800415e:	f000 fa17 	bl	8004590 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	b29b      	uxth	r3, r3
 8004166:	3301      	adds	r3, #1
 8004168:	b298      	uxth	r0, r3
 800416a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416c:	b29b      	uxth	r3, r3
 800416e:	3301      	adds	r3, #1
 8004170:	b299      	uxth	r1, r3
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	b29b      	uxth	r3, r3
 8004176:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	b29a      	uxth	r2, r3
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29b      	uxth	r3, r3
 8004184:	f000 fbda 	bl	800493c <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 8004188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800418c:	f000 fa00 	bl	8004590 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8004190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004192:	b29b      	uxth	r3, r3
 8004194:	3301      	adds	r3, #1
 8004196:	b299      	uxth	r1, r3
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	b29a      	uxth	r2, r3
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	b29b      	uxth	r3, r3
 80041a0:	4413      	add	r3, r2
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 80041b4:	f000 fbc2 	bl	800493c <LCD_FillRect>
				}
	}
}
 80041b8:	bf00      	nop
 80041ba:	3740      	adds	r7, #64	; 0x40
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000364 	.word	0x20000364
 80041c4:	ffff0000 	.word	0xffff0000

080041c8 <uiDisplaySpectrum>:




uint32_t VAL;
void uiDisplaySpectrum() {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
	/* sweep reset */
	if(time>360){
 80041ce:	4b26      	ldr	r3, [pc, #152]	; (8004268 <uiDisplaySpectrum+0xa0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80041d6:	dd02      	ble.n	80041de <uiDisplaySpectrum+0x16>
		time=0;
 80041d8:	4b23      	ldr	r3, [pc, #140]	; (8004268 <uiDisplaySpectrum+0xa0>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
	}
	/* sweep init position */
	uint16_t x=time+60;
 80041de:	4b22      	ldr	r3, [pc, #136]	; (8004268 <uiDisplaySpectrum+0xa0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	333c      	adds	r3, #60	; 0x3c
 80041e6:	817b      	strh	r3, [r7, #10]
	uint16_t y=270;
 80041e8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80041ec:	813b      	strh	r3, [r7, #8]
	uint32_t color;

	/* run through mag values */
	for(int i=0;i<(256/2);i++){
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e02d      	b.n	8004250 <uiDisplaySpectrum+0x88>
		/* Amplitude of frequency "i" */
		VAL = (uint32_t) (FFTOutputMag[i]*255);
 80041f4:	4a1d      	ldr	r2, [pc, #116]	; (800426c <uiDisplaySpectrum+0xa4>)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	edd3 7a00 	vldr	s15, [r3]
 8004200:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004270 <uiDisplaySpectrum+0xa8>
 8004204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800420c:	ee17 2a90 	vmov	r2, s15
 8004210:	4b18      	ldr	r3, [pc, #96]	; (8004274 <uiDisplaySpectrum+0xac>)
 8004212:	601a      	str	r2, [r3, #0]
		color=(uint32_t) 4278190080+(VAL);
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <uiDisplaySpectrum+0xac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 800421c:	607b      	str	r3, [r7, #4]

		/* shade of blue */
		LCD_DrawPixelColor(x,y-(i),(uint32_t) color);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	b29b      	uxth	r3, r3
 8004222:	893a      	ldrh	r2, [r7, #8]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	b299      	uxth	r1, r3
 8004228:	897b      	ldrh	r3, [r7, #10]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f9ef 	bl	8004610 <LCD_DrawPixelColor>
		/* tracking bar */
		LCD_DrawPixelColor(x+1,y-(i),(uint32_t) (4278190080+16753920));
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	3301      	adds	r3, #1
 8004236:	b298      	uxth	r0, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	b29b      	uxth	r3, r3
 800423c:	893a      	ldrh	r2, [r7, #8]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	b29b      	uxth	r3, r3
 8004242:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <uiDisplaySpectrum+0xb0>)
 8004244:	4619      	mov	r1, r3
 8004246:	f000 f9e3 	bl	8004610 <LCD_DrawPixelColor>
	for(int i=0;i<(256/2);i++){
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b7f      	cmp	r3, #127	; 0x7f
 8004254:	ddce      	ble.n	80041f4 <uiDisplaySpectrum+0x2c>
	}
	/* new sweep position */
	time=time+1;
 8004256:	4b04      	ldr	r3, [pc, #16]	; (8004268 <uiDisplaySpectrum+0xa0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	4a02      	ldr	r2, [pc, #8]	; (8004268 <uiDisplaySpectrum+0xa0>)
 800425e:	6013      	str	r3, [r2, #0]
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	2000036c 	.word	0x2000036c
 800426c:	2000b558 	.word	0x2000b558
 8004270:	437f0000 	.word	0x437f0000
 8004274:	2000d6c4 	.word	0x2000d6c4
 8004278:	ffffa500 	.word	0xffffa500

0800427c <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 8004280:	2201      	movs	r2, #1
 8004282:	2102      	movs	r1, #2
 8004284:	4802      	ldr	r0, [pc, #8]	; (8004290 <LED_On+0x14>)
 8004286:	f004 fc9f 	bl	8008bc8 <HAL_GPIO_WritePin>
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40022000 	.word	0x40022000

08004294 <LED_Off>:

void LED_Off(){
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 8004298:	2200      	movs	r2, #0
 800429a:	2102      	movs	r1, #2
 800429c:	4802      	ldr	r0, [pc, #8]	; (80042a8 <LED_Off+0x14>)
 800429e:	f004 fc93 	bl	8008bc8 <HAL_GPIO_WritePin>
}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40022000 	.word	0x40022000

080042ac <LED_Toggle>:

void LED_Toggle(){
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 80042b0:	2102      	movs	r1, #2
 80042b2:	4802      	ldr	r0, [pc, #8]	; (80042bc <LED_Toggle+0x10>)
 80042b4:	f004 fca1 	bl	8008bfa <HAL_GPIO_TogglePin>

}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40022000 	.word	0x40022000

080042c0 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 80042c8:	1d39      	adds	r1, r7, #4
 80042ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042ce:	2201      	movs	r2, #1
 80042d0:	4803      	ldr	r0, [pc, #12]	; (80042e0 <__io_putchar+0x20>)
 80042d2:	f00c ff37 	bl	8011144 <HAL_UART_Transmit>
	return ch;
 80042d6:	687b      	ldr	r3, [r7, #4]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	2000d34c 	.word	0x2000d34c

080042e4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af04      	add	r7, sp, #16
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	4608      	mov	r0, r1
 80042ee:	4611      	mov	r1, r2
 80042f0:	461a      	mov	r2, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	72fb      	strb	r3, [r7, #11]
 80042f6:	460b      	mov	r3, r1
 80042f8:	813b      	strh	r3, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004302:	7afb      	ldrb	r3, [r7, #11]
 8004304:	b299      	uxth	r1, r3
 8004306:	88f8      	ldrh	r0, [r7, #6]
 8004308:	893a      	ldrh	r2, [r7, #8]
 800430a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800430e:	9302      	str	r3, [sp, #8]
 8004310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4603      	mov	r3, r0
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f006 fbe4 	bl	800aae8 <HAL_I2C_Mem_Read>
 8004320:	4603      	mov	r3, r0
 8004322:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d004      	beq.n	8004334 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800432a:	7afb      	ldrb	r3, [r7, #11]
 800432c:	4619      	mov	r1, r3
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f832 	bl	8004398 <I2Cx_Error>
  }
  return status;
 8004334:	7dfb      	ldrb	r3, [r7, #23]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b08a      	sub	sp, #40	; 0x28
 8004342:	af04      	add	r7, sp, #16
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	4608      	mov	r0, r1
 8004348:	4611      	mov	r1, r2
 800434a:	461a      	mov	r2, r3
 800434c:	4603      	mov	r3, r0
 800434e:	72fb      	strb	r3, [r7, #11]
 8004350:	460b      	mov	r3, r1
 8004352:	813b      	strh	r3, [r7, #8]
 8004354:	4613      	mov	r3, r2
 8004356:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800435c:	7afb      	ldrb	r3, [r7, #11]
 800435e:	b299      	uxth	r1, r3
 8004360:	88f8      	ldrh	r0, [r7, #6]
 8004362:	893a      	ldrh	r2, [r7, #8]
 8004364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004368:	9302      	str	r3, [sp, #8]
 800436a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	4603      	mov	r3, r0
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f006 faa3 	bl	800a8c0 <HAL_I2C_Mem_Write>
 800437a:	4603      	mov	r3, r0
 800437c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004384:	7afb      	ldrb	r3, [r7, #11]
 8004386:	4619      	mov	r1, r3
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f805 	bl	8004398 <I2Cx_Error>
  }
  return status;
 800438e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f006 fa5b 	bl	800a860 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f006 f9c8 	bl	800a740 <HAL_I2C_Init>
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af02      	add	r7, sp, #8
 80043be:	4603      	mov	r3, r0
 80043c0:	71fb      	strb	r3, [r7, #7]
 80043c2:	460b      	mov	r3, r1
 80043c4:	80bb      	strh	r3, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 80043ca:	887b      	ldrh	r3, [r7, #2]
 80043cc:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80043ce:	89fb      	ldrh	r3, [r7, #14]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80043d6:	89fb      	ldrh	r3, [r7, #14]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	b29b      	uxth	r3, r3
 80043dc:	b21a      	sxth	r2, r3
 80043de:	887b      	ldrh	r3, [r7, #2]
 80043e0:	b21b      	sxth	r3, r3
 80043e2:	4313      	orrs	r3, r2
 80043e4:	b21b      	sxth	r3, r3
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80043ea:	88ba      	ldrh	r2, [r7, #4]
 80043ec:	79f9      	ldrb	r1, [r7, #7]
 80043ee:	2302      	movs	r3, #2
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	1cbb      	adds	r3, r7, #2
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2302      	movs	r3, #2
 80043f8:	4803      	ldr	r0, [pc, #12]	; (8004408 <AUDIO_I2C_Write+0x50>)
 80043fa:	f7ff ffa0 	bl	800433e <I2Cx_WriteMultiple>
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2000cdf4 	.word	0x2000cdf4

0800440c <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af02      	add	r7, sp, #8
 8004412:	4603      	mov	r3, r0
 8004414:	460a      	mov	r2, r1
 8004416:	71fb      	strb	r3, [r7, #7]
 8004418:	4613      	mov	r3, r2
 800441a:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	81bb      	strh	r3, [r7, #12]
 8004420:	2300      	movs	r3, #0
 8004422:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8004424:	88ba      	ldrh	r2, [r7, #4]
 8004426:	79f9      	ldrb	r1, [r7, #7]
 8004428:	2302      	movs	r3, #2
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	f107 030c 	add.w	r3, r7, #12
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	2302      	movs	r3, #2
 8004434:	480a      	ldr	r0, [pc, #40]	; (8004460 <AUDIO_I2C_Read+0x54>)
 8004436:	f7ff ff55 	bl	80042e4 <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800443a:	89bb      	ldrh	r3, [r7, #12]
 800443c:	0a1b      	lsrs	r3, r3, #8
 800443e:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004440:	89bb      	ldrh	r3, [r7, #12]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	b29b      	uxth	r3, r3
 8004446:	b21a      	sxth	r2, r3
 8004448:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800444c:	4313      	orrs	r3, r2
 800444e:	b21b      	sxth	r3, r3
 8004450:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 8004452:	89fb      	ldrh	r3, [r7, #14]
 8004454:	81bb      	strh	r3, [r7, #12]

  return read_value;
 8004456:	89bb      	ldrh	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	2000cdf4 	.word	0x2000cdf4

08004464 <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af02      	add	r7, sp, #8
 800446a:	4603      	mov	r3, r0
 800446c:	460a      	mov	r2, r1
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	4613      	mov	r3, r2
 8004472:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	b29a      	uxth	r2, r3
 8004478:	2301      	movs	r3, #1
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	1dbb      	adds	r3, r7, #6
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2301      	movs	r3, #1
 8004482:	2170      	movs	r1, #112	; 0x70
 8004484:	4803      	ldr	r0, [pc, #12]	; (8004494 <TS_I2C_Write+0x30>)
 8004486:	f7ff ff5a 	bl	800433e <I2Cx_WriteMultiple>

}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	2000cdf4 	.word	0x2000cdf4

08004498 <TS_I2C_Read>:
/**
  * Reads a single control data from the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_I2C_Read(uint8_t Reg){
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af02      	add	r7, sp, #8
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]

  uint8_t read_value = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hi2c3, TS_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	2301      	movs	r3, #1
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	f107 030f 	add.w	r3, r7, #15
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2301      	movs	r3, #1
 80044b6:	2170      	movs	r1, #112	; 0x70
 80044b8:	4803      	ldr	r0, [pc, #12]	; (80044c8 <TS_I2C_Read+0x30>)
 80044ba:	f7ff ff13 	bl	80042e4 <I2Cx_ReadMultiple>

  return read_value;
 80044be:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	2000cdf4 	.word	0x2000cdf4

080044cc <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <LCD_Init+0x44>)
 80044d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d002      	beq.n	80044de <LCD_Init+0x12>
 80044d8:	480e      	ldr	r0, [pc, #56]	; (8004514 <LCD_Init+0x48>)
 80044da:	f7fe fb91 	bl	8002c00 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 80044de:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <LCD_Init+0x4c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	4619      	mov	r1, r3
 80044e6:	480a      	ldr	r0, [pc, #40]	; (8004510 <LCD_Init+0x44>)
 80044e8:	f006 ffda 	bl	800b4a0 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 80044ec:	f000 f81a 	bl	8004524 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 80044f0:	480a      	ldr	r0, [pc, #40]	; (800451c <LCD_Init+0x50>)
 80044f2:	f000 f87d 	bl	80045f0 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 80044f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044fa:	f000 f861 	bl	80045c0 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 80044fe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004502:	f000 f82d 	bl	8004560 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8004506:	4806      	ldr	r0, [pc, #24]	; (8004520 <LCD_Init+0x54>)
 8004508:	f000 f842 	bl	8004590 <LCD_SetFillColor>


}
 800450c:	bf00      	nop
 800450e:	bd80      	pop	{r7, pc}
 8004510:	2000d20c 	.word	0x2000d20c
 8004514:	0801b664 	.word	0x0801b664
 8004518:	20000010 	.word	0x20000010
 800451c:	20000028 	.word	0x20000028
 8004520:	ffff0000 	.word	0xffff0000

08004524 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <LCD_DisplayOn+0x30>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <LCD_DisplayOn+0x30>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004538:	2201      	movs	r2, #1
 800453a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800453e:	4806      	ldr	r0, [pc, #24]	; (8004558 <LCD_DisplayOn+0x34>)
 8004540:	f004 fb42 	bl	8008bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004544:	2201      	movs	r2, #1
 8004546:	2108      	movs	r1, #8
 8004548:	4804      	ldr	r0, [pc, #16]	; (800455c <LCD_DisplayOn+0x38>)
 800454a:	f004 fb3d 	bl	8008bc8 <HAL_GPIO_WritePin>
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	2000d20c 	.word	0x2000d20c
 8004558:	40022000 	.word	0x40022000
 800455c:	40022800 	.word	0x40022800

08004560 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8004568:	4a07      	ldr	r2, [pc, #28]	; (8004588 <LCD_SetStrokeColor+0x28>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <LCD_SetStrokeColor+0x28>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 faf4 	bl	8004b60 <ARGB888ToRGB565>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <LCD_SetStrokeColor+0x2c>)
 800457e:	601a      	str	r2, [r3, #0]
#endif
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000370 	.word	0x20000370
 800458c:	2000037c 	.word	0x2000037c

08004590 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8004598:	4a07      	ldr	r2, [pc, #28]	; (80045b8 <LCD_SetFillColor+0x28>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <LCD_SetFillColor+0x28>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fadc 	bl	8004b60 <ARGB888ToRGB565>
 80045a8:	4603      	mov	r3, r0
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <LCD_SetFillColor+0x2c>)
 80045ae:	601a      	str	r2, [r3, #0]
#endif
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000374 	.word	0x20000374
 80045bc:	20000380 	.word	0x20000380

080045c0 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 80045c8:	4a07      	ldr	r2, [pc, #28]	; (80045e8 <LCD_SetBackColor+0x28>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <LCD_SetBackColor+0x28>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fac4 	bl	8004b60 <ARGB888ToRGB565>
 80045d8:	4603      	mov	r3, r0
 80045da:	461a      	mov	r2, r3
 80045dc:	4b03      	ldr	r3, [pc, #12]	; (80045ec <LCD_SetBackColor+0x2c>)
 80045de:	601a      	str	r2, [r3, #0]
#endif
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20000378 	.word	0x20000378
 80045ec:	20000384 	.word	0x20000384

080045f0 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 80045f8:	4a04      	ldr	r2, [pc, #16]	; (800460c <LCD_SetFont+0x1c>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6013      	str	r3, [r2, #0]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000388 	.word	0x20000388

08004610 <LCD_DrawPixelColor>:
	__CleanDCache();

}

void LCD_DrawPixelColor(uint16_t Xpos, uint16_t Ypos, uint32_t Color8888)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	603a      	str	r2, [r7, #0]
 800461a:	80fb      	strh	r3, [r7, #6]
 800461c:	460b      	mov	r3, r1
 800461e:	80bb      	strh	r3, [r7, #4]
	LCD_SetStrokeColor(Color8888);
 8004620:	6838      	ldr	r0, [r7, #0]
 8004622:	f7ff ff9d 	bl	8004560 <LCD_SetStrokeColor>
	__DrawPixel(Xpos, Ypos, STROKE_COLOR);
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <LCD_DrawPixelColor+0x40>)
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <LCD_DrawPixelColor+0x44>)
 800462c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800462e:	88ba      	ldrh	r2, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	015b      	lsls	r3, r3, #5
 8004638:	461a      	mov	r2, r3
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	4413      	add	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	440b      	add	r3, r1
 8004642:	b282      	uxth	r2, r0
 8004644:	801a      	strh	r2, [r3, #0]
	__CleanDCache();

}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000037c 	.word	0x2000037c
 8004654:	2000d20c 	.word	0x2000d20c

08004658 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	460a      	mov	r2, r1
 8004662:	80fb      	strh	r3, [r7, #6]
 8004664:	4613      	mov	r3, r2
 8004666:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <LCD_ErasePixel+0x3c>)
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <LCD_ErasePixel+0x40>)
 800466e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004670:	88ba      	ldrh	r2, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	015b      	lsls	r3, r3, #5
 800467a:	461a      	mov	r2, r3
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	4413      	add	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	440b      	add	r3, r1
 8004684:	b282      	uxth	r2, r0
 8004686:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	20000384 	.word	0x20000384
 8004698:	2000d20c 	.word	0x2000d20c

0800469c <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <LCD_Clear+0x28>)
 80046a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a6:	4618      	mov	r0, r3
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <LCD_Clear+0x2c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80046b4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80046b8:	f000 fa1a 	bl	8004af0 <LL_FillBuffer>
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	2000d20c 	.word	0x2000d20c
 80046c8:	20000378 	.word	0x20000378

080046cc <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4604      	mov	r4, r0
 80046d4:	4608      	mov	r0, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	4623      	mov	r3, r4
 80046dc:	80fb      	strh	r3, [r7, #6]
 80046de:	4603      	mov	r3, r0
 80046e0:	80bb      	strh	r3, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	70fb      	strb	r3, [r7, #3]
 80046e6:	4613      	mov	r3, r2
 80046e8:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 80046ea:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <LCD_DrawChar+0x5c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	3b20      	subs	r3, #32
 80046f4:	490c      	ldr	r1, [pc, #48]	; (8004728 <LCD_DrawChar+0x5c>)
 80046f6:	6809      	ldr	r1, [r1, #0]
 80046f8:	88c9      	ldrh	r1, [r1, #6]
 80046fa:	fb01 f103 	mul.w	r1, r1, r3
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <LCD_DrawChar+0x5c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	889b      	ldrh	r3, [r3, #4]
 8004704:	3307      	adds	r3, #7
 8004706:	2b00      	cmp	r3, #0
 8004708:	da00      	bge.n	800470c <LCD_DrawChar+0x40>
 800470a:	3307      	adds	r3, #7
 800470c:	10db      	asrs	r3, r3, #3
 800470e:	fb03 f301 	mul.w	r3, r3, r1
 8004712:	441a      	add	r2, r3
 8004714:	78bb      	ldrb	r3, [r7, #2]
 8004716:	88b9      	ldrh	r1, [r7, #4]
 8004718:	88f8      	ldrh	r0, [r7, #6]
 800471a:	f000 f941 	bl	80049a0 <DrawChar>

}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}
 8004726:	bf00      	nop
 8004728:	20000388 	.word	0x20000388

0800472c <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	60ba      	str	r2, [r7, #8]
 8004734:	461a      	mov	r2, r3
 8004736:	4603      	mov	r3, r0
 8004738:	81fb      	strh	r3, [r7, #14]
 800473a:	460b      	mov	r3, r1
 800473c:	81bb      	strh	r3, [r7, #12]
 800473e:	4613      	mov	r3, r2
 8004740:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8004742:	2301      	movs	r3, #1
 8004744:	83fb      	strh	r3, [r7, #30]
 8004746:	2300      	movs	r3, #0
 8004748:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 8004756:	e002      	b.n	800475e <LCD_DrawString+0x32>
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	3301      	adds	r3, #1
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	617a      	str	r2, [r7, #20]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f6      	bne.n	8004758 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 800476a:	4b3a      	ldr	r3, [pc, #232]	; (8004854 <LCD_DrawString+0x128>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	889b      	ldrh	r3, [r3, #4]
 8004770:	461a      	mov	r2, r3
 8004772:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004776:	fb93 f3f2 	sdiv	r3, r3, r2
 800477a:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d014      	beq.n	80047ac <LCD_DrawString+0x80>
 8004782:	2b03      	cmp	r3, #3
 8004784:	dc23      	bgt.n	80047ce <LCD_DrawString+0xa2>
 8004786:	2b01      	cmp	r3, #1
 8004788:	d002      	beq.n	8004790 <LCD_DrawString+0x64>
 800478a:	2b02      	cmp	r3, #2
 800478c:	d011      	beq.n	80047b2 <LCD_DrawString+0x86>
 800478e:	e01e      	b.n	80047ce <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <LCD_DrawString+0x128>)
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	8892      	ldrh	r2, [r2, #4]
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	89fb      	ldrh	r3, [r7, #14]
 80047a6:	4413      	add	r3, r2
 80047a8:	83fb      	strh	r3, [r7, #30]
		break;
 80047aa:	e013      	b.n	80047d4 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 80047ac:	89fb      	ldrh	r3, [r7, #14]
 80047ae:	83fb      	strh	r3, [r7, #30]
		break;
 80047b0:	e010      	b.n	80047d4 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	4b26      	ldr	r3, [pc, #152]	; (8004854 <LCD_DrawString+0x128>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	889b      	ldrh	r3, [r3, #4]
 80047c0:	fb12 f303 	smulbb	r3, r2, r3
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	89fb      	ldrh	r3, [r7, #14]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	83fb      	strh	r3, [r7, #30]
		break;
 80047cc:	e002      	b.n	80047d4 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 80047ce:	89fb      	ldrh	r3, [r7, #14]
 80047d0:	83fb      	strh	r3, [r7, #30]
		break;
 80047d2:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 80047d4:	8bfb      	ldrh	r3, [r7, #30]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <LCD_DrawString+0xb6>
 80047da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	da16      	bge.n	8004810 <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 80047e2:	2301      	movs	r3, #1
 80047e4:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 80047e6:	e013      	b.n	8004810 <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047f0:	89b9      	ldrh	r1, [r7, #12]
 80047f2:	8bf8      	ldrh	r0, [r7, #30]
 80047f4:	f7ff ff6a 	bl	80046cc <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 80047f8:	4b16      	ldr	r3, [pc, #88]	; (8004854 <LCD_DrawString+0x128>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	889a      	ldrh	r2, [r3, #4]
 80047fe:	8bfb      	ldrh	r3, [r7, #30]
 8004800:	4413      	add	r3, r2
 8004802:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	3301      	adds	r3, #1
 8004808:	60bb      	str	r3, [r7, #8]
		i++;
 800480a:	8bbb      	ldrh	r3, [r7, #28]
 800480c:	3301      	adds	r3, #1
 800480e:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2da      	uxtb	r2, r3
 800481e:	8bbb      	ldrh	r3, [r7, #28]
 8004820:	490c      	ldr	r1, [pc, #48]	; (8004854 <LCD_DrawString+0x128>)
 8004822:	6809      	ldr	r1, [r1, #0]
 8004824:	8889      	ldrh	r1, [r1, #4]
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800482e:	b29b      	uxth	r3, r3
 8004830:	4908      	ldr	r1, [pc, #32]	; (8004854 <LCD_DrawString+0x128>)
 8004832:	6809      	ldr	r1, [r1, #0]
 8004834:	8889      	ldrh	r1, [r1, #4]
 8004836:	428b      	cmp	r3, r1
 8004838:	bfac      	ite	ge
 800483a:	2301      	movge	r3, #1
 800483c:	2300      	movlt	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	4013      	ands	r3, r2
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1cf      	bne.n	80047e8 <LCD_DrawString+0xbc>
	}
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000388 	.word	0x20000388

08004858 <LCD_DrawRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b085      	sub	sp, #20
 800485c:	af02      	add	r7, sp, #8
 800485e:	4604      	mov	r4, r0
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4623      	mov	r3, r4
 8004868:	80fb      	strh	r3, [r7, #6]
 800486a:	4603      	mov	r3, r0
 800486c:	80bb      	strh	r3, [r7, #4]
 800486e:	460b      	mov	r3, r1
 8004870:	807b      	strh	r3, [r7, #2]
 8004872:	4613      	mov	r3, r2
 8004874:	803b      	strh	r3, [r7, #0]

	/* Draw horizontal lines */
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, Ypos), Width, 1, 0, StrokeColor);
 8004876:	4b2f      	ldr	r3, [pc, #188]	; (8004934 <LCD_DrawRect+0xdc>)
 8004878:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800487a:	88ba      	ldrh	r2, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	015b      	lsls	r3, r3, #5
 8004884:	461a      	mov	r2, r3
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	4413      	add	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	440b      	add	r3, r1
 800488e:	4618      	mov	r0, r3
 8004890:	8879      	ldrh	r1, [r7, #2]
 8004892:	4b29      	ldr	r3, [pc, #164]	; (8004938 <LCD_DrawRect+0xe0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	2300      	movs	r3, #0
 800489a:	2201      	movs	r2, #1
 800489c:	f000 f928 	bl	8004af0 <LL_FillBuffer>
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, (Ypos+Height)), Width, 1, 0, StrokeColor);
 80048a0:	4b24      	ldr	r3, [pc, #144]	; (8004934 <LCD_DrawRect+0xdc>)
 80048a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80048a4:	88ba      	ldrh	r2, [r7, #4]
 80048a6:	883b      	ldrh	r3, [r7, #0]
 80048a8:	441a      	add	r2, r3
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	015b      	lsls	r3, r3, #5
 80048b2:	461a      	mov	r2, r3
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	4413      	add	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	440b      	add	r3, r1
 80048bc:	4618      	mov	r0, r3
 80048be:	8879      	ldrh	r1, [r7, #2]
 80048c0:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <LCD_DrawRect+0xe0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	2201      	movs	r2, #1
 80048ca:	f000 f911 	bl	8004af0 <LL_FillBuffer>

	/* Draw vertical lines */
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, Ypos), 1, Height, (LCD_SCREEN_WIDTH - 1), StrokeColor);
 80048ce:	4b19      	ldr	r3, [pc, #100]	; (8004934 <LCD_DrawRect+0xdc>)
 80048d0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80048d2:	88ba      	ldrh	r2, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	015b      	lsls	r3, r3, #5
 80048dc:	461a      	mov	r2, r3
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	4413      	add	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	440b      	add	r3, r1
 80048e6:	4618      	mov	r0, r3
 80048e8:	883a      	ldrh	r2, [r7, #0]
 80048ea:	4b13      	ldr	r3, [pc, #76]	; (8004938 <LCD_DrawRect+0xe0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	f240 13df 	movw	r3, #479	; 0x1df
 80048f4:	2101      	movs	r1, #1
 80048f6:	f000 f8fb 	bl	8004af0 <LL_FillBuffer>
	LL_FillBuffer((uint32_t *)__GetAddress((Xpos+Width), Ypos), 1, Height, (LCD_SCREEN_WIDTH - 1), StrokeColor);
 80048fa:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <LCD_DrawRect+0xdc>)
 80048fc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80048fe:	88ba      	ldrh	r2, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	015b      	lsls	r3, r3, #5
 8004908:	4618      	mov	r0, r3
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	887b      	ldrh	r3, [r7, #2]
 800490e:	4413      	add	r3, r2
 8004910:	4403      	add	r3, r0
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	440b      	add	r3, r1
 8004916:	4618      	mov	r0, r3
 8004918:	883a      	ldrh	r2, [r7, #0]
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <LCD_DrawRect+0xe0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	f240 13df 	movw	r3, #479	; 0x1df
 8004924:	2101      	movs	r1, #1
 8004926:	f000 f8e3 	bl	8004af0 <LL_FillBuffer>

	__CleanDCache();
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	bd90      	pop	{r4, r7, pc}
 8004932:	bf00      	nop
 8004934:	2000d20c 	.word	0x2000d20c
 8004938:	20000370 	.word	0x20000370

0800493c <LCD_FillRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b087      	sub	sp, #28
 8004940:	af02      	add	r7, sp, #8
 8004942:	4604      	mov	r4, r0
 8004944:	4608      	mov	r0, r1
 8004946:	4611      	mov	r1, r2
 8004948:	461a      	mov	r2, r3
 800494a:	4623      	mov	r3, r4
 800494c:	80fb      	strh	r3, [r7, #6]
 800494e:	4603      	mov	r3, r0
 8004950:	80bb      	strh	r3, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	807b      	strh	r3, [r7, #2]
 8004956:	4613      	mov	r3, r2
 8004958:	803b      	strh	r3, [r7, #0]
	uint32_t  x_address = __GetAddress(Xpos, Ypos);
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <LCD_FillRect+0x5c>)
 800495c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800495e:	88ba      	ldrh	r2, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	015b      	lsls	r3, r3, #5
 8004968:	461a      	mov	r2, r3
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	4413      	add	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	440b      	add	r3, r1
 8004972:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	LL_FillBuffer((uint32_t *)x_address, Width, Height, (LCD_SCREEN_WIDTH - Width), FillColor);
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	8879      	ldrh	r1, [r7, #2]
 8004978:	883a      	ldrh	r2, [r7, #0]
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004980:	461c      	mov	r4, r3
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <LCD_FillRect+0x60>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	4623      	mov	r3, r4
 800498a:	f000 f8b1 	bl	8004af0 <LL_FillBuffer>
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	bd90      	pop	{r4, r7, pc}
 8004996:	bf00      	nop
 8004998:	2000d20c 	.word	0x2000d20c
 800499c:	20000374 	.word	0x20000374

080049a0 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b08b      	sub	sp, #44	; 0x2c
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60ba      	str	r2, [r7, #8]
 80049a8:	461a      	mov	r2, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	81fb      	strh	r3, [r7, #14]
 80049ae:	460b      	mov	r3, r1
 80049b0:	81bb      	strh	r3, [r7, #12]
 80049b2:	4613      	mov	r3, r2
 80049b4:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 80049be:	4b49      	ldr	r3, [pc, #292]	; (8004ae4 <DrawChar+0x144>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	88db      	ldrh	r3, [r3, #6]
 80049c4:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 80049c6:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <DrawChar+0x144>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	889b      	ldrh	r3, [r3, #4]
 80049cc:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 80049ce:	8b3b      	ldrh	r3, [r7, #24]
 80049d0:	3307      	adds	r3, #7
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da00      	bge.n	80049d8 <DrawChar+0x38>
 80049d6:	3307      	adds	r3, #7
 80049d8:	10db      	asrs	r3, r3, #3
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	8b3b      	ldrh	r3, [r7, #24]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
 80049ec:	e070      	b.n	8004ad0 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80049ee:	8b3b      	ldrh	r3, [r7, #24]
 80049f0:	3307      	adds	r3, #7
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	da00      	bge.n	80049f8 <DrawChar+0x58>
 80049f6:	3307      	adds	r3, #7
 80049f8:	10db      	asrs	r3, r3, #3
 80049fa:	461a      	mov	r2, r3
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	fb03 f302 	mul.w	r3, r3, r2
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	4413      	add	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8004a08:	8b3b      	ldrh	r3, [r7, #24]
 8004a0a:	3307      	adds	r3, #7
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	da00      	bge.n	8004a12 <DrawChar+0x72>
 8004a10:	3307      	adds	r3, #7
 8004a12:	10db      	asrs	r3, r3, #3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d002      	beq.n	8004a1e <DrawChar+0x7e>
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d004      	beq.n	8004a26 <DrawChar+0x86>
 8004a1c:	e00c      	b.n	8004a38 <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	61fb      	str	r3, [r7, #28]
			break;
 8004a24:	e016      	b.n	8004a54 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	3201      	adds	r2, #1
 8004a30:	7812      	ldrb	r2, [r2, #0]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61fb      	str	r3, [r7, #28]
			break;
 8004a36:	e00d      	b.n	8004a54 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	041a      	lsls	r2, r3, #16
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	3301      	adds	r3, #1
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	4313      	orrs	r3, r2
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	3202      	adds	r2, #2
 8004a4c:	7812      	ldrb	r2, [r2, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61fb      	str	r3, [r7, #28]
			break;
 8004a52:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	623b      	str	r3, [r7, #32]
 8004a58:	e030      	b.n	8004abc <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 8004a5a:	8b3a      	ldrh	r2, [r7, #24]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	1ad2      	subs	r2, r2, r3
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
 8004a62:	4413      	add	r3, r2
 8004a64:	3b01      	subs	r3, #1
 8004a66:	2201      	movs	r2, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4013      	ands	r3, r2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d012      	beq.n	8004a9c <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 8004a76:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <DrawChar+0x148>)
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <DrawChar+0x14c>)
 8004a7c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004a7e:	89ba      	ldrh	r2, [r7, #12]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	015b      	lsls	r3, r3, #5
 8004a88:	461c      	mov	r4, r3
 8004a8a:	89fa      	ldrh	r2, [r7, #14]
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	4413      	add	r3, r2
 8004a90:	4423      	add	r3, r4
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	440b      	add	r3, r1
 8004a96:	b282      	uxth	r2, r0
 8004a98:	801a      	strh	r2, [r3, #0]
 8004a9a:	e00c      	b.n	8004ab6 <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d109      	bne.n	8004ab6 <DrawChar+0x116>
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	89fb      	ldrh	r3, [r7, #14]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	89ba      	ldrh	r2, [r7, #12]
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fdd1 	bl	8004658 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	623b      	str	r3, [r7, #32]
 8004abc:	8b3b      	ldrh	r3, [r7, #24]
 8004abe:	6a3a      	ldr	r2, [r7, #32]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3ca      	bcc.n	8004a5a <DrawChar+0xba>
			}
		}
		Ypos++;
 8004ac4:	89bb      	ldrh	r3, [r7, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	3301      	adds	r3, #1
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad0:	8b7b      	ldrh	r3, [r7, #26]
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d38a      	bcc.n	80049ee <DrawChar+0x4e>
	}

	__CleanDCache();
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	372c      	adds	r7, #44	; 0x2c
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000388 	.word	0x20000388
 8004ae8:	2000037c 	.word	0x2000037c
 8004aec:	2000d20c 	.word	0x2000d20c

08004af0 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <LL_FillBuffer+0x68>)
 8004b00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004b04:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <LL_FillBuffer+0x68>)
 8004b08:	2202      	movs	r2, #2
 8004b0a:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 8004b0c:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <LL_FillBuffer+0x68>)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <LL_FillBuffer+0x68>)
 8004b14:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <LL_FillBuffer+0x6c>)
 8004b16:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004b18:	480f      	ldr	r0, [pc, #60]	; (8004b58 <LL_FillBuffer+0x68>)
 8004b1a:	f003 f9e9 	bl	8007ef0 <HAL_DMA2D_Init>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d115      	bne.n	8004b50 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8004b24:	2100      	movs	r1, #0
 8004b26:	480c      	ldr	r0, [pc, #48]	; (8004b58 <LL_FillBuffer+0x68>)
 8004b28:	f003 fc50 	bl	80083cc <HAL_DMA2D_ConfigLayer>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10e      	bne.n	8004b50 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	69b9      	ldr	r1, [r7, #24]
 8004b3c:	4806      	ldr	r0, [pc, #24]	; (8004b58 <LL_FillBuffer+0x68>)
 8004b3e:	f003 fa21 	bl	8007f84 <HAL_DMA2D_Start>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 8004b48:	210a      	movs	r1, #10
 8004b4a:	4803      	ldr	r0, [pc, #12]	; (8004b58 <LL_FillBuffer+0x68>)
 8004b4c:	f003 fa45 	bl	8007fda <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	2000d520 	.word	0x2000d520
 8004b5c:	4002b000 	.word	0x4002b000

08004b60 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	0c1b      	lsrs	r3, r3, #16
 8004b6c:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0a1b      	lsrs	r3, r3, #8
 8004b72:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8004b78:	7d7b      	ldrb	r3, [r7, #21]
 8004b7a:	08db      	lsrs	r3, r3, #3
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8004b86:	7dbb      	ldrb	r3, [r7, #22]
 8004b88:	089b      	lsrs	r3, r3, #2
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	015b      	lsls	r3, r3, #5
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004b94:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	08db      	lsrs	r3, r3, #3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	02db      	lsls	r3, r3, #11
 8004b9e:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8004ba0:	89fa      	ldrh	r2, [r7, #14]
 8004ba2:	8a3b      	ldrh	r3, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	8a7b      	ldrh	r3, [r7, #18]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	b29b      	uxth	r3, r3
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b090      	sub	sp, #64	; 0x40
 8004bc0:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bc6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004bc8:	23eb      	movs	r3, #235	; 0xeb
 8004bca:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004bcc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bd6:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004bdc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004be2:	230a      	movs	r3, #10
 8004be4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004bea:	2300      	movs	r3, #0
 8004bec:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004bfa:	463a      	mov	r2, r7
 8004bfc:	f107 0308 	add.w	r3, r7, #8
 8004c00:	4619      	mov	r1, r3
 8004c02:	4806      	ldr	r0, [pc, #24]	; (8004c1c <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8004c04:	f007 fac6 	bl	800c194 <HAL_QSPI_MemoryMapped>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3740      	adds	r7, #64	; 0x40
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	2000d62c 	.word	0x2000d62c

08004c20 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b090      	sub	sp, #64	; 0x40
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c2c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004c2e:	2366      	movs	r3, #102	; 0x66
 8004c30:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c46:	2300      	movs	r3, #0
 8004c48:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c4e:	f107 0308 	add.w	r3, r7, #8
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	4619      	mov	r1, r3
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f007 f88d 	bl	800bd78 <HAL_QSPI_Command>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e019      	b.n	8004c9c <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8004c68:	2399      	movs	r3, #153	; 0x99
 8004c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c6c:	f107 0308 	add.w	r3, r7, #8
 8004c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f007 f87e 	bl	800bd78 <HAL_QSPI_Command>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e00a      	b.n	8004c9c <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c86:	f241 3188 	movw	r1, #5000	; 0x1388
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f8c7 	bl	8004e1e <QSPI_AutoPollingMemReady>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3740      	adds	r7, #64	; 0x40
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b094      	sub	sp, #80	; 0x50
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8004cb2:	2385      	movs	r3, #133	; 0x85
 8004cb4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cd8:	f107 0310 	add.w	r3, r7, #16
 8004cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f007 f848 	bl	800bd78 <HAL_QSPI_Command>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e048      	b.n	8004d84 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cf2:	f107 030f 	add.w	r3, r7, #15
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f007 f930 	bl	800bf62 <HAL_QSPI_Receive>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e03b      	b.n	8004d84 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f83d 	bl	8004d8c <QSPI_WriteEnable>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e033      	b.n	8004d84 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004d1c:	2381      	movs	r3, #129	; 0x81
 8004d1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	b25b      	sxtb	r3, r3
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	b25a      	sxtb	r2, r3
 8004d2a:	23f0      	movs	r3, #240	; 0xf0
 8004d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d30:	fa93 f3a3 	rbit	r3, r3
 8004d34:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d38:	fab3 f383 	clz	r3, r3
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	4619      	mov	r1, r3
 8004d40:	230a      	movs	r3, #10
 8004d42:	408b      	lsls	r3, r1
 8004d44:	b25b      	sxtb	r3, r3
 8004d46:	4313      	orrs	r3, r2
 8004d48:	b25b      	sxtb	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d4e:	f107 0310 	add.w	r3, r7, #16
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4619      	mov	r1, r3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f007 f80d 	bl	800bd78 <HAL_QSPI_Command>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e00d      	b.n	8004d84 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d68:	f107 030f 	add.w	r3, r7, #15
 8004d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d70:	4619      	mov	r1, r3
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f007 f85e 	bl	800be34 <HAL_QSPI_Transmit>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3750      	adds	r7, #80	; 0x50
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b096      	sub	sp, #88	; 0x58
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d98:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004d9a:	2306      	movs	r3, #6
 8004d9c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004db2:	2300      	movs	r3, #0
 8004db4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004db6:	2300      	movs	r3, #0
 8004db8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004dba:	f107 0320 	add.w	r3, r7, #32
 8004dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f006 ffd7 	bl	800bd78 <HAL_QSPI_Command>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e020      	b.n	8004e16 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004de0:	2301      	movs	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004de4:	2310      	movs	r3, #16
 8004de6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004de8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004dec:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004dee:	2305      	movs	r3, #5
 8004df0:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004df8:	f107 0208 	add.w	r2, r7, #8
 8004dfc:	f107 0120 	add.w	r1, r7, #32
 8004e00:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f007 f94e 	bl	800c0a6 <HAL_QSPI_AutoPolling>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3758      	adds	r7, #88	; 0x58
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b096      	sub	sp, #88	; 0x58
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004e2e:	2305      	movs	r3, #5
 8004e30:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e3e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8004e54:	2301      	movs	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004e60:	2310      	movs	r3, #16
 8004e62:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004e64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e68:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004e6a:	f107 0208 	add.w	r2, r7, #8
 8004e6e:	f107 0120 	add.w	r1, r7, #32
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f007 f916 	bl	800c0a6 <HAL_QSPI_AutoPolling>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3758      	adds	r7, #88	; 0x58
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8004e9e:	887b      	ldrh	r3, [r7, #2]
 8004ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ea4:	d005      	beq.n	8004eb2 <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004ea6:	887b      	ldrh	r3, [r7, #2]
 8004ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eac:	d001      	beq.n	8004eb2 <start_Audio_Processing+0x22>
		Error_Handler();
 8004eae:	f7fd fef3 	bl	8002c98 <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8004eb2:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <start_Audio_Processing+0xb4>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	4a23      	ldr	r2, [pc, #140]	; (8004f44 <start_Audio_Processing+0xb4>)
 8004eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ebe:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <start_Audio_Processing+0xb4>)
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 8004eca:	2034      	movs	r0, #52	; 0x34
 8004ecc:	f001 fb7a 	bl	80065c4 <wm8994_ReadID>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f648 1294 	movw	r2, #35220	; 0x8994
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d001      	beq.n	8004ede <start_Audio_Processing+0x4e>
 8004eda:	f7fd fedd 	bl	8002c98 <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8004ede:	2034      	movs	r0, #52	; 0x34
 8004ee0:	f001 fcf2 	bl	80068c8 <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8004ee4:	887b      	ldrh	r3, [r7, #2]
 8004ee6:	f043 0302 	orr.w	r3, r3, #2
 8004eea:	b299      	uxth	r1, r3
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2264      	movs	r2, #100	; 0x64
 8004ef0:	2034      	movs	r0, #52	; 0x34
 8004ef2:	f000 fcad 	bl	8005850 <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 8004ef6:	887b      	ldrh	r3, [r7, #2]
 8004ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004efc:	d104      	bne.n	8004f08 <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 8004efe:	214b      	movs	r1, #75	; 0x4b
 8004f00:	2034      	movs	r0, #52	; 0x34
 8004f02:	f001 fb6f 	bl	80065e4 <wm8994_SetVolume>
 8004f06:	e007      	b.n	8004f18 <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004f08:	887b      	ldrh	r3, [r7, #2]
 8004f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0e:	d103      	bne.n	8004f18 <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 8004f10:	21c8      	movs	r1, #200	; 0xc8
 8004f12:	2034      	movs	r0, #52	; 0x34
 8004f14:	f001 fb66 	bl	80065e4 <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 8004f18:	2100      	movs	r1, #0
 8004f1a:	2034      	movs	r0, #52	; 0x34
 8004f1c:	f001 fc86 	bl	800682c <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	4807      	ldr	r0, [pc, #28]	; (8004f48 <start_Audio_Processing+0xb8>)
 8004f2a:	f009 fc93 	bl	800e854 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	4805      	ldr	r0, [pc, #20]	; (8004f4c <start_Audio_Processing+0xbc>)
 8004f38:	f009 fbdc 	bl	800e6f4 <HAL_SAI_Transmit_DMA>

}
 8004f3c:	bf00      	nop
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40023800 	.word	0x40023800
 8004f48:	2000cd6c 	.word	0x2000cd6c
 8004f4c:	2000cf98 	.word	0x2000cf98

08004f50 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <HAL_SAI_ErrorCallback+0x30>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d103      	bne.n	8004f90 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 8004f88:	4808      	ldr	r0, [pc, #32]	; (8004fac <HAL_SAI_ErrorCallback+0x34>)
 8004f8a:	f015 fa23 	bl	801a3d4 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8004f8e:	e006      	b.n	8004f9e <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a07      	ldr	r2, [pc, #28]	; (8004fb0 <HAL_SAI_ErrorCallback+0x38>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d102      	bne.n	8004f9e <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8004f98:	4806      	ldr	r0, [pc, #24]	; (8004fb4 <HAL_SAI_ErrorCallback+0x3c>)
 8004f9a:	f015 fa1b 	bl	801a3d4 <puts>
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2000cf98 	.word	0x2000cf98
 8004fac:	0801b6b4 	.word	0x0801b6b4
 8004fb0:	2000cd6c 	.word	0x2000cd6c
 8004fb4:	0801b6c4 	.word	0x0801b6c4

08004fb8 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004fc4:	4b2a      	ldr	r3, [pc, #168]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004fca:	4b29      	ldr	r3, [pc, #164]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004fcc:	2210      	movs	r2, #16
 8004fce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004fd0:	4b27      	ldr	r3, [pc, #156]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fe0:	4923      	ldr	r1, [pc, #140]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004fe2:	4824      	ldr	r0, [pc, #144]	; (8005074 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004fe4:	f00a feb3 	bl	800fd4e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f001 fcfb 	bl	80069e4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004fee:	4b20      	ldr	r3, [pc, #128]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004ff4:	4b1e      	ldr	r3, [pc, #120]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ffa:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005000:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005002:	2200      	movs	r2, #0
 8005004:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800500a:	4919      	ldr	r1, [pc, #100]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800500c:	4819      	ldr	r0, [pc, #100]	; (8005074 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 800500e:	f00a fe9e 	bl	800fd4e <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005012:	4b17      	ldr	r3, [pc, #92]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005014:	2203      	movs	r2, #3
 8005016:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005018:	4b15      	ldr	r3, [pc, #84]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800501a:	2210      	movs	r2, #16
 800501c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800501e:	4b14      	ldr	r3, [pc, #80]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005020:	2208      	movs	r2, #8
 8005022:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005024:	4b12      	ldr	r3, [pc, #72]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005026:	2200      	movs	r2, #0
 8005028:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800502a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800502e:	4910      	ldr	r1, [pc, #64]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005030:	4810      	ldr	r0, [pc, #64]	; (8005074 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005032:	f00a fe8c 	bl	800fd4e <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005036:	f44f 7308 	mov.w	r3, #544	; 0x220
 800503a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800503e:	2204      	movs	r2, #4
 8005040:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005044:	2210      	movs	r2, #16
 8005046:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800504a:	2201      	movs	r2, #1
 800504c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4a07      	ldr	r2, [pc, #28]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005052:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005058:	4905      	ldr	r1, [pc, #20]	; (8005070 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800505a:	4806      	ldr	r0, [pc, #24]	; (8005074 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 800505c:	f00a fe77 	bl	800fd4e <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4804      	ldr	r0, [pc, #16]	; (8005074 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005064:	f00a fe9e 	bl	800fda4 <HAL_SDRAM_ProgramRefreshRate>
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	2000038c 	.word	0x2000038c
 8005074:	2000d5f8 	.word	0x2000d5f8

08005078 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 800507c:	20c8      	movs	r0, #200	; 0xc8
 800507e:	f001 fcb1 	bl	80069e4 <HAL_Delay>

	TS_DisableIT();
 8005082:	f000 fab7 	bl	80055f4 <TS_DisableIT>

}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <TS_GetState>:
 * @brief  Returns status and positions of the touch screen.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t TS_GetState(TS_StateTypeDef *TS_State)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b096      	sub	sp, #88	; 0x58
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
	static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
	uint8_t ts_status = TS_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint16_t brute_x[TS_MAX_NB_TOUCH];
	uint16_t brute_y[TS_MAX_NB_TOUCH];
	uint16_t x_diff;
	uint16_t y_diff;
	uint32_t index;
	uint32_t weight = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	61bb      	str	r3, [r7, #24]
	uint32_t area = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
	uint32_t event = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	613b      	str	r3, [r7, #16]

	/* Read register FT5336_TD_STAT_REG to check number of touches detection */
	volatile uint8_t nbTouch = TS_I2C_Read(FT5336_TD_STAT_REG) & FT5336_TD_STAT_MASK;
 80050a6:	2002      	movs	r0, #2
 80050a8:	f7ff f9f6 	bl	8004498 <TS_I2C_Read>
 80050ac:	4603      	mov	r3, r0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	73fb      	strb	r3, [r7, #15]

	if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH){
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b05      	cmp	r3, #5
 80050be:	d901      	bls.n	80050c4 <TS_GetState+0x38>
		/* If invalid number of touch detected, set it to zero */
		nbTouch = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	73fb      	strb	r3, [r7, #15]
	}

	/* Update current number of active touches */
	currActiveTouchNb = nbTouch;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	4b95      	ldr	r3, [pc, #596]	; (8005320 <TS_GetState+0x294>)
 80050ca:	701a      	strb	r2, [r3, #0]

	/* Reset current active touch index on which to work on */
	currActiveTouchIdx = 0;
 80050cc:	4b95      	ldr	r3, [pc, #596]	; (8005324 <TS_GetState+0x298>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]

	/* Check and update the number of touches active detected */
	TS_State->touchDetected = nbTouch; // ft5336_TS_DetectTouch();
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	701a      	strb	r2, [r3, #0]

	if(TS_State->touchDetected)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 8118 	beq.w	8005314 <TS_GetState+0x288>
	{
		for(index=0; index < TS_State->touchDetected; index++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	653b      	str	r3, [r7, #80]	; 0x50
 80050e8:	e107      	b.n	80052fa <TS_GetState+0x26e>
		{
			/* Get each touch coordinates */
			TS_GetXY(&(brute_x[index]), &(brute_y[index]));
 80050ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80050ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	18d0      	adds	r0, r2, r3
 80050f4:	f107 021c 	add.w	r2, r7, #28
 80050f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	4413      	add	r3, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	f000 f990 	bl	8005424 <TS_GetXY>
				y[index] = 4096 - brute_y[index];
			}

			if(TS_ORIENTATION & TS_SWAP_XY)
			{
				y[index] = brute_x[index];
 8005104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800510c:	4413      	add	r3, r2
 800510e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800511a:	440b      	add	r3, r1
 800511c:	f823 2c24 	strh.w	r2, [r3, #-36]
				x[index] = brute_y[index];
 8005120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005128:	4413      	add	r3, r2
 800512a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800512e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005136:	440b      	add	r3, r1
 8005138:	f823 2c18 	strh.w	r2, [r3, #-24]
			}

			x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800513c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005144:	4413      	add	r3, r2
 8005146:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800514a:	4619      	mov	r1, r3
 800514c:	4a76      	ldr	r2, [pc, #472]	; (8005328 <TS_GetState+0x29c>)
 800514e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005154:	4299      	cmp	r1, r3
 8005156:	d90e      	bls.n	8005176 <TS_GetState+0xea>
 8005158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005160:	4413      	add	r3, r2
 8005162:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8005166:	4970      	ldr	r1, [pc, #448]	; (8005328 <TS_GetState+0x29c>)
 8005168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800516e:	b29b      	uxth	r3, r3
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	b29b      	uxth	r3, r3
 8005174:	e00d      	b.n	8005192 <TS_GetState+0x106>
 8005176:	4a6c      	ldr	r2, [pc, #432]	; (8005328 <TS_GetState+0x29c>)
 8005178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800517a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800517e:	b29a      	uxth	r2, r3
 8005180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005188:	440b      	add	r3, r1
 800518a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	b29b      	uxth	r3, r3
 8005192:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800519e:	4413      	add	r3, r2
 80051a0:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80051a4:	4619      	mov	r1, r3
 80051a6:	4a61      	ldr	r2, [pc, #388]	; (800532c <TS_GetState+0x2a0>)
 80051a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ae:	4299      	cmp	r1, r3
 80051b0:	d90e      	bls.n	80051d0 <TS_GetState+0x144>
 80051b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80051ba:	4413      	add	r3, r2
 80051bc:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80051c0:	495a      	ldr	r1, [pc, #360]	; (800532c <TS_GetState+0x2a0>)
 80051c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	e00d      	b.n	80051ec <TS_GetState+0x160>
 80051d0:	4a56      	ldr	r2, [pc, #344]	; (800532c <TS_GetState+0x2a0>)
 80051d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80051e2:	440b      	add	r3, r1
 80051e4:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			if ((x_diff + y_diff) > 5)
 80051f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80051f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80051f8:	4413      	add	r3, r2
 80051fa:	2b05      	cmp	r3, #5
 80051fc:	dd17      	ble.n	800522e <TS_GetState+0x1a2>
			{
				_x[index] = x[index];
 80051fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005206:	4413      	add	r3, r2
 8005208:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800520c:	4619      	mov	r1, r3
 800520e:	4a46      	ldr	r2, [pc, #280]	; (8005328 <TS_GetState+0x29c>)
 8005210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				_y[index] = y[index];
 8005216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800521e:	4413      	add	r3, r2
 8005220:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005224:	4619      	mov	r1, r3
 8005226:	4a41      	ldr	r2, [pc, #260]	; (800532c <TS_GetState+0x2a0>)
 8005228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			TS_State->touchX[index] = x[index];
 800522e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005236:	4413      	add	r3, r2
 8005238:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	460a      	mov	r2, r1
 8005246:	805a      	strh	r2, [r3, #2]
			TS_State->touchY[index] = y[index];
 8005248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005250:	4413      	add	r3, r2
 8005252:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525a:	3304      	adds	r3, #4
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	4413      	add	r3, r2
 8005260:	460a      	mov	r2, r1
 8005262:	809a      	strh	r2, [r3, #4]

			/* Get touch info related to the current touch */
			TS_GetTouchInfo(index, &weight, &area, &event);
 8005264:	f107 0310 	add.w	r3, r7, #16
 8005268:	f107 0214 	add.w	r2, r7, #20
 800526c:	f107 0118 	add.w	r1, r7, #24
 8005270:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005272:	f000 f9cf 	bl	8005614 <TS_GetTouchInfo>

			/* Update TS_State structure */
			TS_State->touchWeight[index] = weight;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	b2d9      	uxtb	r1, r3
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800527e:	4413      	add	r3, r2
 8005280:	3316      	adds	r3, #22
 8005282:	460a      	mov	r2, r1
 8005284:	701a      	strb	r2, [r3, #0]
			TS_State->touchArea[index]   = area;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	b2d9      	uxtb	r1, r3
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528e:	4413      	add	r3, r2
 8005290:	3320      	adds	r3, #32
 8005292:	460a      	mov	r2, r1
 8005294:	701a      	strb	r2, [r3, #0]

			/* Remap touch event */
			switch(event)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d827      	bhi.n	80052ec <TS_GetState+0x260>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <TS_GetState+0x218>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052c3 	.word	0x080052c3
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052df 	.word	0x080052df
			{
			case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
				TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b8:	4413      	add	r3, r2
 80052ba:	331b      	adds	r3, #27
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
				break;
 80052c0:	e018      	b.n	80052f4 <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
				TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c6:	4413      	add	r3, r2
 80052c8:	331b      	adds	r3, #27
 80052ca:	2202      	movs	r2, #2
 80052cc:	701a      	strb	r2, [r3, #0]
				break;
 80052ce:	e011      	b.n	80052f4 <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_CONTACT :
				TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d4:	4413      	add	r3, r2
 80052d6:	331b      	adds	r3, #27
 80052d8:	2203      	movs	r2, #3
 80052da:	701a      	strb	r2, [r3, #0]
				break;
 80052dc:	e00a      	b.n	80052f4 <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
				TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e2:	4413      	add	r3, r2
 80052e4:	331b      	adds	r3, #27
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
				break;
 80052ea:	e003      	b.n	80052f4 <TS_GetState+0x268>
			default :
				ts_status = TS_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80052f2:	bf00      	nop
		for(index=0; index < TS_State->touchDetected; index++)
 80052f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f6:	3301      	adds	r3, #1
 80052f8:	653b      	str	r3, [r7, #80]	; 0x50
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005302:	4293      	cmp	r3, r2
 8005304:	f4ff aef1 	bcc.w	80050ea <TS_GetState+0x5e>


		} /* of for(index=0; index < TS_State->touchDetected; index++) */

		/* Get gesture Id */
		ts_status = TS_Get_GestureId(TS_State);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f811 	bl	8005330 <TS_Get_GestureId>
 800530e:	4603      	mov	r3, r0
 8005310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	} /* end of if(TS_State->touchDetected != 0) */

	return (ts_status);
 8005314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8005318:	4618      	mov	r0, r3
 800531a:	3758      	adds	r7, #88	; 0x58
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	2000039c 	.word	0x2000039c
 8005324:	2000039d 	.word	0x2000039d
 8005328:	200003a0 	.word	0x200003a0
 800532c:	200003b4 	.word	0x200003b4

08005330 <TS_Get_GestureId>:
 * @brief  Update gesture Id following a touch detected.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	uint32_t gestureId = TS_I2C_Read(FT5336_GEST_ID_REG);
 8005338:	2001      	movs	r0, #1
 800533a:	f7ff f8ad 	bl	8004498 <TS_I2C_Read>
 800533e:	4603      	mov	r3, r0
 8005340:	60fb      	str	r3, [r7, #12]

	//ft5336_TS_GetGestureID(&gestureId);

	/* Remap gesture Id to a TS_GestureIdTypeDef value */
	switch(gestureId)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b49      	cmp	r3, #73	; 0x49
 8005346:	d061      	beq.n	800540c <TS_Get_GestureId+0xdc>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b49      	cmp	r3, #73	; 0x49
 800534c:	d862      	bhi.n	8005414 <TS_Get_GestureId+0xe4>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b1c      	cmp	r3, #28
 8005352:	d83f      	bhi.n	80053d4 <TS_Get_GestureId+0xa4>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b1c      	cmp	r3, #28
 8005358:	d85c      	bhi.n	8005414 <TS_Get_GestureId+0xe4>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <TS_Get_GestureId+0x30>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	080053dd 	.word	0x080053dd
 8005364:	08005415 	.word	0x08005415
 8005368:	08005415 	.word	0x08005415
 800536c:	08005415 	.word	0x08005415
 8005370:	08005415 	.word	0x08005415
 8005374:	08005415 	.word	0x08005415
 8005378:	08005415 	.word	0x08005415
 800537c:	08005415 	.word	0x08005415
 8005380:	08005415 	.word	0x08005415
 8005384:	08005415 	.word	0x08005415
 8005388:	08005415 	.word	0x08005415
 800538c:	08005415 	.word	0x08005415
 8005390:	08005415 	.word	0x08005415
 8005394:	08005415 	.word	0x08005415
 8005398:	08005415 	.word	0x08005415
 800539c:	08005415 	.word	0x08005415
 80053a0:	080053e5 	.word	0x080053e5
 80053a4:	08005415 	.word	0x08005415
 80053a8:	08005415 	.word	0x08005415
 80053ac:	08005415 	.word	0x08005415
 80053b0:	080053ed 	.word	0x080053ed
 80053b4:	08005415 	.word	0x08005415
 80053b8:	08005415 	.word	0x08005415
 80053bc:	08005415 	.word	0x08005415
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	08005415 	.word	0x08005415
 80053c8:	08005415 	.word	0x08005415
 80053cc:	08005415 	.word	0x08005415
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	d014      	beq.n	8005404 <TS_Get_GestureId+0xd4>
 80053da:	e01b      	b.n	8005414 <TS_Get_GestureId+0xe4>
	{
	case FT5336_GEST_ID_NO_GESTURE :
		TS_State->gestureId = GEST_ID_NO_GESTURE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80053e2:	e019      	b.n	8005418 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_UP :
		TS_State->gestureId = GEST_ID_MOVE_UP;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80053ea:	e015      	b.n	8005418 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_RIGHT :
		TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80053f2:	e011      	b.n	8005418 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_DOWN :
		TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2203      	movs	r2, #3
 80053f8:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80053fa:	e00d      	b.n	8005418 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_LEFT :
		TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2204      	movs	r2, #4
 8005400:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005402:	e009      	b.n	8005418 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_ZOOM_IN :
		TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2205      	movs	r2, #5
 8005408:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 800540a:	e005      	b.n	8005418 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_ZOOM_OUT :
		TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2206      	movs	r2, #6
 8005410:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005412:	e001      	b.n	8005418 <TS_Get_GestureId+0xe8>
	default :
		return TS_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <TS_Get_GestureId+0xea>
	} /* of switch(gestureId) */

	return TS_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop

08005424 <TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
static void TS_GetXY(uint16_t *X, uint16_t *Y)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  volatile uint8_t ucReadData = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	72fb      	strb	r3, [r7, #11]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  uint8_t regAddressXHigh = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	73bb      	strb	r3, [r7, #14]
  uint8_t regAddressYLow = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	737b      	strb	r3, [r7, #13]
  uint8_t regAddressYHigh = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	733b      	strb	r3, [r7, #12]

  if(currActiveTouchIdx < currActiveTouchNb)
 8005442:	4b69      	ldr	r3, [pc, #420]	; (80055e8 <TS_GetXY+0x1c4>)
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	4b69      	ldr	r3, [pc, #420]	; (80055ec <TS_GetXY+0x1c8>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	f080 80c7 	bcs.w	80055de <TS_GetXY+0x1ba>
  {
    switch(currActiveTouchIdx)
 8005450:	4b65      	ldr	r3, [pc, #404]	; (80055e8 <TS_GetXY+0x1c4>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b09      	cmp	r3, #9
 8005456:	d871      	bhi.n	800553c <TS_GetXY+0x118>
 8005458:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <TS_GetXY+0x3c>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005489 	.word	0x08005489
 8005464:	0800549b 	.word	0x0800549b
 8005468:	080054ad 	.word	0x080054ad
 800546c:	080054bf 	.word	0x080054bf
 8005470:	080054d1 	.word	0x080054d1
 8005474:	080054e3 	.word	0x080054e3
 8005478:	080054f5 	.word	0x080054f5
 800547c:	08005507 	.word	0x08005507
 8005480:	08005519 	.word	0x08005519
 8005484:	0800552b 	.word	0x0800552b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8005488:	2304      	movs	r3, #4
 800548a:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P1_XH_REG;
 800548c:	2303      	movs	r3, #3
 800548e:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P1_YL_REG;
 8005490:	2306      	movs	r3, #6
 8005492:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P1_YH_REG;
 8005494:	2305      	movs	r3, #5
 8005496:	733b      	strb	r3, [r7, #12]
      break;
 8005498:	e051      	b.n	800553e <TS_GetXY+0x11a>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800549a:	230a      	movs	r3, #10
 800549c:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P2_XH_REG;
 800549e:	2309      	movs	r3, #9
 80054a0:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P2_YL_REG;
 80054a2:	230c      	movs	r3, #12
 80054a4:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P2_YH_REG;
 80054a6:	230b      	movs	r3, #11
 80054a8:	733b      	strb	r3, [r7, #12]
      break;
 80054aa:	e048      	b.n	800553e <TS_GetXY+0x11a>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80054ac:	2310      	movs	r3, #16
 80054ae:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P3_XH_REG;
 80054b0:	230f      	movs	r3, #15
 80054b2:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P3_YL_REG;
 80054b4:	2312      	movs	r3, #18
 80054b6:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P3_YH_REG;
 80054b8:	2311      	movs	r3, #17
 80054ba:	733b      	strb	r3, [r7, #12]
      break;
 80054bc:	e03f      	b.n	800553e <TS_GetXY+0x11a>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80054be:	2316      	movs	r3, #22
 80054c0:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P4_XH_REG;
 80054c2:	2315      	movs	r3, #21
 80054c4:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P4_YL_REG;
 80054c6:	2318      	movs	r3, #24
 80054c8:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P4_YH_REG;
 80054ca:	2317      	movs	r3, #23
 80054cc:	733b      	strb	r3, [r7, #12]
      break;
 80054ce:	e036      	b.n	800553e <TS_GetXY+0x11a>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80054d0:	231c      	movs	r3, #28
 80054d2:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P5_XH_REG;
 80054d4:	231b      	movs	r3, #27
 80054d6:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P5_YL_REG;
 80054d8:	231e      	movs	r3, #30
 80054da:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P5_YH_REG;
 80054dc:	231d      	movs	r3, #29
 80054de:	733b      	strb	r3, [r7, #12]
      break;
 80054e0:	e02d      	b.n	800553e <TS_GetXY+0x11a>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80054e2:	2322      	movs	r3, #34	; 0x22
 80054e4:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P6_XH_REG;
 80054e6:	2321      	movs	r3, #33	; 0x21
 80054e8:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P6_YL_REG;
 80054ea:	2324      	movs	r3, #36	; 0x24
 80054ec:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P6_YH_REG;
 80054ee:	2323      	movs	r3, #35	; 0x23
 80054f0:	733b      	strb	r3, [r7, #12]
      break;
 80054f2:	e024      	b.n	800553e <TS_GetXY+0x11a>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80054f4:	2328      	movs	r3, #40	; 0x28
 80054f6:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P7_XH_REG;
 80054f8:	2327      	movs	r3, #39	; 0x27
 80054fa:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P7_YL_REG;
 80054fc:	232a      	movs	r3, #42	; 0x2a
 80054fe:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P7_YH_REG;
 8005500:	2329      	movs	r3, #41	; 0x29
 8005502:	733b      	strb	r3, [r7, #12]
      break;
 8005504:	e01b      	b.n	800553e <TS_GetXY+0x11a>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8005506:	232e      	movs	r3, #46	; 0x2e
 8005508:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P8_XH_REG;
 800550a:	232d      	movs	r3, #45	; 0x2d
 800550c:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P8_YL_REG;
 800550e:	2330      	movs	r3, #48	; 0x30
 8005510:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P8_YH_REG;
 8005512:	232f      	movs	r3, #47	; 0x2f
 8005514:	733b      	strb	r3, [r7, #12]
      break;
 8005516:	e012      	b.n	800553e <TS_GetXY+0x11a>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8005518:	2334      	movs	r3, #52	; 0x34
 800551a:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P9_XH_REG;
 800551c:	2333      	movs	r3, #51	; 0x33
 800551e:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P9_YL_REG;
 8005520:	2336      	movs	r3, #54	; 0x36
 8005522:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P9_YH_REG;
 8005524:	2335      	movs	r3, #53	; 0x35
 8005526:	733b      	strb	r3, [r7, #12]
      break;
 8005528:	e009      	b.n	800553e <TS_GetXY+0x11a>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800552a:	233a      	movs	r3, #58	; 0x3a
 800552c:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P10_XH_REG;
 800552e:	2339      	movs	r3, #57	; 0x39
 8005530:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P10_YL_REG;
 8005532:	233c      	movs	r3, #60	; 0x3c
 8005534:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P10_YH_REG;
 8005536:	233b      	movs	r3, #59	; 0x3b
 8005538:	733b      	strb	r3, [r7, #12]
      break;
 800553a:	e000      	b.n	800553e <TS_GetXY+0x11a>

    default :
      break;
 800553c:	bf00      	nop

    } /* end switch(currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_I2C_Read(regAddressXLow);
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe ffa9 	bl	8004498 <TS_I2C_Read>
 8005546:	4603      	mov	r3, r0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	72fb      	strb	r3, [r7, #11]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800554c:	7afb      	ldrb	r3, [r7, #11]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	b29a      	uxth	r2, r3
 8005552:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <TS_GetXY+0x1cc>)
 8005554:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_I2C_Read(regAddressXHigh);
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	4618      	mov	r0, r3
 800555a:	f7fe ff9d 	bl	8004498 <TS_I2C_Read>
 800555e:	4603      	mov	r3, r0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	72fb      	strb	r3, [r7, #11]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005564:	7afb      	ldrb	r3, [r7, #11]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800556e:	b21a      	sxth	r2, r3
 8005570:	4b1f      	ldr	r3, [pc, #124]	; (80055f0 <TS_GetXY+0x1cc>)
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b21b      	sxth	r3, r3
 8005576:	4313      	orrs	r3, r2
 8005578:	b21b      	sxth	r3, r3
 800557a:	b29a      	uxth	r2, r3
 800557c:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <TS_GetXY+0x1cc>)
 800557e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8005580:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <TS_GetXY+0x1cc>)
 8005582:	881a      	ldrh	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_I2C_Read(regAddressYLow);
 8005588:	7b7b      	ldrb	r3, [r7, #13]
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe ff84 	bl	8004498 <TS_I2C_Read>
 8005590:	4603      	mov	r3, r0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	72fb      	strb	r3, [r7, #11]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	b29a      	uxth	r2, r3
 800559c:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <TS_GetXY+0x1cc>)
 800559e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_I2C_Read(regAddressYHigh);
 80055a0:	7b3b      	ldrb	r3, [r7, #12]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe ff78 	bl	8004498 <TS_I2C_Read>
 80055a8:	4603      	mov	r3, r0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	72fb      	strb	r3, [r7, #11]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80055ae:	7afb      	ldrb	r3, [r7, #11]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055b8:	b21a      	sxth	r2, r3
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <TS_GetXY+0x1cc>)
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b21b      	sxth	r3, r3
 80055c0:	4313      	orrs	r3, r2
 80055c2:	b21b      	sxth	r3, r3
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <TS_GetXY+0x1cc>)
 80055c8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <TS_GetXY+0x1cc>)
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	801a      	strh	r2, [r3, #0]

    currActiveTouchIdx++; /* next call will work on next touch */
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <TS_GetXY+0x1c4>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <TS_GetXY+0x1c4>)
 80055dc:	701a      	strb	r2, [r3, #0]

  } /* of if(currActiveTouchIdx < currActiveTouchNb) */
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	2000039d 	.word	0x2000039d
 80055ec:	2000039c 	.word	0x2000039c
 80055f0:	200003c8 	.word	0x200003c8

080055f4 <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80055fe:	2300      	movs	r3, #0
 8005600:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	4619      	mov	r1, r3
 8005606:	20a4      	movs	r0, #164	; 0xa4
 8005608:	f7fe ff2c 	bl	8004464 <TS_I2C_Write>
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <TS_GetTouchInfo>:
  * @param  pEvent  : Pointer to to get the event information of 'touchIdx'.

  * @retval None.
  */
static void TS_GetTouchInfo(uint32_t   touchIdx, uint32_t * pWeight, uint32_t * pArea, uint32_t * pEvent)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  volatile uint8_t ucReadData = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	757b      	strb	r3, [r7, #21]

  if(touchIdx < currActiveTouchNb)
 8005632:	4b4a      	ldr	r3, [pc, #296]	; (800575c <TS_GetTouchInfo+0x148>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4293      	cmp	r3, r2
 800563c:	f080 8089 	bcs.w	8005752 <TS_GetTouchInfo+0x13e>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b09      	cmp	r3, #9
 8005644:	d85c      	bhi.n	8005700 <TS_GetTouchInfo+0xec>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <TS_GetTouchInfo+0x38>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005675 	.word	0x08005675
 8005650:	08005683 	.word	0x08005683
 8005654:	08005691 	.word	0x08005691
 8005658:	0800569f 	.word	0x0800569f
 800565c:	080056ad 	.word	0x080056ad
 8005660:	080056bb 	.word	0x080056bb
 8005664:	080056c9 	.word	0x080056c9
 8005668:	080056d7 	.word	0x080056d7
 800566c:	080056e5 	.word	0x080056e5
 8005670:	080056f3 	.word	0x080056f3
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8005674:	2303      	movs	r3, #3
 8005676:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8005678:	2307      	movs	r3, #7
 800567a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800567c:	2308      	movs	r3, #8
 800567e:	757b      	strb	r3, [r7, #21]
      break;
 8005680:	e03f      	b.n	8005702 <TS_GetTouchInfo+0xee>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8005682:	2309      	movs	r3, #9
 8005684:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8005686:	230d      	movs	r3, #13
 8005688:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800568a:	230e      	movs	r3, #14
 800568c:	757b      	strb	r3, [r7, #21]
      break;
 800568e:	e038      	b.n	8005702 <TS_GetTouchInfo+0xee>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8005690:	230f      	movs	r3, #15
 8005692:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8005694:	2313      	movs	r3, #19
 8005696:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8005698:	2314      	movs	r3, #20
 800569a:	757b      	strb	r3, [r7, #21]
      break;
 800569c:	e031      	b.n	8005702 <TS_GetTouchInfo+0xee>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800569e:	2315      	movs	r3, #21
 80056a0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80056a2:	2319      	movs	r3, #25
 80056a4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80056a6:	231a      	movs	r3, #26
 80056a8:	757b      	strb	r3, [r7, #21]
      break;
 80056aa:	e02a      	b.n	8005702 <TS_GetTouchInfo+0xee>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80056ac:	231b      	movs	r3, #27
 80056ae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80056b0:	231f      	movs	r3, #31
 80056b2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80056b4:	2320      	movs	r3, #32
 80056b6:	757b      	strb	r3, [r7, #21]
      break;
 80056b8:	e023      	b.n	8005702 <TS_GetTouchInfo+0xee>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80056ba:	2321      	movs	r3, #33	; 0x21
 80056bc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80056be:	2325      	movs	r3, #37	; 0x25
 80056c0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80056c2:	2326      	movs	r3, #38	; 0x26
 80056c4:	757b      	strb	r3, [r7, #21]
      break;
 80056c6:	e01c      	b.n	8005702 <TS_GetTouchInfo+0xee>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80056c8:	2327      	movs	r3, #39	; 0x27
 80056ca:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80056cc:	232b      	movs	r3, #43	; 0x2b
 80056ce:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80056d0:	232c      	movs	r3, #44	; 0x2c
 80056d2:	757b      	strb	r3, [r7, #21]
      break;
 80056d4:	e015      	b.n	8005702 <TS_GetTouchInfo+0xee>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80056d6:	232d      	movs	r3, #45	; 0x2d
 80056d8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80056da:	2331      	movs	r3, #49	; 0x31
 80056dc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80056de:	2332      	movs	r3, #50	; 0x32
 80056e0:	757b      	strb	r3, [r7, #21]
      break;
 80056e2:	e00e      	b.n	8005702 <TS_GetTouchInfo+0xee>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80056e4:	2333      	movs	r3, #51	; 0x33
 80056e6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80056e8:	2337      	movs	r3, #55	; 0x37
 80056ea:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80056ec:	2338      	movs	r3, #56	; 0x38
 80056ee:	757b      	strb	r3, [r7, #21]
      break;
 80056f0:	e007      	b.n	8005702 <TS_GetTouchInfo+0xee>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80056f2:	2339      	movs	r3, #57	; 0x39
 80056f4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80056f6:	233d      	movs	r3, #61	; 0x3d
 80056f8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80056fa:	233e      	movs	r3, #62	; 0x3e
 80056fc:	757b      	strb	r3, [r7, #21]
      break;
 80056fe:	e000      	b.n	8005702 <TS_GetTouchInfo+0xee>

    default :
      break;
 8005700:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_I2C_Read(regAddressXHigh);
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe fec7 	bl	8004498 <TS_I2C_Read>
 800570a:	4603      	mov	r3, r0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8005710:	7d3b      	ldrb	r3, [r7, #20]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	119b      	asrs	r3, r3, #6
 8005716:	f003 0203 	and.w	r2, r3, #3
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_I2C_Read(regAddressPWeight);
 800571e:	7dbb      	ldrb	r3, [r7, #22]
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe feb9 	bl	8004498 <TS_I2C_Read>
 8005726:	4603      	mov	r3, r0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800572c:	7d3b      	ldrb	r3, [r7, #20]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_I2C_Read(regAddressPMisc);
 8005736:	7d7b      	ldrb	r3, [r7, #21]
 8005738:	4618      	mov	r0, r3
 800573a:	f7fe fead 	bl	8004498 <TS_I2C_Read>
 800573e:	4603      	mov	r3, r0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8005744:	7d3b      	ldrb	r3, [r7, #20]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	111b      	asrs	r3, r3, #4
 800574a:	f003 0204 	and.w	r2, r3, #4
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < currActiveTouchNb) */
}
 8005752:	bf00      	nop
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	2000039c 	.word	0x2000039c

08005760 <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 8005766:	f001 fcfd 	bl	8007164 <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800576a:	2301      	movs	r3, #1
 800576c:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 800576e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8005772:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8005774:	231b      	movs	r3, #27
 8005776:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005778:	2303      	movs	r3, #3
 800577a:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800577c:	2300      	movs	r3, #0
 800577e:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005780:	2300      	movs	r3, #0
 8005782:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005784:	2300      	movs	r3, #0
 8005786:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8005788:	2302      	movs	r3, #2
 800578a:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800578c:	2300      	movs	r3, #0
 800578e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8005790:	2300      	movs	r3, #0
 8005792:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005794:	2300      	movs	r3, #0
 8005796:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005798:	463b      	mov	r3, r7
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fd1a 	bl	80071d4 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 80057a4:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80057a8:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80057aa:	2317      	movs	r3, #23
 80057ac:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80057ae:	2303      	movs	r3, #3
 80057b0:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80057be:	2303      	movs	r3, #3
 80057c0:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80057c6:	2300      	movs	r3, #0
 80057c8:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80057ce:	463b      	mov	r3, r7
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 fcff 	bl	80071d4 <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80057d6:	2301      	movs	r3, #1
 80057d8:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 80057da:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80057de:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80057e0:	2316      	movs	r3, #22
 80057e2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80057e4:	2303      	movs	r3, #3
 80057e6:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80057f0:	2301      	movs	r3, #1
 80057f2:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80057fc:	2300      	movs	r3, #0
 80057fe:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005800:	2301      	movs	r3, #1
 8005802:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005804:	463b      	mov	r3, r7
 8005806:	4618      	mov	r0, r3
 8005808:	f001 fce4 	bl	80071d4 <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800580c:	2301      	movs	r3, #1
 800580e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 8005810:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005814:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8005816:	2312      	movs	r3, #18
 8005818:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800581a:	2303      	movs	r3, #3
 800581c:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005822:	2300      	movs	r3, #0
 8005824:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005826:	2300      	movs	r3, #0
 8005828:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800582a:	2301      	movs	r3, #1
 800582c:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800582e:	2300      	movs	r3, #0
 8005830:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8005832:	2300      	movs	r3, #0
 8005834:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005836:	2300      	movs	r3, #0
 8005838:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800583a:	463b      	mov	r3, r7
 800583c:	4618      	mov	r0, r3
 800583e:	f001 fcc9 	bl	80071d4 <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005842:	2004      	movs	r0, #4
 8005844:	f001 fca6 	bl	8007194 <HAL_MPU_Enable>

}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	607b      	str	r3, [r7, #4]
 8005858:	4603      	mov	r3, r0
 800585a:	81fb      	strh	r3, [r7, #14]
 800585c:	460b      	mov	r3, r1
 800585e:	81bb      	strh	r3, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8005868:	89bb      	ldrh	r3, [r7, #12]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800586e:	89bb      	ldrh	r3, [r7, #12]
 8005870:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005874:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800587a:	89fb      	ldrh	r3, [r7, #14]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2203      	movs	r2, #3
 8005880:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005884:	4618      	mov	r0, r3
 8005886:	f001 f83f 	bl	8006908 <CODEC_IO_Write>
 800588a:	4603      	mov	r3, r0
 800588c:	461a      	mov	r2, r3
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8005894:	89fb      	ldrh	r3, [r7, #14]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2200      	movs	r2, #0
 800589a:	f640 0117 	movw	r1, #2071	; 0x817
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 f832 	bl	8006908 <CODEC_IO_Write>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80058ae:	89fb      	ldrh	r3, [r7, #14]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2200      	movs	r2, #0
 80058b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 f825 	bl	8006908 <CODEC_IO_Write>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80058c8:	89fb      	ldrh	r3, [r7, #14]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	226c      	movs	r2, #108	; 0x6c
 80058ce:	2139      	movs	r1, #57	; 0x39
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 f819 	bl	8006908 <CODEC_IO_Write>
 80058d6:	4603      	mov	r3, r0
 80058d8:	461a      	mov	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4413      	add	r3, r2
 80058de:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80058e0:	8afb      	ldrh	r3, [r7, #22]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00c      	beq.n	8005900 <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80058e6:	89fb      	ldrh	r3, [r7, #14]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2213      	movs	r2, #19
 80058ec:	2101      	movs	r1, #1
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 f80a 	bl	8006908 <CODEC_IO_Write>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	e00b      	b.n	8005918 <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8005900:	89fb      	ldrh	r3, [r7, #14]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2203      	movs	r2, #3
 8005906:	2101      	movs	r1, #1
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fffd 	bl	8006908 <CODEC_IO_Write>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 8005918:	2032      	movs	r0, #50	; 0x32
 800591a:	f001 f863 	bl	80069e4 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800591e:	8b3b      	ldrh	r3, [r7, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 815f 	beq.w	8005be4 <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 8005926:	4bae      	ldr	r3, [pc, #696]	; (8005be0 <wm8994_Init+0x390>)
 8005928:	2201      	movs	r2, #1
 800592a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 800592c:	8b3b      	ldrh	r3, [r7, #24]
 800592e:	2b03      	cmp	r3, #3
 8005930:	f000 808c 	beq.w	8005a4c <wm8994_Init+0x1fc>
 8005934:	2b03      	cmp	r3, #3
 8005936:	f300 8111 	bgt.w	8005b5c <wm8994_Init+0x30c>
 800593a:	2b01      	cmp	r3, #1
 800593c:	d002      	beq.n	8005944 <wm8994_Init+0xf4>
 800593e:	2b02      	cmp	r3, #2
 8005940:	d042      	beq.n	80059c8 <wm8994_Init+0x178>
 8005942:	e10b      	b.n	8005b5c <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005944:	89fb      	ldrh	r3, [r7, #14]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f640 420c 	movw	r2, #3084	; 0xc0c
 800594c:	2105      	movs	r1, #5
 800594e:	4618      	mov	r0, r3
 8005950:	f000 ffda 	bl	8006908 <CODEC_IO_Write>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800595e:	89fb      	ldrh	r3, [r7, #14]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2200      	movs	r2, #0
 8005964:	f240 6101 	movw	r1, #1537	; 0x601
 8005968:	4618      	mov	r0, r3
 800596a:	f000 ffcd 	bl	8006908 <CODEC_IO_Write>
 800596e:	4603      	mov	r3, r0
 8005970:	461a      	mov	r2, r3
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8005978:	89fb      	ldrh	r3, [r7, #14]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2200      	movs	r2, #0
 800597e:	f240 6102 	movw	r1, #1538	; 0x602
 8005982:	4618      	mov	r0, r3
 8005984:	f000 ffc0 	bl	8006908 <CODEC_IO_Write>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005992:	89fb      	ldrh	r3, [r7, #14]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2202      	movs	r2, #2
 8005998:	f240 6104 	movw	r1, #1540	; 0x604
 800599c:	4618      	mov	r0, r3
 800599e:	f000 ffb3 	bl	8006908 <CODEC_IO_Write>
 80059a2:	4603      	mov	r3, r0
 80059a4:	461a      	mov	r2, r3
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80059ac:	89fb      	ldrh	r3, [r7, #14]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2202      	movs	r2, #2
 80059b2:	f240 6105 	movw	r1, #1541	; 0x605
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 ffa6 	bl	8006908 <CODEC_IO_Write>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	61fb      	str	r3, [r7, #28]
      break;
 80059c6:	e110      	b.n	8005bea <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80059c8:	89fb      	ldrh	r3, [r7, #14]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f240 3203 	movw	r2, #771	; 0x303
 80059d0:	2105      	movs	r1, #5
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 ff98 	bl	8006908 <CODEC_IO_Write>
 80059d8:	4603      	mov	r3, r0
 80059da:	461a      	mov	r2, r3
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80059e2:	89fb      	ldrh	r3, [r7, #14]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2201      	movs	r2, #1
 80059e8:	f240 6101 	movw	r1, #1537	; 0x601
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 ff8b 	bl	8006908 <CODEC_IO_Write>
 80059f2:	4603      	mov	r3, r0
 80059f4:	461a      	mov	r2, r3
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80059fc:	89fb      	ldrh	r3, [r7, #14]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2201      	movs	r2, #1
 8005a02:	f240 6102 	movw	r1, #1538	; 0x602
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 ff7e 	bl	8006908 <CODEC_IO_Write>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005a16:	89fb      	ldrh	r3, [r7, #14]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f240 6104 	movw	r1, #1540	; 0x604
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 ff71 	bl	8006908 <CODEC_IO_Write>
 8005a26:	4603      	mov	r3, r0
 8005a28:	461a      	mov	r2, r3
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005a30:	89fb      	ldrh	r3, [r7, #14]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2200      	movs	r2, #0
 8005a36:	f240 6105 	movw	r1, #1541	; 0x605
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 ff64 	bl	8006908 <CODEC_IO_Write>
 8005a40:	4603      	mov	r3, r0
 8005a42:	461a      	mov	r2, r3
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	61fb      	str	r3, [r7, #28]
      break;
 8005a4a:	e0ce      	b.n	8005bea <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005a4c:	8afb      	ldrh	r3, [r7, #22]
 8005a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a52:	d141      	bne.n	8005ad8 <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005a54:	89fb      	ldrh	r3, [r7, #14]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005a5c:	2105      	movs	r1, #5
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 ff52 	bl	8006908 <CODEC_IO_Write>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8005a6e:	89fb      	ldrh	r3, [r7, #14]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2203      	movs	r2, #3
 8005a74:	f240 6101 	movw	r1, #1537	; 0x601
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 ff45 	bl	8006908 <CODEC_IO_Write>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	461a      	mov	r2, r3
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8005a88:	89fb      	ldrh	r3, [r7, #14]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	f240 6102 	movw	r1, #1538	; 0x602
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 ff38 	bl	8006908 <CODEC_IO_Write>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8005aa2:	89fb      	ldrh	r3, [r7, #14]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	f240 6104 	movw	r1, #1540	; 0x604
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 ff2b 	bl	8006908 <CODEC_IO_Write>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8005abc:	89fb      	ldrh	r3, [r7, #14]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	f240 6105 	movw	r1, #1541	; 0x605
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 ff1e 	bl	8006908 <CODEC_IO_Write>
 8005acc:	4603      	mov	r3, r0
 8005ace:	461a      	mov	r2, r3
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 8005ad6:	e088      	b.n	8005bea <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005ad8:	89fb      	ldrh	r3, [r7, #14]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005ae0:	2105      	movs	r1, #5
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 ff10 	bl	8006908 <CODEC_IO_Write>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	461a      	mov	r2, r3
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	4413      	add	r3, r2
 8005af0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005af2:	89fb      	ldrh	r3, [r7, #14]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2201      	movs	r2, #1
 8005af8:	f240 6101 	movw	r1, #1537	; 0x601
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 ff03 	bl	8006908 <CODEC_IO_Write>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005b0c:	89fb      	ldrh	r3, [r7, #14]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2201      	movs	r2, #1
 8005b12:	f240 6102 	movw	r1, #1538	; 0x602
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fef6 	bl	8006908 <CODEC_IO_Write>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005b26:	89fb      	ldrh	r3, [r7, #14]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f240 6104 	movw	r1, #1540	; 0x604
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fee9 	bl	8006908 <CODEC_IO_Write>
 8005b36:	4603      	mov	r3, r0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005b40:	89fb      	ldrh	r3, [r7, #14]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2202      	movs	r2, #2
 8005b46:	f240 6105 	movw	r1, #1541	; 0x605
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fedc 	bl	8006908 <CODEC_IO_Write>
 8005b50:	4603      	mov	r3, r0
 8005b52:	461a      	mov	r2, r3
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	61fb      	str	r3, [r7, #28]
      break;
 8005b5a:	e046      	b.n	8005bea <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005b5c:	89fb      	ldrh	r3, [r7, #14]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f240 3203 	movw	r2, #771	; 0x303
 8005b64:	2105      	movs	r1, #5
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fece 	bl	8006908 <CODEC_IO_Write>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	461a      	mov	r2, r3
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005b76:	89fb      	ldrh	r3, [r7, #14]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f240 6101 	movw	r1, #1537	; 0x601
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fec1 	bl	8006908 <CODEC_IO_Write>
 8005b86:	4603      	mov	r3, r0
 8005b88:	461a      	mov	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005b90:	89fb      	ldrh	r3, [r7, #14]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2201      	movs	r2, #1
 8005b96:	f240 6102 	movw	r1, #1538	; 0x602
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 feb4 	bl	8006908 <CODEC_IO_Write>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005baa:	89fb      	ldrh	r3, [r7, #14]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f240 6104 	movw	r1, #1540	; 0x604
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fea7 	bl	8006908 <CODEC_IO_Write>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005bc4:	89fb      	ldrh	r3, [r7, #14]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f240 6105 	movw	r1, #1541	; 0x605
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fe9a 	bl	8006908 <CODEC_IO_Write>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	61fb      	str	r3, [r7, #28]
      break;
 8005bde:	e004      	b.n	8005bea <wm8994_Init+0x39a>
 8005be0:	200003cc 	.word	0x200003cc
    }
  }
  else
  {
    outputEnabled = 0;
 8005be4:	4b99      	ldr	r3, [pc, #612]	; (8005e4c <wm8994_Init+0x5fc>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8005bea:	8afb      	ldrh	r3, [r7, #22]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 81ab 	beq.w	8005f48 <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 8005bf2:	4b97      	ldr	r3, [pc, #604]	; (8005e50 <wm8994_Init+0x600>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8005bf8:	8afb      	ldrh	r3, [r7, #22]
 8005bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bfe:	f000 8129 	beq.w	8005e54 <wm8994_Init+0x604>
 8005c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c06:	f300 819b 	bgt.w	8005f40 <wm8994_Init+0x6f0>
 8005c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c0e:	d05a      	beq.n	8005cc6 <wm8994_Init+0x476>
 8005c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c14:	f300 8194 	bgt.w	8005f40 <wm8994_Init+0x6f0>
 8005c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1c:	f000 80c6 	beq.w	8005dac <wm8994_Init+0x55c>
 8005c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c24:	f040 818c 	bne.w	8005f40 <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8005c28:	89fb      	ldrh	r3, [r7, #14]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8005c30:	2104      	movs	r1, #4
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fe68 	bl	8006908 <CODEC_IO_Write>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8005c42:	89fb      	ldrh	r3, [r7, #14]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	22db      	movs	r2, #219	; 0xdb
 8005c48:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fe5b 	bl	8006908 <CODEC_IO_Write>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	4413      	add	r3, r2
 8005c5a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8005c5c:	89fb      	ldrh	r3, [r7, #14]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8005c64:	2102      	movs	r1, #2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fe4e 	bl	8006908 <CODEC_IO_Write>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	461a      	mov	r2, r3
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	4413      	add	r3, r2
 8005c74:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8005c76:	89fb      	ldrh	r3, [r7, #14]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fe41 	bl	8006908 <CODEC_IO_Write>
 8005c86:	4603      	mov	r3, r0
 8005c88:	461a      	mov	r2, r3
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8005c90:	89fb      	ldrh	r3, [r7, #14]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2202      	movs	r2, #2
 8005c96:	f240 6109 	movw	r1, #1545	; 0x609
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fe34 	bl	8006908 <CODEC_IO_Write>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8005caa:	89fb      	ldrh	r3, [r7, #14]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	220e      	movs	r2, #14
 8005cb0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fe27 	bl	8006908 <CODEC_IO_Write>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	61fb      	str	r3, [r7, #28]
      break;
 8005cc4:	e143      	b.n	8005f4e <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8005cc6:	89fb      	ldrh	r3, [r7, #14]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2211      	movs	r2, #17
 8005ccc:	2128      	movs	r1, #40	; 0x28
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fe1a 	bl	8006908 <CODEC_IO_Write>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8005cde:	89fb      	ldrh	r3, [r7, #14]
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	2129      	movs	r1, #41	; 0x29
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fe0e 	bl	8006908 <CODEC_IO_Write>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8005cf6:	89fb      	ldrh	r3, [r7, #14]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	212a      	movs	r1, #42	; 0x2a
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fe02 	bl	8006908 <CODEC_IO_Write>
 8005d04:	4603      	mov	r3, r0
 8005d06:	461a      	mov	r2, r3
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8005d0e:	89fb      	ldrh	r3, [r7, #14]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f240 3203 	movw	r2, #771	; 0x303
 8005d16:	2104      	movs	r1, #4
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fdf5 	bl	8006908 <CODEC_IO_Write>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	461a      	mov	r2, r3
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005d28:	89fb      	ldrh	r3, [r7, #14]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	22db      	movs	r2, #219	; 0xdb
 8005d2e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fde8 	bl	8006908 <CODEC_IO_Write>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8005d42:	89fb      	ldrh	r3, [r7, #14]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f246 3250 	movw	r2, #25424	; 0x6350
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fddb 	bl	8006908 <CODEC_IO_Write>
 8005d52:	4603      	mov	r3, r0
 8005d54:	461a      	mov	r2, r3
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005d5c:	89fb      	ldrh	r3, [r7, #14]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2202      	movs	r2, #2
 8005d62:	f240 6106 	movw	r1, #1542	; 0x606
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fdce 	bl	8006908 <CODEC_IO_Write>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	461a      	mov	r2, r3
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005d76:	89fb      	ldrh	r3, [r7, #14]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f240 6107 	movw	r1, #1543	; 0x607
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fdc1 	bl	8006908 <CODEC_IO_Write>
 8005d86:	4603      	mov	r3, r0
 8005d88:	461a      	mov	r2, r3
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005d90:	89fb      	ldrh	r3, [r7, #14]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	220d      	movs	r2, #13
 8005d96:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fdb4 	bl	8006908 <CODEC_IO_Write>
 8005da0:	4603      	mov	r3, r0
 8005da2:	461a      	mov	r2, r3
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	4413      	add	r3, r2
 8005da8:	61fb      	str	r3, [r7, #28]
      break;
 8005daa:	e0d0      	b.n	8005f4e <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8005dac:	89fb      	ldrh	r3, [r7, #14]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8005db4:	2104      	movs	r1, #4
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fda6 	bl	8006908 <CODEC_IO_Write>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005dc6:	89fb      	ldrh	r3, [r7, #14]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	22db      	movs	r2, #219	; 0xdb
 8005dcc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fd99 	bl	8006908 <CODEC_IO_Write>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8005de0:	89fb      	ldrh	r3, [r7, #14]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f246 3250 	movw	r2, #25424	; 0x6350
 8005de8:	2102      	movs	r1, #2
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fd8c 	bl	8006908 <CODEC_IO_Write>
 8005df0:	4603      	mov	r3, r0
 8005df2:	461a      	mov	r2, r3
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005dfa:	89fb      	ldrh	r3, [r7, #14]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f240 6106 	movw	r1, #1542	; 0x606
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fd7f 	bl	8006908 <CODEC_IO_Write>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005e14:	89fb      	ldrh	r3, [r7, #14]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2202      	movs	r2, #2
 8005e1a:	f240 6107 	movw	r1, #1543	; 0x607
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fd72 	bl	8006908 <CODEC_IO_Write>
 8005e24:	4603      	mov	r3, r0
 8005e26:	461a      	mov	r2, r3
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005e2e:	89fb      	ldrh	r3, [r7, #14]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	220d      	movs	r2, #13
 8005e34:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fd65 	bl	8006908 <CODEC_IO_Write>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	461a      	mov	r2, r3
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	61fb      	str	r3, [r7, #28]
      break;
 8005e48:	e081      	b.n	8005f4e <wm8994_Init+0x6fe>
 8005e4a:	bf00      	nop
 8005e4c:	200003cc 	.word	0x200003cc
 8005e50:	200003d0 	.word	0x200003d0
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8005e54:	89fb      	ldrh	r3, [r7, #14]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f640 723c 	movw	r2, #3900	; 0xf3c
 8005e5c:	2104      	movs	r1, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fd52 	bl	8006908 <CODEC_IO_Write>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8005e6e:	89fb      	ldrh	r3, [r7, #14]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	22db      	movs	r2, #219	; 0xdb
 8005e74:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fd45 	bl	8006908 <CODEC_IO_Write>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	461a      	mov	r2, r3
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005e88:	89fb      	ldrh	r3, [r7, #14]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	22db      	movs	r2, #219	; 0xdb
 8005e8e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fd38 	bl	8006908 <CODEC_IO_Write>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8005ea2:	89fb      	ldrh	r3, [r7, #14]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8005eaa:	2102      	movs	r1, #2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fd2b 	bl	8006908 <CODEC_IO_Write>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005ebc:	89fb      	ldrh	r3, [r7, #14]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	f240 6106 	movw	r1, #1542	; 0x606
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fd1e 	bl	8006908 <CODEC_IO_Write>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005ed6:	89fb      	ldrh	r3, [r7, #14]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2202      	movs	r2, #2
 8005edc:	f240 6107 	movw	r1, #1543	; 0x607
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fd11 	bl	8006908 <CODEC_IO_Write>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	461a      	mov	r2, r3
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8005ef0:	89fb      	ldrh	r3, [r7, #14]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fd04 	bl	8006908 <CODEC_IO_Write>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8005f0a:	89fb      	ldrh	r3, [r7, #14]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f240 6109 	movw	r1, #1545	; 0x609
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fcf7 	bl	8006908 <CODEC_IO_Write>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005f24:	89fb      	ldrh	r3, [r7, #14]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	220d      	movs	r2, #13
 8005f2a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fcea 	bl	8006908 <CODEC_IO_Write>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	61fb      	str	r3, [r7, #28]
      break;
 8005f3e:	e006      	b.n	8005f4e <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	3301      	adds	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
      break;
 8005f46:	e002      	b.n	8005f4e <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 8005f48:	4ba4      	ldr	r3, [pc, #656]	; (80061dc <wm8994_Init+0x98c>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4aa3      	ldr	r2, [pc, #652]	; (80061e0 <wm8994_Init+0x990>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d079      	beq.n	800604a <wm8994_Init+0x7fa>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4aa1      	ldr	r2, [pc, #644]	; (80061e0 <wm8994_Init+0x990>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	f200 80ad 	bhi.w	80060ba <wm8994_Init+0x86a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d061      	beq.n	800602e <wm8994_Init+0x7de>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005f70:	4293      	cmp	r3, r2
 8005f72:	f200 80a2 	bhi.w	80060ba <wm8994_Init+0x86a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	f000 808e 	beq.w	800609e <wm8994_Init+0x84e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	f200 8096 	bhi.w	80060ba <wm8994_Init+0x86a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005f94:	d03d      	beq.n	8006012 <wm8994_Init+0x7c2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005f9c:	f200 808d 	bhi.w	80060ba <wm8994_Init+0x86a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f245 6222 	movw	r2, #22050	; 0x5622
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d06b      	beq.n	8006082 <wm8994_Init+0x832>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f245 6222 	movw	r2, #22050	; 0x5622
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	f200 8082 	bhi.w	80060ba <wm8994_Init+0x86a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005fbc:	d01b      	beq.n	8005ff6 <wm8994_Init+0x7a6>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005fc4:	d879      	bhi.n	80060ba <wm8994_Init+0x86a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005fcc:	d005      	beq.n	8005fda <wm8994_Init+0x78a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d046      	beq.n	8006066 <wm8994_Init+0x816>
 8005fd8:	e06f      	b.n	80060ba <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8005fda:	89fb      	ldrh	r3, [r7, #14]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2203      	movs	r2, #3
 8005fe0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fc8f 	bl	8006908 <CODEC_IO_Write>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461a      	mov	r2, r3
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	61fb      	str	r3, [r7, #28]
    break;
 8005ff4:	e06f      	b.n	80060d6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8005ff6:	89fb      	ldrh	r3, [r7, #14]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2233      	movs	r2, #51	; 0x33
 8005ffc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006000:	4618      	mov	r0, r3
 8006002:	f000 fc81 	bl	8006908 <CODEC_IO_Write>
 8006006:	4603      	mov	r3, r0
 8006008:	461a      	mov	r2, r3
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	61fb      	str	r3, [r7, #28]
    break;
 8006010:	e061      	b.n	80060d6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8006012:	89fb      	ldrh	r3, [r7, #14]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2263      	movs	r2, #99	; 0x63
 8006018:	f44f 7104 	mov.w	r1, #528	; 0x210
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fc73 	bl	8006908 <CODEC_IO_Write>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	61fb      	str	r3, [r7, #28]
    break;
 800602c:	e053      	b.n	80060d6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800602e:	89fb      	ldrh	r3, [r7, #14]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2283      	movs	r2, #131	; 0x83
 8006034:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fc65 	bl	8006908 <CODEC_IO_Write>
 800603e:	4603      	mov	r3, r0
 8006040:	461a      	mov	r2, r3
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	61fb      	str	r3, [r7, #28]
    break;
 8006048:	e045      	b.n	80060d6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800604a:	89fb      	ldrh	r3, [r7, #14]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	22a3      	movs	r2, #163	; 0xa3
 8006050:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fc57 	bl	8006908 <CODEC_IO_Write>
 800605a:	4603      	mov	r3, r0
 800605c:	461a      	mov	r2, r3
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	61fb      	str	r3, [r7, #28]
    break;
 8006064:	e037      	b.n	80060d6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8006066:	89fb      	ldrh	r3, [r7, #14]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2213      	movs	r2, #19
 800606c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fc49 	bl	8006908 <CODEC_IO_Write>
 8006076:	4603      	mov	r3, r0
 8006078:	461a      	mov	r2, r3
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	61fb      	str	r3, [r7, #28]
    break;
 8006080:	e029      	b.n	80060d6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8006082:	89fb      	ldrh	r3, [r7, #14]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2243      	movs	r2, #67	; 0x43
 8006088:	f44f 7104 	mov.w	r1, #528	; 0x210
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fc3b 	bl	8006908 <CODEC_IO_Write>
 8006092:	4603      	mov	r3, r0
 8006094:	461a      	mov	r2, r3
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	61fb      	str	r3, [r7, #28]
    break;
 800609c:	e01b      	b.n	80060d6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800609e:	89fb      	ldrh	r3, [r7, #14]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2273      	movs	r2, #115	; 0x73
 80060a4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fc2d 	bl	8006908 <CODEC_IO_Write>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	61fb      	str	r3, [r7, #28]
    break;
 80060b8:	e00d      	b.n	80060d6 <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2283      	movs	r2, #131	; 0x83
 80060c0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fc1f 	bl	8006908 <CODEC_IO_Write>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	61fb      	str	r3, [r7, #28]
    break;
 80060d4:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80060d6:	8afb      	ldrh	r3, [r7, #22]
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060dc:	d10e      	bne.n	80060fc <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 80060de:	89fb      	ldrh	r3, [r7, #14]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f244 0218 	movw	r2, #16408	; 0x4018
 80060e6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fc0c 	bl	8006908 <CODEC_IO_Write>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	e00d      	b.n	8006118 <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80060fc:	89fb      	ldrh	r3, [r7, #14]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f244 0210 	movw	r2, #16400	; 0x4010
 8006104:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fbfd 	bl	8006908 <CODEC_IO_Write>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8006118:	89fb      	ldrh	r3, [r7, #14]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2200      	movs	r2, #0
 800611e:	f240 3102 	movw	r1, #770	; 0x302
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fbf0 	bl	8006908 <CODEC_IO_Write>
 8006128:	4603      	mov	r3, r0
 800612a:	461a      	mov	r2, r3
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8006132:	89fb      	ldrh	r3, [r7, #14]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	220a      	movs	r2, #10
 8006138:	f44f 7102 	mov.w	r1, #520	; 0x208
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fbe3 	bl	8006908 <CODEC_IO_Write>
 8006142:	4603      	mov	r3, r0
 8006144:	461a      	mov	r2, r3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 800614c:	89fb      	ldrh	r3, [r7, #14]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2201      	movs	r2, #1
 8006152:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fbd6 	bl	8006908 <CODEC_IO_Write>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8006166:	8b3b      	ldrh	r3, [r7, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 817b 	beq.w	8006464 <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800616e:	8b3b      	ldrh	r3, [r7, #24]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d157      	bne.n	8006224 <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8006174:	89fb      	ldrh	r3, [r7, #14]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800617c:	212d      	movs	r1, #45	; 0x2d
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fbc2 	bl	8006908 <CODEC_IO_Write>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	4413      	add	r3, r2
 800618c:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 800618e:	89fb      	ldrh	r3, [r7, #14]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006196:	212e      	movs	r1, #46	; 0x2e
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fbb5 	bl	8006908 <CODEC_IO_Write>
 800619e:	4603      	mov	r3, r0
 80061a0:	461a      	mov	r2, r3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 80061a8:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <wm8994_Init+0x994>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80061b0:	89fb      	ldrh	r3, [r7, #14]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80061b8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fba3 	bl	8006908 <CODEC_IO_Write>
 80061c2:	4603      	mov	r3, r0
 80061c4:	461a      	mov	r2, r3
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <wm8994_Init+0x994>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 80061d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80061d6:	f000 fc05 	bl	80069e4 <HAL_Delay>
 80061da:	e016      	b.n	800620a <wm8994_Init+0x9ba>
 80061dc:	200003d0 	.word	0x200003d0
 80061e0:	00017700 	.word	0x00017700
 80061e4:	20000014 	.word	0x20000014
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80061e8:	89fb      	ldrh	r3, [r7, #14]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	f248 1208 	movw	r2, #33032	; 0x8108
 80061f0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 fb87 	bl	8006908 <CODEC_IO_Write>
 80061fa:	4603      	mov	r3, r0
 80061fc:	461a      	mov	r2, r3
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 8006204:	2032      	movs	r0, #50	; 0x32
 8006206:	f000 fbed 	bl	80069e4 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800620a:	89fb      	ldrh	r3, [r7, #14]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2200      	movs	r2, #0
 8006210:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fb77 	bl	8006908 <CODEC_IO_Write>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8006224:	89fb      	ldrh	r3, [r7, #14]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f44f 7240 	mov.w	r2, #768	; 0x300
 800622c:	2103      	movs	r1, #3
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fb6a 	bl	8006908 <CODEC_IO_Write>
 8006234:	4603      	mov	r3, r0
 8006236:	461a      	mov	r2, r3
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800623e:	89fb      	ldrh	r3, [r7, #14]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2200      	movs	r2, #0
 8006244:	2122      	movs	r1, #34	; 0x22
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fb5e 	bl	8006908 <CODEC_IO_Write>
 800624c:	4603      	mov	r3, r0
 800624e:	461a      	mov	r2, r3
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8006256:	89fb      	ldrh	r3, [r7, #14]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2200      	movs	r2, #0
 800625c:	2123      	movs	r1, #35	; 0x23
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fb52 	bl	8006908 <CODEC_IO_Write>
 8006264:	4603      	mov	r3, r0
 8006266:	461a      	mov	r2, r3
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800626e:	89fb      	ldrh	r3, [r7, #14]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006276:	2136      	movs	r1, #54	; 0x36
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fb45 	bl	8006908 <CODEC_IO_Write>
 800627e:	4603      	mov	r3, r0
 8006280:	461a      	mov	r2, r3
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8006288:	89fb      	ldrh	r3, [r7, #14]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f243 0203 	movw	r2, #12291	; 0x3003
 8006290:	2101      	movs	r1, #1
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fb38 	bl	8006908 <CODEC_IO_Write>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	4413      	add	r3, r2
 80062a0:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80062a2:	8afb      	ldrh	r3, [r7, #22]
 80062a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a8:	d10d      	bne.n	80062c6 <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80062aa:	89fb      	ldrh	r3, [r7, #14]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	f240 2205 	movw	r2, #517	; 0x205
 80062b2:	2151      	movs	r1, #81	; 0x51
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fb27 	bl	8006908 <CODEC_IO_Write>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	61fb      	str	r3, [r7, #28]
 80062c4:	e00b      	b.n	80062de <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 80062c6:	89fb      	ldrh	r3, [r7, #14]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2205      	movs	r2, #5
 80062cc:	2151      	movs	r1, #81	; 0x51
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fb1a 	bl	8006908 <CODEC_IO_Write>
 80062d4:	4603      	mov	r3, r0
 80062d6:	461a      	mov	r2, r3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80062de:	8b7b      	ldrh	r3, [r7, #26]
 80062e0:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80062e4:	f043 0303 	orr.w	r3, r3, #3
 80062e8:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80062ea:	89fb      	ldrh	r3, [r7, #14]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	8b7a      	ldrh	r2, [r7, #26]
 80062f0:	2101      	movs	r1, #1
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fb08 	bl	8006908 <CODEC_IO_Write>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	4413      	add	r3, r2
 8006300:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8006302:	89fb      	ldrh	r3, [r7, #14]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2222      	movs	r2, #34	; 0x22
 8006308:	2160      	movs	r1, #96	; 0x60
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fafc 	bl	8006908 <CODEC_IO_Write>
 8006310:	4603      	mov	r3, r0
 8006312:	461a      	mov	r2, r3
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800631a:	89fb      	ldrh	r3, [r7, #14]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f649 7225 	movw	r2, #40741	; 0x9f25
 8006322:	214c      	movs	r1, #76	; 0x4c
 8006324:	4618      	mov	r0, r3
 8006326:	f000 faef 	bl	8006908 <CODEC_IO_Write>
 800632a:	4603      	mov	r3, r0
 800632c:	461a      	mov	r2, r3
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 8006334:	200f      	movs	r0, #15
 8006336:	f000 fb55 	bl	80069e4 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800633a:	89fb      	ldrh	r3, [r7, #14]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2201      	movs	r2, #1
 8006340:	212d      	movs	r1, #45	; 0x2d
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fae0 	bl	8006908 <CODEC_IO_Write>
 8006348:	4603      	mov	r3, r0
 800634a:	461a      	mov	r2, r3
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8006352:	89fb      	ldrh	r3, [r7, #14]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2201      	movs	r2, #1
 8006358:	212e      	movs	r1, #46	; 0x2e
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fad4 	bl	8006908 <CODEC_IO_Write>
 8006360:	4603      	mov	r3, r0
 8006362:	461a      	mov	r2, r3
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800636a:	89fb      	ldrh	r3, [r7, #14]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f44f 724c 	mov.w	r2, #816	; 0x330
 8006372:	2103      	movs	r1, #3
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fac7 	bl	8006908 <CODEC_IO_Write>
 800637a:	4603      	mov	r3, r0
 800637c:	461a      	mov	r2, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8006384:	89fb      	ldrh	r3, [r7, #14]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2233      	movs	r2, #51	; 0x33
 800638a:	2154      	movs	r1, #84	; 0x54
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fabb 	bl	8006908 <CODEC_IO_Write>
 8006392:	4603      	mov	r3, r0
 8006394:	461a      	mov	r2, r3
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 800639c:	f240 1001 	movw	r0, #257	; 0x101
 80063a0:	f000 fb20 	bl	80069e4 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80063a4:	89fb      	ldrh	r3, [r7, #14]
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	22ee      	movs	r2, #238	; 0xee
 80063aa:	2160      	movs	r1, #96	; 0x60
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 faab 	bl	8006908 <CODEC_IO_Write>
 80063b2:	4603      	mov	r3, r0
 80063b4:	461a      	mov	r2, r3
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80063bc:	89fb      	ldrh	r3, [r7, #14]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	22c0      	movs	r2, #192	; 0xc0
 80063c2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fa9e 	bl	8006908 <CODEC_IO_Write>
 80063cc:	4603      	mov	r3, r0
 80063ce:	461a      	mov	r2, r3
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80063d6:	89fb      	ldrh	r3, [r7, #14]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	22c0      	movs	r2, #192	; 0xc0
 80063dc:	f240 6111 	movw	r1, #1553	; 0x611
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fa91 	bl	8006908 <CODEC_IO_Write>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80063f0:	89fb      	ldrh	r3, [r7, #14]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2210      	movs	r2, #16
 80063f6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fa84 	bl	8006908 <CODEC_IO_Write>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4413      	add	r3, r2
 8006408:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800640a:	89fb      	ldrh	r3, [r7, #14]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	22c0      	movs	r2, #192	; 0xc0
 8006410:	f240 6112 	movw	r1, #1554	; 0x612
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fa77 	bl	8006908 <CODEC_IO_Write>
 800641a:	4603      	mov	r3, r0
 800641c:	461a      	mov	r2, r3
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	4413      	add	r3, r2
 8006422:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8006424:	89fb      	ldrh	r3, [r7, #14]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	22c0      	movs	r2, #192	; 0xc0
 800642a:	f240 6113 	movw	r1, #1555	; 0x613
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fa6a 	bl	8006908 <CODEC_IO_Write>
 8006434:	4603      	mov	r3, r0
 8006436:	461a      	mov	r2, r3
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800643e:	89fb      	ldrh	r3, [r7, #14]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2210      	movs	r2, #16
 8006444:	f240 4122 	movw	r1, #1058	; 0x422
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fa5d 	bl	8006908 <CODEC_IO_Write>
 800644e:	4603      	mov	r3, r0
 8006450:	461a      	mov	r2, r3
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006458:	7afa      	ldrb	r2, [r7, #11]
 800645a:	89fb      	ldrh	r3, [r7, #14]
 800645c:	4611      	mov	r1, r2
 800645e:	4618      	mov	r0, r3
 8006460:	f000 f8c0 	bl	80065e4 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8006464:	8afb      	ldrh	r3, [r7, #22]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80a6 	beq.w	80065b8 <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 800646c:	8afb      	ldrh	r3, [r7, #22]
 800646e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006472:	d003      	beq.n	800647c <wm8994_Init+0xc2c>
 8006474:	8afb      	ldrh	r3, [r7, #22]
 8006476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800647a:	d12b      	bne.n	80064d4 <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800647c:	8b7b      	ldrh	r3, [r7, #26]
 800647e:	f043 0313 	orr.w	r3, r3, #19
 8006482:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006484:	89fb      	ldrh	r3, [r7, #14]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	8b7a      	ldrh	r2, [r7, #26]
 800648a:	2101      	movs	r1, #1
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fa3b 	bl	8006908 <CODEC_IO_Write>
 8006492:	4603      	mov	r3, r0
 8006494:	461a      	mov	r2, r3
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4413      	add	r3, r2
 800649a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800649c:	89fb      	ldrh	r3, [r7, #14]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2202      	movs	r2, #2
 80064a2:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fa2e 	bl	8006908 <CODEC_IO_Write>
 80064ac:	4603      	mov	r3, r0
 80064ae:	461a      	mov	r2, r3
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	4413      	add	r3, r2
 80064b4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80064b6:	89fb      	ldrh	r3, [r7, #14]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80064be:	f240 4111 	movw	r1, #1041	; 0x411
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fa20 	bl	8006908 <CODEC_IO_Write>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	e06b      	b.n	80065ac <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80064d4:	8afb      	ldrh	r3, [r7, #22]
 80064d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064da:	d139      	bne.n	8006550 <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80064dc:	8b7b      	ldrh	r3, [r7, #26]
 80064de:	f043 0313 	orr.w	r3, r3, #19
 80064e2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80064e4:	89fb      	ldrh	r3, [r7, #14]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	8b7a      	ldrh	r2, [r7, #26]
 80064ea:	2101      	movs	r1, #1
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fa0b 	bl	8006908 <CODEC_IO_Write>
 80064f2:	4603      	mov	r3, r0
 80064f4:	461a      	mov	r2, r3
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	4413      	add	r3, r2
 80064fa:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80064fc:	89fb      	ldrh	r3, [r7, #14]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2202      	movs	r2, #2
 8006502:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f9fe 	bl	8006908 <CODEC_IO_Write>
 800650c:	4603      	mov	r3, r0
 800650e:	461a      	mov	r2, r3
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006516:	89fb      	ldrh	r3, [r7, #14]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800651e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006522:	4618      	mov	r0, r3
 8006524:	f000 f9f0 	bl	8006908 <CODEC_IO_Write>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 8006532:	89fb      	ldrh	r3, [r7, #14]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800653a:	f240 4111 	movw	r1, #1041	; 0x411
 800653e:	4618      	mov	r0, r3
 8006540:	f000 f9e2 	bl	8006908 <CODEC_IO_Write>
 8006544:	4603      	mov	r3, r0
 8006546:	461a      	mov	r2, r3
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	e02d      	b.n	80065ac <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8006550:	8afb      	ldrh	r3, [r7, #22]
 8006552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006556:	d003      	beq.n	8006560 <wm8994_Init+0xd10>
 8006558:	8afb      	ldrh	r3, [r7, #22]
 800655a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800655e:	d125      	bne.n	80065ac <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8006560:	89fb      	ldrh	r3, [r7, #14]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	220b      	movs	r2, #11
 8006566:	2118      	movs	r1, #24
 8006568:	4618      	mov	r0, r3
 800656a:	f000 f9cd 	bl	8006908 <CODEC_IO_Write>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8006578:	89fb      	ldrh	r3, [r7, #14]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	220b      	movs	r2, #11
 800657e:	211a      	movs	r1, #26
 8006580:	4618      	mov	r0, r3
 8006582:	f000 f9c1 	bl	8006908 <CODEC_IO_Write>
 8006586:	4603      	mov	r3, r0
 8006588:	461a      	mov	r2, r3
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006590:	89fb      	ldrh	r3, [r7, #14]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006598:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800659c:	4618      	mov	r0, r3
 800659e:	f000 f9b3 	bl	8006908 <CODEC_IO_Write>
 80065a2:	4603      	mov	r3, r0
 80065a4:	461a      	mov	r2, r3
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80065ac:	7afa      	ldrb	r2, [r7, #11]
 80065ae:	89fb      	ldrh	r3, [r7, #14]
 80065b0:	4611      	mov	r1, r2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 f816 	bl	80065e4 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 80065b8:	69fb      	ldr	r3, [r7, #28]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3720      	adds	r7, #32
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop

080065c4 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fd ff19 	bl	800440c <AUDIO_I2C_Read>
 80065da:	4603      	mov	r3, r0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	460a      	mov	r2, r1
 80065ee:	80fb      	strh	r3, [r7, #6]
 80065f0:	4613      	mov	r3, r2
 80065f2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80065f8:	797b      	ldrb	r3, [r7, #5]
 80065fa:	2b64      	cmp	r3, #100	; 0x64
 80065fc:	d80b      	bhi.n	8006616 <wm8994_SetVolume+0x32>
 80065fe:	797a      	ldrb	r2, [r7, #5]
 8006600:	4613      	mov	r3, r2
 8006602:	019b      	lsls	r3, r3, #6
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	4a86      	ldr	r2, [pc, #536]	; (8006820 <wm8994_SetVolume+0x23c>)
 8006608:	fb82 1203 	smull	r1, r2, r2, r3
 800660c:	1152      	asrs	r2, r2, #5
 800660e:	17db      	asrs	r3, r3, #31
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	b2db      	uxtb	r3, r3
 8006614:	e000      	b.n	8006618 <wm8994_SetVolume+0x34>
 8006616:	2364      	movs	r3, #100	; 0x64
 8006618:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800661a:	4b82      	ldr	r3, [pc, #520]	; (8006824 <wm8994_SetVolume+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 809b 	beq.w	800675a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8006624:	7afb      	ldrb	r3, [r7, #11]
 8006626:	2b3e      	cmp	r3, #62	; 0x3e
 8006628:	d93d      	bls.n	80066a6 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f8fc 	bl	800682c <wm8994_SetMute>
 8006634:	4602      	mov	r2, r0
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f240 127f 	movw	r2, #383	; 0x17f
 8006644:	211c      	movs	r1, #28
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f95e 	bl	8006908 <CODEC_IO_Write>
 800664c:	4603      	mov	r3, r0
 800664e:	461a      	mov	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f240 127f 	movw	r2, #383	; 0x17f
 800665e:	211d      	movs	r1, #29
 8006660:	4618      	mov	r0, r3
 8006662:	f000 f951 	bl	8006908 <CODEC_IO_Write>
 8006666:	4603      	mov	r3, r0
 8006668:	461a      	mov	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f240 127f 	movw	r2, #383	; 0x17f
 8006678:	2126      	movs	r1, #38	; 0x26
 800667a:	4618      	mov	r0, r3
 800667c:	f000 f944 	bl	8006908 <CODEC_IO_Write>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f240 127f 	movw	r2, #383	; 0x17f
 8006692:	2127      	movs	r1, #39	; 0x27
 8006694:	4618      	mov	r0, r3
 8006696:	f000 f937 	bl	8006908 <CODEC_IO_Write>
 800669a:	4603      	mov	r3, r0
 800669c:	461a      	mov	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	e059      	b.n	800675a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80066a6:	797b      	ldrb	r3, [r7, #5]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d109      	bne.n	80066c0 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	2101      	movs	r1, #1
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 f8bb 	bl	800682c <wm8994_SetMute>
 80066b6:	4602      	mov	r2, r0
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e04c      	b.n	800675a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	2100      	movs	r1, #0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 f8b1 	bl	800682c <wm8994_SetMute>
 80066ca:	4602      	mov	r2, r0
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	b2d8      	uxtb	r0, r3
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	b21b      	sxth	r3, r3
 80066da:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80066de:	b21b      	sxth	r3, r3
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	211c      	movs	r1, #28
 80066e6:	f000 f90f 	bl	8006908 <CODEC_IO_Write>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	b2d8      	uxtb	r0, r3
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	b21b      	sxth	r3, r3
 80066fc:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006700:	b21b      	sxth	r3, r3
 8006702:	b29b      	uxth	r3, r3
 8006704:	461a      	mov	r2, r3
 8006706:	211d      	movs	r1, #29
 8006708:	f000 f8fe 	bl	8006908 <CODEC_IO_Write>
 800670c:	4603      	mov	r3, r0
 800670e:	461a      	mov	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	b2d8      	uxtb	r0, r3
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	b21b      	sxth	r3, r3
 800671e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006722:	b21b      	sxth	r3, r3
 8006724:	b29b      	uxth	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	2126      	movs	r1, #38	; 0x26
 800672a:	f000 f8ed 	bl	8006908 <CODEC_IO_Write>
 800672e:	4603      	mov	r3, r0
 8006730:	461a      	mov	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	b2d8      	uxtb	r0, r3
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	b21b      	sxth	r3, r3
 8006740:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006744:	b21b      	sxth	r3, r3
 8006746:	b29b      	uxth	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	2127      	movs	r1, #39	; 0x27
 800674c:	f000 f8dc 	bl	8006908 <CODEC_IO_Write>
 8006750:	4603      	mov	r3, r0
 8006752:	461a      	mov	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800675a:	4b33      	ldr	r3, [pc, #204]	; (8006828 <wm8994_SetVolume+0x244>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d059      	beq.n	8006816 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8006762:	797b      	ldrb	r3, [r7, #5]
 8006764:	2b63      	cmp	r3, #99	; 0x63
 8006766:	d80c      	bhi.n	8006782 <wm8994_SetVolume+0x19e>
 8006768:	797a      	ldrb	r2, [r7, #5]
 800676a:	4613      	mov	r3, r2
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	1a9b      	subs	r3, r3, r2
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	4a2b      	ldr	r2, [pc, #172]	; (8006820 <wm8994_SetVolume+0x23c>)
 8006774:	fb82 1203 	smull	r1, r2, r2, r3
 8006778:	1152      	asrs	r2, r2, #5
 800677a:	17db      	asrs	r3, r3, #31
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	b2db      	uxtb	r3, r3
 8006780:	e000      	b.n	8006784 <wm8994_SetVolume+0x1a0>
 8006782:	23ef      	movs	r3, #239	; 0xef
 8006784:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	b2d8      	uxtb	r0, r3
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	b21b      	sxth	r3, r3
 800678e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006792:	b21b      	sxth	r3, r3
 8006794:	b29b      	uxth	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800679c:	f000 f8b4 	bl	8006908 <CODEC_IO_Write>
 80067a0:	4603      	mov	r3, r0
 80067a2:	461a      	mov	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	b2d8      	uxtb	r0, r3
 80067ae:	7afb      	ldrb	r3, [r7, #11]
 80067b0:	b21b      	sxth	r3, r3
 80067b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b6:	b21b      	sxth	r3, r3
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	f240 4101 	movw	r1, #1025	; 0x401
 80067c0:	f000 f8a2 	bl	8006908 <CODEC_IO_Write>
 80067c4:	4603      	mov	r3, r0
 80067c6:	461a      	mov	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	b2d8      	uxtb	r0, r3
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	b21b      	sxth	r3, r3
 80067d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067da:	b21b      	sxth	r3, r3
 80067dc:	b29b      	uxth	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	f240 4104 	movw	r1, #1028	; 0x404
 80067e4:	f000 f890 	bl	8006908 <CODEC_IO_Write>
 80067e8:	4603      	mov	r3, r0
 80067ea:	461a      	mov	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	b2d8      	uxtb	r0, r3
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	b21b      	sxth	r3, r3
 80067fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067fe:	b21b      	sxth	r3, r3
 8006800:	b29b      	uxth	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	f240 4105 	movw	r1, #1029	; 0x405
 8006808:	f000 f87e 	bl	8006908 <CODEC_IO_Write>
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8006816:	68fb      	ldr	r3, [r7, #12]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	51eb851f 	.word	0x51eb851f
 8006824:	200003cc 	.word	0x200003cc
 8006828:	200003d0 	.word	0x200003d0

0800682c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	4603      	mov	r3, r0
 8006834:	6039      	str	r1, [r7, #0]
 8006836:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 800683c:	4b21      	ldr	r3, [pc, #132]	; (80068c4 <wm8994_SetMute+0x98>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d039      	beq.n	80068b8 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d11c      	bne.n	8006884 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006852:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006856:	4618      	mov	r0, r3
 8006858:	f000 f856 	bl	8006908 <CODEC_IO_Write>
 800685c:	4603      	mov	r3, r0
 800685e:	461a      	mov	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8006866:	88fb      	ldrh	r3, [r7, #6]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800686e:	f240 4122 	movw	r1, #1058	; 0x422
 8006872:	4618      	mov	r0, r3
 8006874:	f000 f848 	bl	8006908 <CODEC_IO_Write>
 8006878:	4603      	mov	r3, r0
 800687a:	461a      	mov	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e019      	b.n	80068b8 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2210      	movs	r2, #16
 800688a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800688e:	4618      	mov	r0, r3
 8006890:	f000 f83a 	bl	8006908 <CODEC_IO_Write>
 8006894:	4603      	mov	r3, r0
 8006896:	461a      	mov	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2210      	movs	r2, #16
 80068a4:	f240 4122 	movw	r1, #1058	; 0x422
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f82d 	bl	8006908 <CODEC_IO_Write>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80068b8:	68fb      	ldr	r3, [r7, #12]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	200003cc 	.word	0x200003cc

080068c8 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2200      	movs	r2, #0
 80068dc:	2100      	movs	r1, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 f812 	bl	8006908 <CODEC_IO_Write>
 80068e4:	4603      	mov	r3, r0
 80068e6:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <wm8994_Reset+0x38>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <wm8994_Reset+0x3c>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]

  return counter;
 80068f4:	68fb      	ldr	r3, [r7, #12]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	200003cc 	.word	0x200003cc
 8006904:	200003d0 	.word	0x200003d0

08006908 <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	71fb      	strb	r3, [r7, #7]
 8006912:	460b      	mov	r3, r1
 8006914:	80bb      	strh	r3, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 800691e:	887a      	ldrh	r2, [r7, #2]
 8006920:	88b9      	ldrh	r1, [r7, #4]
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	4618      	mov	r0, r3
 8006926:	f7fd fd47 	bl	80043b8 <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	b2db      	uxtb	r3, r3
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800693c:	480d      	ldr	r0, [pc, #52]	; (8006974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800693e:	490e      	ldr	r1, [pc, #56]	; (8006978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006940:	4a0e      	ldr	r2, [pc, #56]	; (800697c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006944:	e002      	b.n	800694c <LoopCopyDataInit>

08006946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800694a:	3304      	adds	r3, #4

0800694c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800694c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800694e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006950:	d3f9      	bcc.n	8006946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006952:	4a0b      	ldr	r2, [pc, #44]	; (8006980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006954:	4c0b      	ldr	r4, [pc, #44]	; (8006984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006958:	e001      	b.n	800695e <LoopFillZerobss>

0800695a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800695a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800695c:	3204      	adds	r2, #4

0800695e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800695e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006960:	d3fb      	bcc.n	800695a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006962:	f7fd fb2f 	bl	8003fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006966:	f013 fba5 	bl	801a0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800696a:	f7fa fe4f 	bl	800160c <main>
  bx  lr    
 800696e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006970:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006978:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800697c:	08031768 	.word	0x08031768
  ldr r2, =_sbss
 8006980:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8006984:	2004de30 	.word	0x2004de30

08006988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006988:	e7fe      	b.n	8006988 <ADC_IRQHandler>

0800698a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800698e:	2003      	movs	r0, #3
 8006990:	f000 fba5 	bl	80070de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006994:	2000      	movs	r0, #0
 8006996:	f7fd f9a1 	bl	8003cdc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800699a:	f7fc f985 	bl	8002ca8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069a8:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <HAL_IncTick+0x20>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <HAL_IncTick+0x24>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4413      	add	r3, r2
 80069b4:	4a04      	ldr	r2, [pc, #16]	; (80069c8 <HAL_IncTick+0x24>)
 80069b6:	6013      	str	r3, [r2, #0]
}
 80069b8:	bf00      	nop
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20000034 	.word	0x20000034
 80069c8:	2004d2c8 	.word	0x2004d2c8

080069cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  return uwTick;
 80069d0:	4b03      	ldr	r3, [pc, #12]	; (80069e0 <HAL_GetTick+0x14>)
 80069d2:	681b      	ldr	r3, [r3, #0]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	2004d2c8 	.word	0x2004d2c8

080069e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069ec:	f7ff ffee 	bl	80069cc <HAL_GetTick>
 80069f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fc:	d005      	beq.n	8006a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069fe:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <HAL_Delay+0x44>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a0a:	bf00      	nop
 8006a0c:	f7ff ffde 	bl	80069cc <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d8f7      	bhi.n	8006a0c <HAL_Delay+0x28>
  {
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000034 	.word	0x20000034

08006a2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e031      	b.n	8006aa6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fc f954 	bl	8002cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f003 0310 	and.w	r3, r3, #16
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d116      	bne.n	8006a98 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a6e:	4b10      	ldr	r3, [pc, #64]	; (8006ab0 <HAL_ADC_Init+0x84>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	f043 0202 	orr.w	r2, r3, #2
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f964 	bl	8006d48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	f043 0201 	orr.w	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	641a      	str	r2, [r3, #64]	; 0x40
 8006a96:	e001      	b.n	8006a9c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	ffffeefd 	.word	0xffffeefd

08006ab4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_ADC_ConfigChannel+0x1c>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e12a      	b.n	8006d26 <HAL_ADC_ConfigChannel+0x272>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b09      	cmp	r3, #9
 8006ade:	d93a      	bls.n	8006b56 <HAL_ADC_ConfigChannel+0xa2>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ae8:	d035      	beq.n	8006b56 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68d9      	ldr	r1, [r3, #12]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	461a      	mov	r2, r3
 8006af8:	4613      	mov	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	3b1e      	subs	r3, #30
 8006b00:	2207      	movs	r2, #7
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	43da      	mvns	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	400a      	ands	r2, r1
 8006b0e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a87      	ldr	r2, [pc, #540]	; (8006d34 <HAL_ADC_ConfigChannel+0x280>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d10a      	bne.n	8006b30 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68d9      	ldr	r1, [r3, #12]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	061a      	lsls	r2, r3, #24
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b2e:	e035      	b.n	8006b9c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68d9      	ldr	r1, [r3, #12]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	4618      	mov	r0, r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	4403      	add	r3, r0
 8006b48:	3b1e      	subs	r3, #30
 8006b4a:	409a      	lsls	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b54:	e022      	b.n	8006b9c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6919      	ldr	r1, [r3, #16]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	4613      	mov	r3, r2
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	4413      	add	r3, r2
 8006b6a:	2207      	movs	r2, #7
 8006b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b70:	43da      	mvns	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	400a      	ands	r2, r1
 8006b78:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6919      	ldr	r1, [r3, #16]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	4403      	add	r3, r0
 8006b92:	409a      	lsls	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b06      	cmp	r3, #6
 8006ba2:	d824      	bhi.n	8006bee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3b05      	subs	r3, #5
 8006bb6:	221f      	movs	r2, #31
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	43da      	mvns	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	400a      	ands	r2, r1
 8006bc4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	3b05      	subs	r3, #5
 8006be0:	fa00 f203 	lsl.w	r2, r0, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	635a      	str	r2, [r3, #52]	; 0x34
 8006bec:	e04c      	b.n	8006c88 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	d824      	bhi.n	8006c40 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	3b23      	subs	r3, #35	; 0x23
 8006c08:	221f      	movs	r2, #31
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	43da      	mvns	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	400a      	ands	r2, r1
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	4618      	mov	r0, r3
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	3b23      	subs	r3, #35	; 0x23
 8006c32:	fa00 f203 	lsl.w	r2, r0, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c3e:	e023      	b.n	8006c88 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	3b41      	subs	r3, #65	; 0x41
 8006c52:	221f      	movs	r2, #31
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	43da      	mvns	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	400a      	ands	r2, r1
 8006c60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	4618      	mov	r0, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	3b41      	subs	r3, #65	; 0x41
 8006c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a2a      	ldr	r2, [pc, #168]	; (8006d38 <HAL_ADC_ConfigChannel+0x284>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d10a      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x1f4>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c9a:	d105      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006c9c:	4b27      	ldr	r3, [pc, #156]	; (8006d3c <HAL_ADC_ConfigChannel+0x288>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4a26      	ldr	r2, [pc, #152]	; (8006d3c <HAL_ADC_ConfigChannel+0x288>)
 8006ca2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006ca6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a22      	ldr	r2, [pc, #136]	; (8006d38 <HAL_ADC_ConfigChannel+0x284>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d109      	bne.n	8006cc6 <HAL_ADC_ConfigChannel+0x212>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b12      	cmp	r3, #18
 8006cb8:	d105      	bne.n	8006cc6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006cba:	4b20      	ldr	r3, [pc, #128]	; (8006d3c <HAL_ADC_ConfigChannel+0x288>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <HAL_ADC_ConfigChannel+0x288>)
 8006cc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cc4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <HAL_ADC_ConfigChannel+0x284>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d125      	bne.n	8006d1c <HAL_ADC_ConfigChannel+0x268>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <HAL_ADC_ConfigChannel+0x280>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d003      	beq.n	8006ce2 <HAL_ADC_ConfigChannel+0x22e>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b11      	cmp	r3, #17
 8006ce0:	d11c      	bne.n	8006d1c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006ce2:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <HAL_ADC_ConfigChannel+0x288>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <HAL_ADC_ConfigChannel+0x288>)
 8006ce8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006cec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a10      	ldr	r2, [pc, #64]	; (8006d34 <HAL_ADC_ConfigChannel+0x280>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d111      	bne.n	8006d1c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006cf8:	4b11      	ldr	r3, [pc, #68]	; (8006d40 <HAL_ADC_ConfigChannel+0x28c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a11      	ldr	r2, [pc, #68]	; (8006d44 <HAL_ADC_ConfigChannel+0x290>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	0c9a      	lsrs	r2, r3, #18
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006d0e:	e002      	b.n	8006d16 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f9      	bne.n	8006d10 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	10000012 	.word	0x10000012
 8006d38:	40012000 	.word	0x40012000
 8006d3c:	40012300 	.word	0x40012300
 8006d40:	20000008 	.word	0x20000008
 8006d44:	431bde83 	.word	0x431bde83

08006d48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006d50:	4b78      	ldr	r3, [pc, #480]	; (8006f34 <ADC_Init+0x1ec>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4a77      	ldr	r2, [pc, #476]	; (8006f34 <ADC_Init+0x1ec>)
 8006d56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006d5a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006d5c:	4b75      	ldr	r3, [pc, #468]	; (8006f34 <ADC_Init+0x1ec>)
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	4973      	ldr	r1, [pc, #460]	; (8006f34 <ADC_Init+0x1ec>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6859      	ldr	r1, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	021a      	lsls	r2, r3, #8
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006d9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6859      	ldr	r1, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6899      	ldr	r1, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	4a58      	ldr	r2, [pc, #352]	; (8006f38 <ADC_Init+0x1f0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006dea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6899      	ldr	r1, [r3, #8]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6899      	ldr	r1, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	609a      	str	r2, [r3, #8]
 8006e20:	e00f      	b.n	8006e42 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0202 	bic.w	r2, r2, #2
 8006e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6899      	ldr	r1, [r3, #8]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	005a      	lsls	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01b      	beq.n	8006ea8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006e8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6859      	ldr	r1, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	035a      	lsls	r2, r3, #13
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	e007      	b.n	8006eb8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	051a      	lsls	r2, r3, #20
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6899      	ldr	r1, [r3, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006efa:	025a      	lsls	r2, r3, #9
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6899      	ldr	r1, [r3, #8]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	029a      	lsls	r2, r3, #10
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	609a      	str	r2, [r3, #8]
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	40012300 	.word	0x40012300
 8006f38:	0f000001 	.word	0x0f000001

08006f3c <__NVIC_SetPriorityGrouping>:
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f4c:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <__NVIC_SetPriorityGrouping+0x40>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f58:	4013      	ands	r3, r2
 8006f5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <__NVIC_SetPriorityGrouping+0x44>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f6a:	4a04      	ldr	r2, [pc, #16]	; (8006f7c <__NVIC_SetPriorityGrouping+0x40>)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	60d3      	str	r3, [r2, #12]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	e000ed00 	.word	0xe000ed00
 8006f80:	05fa0000 	.word	0x05fa0000

08006f84 <__NVIC_GetPriorityGrouping>:
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f88:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <__NVIC_GetPriorityGrouping+0x18>)
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	0a1b      	lsrs	r3, r3, #8
 8006f8e:	f003 0307 	and.w	r3, r3, #7
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	e000ed00 	.word	0xe000ed00

08006fa0 <__NVIC_EnableIRQ>:
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	db0b      	blt.n	8006fca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	f003 021f 	and.w	r2, r3, #31
 8006fb8:	4907      	ldr	r1, [pc, #28]	; (8006fd8 <__NVIC_EnableIRQ+0x38>)
 8006fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8006fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	e000e100 	.word	0xe000e100

08006fdc <__NVIC_DisableIRQ>:
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	db12      	blt.n	8007014 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	f003 021f 	and.w	r2, r3, #31
 8006ff4:	490a      	ldr	r1, [pc, #40]	; (8007020 <__NVIC_DisableIRQ+0x44>)
 8006ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8007002:	3320      	adds	r3, #32
 8007004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007008:	f3bf 8f4f 	dsb	sy
}
 800700c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800700e:	f3bf 8f6f 	isb	sy
}
 8007012:	bf00      	nop
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	e000e100 	.word	0xe000e100

08007024 <__NVIC_SetPriority>:
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007034:	2b00      	cmp	r3, #0
 8007036:	db0a      	blt.n	800704e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	b2da      	uxtb	r2, r3
 800703c:	490c      	ldr	r1, [pc, #48]	; (8007070 <__NVIC_SetPriority+0x4c>)
 800703e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007042:	0112      	lsls	r2, r2, #4
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	440b      	add	r3, r1
 8007048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800704c:	e00a      	b.n	8007064 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	b2da      	uxtb	r2, r3
 8007052:	4908      	ldr	r1, [pc, #32]	; (8007074 <__NVIC_SetPriority+0x50>)
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	3b04      	subs	r3, #4
 800705c:	0112      	lsls	r2, r2, #4
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	440b      	add	r3, r1
 8007062:	761a      	strb	r2, [r3, #24]
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	e000e100 	.word	0xe000e100
 8007074:	e000ed00 	.word	0xe000ed00

08007078 <NVIC_EncodePriority>:
{
 8007078:	b480      	push	{r7}
 800707a:	b089      	sub	sp, #36	; 0x24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f1c3 0307 	rsb	r3, r3, #7
 8007092:	2b04      	cmp	r3, #4
 8007094:	bf28      	it	cs
 8007096:	2304      	movcs	r3, #4
 8007098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	3304      	adds	r3, #4
 800709e:	2b06      	cmp	r3, #6
 80070a0:	d902      	bls.n	80070a8 <NVIC_EncodePriority+0x30>
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	3b03      	subs	r3, #3
 80070a6:	e000      	b.n	80070aa <NVIC_EncodePriority+0x32>
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	fa02 f303 	lsl.w	r3, r2, r3
 80070b6:	43da      	mvns	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	401a      	ands	r2, r3
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ca:	43d9      	mvns	r1, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070d0:	4313      	orrs	r3, r2
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3724      	adds	r7, #36	; 0x24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff ff28 	bl	8006f3c <__NVIC_SetPriorityGrouping>
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007106:	f7ff ff3d 	bl	8006f84 <__NVIC_GetPriorityGrouping>
 800710a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	6978      	ldr	r0, [r7, #20]
 8007112:	f7ff ffb1 	bl	8007078 <NVIC_EncodePriority>
 8007116:	4602      	mov	r2, r0
 8007118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711c:	4611      	mov	r1, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff ff80 	bl	8007024 <__NVIC_SetPriority>
}
 8007124:	bf00      	nop
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff ff30 	bl	8006fa0 <__NVIC_EnableIRQ>
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff ff40 	bl	8006fdc <__NVIC_DisableIRQ>
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007168:	f3bf 8f5f 	dmb	sy
}
 800716c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800716e:	4b07      	ldr	r3, [pc, #28]	; (800718c <HAL_MPU_Disable+0x28>)
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	4a06      	ldr	r2, [pc, #24]	; (800718c <HAL_MPU_Disable+0x28>)
 8007174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007178:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <HAL_MPU_Disable+0x2c>)
 800717c:	2200      	movs	r2, #0
 800717e:	605a      	str	r2, [r3, #4]
}
 8007180:	bf00      	nop
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	e000ed00 	.word	0xe000ed00
 8007190:	e000ed90 	.word	0xe000ed90

08007194 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800719c:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <HAL_MPU_Enable+0x38>)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80071a6:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <HAL_MPU_Enable+0x3c>)
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <HAL_MPU_Enable+0x3c>)
 80071ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071b0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80071b2:	f3bf 8f4f 	dsb	sy
}
 80071b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80071b8:	f3bf 8f6f 	isb	sy
}
 80071bc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	e000ed90 	.word	0xe000ed90
 80071d0:	e000ed00 	.word	0xe000ed00

080071d4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	785a      	ldrb	r2, [r3, #1]
 80071e0:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <HAL_MPU_ConfigRegion+0x84>)
 80071e2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d029      	beq.n	8007240 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80071ec:	4a1a      	ldr	r2, [pc, #104]	; (8007258 <HAL_MPU_ConfigRegion+0x84>)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7b1b      	ldrb	r3, [r3, #12]
 80071f8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7adb      	ldrb	r3, [r3, #11]
 80071fe:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007200:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7a9b      	ldrb	r3, [r3, #10]
 8007206:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007208:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7b5b      	ldrb	r3, [r3, #13]
 800720e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007210:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7b9b      	ldrb	r3, [r3, #14]
 8007216:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007218:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	7bdb      	ldrb	r3, [r3, #15]
 800721e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007220:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7a5b      	ldrb	r3, [r3, #9]
 8007226:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007228:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7a1b      	ldrb	r3, [r3, #8]
 800722e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007230:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	7812      	ldrb	r2, [r2, #0]
 8007236:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007238:	4a07      	ldr	r2, [pc, #28]	; (8007258 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800723a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800723c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800723e:	e005      	b.n	800724c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <HAL_MPU_ConfigRegion+0x84>)
 8007242:	2200      	movs	r2, #0
 8007244:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8007246:	4b04      	ldr	r3, [pc, #16]	; (8007258 <HAL_MPU_ConfigRegion+0x84>)
 8007248:	2200      	movs	r2, #0
 800724a:	611a      	str	r2, [r3, #16]
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	e000ed90 	.word	0xe000ed90

0800725c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e054      	b.n	8007318 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	7f5b      	ldrb	r3, [r3, #29]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d105      	bne.n	8007284 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fb fd94 	bl	8002dac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	791b      	ldrb	r3, [r3, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a22      	ldr	r2, [pc, #136]	; (8007320 <HAL_CRC_Init+0xc4>)
 8007298:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0218 	bic.w	r2, r2, #24
 80072a8:	609a      	str	r2, [r3, #8]
 80072aa:	e00c      	b.n	80072c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6899      	ldr	r1, [r3, #8]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	461a      	mov	r2, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f834 	bl	8007324 <HAL_CRCEx_Polynomial_Set>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e028      	b.n	8007318 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	795b      	ldrb	r3, [r3, #5]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d105      	bne.n	80072da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072d6:	611a      	str	r2, [r3, #16]
 80072d8:	e004      	b.n	80072e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6912      	ldr	r2, [r2, #16]
 80072e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699a      	ldr	r2, [r3, #24]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	04c11db7 	.word	0x04c11db7

08007324 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007334:	231f      	movs	r3, #31
 8007336:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007338:	bf00      	nop
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1e5a      	subs	r2, r3, #1
 800733e:	613a      	str	r2, [r7, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d009      	beq.n	8007358 <HAL_CRCEx_Polynomial_Set+0x34>
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0f0      	beq.n	800733a <HAL_CRCEx_Polynomial_Set+0x16>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b18      	cmp	r3, #24
 800735c:	d846      	bhi.n	80073ec <HAL_CRCEx_Polynomial_Set+0xc8>
 800735e:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <HAL_CRCEx_Polynomial_Set+0x40>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	080073f3 	.word	0x080073f3
 8007368:	080073ed 	.word	0x080073ed
 800736c:	080073ed 	.word	0x080073ed
 8007370:	080073ed 	.word	0x080073ed
 8007374:	080073ed 	.word	0x080073ed
 8007378:	080073ed 	.word	0x080073ed
 800737c:	080073ed 	.word	0x080073ed
 8007380:	080073ed 	.word	0x080073ed
 8007384:	080073e1 	.word	0x080073e1
 8007388:	080073ed 	.word	0x080073ed
 800738c:	080073ed 	.word	0x080073ed
 8007390:	080073ed 	.word	0x080073ed
 8007394:	080073ed 	.word	0x080073ed
 8007398:	080073ed 	.word	0x080073ed
 800739c:	080073ed 	.word	0x080073ed
 80073a0:	080073ed 	.word	0x080073ed
 80073a4:	080073d5 	.word	0x080073d5
 80073a8:	080073ed 	.word	0x080073ed
 80073ac:	080073ed 	.word	0x080073ed
 80073b0:	080073ed 	.word	0x080073ed
 80073b4:	080073ed 	.word	0x080073ed
 80073b8:	080073ed 	.word	0x080073ed
 80073bc:	080073ed 	.word	0x080073ed
 80073c0:	080073ed 	.word	0x080073ed
 80073c4:	080073c9 	.word	0x080073c9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b06      	cmp	r3, #6
 80073cc:	d913      	bls.n	80073f6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80073d2:	e010      	b.n	80073f6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b07      	cmp	r3, #7
 80073d8:	d90f      	bls.n	80073fa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80073de:	e00c      	b.n	80073fa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	2b0f      	cmp	r3, #15
 80073e4:	d90b      	bls.n	80073fe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80073ea:	e008      	b.n	80073fe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
      break;
 80073f0:	e006      	b.n	8007400 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80073f2:	bf00      	nop
 80073f4:	e004      	b.n	8007400 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80073f6:	bf00      	nop
 80073f8:	e002      	b.n	8007400 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80073fa:	bf00      	nop
 80073fc:	e000      	b.n	8007400 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80073fe:	bf00      	nop
  }
  if (status == HAL_OK)
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10d      	bne.n	8007422 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f023 0118 	bic.w	r1, r3, #24
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	430a      	orrs	r2, r1
 8007420:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
}
 8007424:	4618      	mov	r0, r3
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e069      	b.n	8007516 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fb fccc 	bl	8002dec <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	4b2a      	ldr	r3, [pc, #168]	; (8007520 <HAL_DCMI_Init+0xf0>)
 8007476:	400b      	ands	r3, r1
 8007478:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6819      	ldr	r1, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800748e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800749a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80074a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80074b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80074be:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d112      	bne.n	80074f6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	7f1b      	ldrb	r3, [r3, #28]
 80074d4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7f5b      	ldrb	r3, [r3, #29]
 80074da:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80074dc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	7f9b      	ldrb	r3, [r3, #30]
 80074e2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80074e4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	7fdb      	ldrb	r3, [r3, #31]
 80074ec:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80074f2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80074f4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 021e 	orr.w	r2, r2, #30
 8007504:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	ffe0f007 	.word	0xffe0f007

08007524 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d016      	beq.n	800756c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2204      	movs	r2, #4
 8007544:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754a:	f043 0202 	orr.w	r2, r3, #2
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2204      	movs	r2, #4
 8007556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800755e:	4a35      	ldr	r2, [pc, #212]	; (8007634 <HAL_DCMI_IRQHandler+0x110>)
 8007560:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fa2a 	bl	80079c0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01e      	beq.n	80075b4 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2202      	movs	r2, #2
 800757c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007582:	f043 0201 	orr.w	r2, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2204      	movs	r2, #4
 800758e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007596:	4a27      	ldr	r2, [pc, #156]	; (8007634 <HAL_DCMI_IRQHandler+0x110>)
 8007598:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fa0e 	bl	80079c0 <HAL_DMA_Abort_IT>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d004      	beq.n	80075b4 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f86a 	bl	8007688 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d006      	beq.n	80075cc <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2210      	movs	r2, #16
 80075c4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f840 	bl	800764c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f003 0308 	and.w	r3, r3, #8
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d006      	beq.n	80075e4 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2208      	movs	r2, #8
 80075dc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f83e 	bl	8007660 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01d      	beq.n	800762a <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d107      	bne.n	800760c <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 021e 	bic.w	r2, r2, #30
 800760a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2201      	movs	r2, #1
 8007622:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f825 	bl	8007674 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	08007689 	.word	0x08007689

08007638 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800769a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769c:	2b02      	cmp	r3, #2
 800769e:	d009      	beq.n	80076b4 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff ffbf 	bl	8007638 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 80076ba:	bf00      	nop
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80076d0:	f7ff f97c 	bl	80069cc <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e099      	b.n	8007814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0201 	bic.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007700:	e00f      	b.n	8007722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007702:	f7ff f963 	bl	80069cc <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b05      	cmp	r3, #5
 800770e:	d908      	bls.n	8007722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2203      	movs	r2, #3
 800771a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e078      	b.n	8007814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e8      	bne.n	8007702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	4b38      	ldr	r3, [pc, #224]	; (800781c <HAL_DMA_Init+0x158>)
 800773c:	4013      	ands	r3, r2
 800773e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800774e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800775a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4313      	orrs	r3, r2
 8007772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b04      	cmp	r3, #4
 800777a:	d107      	bne.n	800778c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	4313      	orrs	r3, r2
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	4313      	orrs	r3, r2
 800778a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f023 0307 	bic.w	r3, r3, #7
 80077a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d117      	bne.n	80077e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00e      	beq.n	80077e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fb15 	bl	8007df8 <DMA_CheckFifoParam>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2240      	movs	r2, #64	; 0x40
 80077d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80077e2:	2301      	movs	r3, #1
 80077e4:	e016      	b.n	8007814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 facc 	bl	8007d8c <DMA_CalcBaseAndBitshift>
 80077f4:	4603      	mov	r3, r0
 80077f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fc:	223f      	movs	r2, #63	; 0x3f
 80077fe:	409a      	lsls	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	f010803f 	.word	0xf010803f

08007820 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007836:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800783e:	2b01      	cmp	r3, #1
 8007840:	d101      	bne.n	8007846 <HAL_DMA_Start_IT+0x26>
 8007842:	2302      	movs	r3, #2
 8007844:	e048      	b.n	80078d8 <HAL_DMA_Start_IT+0xb8>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b01      	cmp	r3, #1
 8007858:	d137      	bne.n	80078ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2202      	movs	r2, #2
 800785e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fa5e 	bl	8007d30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007878:	223f      	movs	r2, #63	; 0x3f
 800787a:	409a      	lsls	r2, r3
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0216 	orr.w	r2, r2, #22
 800788e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695a      	ldr	r2, [r3, #20]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800789e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0208 	orr.w	r2, r2, #8
 80078b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	e005      	b.n	80078d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80078d2:	2302      	movs	r3, #2
 80078d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80078ee:	f7ff f86d 	bl	80069cc <HAL_GetTick>
 80078f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d008      	beq.n	8007912 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2280      	movs	r2, #128	; 0x80
 8007904:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e052      	b.n	80079b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0216 	bic.w	r2, r2, #22
 8007920:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695a      	ldr	r2, [r3, #20]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007930:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <HAL_DMA_Abort+0x62>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0208 	bic.w	r2, r2, #8
 8007950:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0201 	bic.w	r2, r2, #1
 8007960:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007962:	e013      	b.n	800798c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007964:	f7ff f832 	bl	80069cc <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b05      	cmp	r3, #5
 8007970:	d90c      	bls.n	800798c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2203      	movs	r2, #3
 8007984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e015      	b.n	80079b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e4      	bne.n	8007964 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800799e:	223f      	movs	r2, #63	; 0x3f
 80079a0:	409a      	lsls	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d004      	beq.n	80079de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2280      	movs	r2, #128	; 0x80
 80079d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e00c      	b.n	80079f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2205      	movs	r2, #5
 80079e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0201 	bic.w	r2, r2, #1
 80079f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007a10:	4b92      	ldr	r3, [pc, #584]	; (8007c5c <HAL_DMA_IRQHandler+0x258>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a92      	ldr	r2, [pc, #584]	; (8007c60 <HAL_DMA_IRQHandler+0x25c>)
 8007a16:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1a:	0a9b      	lsrs	r3, r3, #10
 8007a1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2e:	2208      	movs	r2, #8
 8007a30:	409a      	lsls	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01a      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d013      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0204 	bic.w	r2, r2, #4
 8007a56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	409a      	lsls	r2, r3
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a68:	f043 0201 	orr.w	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a74:	2201      	movs	r2, #1
 8007a76:	409a      	lsls	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d012      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a92:	2201      	movs	r2, #1
 8007a94:	409a      	lsls	r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9e:	f043 0202 	orr.w	r2, r3, #2
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aaa:	2204      	movs	r2, #4
 8007aac:	409a      	lsls	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d012      	beq.n	8007adc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac8:	2204      	movs	r2, #4
 8007aca:	409a      	lsls	r2, r3
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad4:	f043 0204 	orr.w	r2, r3, #4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae0:	2210      	movs	r2, #16
 8007ae2:	409a      	lsls	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d043      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d03c      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007afe:	2210      	movs	r2, #16
 8007b00:	409a      	lsls	r2, r3
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d018      	beq.n	8007b46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d108      	bne.n	8007b34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d024      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
 8007b32:	e01f      	b.n	8007b74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01b      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4798      	blx	r3
 8007b44:	e016      	b.n	8007b74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d107      	bne.n	8007b64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0208 	bic.w	r2, r2, #8
 8007b62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b78:	2220      	movs	r2, #32
 8007b7a:	409a      	lsls	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 808e 	beq.w	8007ca2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 8086 	beq.w	8007ca2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	409a      	lsls	r2, r3
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	d136      	bne.n	8007c1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 0216 	bic.w	r2, r2, #22
 8007bbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	695a      	ldr	r2, [r3, #20]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <HAL_DMA_IRQHandler+0x1da>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d007      	beq.n	8007bee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0208 	bic.w	r2, r2, #8
 8007bec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf2:	223f      	movs	r2, #63	; 0x3f
 8007bf4:	409a      	lsls	r2, r3
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d07d      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
        }
        return;
 8007c1a:	e078      	b.n	8007d0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01c      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d108      	bne.n	8007c4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d030      	beq.n	8007ca2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	4798      	blx	r3
 8007c48:	e02b      	b.n	8007ca2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d027      	beq.n	8007ca2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
 8007c5a:	e022      	b.n	8007ca2 <HAL_DMA_IRQHandler+0x29e>
 8007c5c:	20000008 	.word	0x20000008
 8007c60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10f      	bne.n	8007c92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0210 	bic.w	r2, r2, #16
 8007c80:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d032      	beq.n	8007d10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d022      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2205      	movs	r2, #5
 8007cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0201 	bic.w	r2, r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	60bb      	str	r3, [r7, #8]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d307      	bcc.n	8007cea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f2      	bne.n	8007cce <HAL_DMA_IRQHandler+0x2ca>
 8007ce8:	e000      	b.n	8007cec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007cea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
 8007d0c:	e000      	b.n	8007d10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007d0e:	bf00      	nop
    }
  }
}
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop

08007d18 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d108      	bne.n	8007d70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007d6e:	e007      	b.n	8007d80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	60da      	str	r2, [r3, #12]
}
 8007d80:	bf00      	nop
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	3b10      	subs	r3, #16
 8007d9c:	4a13      	ldr	r2, [pc, #76]	; (8007dec <DMA_CalcBaseAndBitshift+0x60>)
 8007d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007da2:	091b      	lsrs	r3, r3, #4
 8007da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007da6:	4a12      	ldr	r2, [pc, #72]	; (8007df0 <DMA_CalcBaseAndBitshift+0x64>)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d908      	bls.n	8007dcc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <DMA_CalcBaseAndBitshift+0x68>)
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	1d1a      	adds	r2, r3, #4
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	659a      	str	r2, [r3, #88]	; 0x58
 8007dca:	e006      	b.n	8007dda <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <DMA_CalcBaseAndBitshift+0x68>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	aaaaaaab 	.word	0xaaaaaaab
 8007df0:	0801e24c 	.word	0x0801e24c
 8007df4:	fffffc00 	.word	0xfffffc00

08007df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d11f      	bne.n	8007e52 <DMA_CheckFifoParam+0x5a>
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d856      	bhi.n	8007ec6 <DMA_CheckFifoParam+0xce>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <DMA_CheckFifoParam+0x28>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e31 	.word	0x08007e31
 8007e24:	08007e43 	.word	0x08007e43
 8007e28:	08007e31 	.word	0x08007e31
 8007e2c:	08007ec7 	.word	0x08007ec7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d046      	beq.n	8007eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e40:	e043      	b.n	8007eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e4a:	d140      	bne.n	8007ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e50:	e03d      	b.n	8007ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e5a:	d121      	bne.n	8007ea0 <DMA_CheckFifoParam+0xa8>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d837      	bhi.n	8007ed2 <DMA_CheckFifoParam+0xda>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <DMA_CheckFifoParam+0x70>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e79 	.word	0x08007e79
 8007e6c:	08007e7f 	.word	0x08007e7f
 8007e70:	08007e79 	.word	0x08007e79
 8007e74:	08007e91 	.word	0x08007e91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e7c:	e030      	b.n	8007ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d025      	beq.n	8007ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e8e:	e022      	b.n	8007ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e98:	d11f      	bne.n	8007eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007e9e:	e01c      	b.n	8007eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d903      	bls.n	8007eae <DMA_CheckFifoParam+0xb6>
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d003      	beq.n	8007eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007eac:	e018      	b.n	8007ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb2:	e015      	b.n	8007ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00e      	beq.n	8007ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec4:	e00b      	b.n	8007ede <DMA_CheckFifoParam+0xe6>
      break;
 8007ec6:	bf00      	nop
 8007ec8:	e00a      	b.n	8007ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8007eca:	bf00      	nop
 8007ecc:	e008      	b.n	8007ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e006      	b.n	8007ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e004      	b.n	8007ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ed6:	bf00      	nop
 8007ed8:	e002      	b.n	8007ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ede:	bf00      	nop
    }
  } 
  
  return status; 
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop

08007ef0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e039      	b.n	8007f76 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fb f862 	bl	8002fe0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f40:	f023 0107 	bic.w	r1, r3, #7
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f56:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <HAL_DMA2D_Init+0x90>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	68d1      	ldr	r1, [r2, #12]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	430b      	orrs	r3, r1
 8007f64:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	ffffc000 	.word	0xffffc000

08007f84 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_DMA2D_Start+0x1c>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e018      	b.n	8007fd2 <HAL_DMA2D_Start+0x4e>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 fa98 	bl	80084f0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0201 	orr.w	r2, r2, #1
 8007fce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b086      	sub	sp, #24
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d056      	beq.n	80080a4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ff6:	f7fe fce9 	bl	80069cc <HAL_GetTick>
 8007ffa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007ffc:	e04b      	b.n	8008096 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800800c:	2b00      	cmp	r3, #0
 800800e:	d023      	beq.n	8008058 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	f043 0202 	orr.w	r2, r3, #2
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008034:	f043 0201 	orr.w	r2, r3, #1
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2221      	movs	r2, #33	; 0x21
 8008042:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2204      	movs	r2, #4
 8008048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e0a5      	b.n	80081a4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800805e:	d01a      	beq.n	8008096 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008060:	f7fe fcb4 	bl	80069cc <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d302      	bcc.n	8008076 <HAL_DMA2D_PollForTransfer+0x9c>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10f      	bne.n	8008096 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807a:	f043 0220 	orr.w	r2, r3, #32
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2203      	movs	r2, #3
 8008086:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e086      	b.n	80081a4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0ac      	beq.n	8007ffe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d061      	beq.n	800818a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80080c6:	f7fe fc81 	bl	80069cc <HAL_GetTick>
 80080ca:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80080cc:	e056      	b.n	800817c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d02e      	beq.n	800813e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ee:	f043 0204 	orr.w	r2, r3, #4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d005      	beq.n	800810c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008104:	f043 0202 	orr.w	r2, r3, #2
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811a:	f043 0201 	orr.w	r2, r3, #1
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2229      	movs	r2, #41	; 0x29
 8008128:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2204      	movs	r2, #4
 800812e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e032      	b.n	80081a4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008144:	d01a      	beq.n	800817c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008146:	f7fe fc41 	bl	80069cc <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d302      	bcc.n	800815c <HAL_DMA2D_PollForTransfer+0x182>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10f      	bne.n	800817c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008160:	f043 0220 	orr.w	r2, r3, #32
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2203      	movs	r2, #3
 800816c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e013      	b.n	80081a4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f003 0310 	and.w	r3, r3, #16
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0a1      	beq.n	80080ce <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2212      	movs	r2, #18
 8008190:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d026      	beq.n	800821c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d021      	beq.n	800821c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081e6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ec:	f043 0201 	orr.w	r2, r3, #1
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2201      	movs	r2, #1
 80081fa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2204      	movs	r2, #4
 8008200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d003      	beq.n	800821c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f003 0320 	and.w	r3, r3, #32
 8008222:	2b00      	cmp	r3, #0
 8008224:	d026      	beq.n	8008274 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d021      	beq.n	8008274 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800823e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2220      	movs	r2, #32
 8008246:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824c:	f043 0202 	orr.w	r2, r3, #2
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2204      	movs	r2, #4
 8008258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b00      	cmp	r3, #0
 800827c:	d026      	beq.n	80082cc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008284:	2b00      	cmp	r3, #0
 8008286:	d021      	beq.n	80082cc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008296:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2208      	movs	r2, #8
 800829e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a4:	f043 0204 	orr.w	r2, r3, #4
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2204      	movs	r2, #4
 80082b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d013      	beq.n	80082fe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00e      	beq.n	80082fe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2204      	movs	r2, #4
 80082f6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f853 	bl	80083a4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d024      	beq.n	8008352 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800830e:	2b00      	cmp	r3, #0
 8008310:	d01f      	beq.n	8008352 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008320:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2202      	movs	r2, #2
 8008328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f003 0310 	and.w	r3, r3, #16
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01f      	beq.n	800839c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d01a      	beq.n	800839c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008374:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2210      	movs	r2, #16
 800837c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f80e 	bl	80083b8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800839c:	bf00      	nop
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d101      	bne.n	80083ec <HAL_DMA2D_ConfigLayer+0x20>
 80083e8:	2302      	movs	r3, #2
 80083ea:	e079      	b.n	80084e0 <HAL_DMA2D_ConfigLayer+0x114>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	3318      	adds	r3, #24
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	4413      	add	r3, r2
 8008406:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	041b      	lsls	r3, r3, #16
 8008412:	4313      	orrs	r3, r2
 8008414:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8008416:	4b35      	ldr	r3, [pc, #212]	; (80084ec <HAL_DMA2D_ConfigLayer+0x120>)
 8008418:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	2b0a      	cmp	r3, #10
 8008420:	d003      	beq.n	800842a <HAL_DMA2D_ConfigLayer+0x5e>
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2b09      	cmp	r3, #9
 8008428:	d107      	bne.n	800843a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	e005      	b.n	8008446 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	061b      	lsls	r3, r3, #24
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	4313      	orrs	r3, r2
 8008444:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d120      	bne.n	800848e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	43db      	mvns	r3, r3
 8008456:	ea02 0103 	and.w	r1, r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	430a      	orrs	r2, r1
 8008462:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	6812      	ldr	r2, [r2, #0]
 800846c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2b0a      	cmp	r3, #10
 8008474:	d003      	beq.n	800847e <HAL_DMA2D_ConfigLayer+0xb2>
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2b09      	cmp	r3, #9
 800847c:	d127      	bne.n	80084ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800848a:	629a      	str	r2, [r3, #40]	; 0x28
 800848c:	e01f      	b.n	80084ce <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69da      	ldr	r2, [r3, #28]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	43db      	mvns	r3, r3
 8008498:	ea02 0103 	and.w	r1, r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	6812      	ldr	r2, [r2, #0]
 80084ae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	2b0a      	cmp	r3, #10
 80084b6:	d003      	beq.n	80084c0 <HAL_DMA2D_ConfigLayer+0xf4>
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b09      	cmp	r3, #9
 80084be:	d106      	bne.n	80084ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	68da      	ldr	r2, [r3, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80084cc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	ff03000f 	.word	0xff03000f

080084f0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b08b      	sub	sp, #44	; 0x2c
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008504:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	041a      	lsls	r2, r3, #16
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	431a      	orrs	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	430a      	orrs	r2, r1
 8008516:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008528:	d174      	bne.n	8008614 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008530:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008538:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008540:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d108      	bne.n	8008562 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	431a      	orrs	r2, r3
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	4313      	orrs	r3, r2
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
 8008560:	e053      	b.n	800860a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d106      	bne.n	8008578 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	4313      	orrs	r3, r2
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	4313      	orrs	r3, r2
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
 8008576:	e048      	b.n	800860a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d111      	bne.n	80085a4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	0cdb      	lsrs	r3, r3, #19
 8008584:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	0a9b      	lsrs	r3, r3, #10
 800858a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	08db      	lsrs	r3, r3, #3
 8008590:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	02db      	lsls	r3, r3, #11
 800859a:	4313      	orrs	r3, r2
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
 80085a2:	e032      	b.n	800860a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d117      	bne.n	80085dc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	0fdb      	lsrs	r3, r3, #31
 80085b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	0cdb      	lsrs	r3, r3, #19
 80085b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	0adb      	lsrs	r3, r3, #11
 80085bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	08db      	lsrs	r3, r3, #3
 80085c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	029b      	lsls	r3, r3, #10
 80085cc:	431a      	orrs	r2, r3
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	03db      	lsls	r3, r3, #15
 80085d2:	4313      	orrs	r3, r2
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
 80085da:	e016      	b.n	800860a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	0f1b      	lsrs	r3, r3, #28
 80085e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	0d1b      	lsrs	r3, r3, #20
 80085e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	0b1b      	lsrs	r3, r3, #12
 80085ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	091b      	lsrs	r3, r3, #4
 80085f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	011a      	lsls	r2, r3, #4
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	021b      	lsls	r3, r3, #8
 80085fc:	431a      	orrs	r2, r3
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	031b      	lsls	r3, r3, #12
 8008602:	4313      	orrs	r3, r2
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	4313      	orrs	r3, r2
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008610:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008612:	e003      	b.n	800861c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	60da      	str	r2, [r3, #12]
}
 800861c:	bf00      	nop
 800861e:	372c      	adds	r7, #44	; 0x2c
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008628:	b480      	push	{r7}
 800862a:	b089      	sub	sp, #36	; 0x24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008632:	2300      	movs	r3, #0
 8008634:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008636:	2300      	movs	r3, #0
 8008638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800863a:	2300      	movs	r3, #0
 800863c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800863e:	2300      	movs	r3, #0
 8008640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	e175      	b.n	8008934 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008648:	2201      	movs	r2, #1
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	fa02 f303 	lsl.w	r3, r2, r3
 8008650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4013      	ands	r3, r2
 800865a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	429a      	cmp	r2, r3
 8008662:	f040 8164 	bne.w	800892e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d00b      	beq.n	8008686 <HAL_GPIO_Init+0x5e>
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	2b02      	cmp	r3, #2
 8008674:	d007      	beq.n	8008686 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800867a:	2b11      	cmp	r3, #17
 800867c:	d003      	beq.n	8008686 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	2b12      	cmp	r3, #18
 8008684:	d130      	bne.n	80086e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	2203      	movs	r2, #3
 8008692:	fa02 f303 	lsl.w	r3, r2, r3
 8008696:	43db      	mvns	r3, r3
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	4013      	ands	r3, r2
 800869c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	fa02 f303 	lsl.w	r3, r2, r3
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80086bc:	2201      	movs	r2, #1
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	43db      	mvns	r3, r3
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	4013      	ands	r3, r2
 80086ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	091b      	lsrs	r3, r3, #4
 80086d2:	f003 0201 	and.w	r2, r3, #1
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	4313      	orrs	r3, r2
 80086e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	2203      	movs	r2, #3
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	43db      	mvns	r3, r3
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	4013      	ands	r3, r2
 80086fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	fa02 f303 	lsl.w	r3, r2, r3
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	4313      	orrs	r3, r2
 8008710:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2b02      	cmp	r3, #2
 800871e:	d003      	beq.n	8008728 <HAL_GPIO_Init+0x100>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b12      	cmp	r3, #18
 8008726:	d123      	bne.n	8008770 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	08da      	lsrs	r2, r3, #3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3208      	adds	r2, #8
 8008730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	f003 0307 	and.w	r3, r3, #7
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	220f      	movs	r2, #15
 8008740:	fa02 f303 	lsl.w	r3, r2, r3
 8008744:	43db      	mvns	r3, r3
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	4013      	ands	r3, r2
 800874a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	fa02 f303 	lsl.w	r3, r2, r3
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	4313      	orrs	r3, r2
 8008760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	08da      	lsrs	r2, r3, #3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3208      	adds	r2, #8
 800876a:	69b9      	ldr	r1, [r7, #24]
 800876c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	2203      	movs	r2, #3
 800877c:	fa02 f303 	lsl.w	r3, r2, r3
 8008780:	43db      	mvns	r3, r3
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	4013      	ands	r3, r2
 8008786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f003 0203 	and.w	r2, r3, #3
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	4313      	orrs	r3, r2
 800879c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 80be 	beq.w	800892e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087b2:	4b66      	ldr	r3, [pc, #408]	; (800894c <HAL_GPIO_Init+0x324>)
 80087b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b6:	4a65      	ldr	r2, [pc, #404]	; (800894c <HAL_GPIO_Init+0x324>)
 80087b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087bc:	6453      	str	r3, [r2, #68]	; 0x44
 80087be:	4b63      	ldr	r3, [pc, #396]	; (800894c <HAL_GPIO_Init+0x324>)
 80087c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80087ca:	4a61      	ldr	r2, [pc, #388]	; (8008950 <HAL_GPIO_Init+0x328>)
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	089b      	lsrs	r3, r3, #2
 80087d0:	3302      	adds	r3, #2
 80087d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	220f      	movs	r2, #15
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	43db      	mvns	r3, r3
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	4013      	ands	r3, r2
 80087ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a58      	ldr	r2, [pc, #352]	; (8008954 <HAL_GPIO_Init+0x32c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d037      	beq.n	8008866 <HAL_GPIO_Init+0x23e>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a57      	ldr	r2, [pc, #348]	; (8008958 <HAL_GPIO_Init+0x330>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d031      	beq.n	8008862 <HAL_GPIO_Init+0x23a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a56      	ldr	r2, [pc, #344]	; (800895c <HAL_GPIO_Init+0x334>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d02b      	beq.n	800885e <HAL_GPIO_Init+0x236>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a55      	ldr	r2, [pc, #340]	; (8008960 <HAL_GPIO_Init+0x338>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d025      	beq.n	800885a <HAL_GPIO_Init+0x232>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a54      	ldr	r2, [pc, #336]	; (8008964 <HAL_GPIO_Init+0x33c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d01f      	beq.n	8008856 <HAL_GPIO_Init+0x22e>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a53      	ldr	r2, [pc, #332]	; (8008968 <HAL_GPIO_Init+0x340>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d019      	beq.n	8008852 <HAL_GPIO_Init+0x22a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a52      	ldr	r2, [pc, #328]	; (800896c <HAL_GPIO_Init+0x344>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d013      	beq.n	800884e <HAL_GPIO_Init+0x226>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a51      	ldr	r2, [pc, #324]	; (8008970 <HAL_GPIO_Init+0x348>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d00d      	beq.n	800884a <HAL_GPIO_Init+0x222>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a50      	ldr	r2, [pc, #320]	; (8008974 <HAL_GPIO_Init+0x34c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d007      	beq.n	8008846 <HAL_GPIO_Init+0x21e>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a4f      	ldr	r2, [pc, #316]	; (8008978 <HAL_GPIO_Init+0x350>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d101      	bne.n	8008842 <HAL_GPIO_Init+0x21a>
 800883e:	2309      	movs	r3, #9
 8008840:	e012      	b.n	8008868 <HAL_GPIO_Init+0x240>
 8008842:	230a      	movs	r3, #10
 8008844:	e010      	b.n	8008868 <HAL_GPIO_Init+0x240>
 8008846:	2308      	movs	r3, #8
 8008848:	e00e      	b.n	8008868 <HAL_GPIO_Init+0x240>
 800884a:	2307      	movs	r3, #7
 800884c:	e00c      	b.n	8008868 <HAL_GPIO_Init+0x240>
 800884e:	2306      	movs	r3, #6
 8008850:	e00a      	b.n	8008868 <HAL_GPIO_Init+0x240>
 8008852:	2305      	movs	r3, #5
 8008854:	e008      	b.n	8008868 <HAL_GPIO_Init+0x240>
 8008856:	2304      	movs	r3, #4
 8008858:	e006      	b.n	8008868 <HAL_GPIO_Init+0x240>
 800885a:	2303      	movs	r3, #3
 800885c:	e004      	b.n	8008868 <HAL_GPIO_Init+0x240>
 800885e:	2302      	movs	r3, #2
 8008860:	e002      	b.n	8008868 <HAL_GPIO_Init+0x240>
 8008862:	2301      	movs	r3, #1
 8008864:	e000      	b.n	8008868 <HAL_GPIO_Init+0x240>
 8008866:	2300      	movs	r3, #0
 8008868:	69fa      	ldr	r2, [r7, #28]
 800886a:	f002 0203 	and.w	r2, r2, #3
 800886e:	0092      	lsls	r2, r2, #2
 8008870:	4093      	lsls	r3, r2
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	4313      	orrs	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008878:	4935      	ldr	r1, [pc, #212]	; (8008950 <HAL_GPIO_Init+0x328>)
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	089b      	lsrs	r3, r3, #2
 800887e:	3302      	adds	r3, #2
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008886:	4b3d      	ldr	r3, [pc, #244]	; (800897c <HAL_GPIO_Init+0x354>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	43db      	mvns	r3, r3
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	4013      	ands	r3, r2
 8008894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80088a2:	69ba      	ldr	r2, [r7, #24]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80088aa:	4a34      	ldr	r2, [pc, #208]	; (800897c <HAL_GPIO_Init+0x354>)
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80088b0:	4b32      	ldr	r3, [pc, #200]	; (800897c <HAL_GPIO_Init+0x354>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	43db      	mvns	r3, r3
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	4013      	ands	r3, r2
 80088be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80088d4:	4a29      	ldr	r2, [pc, #164]	; (800897c <HAL_GPIO_Init+0x354>)
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088da:	4b28      	ldr	r3, [pc, #160]	; (800897c <HAL_GPIO_Init+0x354>)
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	43db      	mvns	r3, r3
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	4013      	ands	r3, r2
 80088e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80088fe:	4a1f      	ldr	r2, [pc, #124]	; (800897c <HAL_GPIO_Init+0x354>)
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008904:	4b1d      	ldr	r3, [pc, #116]	; (800897c <HAL_GPIO_Init+0x354>)
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	43db      	mvns	r3, r3
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	4013      	ands	r3, r2
 8008912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008928:	4a14      	ldr	r2, [pc, #80]	; (800897c <HAL_GPIO_Init+0x354>)
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	3301      	adds	r3, #1
 8008932:	61fb      	str	r3, [r7, #28]
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	2b0f      	cmp	r3, #15
 8008938:	f67f ae86 	bls.w	8008648 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	3724      	adds	r7, #36	; 0x24
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	40023800 	.word	0x40023800
 8008950:	40013800 	.word	0x40013800
 8008954:	40020000 	.word	0x40020000
 8008958:	40020400 	.word	0x40020400
 800895c:	40020800 	.word	0x40020800
 8008960:	40020c00 	.word	0x40020c00
 8008964:	40021000 	.word	0x40021000
 8008968:	40021400 	.word	0x40021400
 800896c:	40021800 	.word	0x40021800
 8008970:	40021c00 	.word	0x40021c00
 8008974:	40022000 	.word	0x40022000
 8008978:	40022400 	.word	0x40022400
 800897c:	40013c00 	.word	0x40013c00

08008980 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800898a:	2300      	movs	r3, #0
 800898c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008992:	2300      	movs	r3, #0
 8008994:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008996:	2300      	movs	r3, #0
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	e0d9      	b.n	8008b50 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800899c:	2201      	movs	r2, #1
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	fa02 f303 	lsl.w	r3, r2, r3
 80089a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	4013      	ands	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	f040 80c9 	bne.w	8008b4a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80089b8:	4a6b      	ldr	r2, [pc, #428]	; (8008b68 <HAL_GPIO_DeInit+0x1e8>)
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	089b      	lsrs	r3, r3, #2
 80089be:	3302      	adds	r3, #2
 80089c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089c4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	220f      	movs	r2, #15
 80089d0:	fa02 f303 	lsl.w	r3, r2, r3
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	4013      	ands	r3, r2
 80089d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a63      	ldr	r2, [pc, #396]	; (8008b6c <HAL_GPIO_DeInit+0x1ec>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d037      	beq.n	8008a52 <HAL_GPIO_DeInit+0xd2>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a62      	ldr	r2, [pc, #392]	; (8008b70 <HAL_GPIO_DeInit+0x1f0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d031      	beq.n	8008a4e <HAL_GPIO_DeInit+0xce>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a61      	ldr	r2, [pc, #388]	; (8008b74 <HAL_GPIO_DeInit+0x1f4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d02b      	beq.n	8008a4a <HAL_GPIO_DeInit+0xca>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a60      	ldr	r2, [pc, #384]	; (8008b78 <HAL_GPIO_DeInit+0x1f8>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d025      	beq.n	8008a46 <HAL_GPIO_DeInit+0xc6>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a5f      	ldr	r2, [pc, #380]	; (8008b7c <HAL_GPIO_DeInit+0x1fc>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d01f      	beq.n	8008a42 <HAL_GPIO_DeInit+0xc2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a5e      	ldr	r2, [pc, #376]	; (8008b80 <HAL_GPIO_DeInit+0x200>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d019      	beq.n	8008a3e <HAL_GPIO_DeInit+0xbe>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a5d      	ldr	r2, [pc, #372]	; (8008b84 <HAL_GPIO_DeInit+0x204>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d013      	beq.n	8008a3a <HAL_GPIO_DeInit+0xba>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a5c      	ldr	r2, [pc, #368]	; (8008b88 <HAL_GPIO_DeInit+0x208>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00d      	beq.n	8008a36 <HAL_GPIO_DeInit+0xb6>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a5b      	ldr	r2, [pc, #364]	; (8008b8c <HAL_GPIO_DeInit+0x20c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d007      	beq.n	8008a32 <HAL_GPIO_DeInit+0xb2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a5a      	ldr	r2, [pc, #360]	; (8008b90 <HAL_GPIO_DeInit+0x210>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d101      	bne.n	8008a2e <HAL_GPIO_DeInit+0xae>
 8008a2a:	2309      	movs	r3, #9
 8008a2c:	e012      	b.n	8008a54 <HAL_GPIO_DeInit+0xd4>
 8008a2e:	230a      	movs	r3, #10
 8008a30:	e010      	b.n	8008a54 <HAL_GPIO_DeInit+0xd4>
 8008a32:	2308      	movs	r3, #8
 8008a34:	e00e      	b.n	8008a54 <HAL_GPIO_DeInit+0xd4>
 8008a36:	2307      	movs	r3, #7
 8008a38:	e00c      	b.n	8008a54 <HAL_GPIO_DeInit+0xd4>
 8008a3a:	2306      	movs	r3, #6
 8008a3c:	e00a      	b.n	8008a54 <HAL_GPIO_DeInit+0xd4>
 8008a3e:	2305      	movs	r3, #5
 8008a40:	e008      	b.n	8008a54 <HAL_GPIO_DeInit+0xd4>
 8008a42:	2304      	movs	r3, #4
 8008a44:	e006      	b.n	8008a54 <HAL_GPIO_DeInit+0xd4>
 8008a46:	2303      	movs	r3, #3
 8008a48:	e004      	b.n	8008a54 <HAL_GPIO_DeInit+0xd4>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e002      	b.n	8008a54 <HAL_GPIO_DeInit+0xd4>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e000      	b.n	8008a54 <HAL_GPIO_DeInit+0xd4>
 8008a52:	2300      	movs	r3, #0
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	f002 0203 	and.w	r2, r2, #3
 8008a5a:	0092      	lsls	r2, r2, #2
 8008a5c:	4093      	lsls	r3, r2
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d132      	bne.n	8008aca <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008a64:	4b4b      	ldr	r3, [pc, #300]	; (8008b94 <HAL_GPIO_DeInit+0x214>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	43db      	mvns	r3, r3
 8008a6c:	4949      	ldr	r1, [pc, #292]	; (8008b94 <HAL_GPIO_DeInit+0x214>)
 8008a6e:	4013      	ands	r3, r2
 8008a70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008a72:	4b48      	ldr	r3, [pc, #288]	; (8008b94 <HAL_GPIO_DeInit+0x214>)
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	4946      	ldr	r1, [pc, #280]	; (8008b94 <HAL_GPIO_DeInit+0x214>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008a80:	4b44      	ldr	r3, [pc, #272]	; (8008b94 <HAL_GPIO_DeInit+0x214>)
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	43db      	mvns	r3, r3
 8008a88:	4942      	ldr	r1, [pc, #264]	; (8008b94 <HAL_GPIO_DeInit+0x214>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008a8e:	4b41      	ldr	r3, [pc, #260]	; (8008b94 <HAL_GPIO_DeInit+0x214>)
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	43db      	mvns	r3, r3
 8008a96:	493f      	ldr	r1, [pc, #252]	; (8008b94 <HAL_GPIO_DeInit+0x214>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	220f      	movs	r2, #15
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008aac:	4a2e      	ldr	r2, [pc, #184]	; (8008b68 <HAL_GPIO_DeInit+0x1e8>)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	089b      	lsrs	r3, r3, #2
 8008ab2:	3302      	adds	r3, #2
 8008ab4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	43da      	mvns	r2, r3
 8008abc:	482a      	ldr	r0, [pc, #168]	; (8008b68 <HAL_GPIO_DeInit+0x1e8>)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	089b      	lsrs	r3, r3, #2
 8008ac2:	400a      	ands	r2, r1
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	2103      	movs	r1, #3
 8008ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	401a      	ands	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	08da      	lsrs	r2, r3, #3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3208      	adds	r2, #8
 8008ae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	220f      	movs	r2, #15
 8008af6:	fa02 f303 	lsl.w	r3, r2, r3
 8008afa:	43db      	mvns	r3, r3
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	08d2      	lsrs	r2, r2, #3
 8008b00:	4019      	ands	r1, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3208      	adds	r2, #8
 8008b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	005b      	lsls	r3, r3, #1
 8008b12:	2103      	movs	r1, #3
 8008b14:	fa01 f303 	lsl.w	r3, r1, r3
 8008b18:	43db      	mvns	r3, r3
 8008b1a:	401a      	ands	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	2101      	movs	r1, #1
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2c:	43db      	mvns	r3, r3
 8008b2e:	401a      	ands	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	2103      	movs	r1, #3
 8008b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b42:	43db      	mvns	r3, r3
 8008b44:	401a      	ands	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b0f      	cmp	r3, #15
 8008b54:	f67f af22 	bls.w	800899c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	40013800 	.word	0x40013800
 8008b6c:	40020000 	.word	0x40020000
 8008b70:	40020400 	.word	0x40020400
 8008b74:	40020800 	.word	0x40020800
 8008b78:	40020c00 	.word	0x40020c00
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	40021400 	.word	0x40021400
 8008b84:	40021800 	.word	0x40021800
 8008b88:	40021c00 	.word	0x40021c00
 8008b8c:	40022000 	.word	0x40022000
 8008b90:	40022400 	.word	0x40022400
 8008b94:	40013c00 	.word	0x40013c00

08008b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	887b      	ldrh	r3, [r7, #2]
 8008baa:	4013      	ands	r3, r2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	73fb      	strb	r3, [r7, #15]
 8008bb4:	e001      	b.n	8008bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	807b      	strh	r3, [r7, #2]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008bd8:	787b      	ldrb	r3, [r7, #1]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d003      	beq.n	8008be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bde:	887a      	ldrh	r2, [r7, #2]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008be4:	e003      	b.n	8008bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008be6:	887b      	ldrh	r3, [r7, #2]
 8008be8:	041a      	lsls	r2, r3, #16
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	619a      	str	r2, [r3, #24]
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	460b      	mov	r3, r1
 8008c04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008c0c:	887a      	ldrh	r2, [r7, #2]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4013      	ands	r3, r2
 8008c12:	041a      	lsls	r2, r3, #16
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	43d9      	mvns	r1, r3
 8008c18:	887b      	ldrh	r3, [r7, #2]
 8008c1a:	400b      	ands	r3, r1
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	619a      	str	r2, [r3, #24]
}
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
	...

08008c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008c3a:	4b08      	ldr	r3, [pc, #32]	; (8008c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c3c:	695a      	ldr	r2, [r3, #20]
 8008c3e:	88fb      	ldrh	r3, [r7, #6]
 8008c40:	4013      	ands	r3, r2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d006      	beq.n	8008c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c46:	4a05      	ldr	r2, [pc, #20]	; (8008c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c48:	88fb      	ldrh	r3, [r7, #6]
 8008c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 f806 	bl	8008c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8008c54:	bf00      	nop
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	40013c00 	.word	0x40013c00

08008c60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008c6a:	bf00      	nop
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8008c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c78:	b08f      	sub	sp, #60	; 0x3c
 8008c7a:	af0a      	add	r7, sp, #40	; 0x28
 8008c7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e054      	b.n	8008d32 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f00f fe6c 	bl	8018980 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2203      	movs	r2, #3
 8008cac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f009 fd7d 	bl	80127c6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	603b      	str	r3, [r7, #0]
 8008cd2:	687e      	ldr	r6, [r7, #4]
 8008cd4:	466d      	mov	r5, sp
 8008cd6:	f106 0410 	add.w	r4, r6, #16
 8008cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ce2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008ce6:	e885 0003 	stmia.w	r5, {r0, r1}
 8008cea:	1d33      	adds	r3, r6, #4
 8008cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cee:	6838      	ldr	r0, [r7, #0]
 8008cf0:	f009 fd00 	bl	80126f4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f009 fd74 	bl	80127e8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	603b      	str	r3, [r7, #0]
 8008d06:	687e      	ldr	r6, [r7, #4]
 8008d08:	466d      	mov	r5, sp
 8008d0a:	f106 0410 	add.w	r4, r6, #16
 8008d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d1e:	1d33      	adds	r3, r6, #4
 8008d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d22:	6838      	ldr	r0, [r7, #0]
 8008d24:	f009 fe86 	bl	8012a34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d3a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8008d3a:	b590      	push	{r4, r7, lr}
 8008d3c:	b089      	sub	sp, #36	; 0x24
 8008d3e:	af04      	add	r7, sp, #16
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	4608      	mov	r0, r1
 8008d44:	4611      	mov	r1, r2
 8008d46:	461a      	mov	r2, r3
 8008d48:	4603      	mov	r3, r0
 8008d4a:	70fb      	strb	r3, [r7, #3]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70bb      	strb	r3, [r7, #2]
 8008d50:	4613      	mov	r3, r2
 8008d52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d101      	bne.n	8008d62 <HAL_HCD_HC_Init+0x28>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e076      	b.n	8008e50 <HAL_HCD_HC_Init+0x116>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8008d6a:	78fb      	ldrb	r3, [r7, #3]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	212c      	movs	r1, #44	; 0x2c
 8008d70:	fb01 f303 	mul.w	r3, r1, r3
 8008d74:	4413      	add	r3, r2
 8008d76:	333d      	adds	r3, #61	; 0x3d
 8008d78:	2200      	movs	r2, #0
 8008d7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8008d7c:	78fb      	ldrb	r3, [r7, #3]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	212c      	movs	r1, #44	; 0x2c
 8008d82:	fb01 f303 	mul.w	r3, r1, r3
 8008d86:	4413      	add	r3, r2
 8008d88:	3338      	adds	r3, #56	; 0x38
 8008d8a:	787a      	ldrb	r2, [r7, #1]
 8008d8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	212c      	movs	r1, #44	; 0x2c
 8008d94:	fb01 f303 	mul.w	r3, r1, r3
 8008d98:	4413      	add	r3, r2
 8008d9a:	3340      	adds	r3, #64	; 0x40
 8008d9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008d9e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	212c      	movs	r1, #44	; 0x2c
 8008da6:	fb01 f303 	mul.w	r3, r1, r3
 8008daa:	4413      	add	r3, r2
 8008dac:	3339      	adds	r3, #57	; 0x39
 8008dae:	78fa      	ldrb	r2, [r7, #3]
 8008db0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	212c      	movs	r1, #44	; 0x2c
 8008db8:	fb01 f303 	mul.w	r3, r1, r3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	333f      	adds	r3, #63	; 0x3f
 8008dc0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008dc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	78ba      	ldrb	r2, [r7, #2]
 8008dca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008dce:	b2d0      	uxtb	r0, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	212c      	movs	r1, #44	; 0x2c
 8008dd4:	fb01 f303 	mul.w	r3, r1, r3
 8008dd8:	4413      	add	r3, r2
 8008dda:	333a      	adds	r3, #58	; 0x3a
 8008ddc:	4602      	mov	r2, r0
 8008dde:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8008de0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	da09      	bge.n	8008dfc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	212c      	movs	r1, #44	; 0x2c
 8008dee:	fb01 f303 	mul.w	r3, r1, r3
 8008df2:	4413      	add	r3, r2
 8008df4:	333b      	adds	r3, #59	; 0x3b
 8008df6:	2201      	movs	r2, #1
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	e008      	b.n	8008e0e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	212c      	movs	r1, #44	; 0x2c
 8008e02:	fb01 f303 	mul.w	r3, r1, r3
 8008e06:	4413      	add	r3, r2
 8008e08:	333b      	adds	r3, #59	; 0x3b
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	212c      	movs	r1, #44	; 0x2c
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	4413      	add	r3, r2
 8008e1a:	333c      	adds	r3, #60	; 0x3c
 8008e1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008e20:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6818      	ldr	r0, [r3, #0]
 8008e26:	787c      	ldrb	r4, [r7, #1]
 8008e28:	78ba      	ldrb	r2, [r7, #2]
 8008e2a:	78f9      	ldrb	r1, [r7, #3]
 8008e2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	4623      	mov	r3, r4
 8008e3e:	f009 ff6f 	bl	8012d20 <USB_HC_Init>
 8008e42:	4603      	mov	r3, r0
 8008e44:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd90      	pop	{r4, r7, pc}

08008e58 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_HCD_HC_Halt+0x1e>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e00f      	b.n	8008e96 <HAL_HCD_HC_Halt+0x3e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	78fa      	ldrb	r2, [r7, #3]
 8008e84:	4611      	mov	r1, r2
 8008e86:	4618      	mov	r0, r3
 8008e88:	f00a f9ab 	bl	80131e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	4608      	mov	r0, r1
 8008eaa:	4611      	mov	r1, r2
 8008eac:	461a      	mov	r2, r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	70fb      	strb	r3, [r7, #3]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70bb      	strb	r3, [r7, #2]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	212c      	movs	r1, #44	; 0x2c
 8008ec0:	fb01 f303 	mul.w	r3, r1, r3
 8008ec4:	4413      	add	r3, r2
 8008ec6:	333b      	adds	r3, #59	; 0x3b
 8008ec8:	78ba      	ldrb	r2, [r7, #2]
 8008eca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	212c      	movs	r1, #44	; 0x2c
 8008ed2:	fb01 f303 	mul.w	r3, r1, r3
 8008ed6:	4413      	add	r3, r2
 8008ed8:	333f      	adds	r3, #63	; 0x3f
 8008eda:	787a      	ldrb	r2, [r7, #1]
 8008edc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8008ede:	7c3b      	ldrb	r3, [r7, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d112      	bne.n	8008f0a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	212c      	movs	r1, #44	; 0x2c
 8008eea:	fb01 f303 	mul.w	r3, r1, r3
 8008eee:	4413      	add	r3, r2
 8008ef0:	3342      	adds	r3, #66	; 0x42
 8008ef2:	2203      	movs	r2, #3
 8008ef4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	212c      	movs	r1, #44	; 0x2c
 8008efc:	fb01 f303 	mul.w	r3, r1, r3
 8008f00:	4413      	add	r3, r2
 8008f02:	333d      	adds	r3, #61	; 0x3d
 8008f04:	7f3a      	ldrb	r2, [r7, #28]
 8008f06:	701a      	strb	r2, [r3, #0]
 8008f08:	e008      	b.n	8008f1c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	212c      	movs	r1, #44	; 0x2c
 8008f10:	fb01 f303 	mul.w	r3, r1, r3
 8008f14:	4413      	add	r3, r2
 8008f16:	3342      	adds	r3, #66	; 0x42
 8008f18:	2202      	movs	r2, #2
 8008f1a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8008f1c:	787b      	ldrb	r3, [r7, #1]
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	f200 80c6 	bhi.w	80090b0 <HAL_HCD_HC_SubmitRequest+0x210>
 8008f24:	a201      	add	r2, pc, #4	; (adr r2, 8008f2c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8008f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2a:	bf00      	nop
 8008f2c:	08008f3d 	.word	0x08008f3d
 8008f30:	0800909d 	.word	0x0800909d
 8008f34:	08008fa1 	.word	0x08008fa1
 8008f38:	0800901f 	.word	0x0800901f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8008f3c:	7c3b      	ldrb	r3, [r7, #16]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	f040 80b8 	bne.w	80090b4 <HAL_HCD_HC_SubmitRequest+0x214>
 8008f44:	78bb      	ldrb	r3, [r7, #2]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f040 80b4 	bne.w	80090b4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8008f4c:	8b3b      	ldrh	r3, [r7, #24]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d108      	bne.n	8008f64 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	212c      	movs	r1, #44	; 0x2c
 8008f58:	fb01 f303 	mul.w	r3, r1, r3
 8008f5c:	4413      	add	r3, r2
 8008f5e:	3355      	adds	r3, #85	; 0x55
 8008f60:	2201      	movs	r2, #1
 8008f62:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	212c      	movs	r1, #44	; 0x2c
 8008f6a:	fb01 f303 	mul.w	r3, r1, r3
 8008f6e:	4413      	add	r3, r2
 8008f70:	3355      	adds	r3, #85	; 0x55
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d109      	bne.n	8008f8c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	212c      	movs	r1, #44	; 0x2c
 8008f7e:	fb01 f303 	mul.w	r3, r1, r3
 8008f82:	4413      	add	r3, r2
 8008f84:	3342      	adds	r3, #66	; 0x42
 8008f86:	2200      	movs	r2, #0
 8008f88:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008f8a:	e093      	b.n	80090b4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008f8c:	78fb      	ldrb	r3, [r7, #3]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	212c      	movs	r1, #44	; 0x2c
 8008f92:	fb01 f303 	mul.w	r3, r1, r3
 8008f96:	4413      	add	r3, r2
 8008f98:	3342      	adds	r3, #66	; 0x42
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	701a      	strb	r2, [r3, #0]
      break;
 8008f9e:	e089      	b.n	80090b4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8008fa0:	78bb      	ldrb	r3, [r7, #2]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d11d      	bne.n	8008fe2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008fa6:	78fb      	ldrb	r3, [r7, #3]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	212c      	movs	r1, #44	; 0x2c
 8008fac:	fb01 f303 	mul.w	r3, r1, r3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	3355      	adds	r3, #85	; 0x55
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d109      	bne.n	8008fce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	212c      	movs	r1, #44	; 0x2c
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	3342      	adds	r3, #66	; 0x42
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8008fcc:	e073      	b.n	80090b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008fce:	78fb      	ldrb	r3, [r7, #3]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	212c      	movs	r1, #44	; 0x2c
 8008fd4:	fb01 f303 	mul.w	r3, r1, r3
 8008fd8:	4413      	add	r3, r2
 8008fda:	3342      	adds	r3, #66	; 0x42
 8008fdc:	2202      	movs	r2, #2
 8008fde:	701a      	strb	r2, [r3, #0]
      break;
 8008fe0:	e069      	b.n	80090b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	212c      	movs	r1, #44	; 0x2c
 8008fe8:	fb01 f303 	mul.w	r3, r1, r3
 8008fec:	4413      	add	r3, r2
 8008fee:	3354      	adds	r3, #84	; 0x54
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d109      	bne.n	800900a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	212c      	movs	r1, #44	; 0x2c
 8008ffc:	fb01 f303 	mul.w	r3, r1, r3
 8009000:	4413      	add	r3, r2
 8009002:	3342      	adds	r3, #66	; 0x42
 8009004:	2200      	movs	r2, #0
 8009006:	701a      	strb	r2, [r3, #0]
      break;
 8009008:	e055      	b.n	80090b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	212c      	movs	r1, #44	; 0x2c
 8009010:	fb01 f303 	mul.w	r3, r1, r3
 8009014:	4413      	add	r3, r2
 8009016:	3342      	adds	r3, #66	; 0x42
 8009018:	2202      	movs	r2, #2
 800901a:	701a      	strb	r2, [r3, #0]
      break;
 800901c:	e04b      	b.n	80090b6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800901e:	78bb      	ldrb	r3, [r7, #2]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d11d      	bne.n	8009060 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	212c      	movs	r1, #44	; 0x2c
 800902a:	fb01 f303 	mul.w	r3, r1, r3
 800902e:	4413      	add	r3, r2
 8009030:	3355      	adds	r3, #85	; 0x55
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d109      	bne.n	800904c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	212c      	movs	r1, #44	; 0x2c
 800903e:	fb01 f303 	mul.w	r3, r1, r3
 8009042:	4413      	add	r3, r2
 8009044:	3342      	adds	r3, #66	; 0x42
 8009046:	2200      	movs	r2, #0
 8009048:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800904a:	e034      	b.n	80090b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	212c      	movs	r1, #44	; 0x2c
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	4413      	add	r3, r2
 8009058:	3342      	adds	r3, #66	; 0x42
 800905a:	2202      	movs	r2, #2
 800905c:	701a      	strb	r2, [r3, #0]
      break;
 800905e:	e02a      	b.n	80090b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	212c      	movs	r1, #44	; 0x2c
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	3354      	adds	r3, #84	; 0x54
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d109      	bne.n	8009088 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	212c      	movs	r1, #44	; 0x2c
 800907a:	fb01 f303 	mul.w	r3, r1, r3
 800907e:	4413      	add	r3, r2
 8009080:	3342      	adds	r3, #66	; 0x42
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
      break;
 8009086:	e016      	b.n	80090b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	212c      	movs	r1, #44	; 0x2c
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	3342      	adds	r3, #66	; 0x42
 8009096:	2202      	movs	r2, #2
 8009098:	701a      	strb	r2, [r3, #0]
      break;
 800909a:	e00c      	b.n	80090b6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800909c:	78fb      	ldrb	r3, [r7, #3]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	212c      	movs	r1, #44	; 0x2c
 80090a2:	fb01 f303 	mul.w	r3, r1, r3
 80090a6:	4413      	add	r3, r2
 80090a8:	3342      	adds	r3, #66	; 0x42
 80090aa:	2200      	movs	r2, #0
 80090ac:	701a      	strb	r2, [r3, #0]
      break;
 80090ae:	e002      	b.n	80090b6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80090b0:	bf00      	nop
 80090b2:	e000      	b.n	80090b6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80090b4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80090b6:	78fb      	ldrb	r3, [r7, #3]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	212c      	movs	r1, #44	; 0x2c
 80090bc:	fb01 f303 	mul.w	r3, r1, r3
 80090c0:	4413      	add	r3, r2
 80090c2:	3344      	adds	r3, #68	; 0x44
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	8b3a      	ldrh	r2, [r7, #24]
 80090cc:	6879      	ldr	r1, [r7, #4]
 80090ce:	202c      	movs	r0, #44	; 0x2c
 80090d0:	fb00 f303 	mul.w	r3, r0, r3
 80090d4:	440b      	add	r3, r1
 80090d6:	334c      	adds	r3, #76	; 0x4c
 80090d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	212c      	movs	r1, #44	; 0x2c
 80090e0:	fb01 f303 	mul.w	r3, r1, r3
 80090e4:	4413      	add	r3, r2
 80090e6:	3360      	adds	r3, #96	; 0x60
 80090e8:	2200      	movs	r2, #0
 80090ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	212c      	movs	r1, #44	; 0x2c
 80090f2:	fb01 f303 	mul.w	r3, r1, r3
 80090f6:	4413      	add	r3, r2
 80090f8:	3350      	adds	r3, #80	; 0x50
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80090fe:	78fb      	ldrb	r3, [r7, #3]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	212c      	movs	r1, #44	; 0x2c
 8009104:	fb01 f303 	mul.w	r3, r1, r3
 8009108:	4413      	add	r3, r2
 800910a:	3339      	adds	r3, #57	; 0x39
 800910c:	78fa      	ldrb	r2, [r7, #3]
 800910e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	212c      	movs	r1, #44	; 0x2c
 8009116:	fb01 f303 	mul.w	r3, r1, r3
 800911a:	4413      	add	r3, r2
 800911c:	3361      	adds	r3, #97	; 0x61
 800911e:	2200      	movs	r2, #0
 8009120:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	222c      	movs	r2, #44	; 0x2c
 800912a:	fb02 f303 	mul.w	r3, r2, r3
 800912e:	3338      	adds	r3, #56	; 0x38
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	18d1      	adds	r1, r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	b2db      	uxtb	r3, r3
 800913a:	461a      	mov	r2, r3
 800913c:	f009 fefe 	bl	8012f3c <USB_HC_StartXfer>
 8009140:	4603      	mov	r3, r0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop

0800914c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f009 fc23 	bl	80129ae <USB_GetMode>
 8009168:	4603      	mov	r3, r0
 800916a:	2b01      	cmp	r3, #1
 800916c:	f040 80ef 	bne.w	800934e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f009 fc07 	bl	8012988 <USB_ReadInterrupts>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 80e5 	beq.w	800934c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f009 fbfe 	bl	8012988 <USB_ReadInterrupts>
 800918c:	4603      	mov	r3, r0
 800918e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009196:	d104      	bne.n	80091a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80091a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f009 fbee 	bl	8012988 <USB_ReadInterrupts>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091b6:	d104      	bne.n	80091c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80091c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f009 fbde 	bl	8012988 <USB_ReadInterrupts>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091d6:	d104      	bne.n	80091e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80091e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f009 fbce 	bl	8012988 <USB_ReadInterrupts>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f003 0302 	and.w	r3, r3, #2
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d103      	bne.n	80091fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2202      	movs	r2, #2
 80091fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4618      	mov	r0, r3
 8009204:	f009 fbc0 	bl	8012988 <USB_ReadInterrupts>
 8009208:	4603      	mov	r3, r0
 800920a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800920e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009212:	d115      	bne.n	8009240 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800921c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d108      	bne.n	8009240 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f00f fc18 	bl	8018a64 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2101      	movs	r1, #1
 800923a:	4618      	mov	r0, r3
 800923c:	f009 fcaa 	bl	8012b94 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4618      	mov	r0, r3
 8009246:	f009 fb9f 	bl	8012988 <USB_ReadInterrupts>
 800924a:	4603      	mov	r3, r0
 800924c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009254:	d102      	bne.n	800925c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f001 f9ff 	bl	800a65a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4618      	mov	r0, r3
 8009262:	f009 fb91 	bl	8012988 <USB_ReadInterrupts>
 8009266:	4603      	mov	r3, r0
 8009268:	f003 0308 	and.w	r3, r3, #8
 800926c:	2b08      	cmp	r3, #8
 800926e:	d106      	bne.n	800927e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f00f fbdb 	bl	8018a2c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2208      	movs	r2, #8
 800927c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4618      	mov	r0, r3
 8009284:	f009 fb80 	bl	8012988 <USB_ReadInterrupts>
 8009288:	4603      	mov	r3, r0
 800928a:	f003 0310 	and.w	r3, r3, #16
 800928e:	2b10      	cmp	r3, #16
 8009290:	d101      	bne.n	8009296 <HAL_HCD_IRQHandler+0x14a>
 8009292:	2301      	movs	r3, #1
 8009294:	e000      	b.n	8009298 <HAL_HCD_IRQHandler+0x14c>
 8009296:	2300      	movs	r3, #0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d012      	beq.n	80092c2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	699a      	ldr	r2, [r3, #24]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 0210 	bic.w	r2, r2, #16
 80092aa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 f902 	bl	800a4b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	699a      	ldr	r2, [r3, #24]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0210 	orr.w	r2, r2, #16
 80092c0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f009 fb5e 	bl	8012988 <USB_ReadInterrupts>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092d6:	d13a      	bne.n	800934e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4618      	mov	r0, r3
 80092de:	f009 ff6f 	bl	80131c0 <USB_HC_ReadInterrupt>
 80092e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80092e4:	2300      	movs	r3, #0
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	e025      	b.n	8009336 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f003 030f 	and.w	r3, r3, #15
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	fa22 f303 	lsr.w	r3, r2, r3
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d018      	beq.n	8009330 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	4413      	add	r3, r2
 8009306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009314:	d106      	bne.n	8009324 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f8ab 	bl	8009478 <HCD_HC_IN_IRQHandler>
 8009322:	e005      	b.n	8009330 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fcc6 	bl	8009cbc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	3301      	adds	r3, #1
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	429a      	cmp	r2, r3
 800933e:	d3d4      	bcc.n	80092ea <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009348:	615a      	str	r2, [r3, #20]
 800934a:	e000      	b.n	800934e <HAL_HCD_IRQHandler+0x202>
      return;
 800934c:	bf00      	nop
    }
  }
}
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009362:	2b01      	cmp	r3, #1
 8009364:	d101      	bne.n	800936a <HAL_HCD_Start+0x16>
 8009366:	2302      	movs	r3, #2
 8009368:	e013      	b.n	8009392 <HAL_HCD_Start+0x3e>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4618      	mov	r0, r3
 8009378:	f009 fa14 	bl	80127a4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2101      	movs	r1, #1
 8009382:	4618      	mov	r0, r3
 8009384:	f009 fc6a 	bl	8012c5c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d101      	bne.n	80093b0 <HAL_HCD_Stop+0x16>
 80093ac:	2302      	movs	r3, #2
 80093ae:	e00d      	b.n	80093cc <HAL_HCD_Stop+0x32>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4618      	mov	r0, r3
 80093be:	f00a f869 	bl	8013494 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f009 fc11 	bl	8012c08 <USB_ResetPort>
 80093e6:	4603      	mov	r3, r0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	212c      	movs	r1, #44	; 0x2c
 8009402:	fb01 f303 	mul.w	r3, r1, r3
 8009406:	4413      	add	r3, r2
 8009408:	3360      	adds	r3, #96	; 0x60
 800940a:	781b      	ldrb	r3, [r3, #0]
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	212c      	movs	r1, #44	; 0x2c
 800942a:	fb01 f303 	mul.w	r3, r1, r3
 800942e:	4413      	add	r3, r2
 8009430:	3350      	adds	r3, #80	; 0x50
 8009432:	681b      	ldr	r3, [r3, #0]
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4618      	mov	r0, r3
 800944e:	f009 fc55 	bl	8012cfc <USB_GetCurrentFrame>
 8009452:	4603      	mov	r3, r0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4618      	mov	r0, r3
 800946a:	f009 fc30 	bl	8012cce <USB_GetHostSpeed>
 800946e:	4603      	mov	r3, r0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800948e:	78fb      	ldrb	r3, [r7, #3]
 8009490:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	015a      	lsls	r2, r3, #5
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	4413      	add	r3, r2
 800949a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d119      	bne.n	80094dc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b4:	461a      	mov	r2, r3
 80094b6:	2304      	movs	r3, #4
 80094b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	0151      	lsls	r1, r2, #5
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	440a      	add	r2, r1
 80094d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094d4:	f043 0302 	orr.w	r3, r3, #2
 80094d8:	60d3      	str	r3, [r2, #12]
 80094da:	e101      	b.n	80096e0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094f2:	d12b      	bne.n	800954c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009500:	461a      	mov	r2, r3
 8009502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009506:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	212c      	movs	r1, #44	; 0x2c
 800950e:	fb01 f303 	mul.w	r3, r1, r3
 8009512:	4413      	add	r3, r2
 8009514:	3361      	adds	r3, #97	; 0x61
 8009516:	2207      	movs	r2, #7
 8009518:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	015a      	lsls	r2, r3, #5
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	4413      	add	r3, r2
 8009522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	0151      	lsls	r1, r2, #5
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	440a      	add	r2, r1
 8009530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009534:	f043 0302 	orr.w	r3, r3, #2
 8009538:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	b2d2      	uxtb	r2, r2
 8009542:	4611      	mov	r1, r2
 8009544:	4618      	mov	r0, r3
 8009546:	f009 fe4c 	bl	80131e2 <USB_HC_Halt>
 800954a:	e0c9      	b.n	80096e0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	4413      	add	r3, r2
 8009554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f003 0320 	and.w	r3, r3, #32
 800955e:	2b20      	cmp	r3, #32
 8009560:	d109      	bne.n	8009576 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	4413      	add	r3, r2
 800956a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800956e:	461a      	mov	r2, r3
 8009570:	2320      	movs	r3, #32
 8009572:	6093      	str	r3, [r2, #8]
 8009574:	e0b4      	b.n	80096e0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	4413      	add	r3, r2
 800957e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f003 0308 	and.w	r3, r3, #8
 8009588:	2b08      	cmp	r3, #8
 800958a:	d133      	bne.n	80095f4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	4413      	add	r3, r2
 8009594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	0151      	lsls	r1, r2, #5
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	440a      	add	r2, r1
 80095a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095a6:	f043 0302 	orr.w	r3, r3, #2
 80095aa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	212c      	movs	r1, #44	; 0x2c
 80095b2:	fb01 f303 	mul.w	r3, r1, r3
 80095b6:	4413      	add	r3, r2
 80095b8:	3361      	adds	r3, #97	; 0x61
 80095ba:	2205      	movs	r2, #5
 80095bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ca:	461a      	mov	r2, r3
 80095cc:	2310      	movs	r3, #16
 80095ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095dc:	461a      	mov	r2, r3
 80095de:	2308      	movs	r3, #8
 80095e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	b2d2      	uxtb	r2, r2
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f009 fdf8 	bl	80131e2 <USB_HC_Halt>
 80095f2:	e075      	b.n	80096e0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800960a:	d134      	bne.n	8009676 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	4413      	add	r3, r2
 8009614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	0151      	lsls	r1, r2, #5
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	440a      	add	r2, r1
 8009622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009626:	f043 0302 	orr.w	r3, r3, #2
 800962a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	212c      	movs	r1, #44	; 0x2c
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	4413      	add	r3, r2
 8009638:	3361      	adds	r3, #97	; 0x61
 800963a:	2208      	movs	r2, #8
 800963c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	4413      	add	r3, r2
 8009646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800964a:	461a      	mov	r2, r3
 800964c:	2310      	movs	r3, #16
 800964e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	4413      	add	r3, r2
 8009658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800965c:	461a      	mov	r2, r3
 800965e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009662:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	b2d2      	uxtb	r2, r2
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f009 fdb7 	bl	80131e2 <USB_HC_Halt>
 8009674:	e034      	b.n	80096e0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	4413      	add	r3, r2
 800967e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009688:	2b80      	cmp	r3, #128	; 0x80
 800968a:	d129      	bne.n	80096e0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	4413      	add	r3, r2
 8009694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096a6:	f043 0302 	orr.w	r3, r3, #2
 80096aa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	212c      	movs	r1, #44	; 0x2c
 80096b2:	fb01 f303 	mul.w	r3, r1, r3
 80096b6:	4413      	add	r3, r2
 80096b8:	3361      	adds	r3, #97	; 0x61
 80096ba:	2206      	movs	r2, #6
 80096bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	b2d2      	uxtb	r2, r2
 80096c6:	4611      	mov	r1, r2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f009 fd8a 	bl	80131e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096da:	461a      	mov	r2, r3
 80096dc:	2380      	movs	r3, #128	; 0x80
 80096de:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096f6:	d122      	bne.n	800973e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	0151      	lsls	r1, r2, #5
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	440a      	add	r2, r1
 800970e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009712:	f043 0302 	orr.w	r3, r3, #2
 8009716:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	4611      	mov	r1, r2
 8009722:	4618      	mov	r0, r3
 8009724:	f009 fd5d 	bl	80131e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	4413      	add	r3, r2
 8009730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009734:	461a      	mov	r2, r3
 8009736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800973a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800973c:	e2ba      	b.n	8009cb4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	4413      	add	r3, r2
 8009746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b01      	cmp	r3, #1
 8009752:	f040 811b 	bne.w	800998c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d019      	beq.n	8009792 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	212c      	movs	r1, #44	; 0x2c
 8009764:	fb01 f303 	mul.w	r3, r1, r3
 8009768:	4413      	add	r3, r2
 800976a:	3348      	adds	r3, #72	; 0x48
 800976c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	0159      	lsls	r1, r3, #5
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	440b      	add	r3, r1
 8009776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8009780:	1ad2      	subs	r2, r2, r3
 8009782:	6879      	ldr	r1, [r7, #4]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	202c      	movs	r0, #44	; 0x2c
 8009788:	fb00 f303 	mul.w	r3, r0, r3
 800978c:	440b      	add	r3, r1
 800978e:	3350      	adds	r3, #80	; 0x50
 8009790:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	212c      	movs	r1, #44	; 0x2c
 8009798:	fb01 f303 	mul.w	r3, r1, r3
 800979c:	4413      	add	r3, r2
 800979e:	3361      	adds	r3, #97	; 0x61
 80097a0:	2201      	movs	r2, #1
 80097a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	212c      	movs	r1, #44	; 0x2c
 80097aa:	fb01 f303 	mul.w	r3, r1, r3
 80097ae:	4413      	add	r3, r2
 80097b0:	335c      	adds	r3, #92	; 0x5c
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097c2:	461a      	mov	r2, r3
 80097c4:	2301      	movs	r3, #1
 80097c6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	212c      	movs	r1, #44	; 0x2c
 80097ce:	fb01 f303 	mul.w	r3, r1, r3
 80097d2:	4413      	add	r3, r2
 80097d4:	333f      	adds	r3, #63	; 0x3f
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d009      	beq.n	80097f0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	212c      	movs	r1, #44	; 0x2c
 80097e2:	fb01 f303 	mul.w	r3, r1, r3
 80097e6:	4413      	add	r3, r2
 80097e8:	333f      	adds	r3, #63	; 0x3f
 80097ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d121      	bne.n	8009834 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	0151      	lsls	r1, r2, #5
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	440a      	add	r2, r1
 8009806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800980a:	f043 0302 	orr.w	r3, r3, #2
 800980e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	b2d2      	uxtb	r2, r2
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f009 fce1 	bl	80131e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	4413      	add	r3, r2
 8009828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800982c:	461a      	mov	r2, r3
 800982e:	2310      	movs	r3, #16
 8009830:	6093      	str	r3, [r2, #8]
 8009832:	e066      	b.n	8009902 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	212c      	movs	r1, #44	; 0x2c
 800983a:	fb01 f303 	mul.w	r3, r1, r3
 800983e:	4413      	add	r3, r2
 8009840:	333f      	adds	r3, #63	; 0x3f
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	2b03      	cmp	r3, #3
 8009846:	d127      	bne.n	8009898 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	4413      	add	r3, r2
 8009850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	0151      	lsls	r1, r2, #5
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	440a      	add	r2, r1
 800985e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009866:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	212c      	movs	r1, #44	; 0x2c
 800986e:	fb01 f303 	mul.w	r3, r1, r3
 8009872:	4413      	add	r3, r2
 8009874:	3360      	adds	r3, #96	; 0x60
 8009876:	2201      	movs	r2, #1
 8009878:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	b2d9      	uxtb	r1, r3
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	202c      	movs	r0, #44	; 0x2c
 8009884:	fb00 f303 	mul.w	r3, r0, r3
 8009888:	4413      	add	r3, r2
 800988a:	3360      	adds	r3, #96	; 0x60
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f00f f8f5 	bl	8018a80 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009896:	e034      	b.n	8009902 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	212c      	movs	r1, #44	; 0x2c
 800989e:	fb01 f303 	mul.w	r3, r1, r3
 80098a2:	4413      	add	r3, r2
 80098a4:	333f      	adds	r3, #63	; 0x3f
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d12a      	bne.n	8009902 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	212c      	movs	r1, #44	; 0x2c
 80098b2:	fb01 f303 	mul.w	r3, r1, r3
 80098b6:	4413      	add	r3, r2
 80098b8:	3360      	adds	r3, #96	; 0x60
 80098ba:	2201      	movs	r2, #1
 80098bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	212c      	movs	r1, #44	; 0x2c
 80098c4:	fb01 f303 	mul.w	r3, r1, r3
 80098c8:	4413      	add	r3, r2
 80098ca:	3354      	adds	r3, #84	; 0x54
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	f083 0301 	eor.w	r3, r3, #1
 80098d2:	b2d8      	uxtb	r0, r3
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	212c      	movs	r1, #44	; 0x2c
 80098da:	fb01 f303 	mul.w	r3, r1, r3
 80098de:	4413      	add	r3, r2
 80098e0:	3354      	adds	r3, #84	; 0x54
 80098e2:	4602      	mov	r2, r0
 80098e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	b2d9      	uxtb	r1, r3
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	202c      	movs	r0, #44	; 0x2c
 80098f0:	fb00 f303 	mul.w	r3, r0, r3
 80098f4:	4413      	add	r3, r2
 80098f6:	3360      	adds	r3, #96	; 0x60
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f00f f8bf 	bl	8018a80 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d12b      	bne.n	8009962 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	212c      	movs	r1, #44	; 0x2c
 8009910:	fb01 f303 	mul.w	r3, r1, r3
 8009914:	4413      	add	r3, r2
 8009916:	3348      	adds	r3, #72	; 0x48
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	202c      	movs	r0, #44	; 0x2c
 8009920:	fb00 f202 	mul.w	r2, r0, r2
 8009924:	440a      	add	r2, r1
 8009926:	3240      	adds	r2, #64	; 0x40
 8009928:	8812      	ldrh	r2, [r2, #0]
 800992a:	fbb3 f3f2 	udiv	r3, r3, r2
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 81be 	beq.w	8009cb4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	212c      	movs	r1, #44	; 0x2c
 800993e:	fb01 f303 	mul.w	r3, r1, r3
 8009942:	4413      	add	r3, r2
 8009944:	3354      	adds	r3, #84	; 0x54
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	f083 0301 	eor.w	r3, r3, #1
 800994c:	b2d8      	uxtb	r0, r3
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	212c      	movs	r1, #44	; 0x2c
 8009954:	fb01 f303 	mul.w	r3, r1, r3
 8009958:	4413      	add	r3, r2
 800995a:	3354      	adds	r3, #84	; 0x54
 800995c:	4602      	mov	r2, r0
 800995e:	701a      	strb	r2, [r3, #0]
}
 8009960:	e1a8      	b.n	8009cb4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	212c      	movs	r1, #44	; 0x2c
 8009968:	fb01 f303 	mul.w	r3, r1, r3
 800996c:	4413      	add	r3, r2
 800996e:	3354      	adds	r3, #84	; 0x54
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	f083 0301 	eor.w	r3, r3, #1
 8009976:	b2d8      	uxtb	r0, r3
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	212c      	movs	r1, #44	; 0x2c
 800997e:	fb01 f303 	mul.w	r3, r1, r3
 8009982:	4413      	add	r3, r2
 8009984:	3354      	adds	r3, #84	; 0x54
 8009986:	4602      	mov	r2, r0
 8009988:	701a      	strb	r2, [r3, #0]
}
 800998a:	e193      	b.n	8009cb4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	4413      	add	r3, r2
 8009994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	2b02      	cmp	r3, #2
 80099a0:	f040 8106 	bne.w	8009bb0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099be:	f023 0302 	bic.w	r3, r3, #2
 80099c2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	212c      	movs	r1, #44	; 0x2c
 80099ca:	fb01 f303 	mul.w	r3, r1, r3
 80099ce:	4413      	add	r3, r2
 80099d0:	3361      	adds	r3, #97	; 0x61
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d109      	bne.n	80099ec <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	212c      	movs	r1, #44	; 0x2c
 80099de:	fb01 f303 	mul.w	r3, r1, r3
 80099e2:	4413      	add	r3, r2
 80099e4:	3360      	adds	r3, #96	; 0x60
 80099e6:	2201      	movs	r2, #1
 80099e8:	701a      	strb	r2, [r3, #0]
 80099ea:	e0c9      	b.n	8009b80 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	212c      	movs	r1, #44	; 0x2c
 80099f2:	fb01 f303 	mul.w	r3, r1, r3
 80099f6:	4413      	add	r3, r2
 80099f8:	3361      	adds	r3, #97	; 0x61
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b05      	cmp	r3, #5
 80099fe:	d109      	bne.n	8009a14 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	212c      	movs	r1, #44	; 0x2c
 8009a06:	fb01 f303 	mul.w	r3, r1, r3
 8009a0a:	4413      	add	r3, r2
 8009a0c:	3360      	adds	r3, #96	; 0x60
 8009a0e:	2205      	movs	r2, #5
 8009a10:	701a      	strb	r2, [r3, #0]
 8009a12:	e0b5      	b.n	8009b80 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	212c      	movs	r1, #44	; 0x2c
 8009a1a:	fb01 f303 	mul.w	r3, r1, r3
 8009a1e:	4413      	add	r3, r2
 8009a20:	3361      	adds	r3, #97	; 0x61
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b06      	cmp	r3, #6
 8009a26:	d009      	beq.n	8009a3c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	212c      	movs	r1, #44	; 0x2c
 8009a2e:	fb01 f303 	mul.w	r3, r1, r3
 8009a32:	4413      	add	r3, r2
 8009a34:	3361      	adds	r3, #97	; 0x61
 8009a36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009a38:	2b08      	cmp	r3, #8
 8009a3a:	d150      	bne.n	8009ade <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	212c      	movs	r1, #44	; 0x2c
 8009a42:	fb01 f303 	mul.w	r3, r1, r3
 8009a46:	4413      	add	r3, r2
 8009a48:	335c      	adds	r3, #92	; 0x5c
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	202c      	movs	r0, #44	; 0x2c
 8009a54:	fb00 f303 	mul.w	r3, r0, r3
 8009a58:	440b      	add	r3, r1
 8009a5a:	335c      	adds	r3, #92	; 0x5c
 8009a5c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	212c      	movs	r1, #44	; 0x2c
 8009a64:	fb01 f303 	mul.w	r3, r1, r3
 8009a68:	4413      	add	r3, r2
 8009a6a:	335c      	adds	r3, #92	; 0x5c
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d912      	bls.n	8009a98 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	212c      	movs	r1, #44	; 0x2c
 8009a78:	fb01 f303 	mul.w	r3, r1, r3
 8009a7c:	4413      	add	r3, r2
 8009a7e:	335c      	adds	r3, #92	; 0x5c
 8009a80:	2200      	movs	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	212c      	movs	r1, #44	; 0x2c
 8009a8a:	fb01 f303 	mul.w	r3, r1, r3
 8009a8e:	4413      	add	r3, r2
 8009a90:	3360      	adds	r3, #96	; 0x60
 8009a92:	2204      	movs	r2, #4
 8009a94:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009a96:	e073      	b.n	8009b80 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	212c      	movs	r1, #44	; 0x2c
 8009a9e:	fb01 f303 	mul.w	r3, r1, r3
 8009aa2:	4413      	add	r3, r2
 8009aa4:	3360      	adds	r3, #96	; 0x60
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ac0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ac8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009adc:	e050      	b.n	8009b80 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	212c      	movs	r1, #44	; 0x2c
 8009ae4:	fb01 f303 	mul.w	r3, r1, r3
 8009ae8:	4413      	add	r3, r2
 8009aea:	3361      	adds	r3, #97	; 0x61
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d122      	bne.n	8009b38 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	212c      	movs	r1, #44	; 0x2c
 8009af8:	fb01 f303 	mul.w	r3, r1, r3
 8009afc:	4413      	add	r3, r2
 8009afe:	3360      	adds	r3, #96	; 0x60
 8009b00:	2202      	movs	r2, #2
 8009b02:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b1a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b22:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b30:	461a      	mov	r2, r3
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	e023      	b.n	8009b80 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	212c      	movs	r1, #44	; 0x2c
 8009b3e:	fb01 f303 	mul.w	r3, r1, r3
 8009b42:	4413      	add	r3, r2
 8009b44:	3361      	adds	r3, #97	; 0x61
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b07      	cmp	r3, #7
 8009b4a:	d119      	bne.n	8009b80 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	212c      	movs	r1, #44	; 0x2c
 8009b52:	fb01 f303 	mul.w	r3, r1, r3
 8009b56:	4413      	add	r3, r2
 8009b58:	335c      	adds	r3, #92	; 0x5c
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	202c      	movs	r0, #44	; 0x2c
 8009b64:	fb00 f303 	mul.w	r3, r0, r3
 8009b68:	440b      	add	r3, r1
 8009b6a:	335c      	adds	r3, #92	; 0x5c
 8009b6c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	212c      	movs	r1, #44	; 0x2c
 8009b74:	fb01 f303 	mul.w	r3, r1, r3
 8009b78:	4413      	add	r3, r2
 8009b7a:	3360      	adds	r3, #96	; 0x60
 8009b7c:	2204      	movs	r2, #4
 8009b7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	2302      	movs	r3, #2
 8009b90:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	b2d9      	uxtb	r1, r3
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	202c      	movs	r0, #44	; 0x2c
 8009b9c:	fb00 f303 	mul.w	r3, r0, r3
 8009ba0:	4413      	add	r3, r2
 8009ba2:	3360      	adds	r3, #96	; 0x60
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f00e ff69 	bl	8018a80 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009bae:	e081      	b.n	8009cb4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f003 0310 	and.w	r3, r3, #16
 8009bc2:	2b10      	cmp	r3, #16
 8009bc4:	d176      	bne.n	8009cb4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	212c      	movs	r1, #44	; 0x2c
 8009bcc:	fb01 f303 	mul.w	r3, r1, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	333f      	adds	r3, #63	; 0x3f
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d121      	bne.n	8009c1e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	212c      	movs	r1, #44	; 0x2c
 8009be0:	fb01 f303 	mul.w	r3, r1, r3
 8009be4:	4413      	add	r3, r2
 8009be6:	335c      	adds	r3, #92	; 0x5c
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	0151      	lsls	r1, r2, #5
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	440a      	add	r2, r1
 8009c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c06:	f043 0302 	orr.w	r3, r3, #2
 8009c0a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	b2d2      	uxtb	r2, r2
 8009c14:	4611      	mov	r1, r2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f009 fae3 	bl	80131e2 <USB_HC_Halt>
 8009c1c:	e041      	b.n	8009ca2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	212c      	movs	r1, #44	; 0x2c
 8009c24:	fb01 f303 	mul.w	r3, r1, r3
 8009c28:	4413      	add	r3, r2
 8009c2a:	333f      	adds	r3, #63	; 0x3f
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d009      	beq.n	8009c46 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	212c      	movs	r1, #44	; 0x2c
 8009c38:	fb01 f303 	mul.w	r3, r1, r3
 8009c3c:	4413      	add	r3, r2
 8009c3e:	333f      	adds	r3, #63	; 0x3f
 8009c40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d12d      	bne.n	8009ca2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	212c      	movs	r1, #44	; 0x2c
 8009c4c:	fb01 f303 	mul.w	r3, r1, r3
 8009c50:	4413      	add	r3, r2
 8009c52:	335c      	adds	r3, #92	; 0x5c
 8009c54:	2200      	movs	r2, #0
 8009c56:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d120      	bne.n	8009ca2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	212c      	movs	r1, #44	; 0x2c
 8009c66:	fb01 f303 	mul.w	r3, r1, r3
 8009c6a:	4413      	add	r3, r2
 8009c6c:	3361      	adds	r3, #97	; 0x61
 8009c6e:	2203      	movs	r2, #3
 8009c70:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	0151      	lsls	r1, r2, #5
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	440a      	add	r2, r1
 8009c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c8c:	f043 0302 	orr.w	r3, r3, #2
 8009c90:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	b2d2      	uxtb	r2, r2
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f009 faa0 	bl	80131e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cae:	461a      	mov	r2, r3
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	6093      	str	r3, [r2, #8]
}
 8009cb4:	bf00      	nop
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b088      	sub	sp, #32
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8009cd2:	78fb      	ldrb	r3, [r7, #3]
 8009cd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b04      	cmp	r3, #4
 8009cea:	d119      	bne.n	8009d20 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	2304      	movs	r3, #4
 8009cfc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	0151      	lsls	r1, r2, #5
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	440a      	add	r2, r1
 8009d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d18:	f043 0302 	orr.w	r3, r3, #2
 8009d1c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8009d1e:	e3c6      	b.n	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f003 0320 	and.w	r3, r3, #32
 8009d32:	2b20      	cmp	r3, #32
 8009d34:	d13e      	bne.n	8009db4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d42:	461a      	mov	r2, r3
 8009d44:	2320      	movs	r3, #32
 8009d46:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	212c      	movs	r1, #44	; 0x2c
 8009d4e:	fb01 f303 	mul.w	r3, r1, r3
 8009d52:	4413      	add	r3, r2
 8009d54:	333d      	adds	r3, #61	; 0x3d
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	f040 83a8 	bne.w	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	212c      	movs	r1, #44	; 0x2c
 8009d64:	fb01 f303 	mul.w	r3, r1, r3
 8009d68:	4413      	add	r3, r2
 8009d6a:	333d      	adds	r3, #61	; 0x3d
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	212c      	movs	r1, #44	; 0x2c
 8009d76:	fb01 f303 	mul.w	r3, r1, r3
 8009d7a:	4413      	add	r3, r2
 8009d7c:	3360      	adds	r3, #96	; 0x60
 8009d7e:	2202      	movs	r2, #2
 8009d80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	015a      	lsls	r2, r3, #5
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	4413      	add	r3, r2
 8009d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	0151      	lsls	r1, r2, #5
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	440a      	add	r2, r1
 8009d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d9c:	f043 0302 	orr.w	r3, r3, #2
 8009da0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f009 fa18 	bl	80131e2 <USB_HC_Halt>
}
 8009db2:	e37c      	b.n	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dca:	d122      	bne.n	8009e12 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009de6:	f043 0302 	orr.w	r3, r3, #2
 8009dea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	4611      	mov	r1, r2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f009 f9f3 	bl	80131e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e08:	461a      	mov	r2, r3
 8009e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e0e:	6093      	str	r3, [r2, #8]
}
 8009e10:	e34d      	b.n	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d150      	bne.n	8009eca <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	212c      	movs	r1, #44	; 0x2c
 8009e2e:	fb01 f303 	mul.w	r3, r1, r3
 8009e32:	4413      	add	r3, r2
 8009e34:	335c      	adds	r3, #92	; 0x5c
 8009e36:	2200      	movs	r2, #0
 8009e38:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4c:	2b40      	cmp	r3, #64	; 0x40
 8009e4e:	d111      	bne.n	8009e74 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	212c      	movs	r1, #44	; 0x2c
 8009e56:	fb01 f303 	mul.w	r3, r1, r3
 8009e5a:	4413      	add	r3, r2
 8009e5c:	333d      	adds	r3, #61	; 0x3d
 8009e5e:	2201      	movs	r2, #1
 8009e60:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	015a      	lsls	r2, r3, #5
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	4413      	add	r3, r2
 8009e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e6e:	461a      	mov	r2, r3
 8009e70:	2340      	movs	r3, #64	; 0x40
 8009e72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e8e:	f043 0302 	orr.w	r3, r3, #2
 8009e92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	b2d2      	uxtb	r2, r2
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f009 f99f 	bl	80131e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	212c      	movs	r1, #44	; 0x2c
 8009ebc:	fb01 f303 	mul.w	r3, r1, r3
 8009ec0:	4413      	add	r3, r2
 8009ec2:	3361      	adds	r3, #97	; 0x61
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	701a      	strb	r2, [r3, #0]
}
 8009ec8:	e2f1      	b.n	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	015a      	lsls	r2, r3, #5
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009edc:	2b40      	cmp	r3, #64	; 0x40
 8009ede:	d13c      	bne.n	8009f5a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	212c      	movs	r1, #44	; 0x2c
 8009ee6:	fb01 f303 	mul.w	r3, r1, r3
 8009eea:	4413      	add	r3, r2
 8009eec:	3361      	adds	r3, #97	; 0x61
 8009eee:	2204      	movs	r2, #4
 8009ef0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	212c      	movs	r1, #44	; 0x2c
 8009ef8:	fb01 f303 	mul.w	r3, r1, r3
 8009efc:	4413      	add	r3, r2
 8009efe:	333d      	adds	r3, #61	; 0x3d
 8009f00:	2201      	movs	r2, #1
 8009f02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	212c      	movs	r1, #44	; 0x2c
 8009f0a:	fb01 f303 	mul.w	r3, r1, r3
 8009f0e:	4413      	add	r3, r2
 8009f10:	335c      	adds	r3, #92	; 0x5c
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	0151      	lsls	r1, r2, #5
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	440a      	add	r2, r1
 8009f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f30:	f043 0302 	orr.w	r3, r3, #2
 8009f34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	b2d2      	uxtb	r2, r2
 8009f3e:	4611      	mov	r1, r2
 8009f40:	4618      	mov	r0, r3
 8009f42:	f009 f94e 	bl	80131e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f52:	461a      	mov	r2, r3
 8009f54:	2340      	movs	r3, #64	; 0x40
 8009f56:	6093      	str	r3, [r2, #8]
}
 8009f58:	e2a9      	b.n	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	015a      	lsls	r2, r3, #5
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f003 0308 	and.w	r3, r3, #8
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d12a      	bne.n	8009fc6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	2308      	movs	r3, #8
 8009f80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	0151      	lsls	r1, r2, #5
 8009f94:	69ba      	ldr	r2, [r7, #24]
 8009f96:	440a      	add	r2, r1
 8009f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f9c:	f043 0302 	orr.w	r3, r3, #2
 8009fa0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	b2d2      	uxtb	r2, r2
 8009faa:	4611      	mov	r1, r2
 8009fac:	4618      	mov	r0, r3
 8009fae:	f009 f918 	bl	80131e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	212c      	movs	r1, #44	; 0x2c
 8009fb8:	fb01 f303 	mul.w	r3, r1, r3
 8009fbc:	4413      	add	r3, r2
 8009fbe:	3361      	adds	r3, #97	; 0x61
 8009fc0:	2205      	movs	r2, #5
 8009fc2:	701a      	strb	r2, [r3, #0]
}
 8009fc4:	e273      	b.n	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	015a      	lsls	r2, r3, #5
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	4413      	add	r3, r2
 8009fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f003 0310 	and.w	r3, r3, #16
 8009fd8:	2b10      	cmp	r3, #16
 8009fda:	d150      	bne.n	800a07e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	212c      	movs	r1, #44	; 0x2c
 8009fe2:	fb01 f303 	mul.w	r3, r1, r3
 8009fe6:	4413      	add	r3, r2
 8009fe8:	335c      	adds	r3, #92	; 0x5c
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	212c      	movs	r1, #44	; 0x2c
 8009ff4:	fb01 f303 	mul.w	r3, r1, r3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	3361      	adds	r3, #97	; 0x61
 8009ffc:	2203      	movs	r2, #3
 8009ffe:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	212c      	movs	r1, #44	; 0x2c
 800a006:	fb01 f303 	mul.w	r3, r1, r3
 800a00a:	4413      	add	r3, r2
 800a00c:	333d      	adds	r3, #61	; 0x3d
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d112      	bne.n	800a03a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	212c      	movs	r1, #44	; 0x2c
 800a01a:	fb01 f303 	mul.w	r3, r1, r3
 800a01e:	4413      	add	r3, r2
 800a020:	333c      	adds	r3, #60	; 0x3c
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d108      	bne.n	800a03a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	212c      	movs	r1, #44	; 0x2c
 800a02e:	fb01 f303 	mul.w	r3, r1, r3
 800a032:	4413      	add	r3, r2
 800a034:	333d      	adds	r3, #61	; 0x3d
 800a036:	2201      	movs	r2, #1
 800a038:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	4413      	add	r3, r2
 800a042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	69ba      	ldr	r2, [r7, #24]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a054:	f043 0302 	orr.w	r3, r3, #2
 800a058:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	b2d2      	uxtb	r2, r2
 800a062:	4611      	mov	r1, r2
 800a064:	4618      	mov	r0, r3
 800a066:	f009 f8bc 	bl	80131e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	4413      	add	r3, r2
 800a072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a076:	461a      	mov	r2, r3
 800a078:	2310      	movs	r3, #16
 800a07a:	6093      	str	r3, [r2, #8]
}
 800a07c:	e217      	b.n	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	4413      	add	r3, r2
 800a086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a090:	2b80      	cmp	r3, #128	; 0x80
 800a092:	d174      	bne.n	800a17e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d121      	bne.n	800a0e0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	212c      	movs	r1, #44	; 0x2c
 800a0a2:	fb01 f303 	mul.w	r3, r1, r3
 800a0a6:	4413      	add	r3, r2
 800a0a8:	3361      	adds	r3, #97	; 0x61
 800a0aa:	2206      	movs	r2, #6
 800a0ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	0151      	lsls	r1, r2, #5
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	440a      	add	r2, r1
 800a0c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0c8:	f043 0302 	orr.w	r3, r3, #2
 800a0cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f009 f882 	bl	80131e2 <USB_HC_Halt>
 800a0de:	e044      	b.n	800a16a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	212c      	movs	r1, #44	; 0x2c
 800a0e6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ea:	4413      	add	r3, r2
 800a0ec:	335c      	adds	r3, #92	; 0x5c
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	202c      	movs	r0, #44	; 0x2c
 800a0f8:	fb00 f303 	mul.w	r3, r0, r3
 800a0fc:	440b      	add	r3, r1
 800a0fe:	335c      	adds	r3, #92	; 0x5c
 800a100:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	212c      	movs	r1, #44	; 0x2c
 800a108:	fb01 f303 	mul.w	r3, r1, r3
 800a10c:	4413      	add	r3, r2
 800a10e:	335c      	adds	r3, #92	; 0x5c
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d920      	bls.n	800a158 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	212c      	movs	r1, #44	; 0x2c
 800a11c:	fb01 f303 	mul.w	r3, r1, r3
 800a120:	4413      	add	r3, r2
 800a122:	335c      	adds	r3, #92	; 0x5c
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	212c      	movs	r1, #44	; 0x2c
 800a12e:	fb01 f303 	mul.w	r3, r1, r3
 800a132:	4413      	add	r3, r2
 800a134:	3360      	adds	r3, #96	; 0x60
 800a136:	2204      	movs	r2, #4
 800a138:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	b2d9      	uxtb	r1, r3
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	202c      	movs	r0, #44	; 0x2c
 800a144:	fb00 f303 	mul.w	r3, r0, r3
 800a148:	4413      	add	r3, r2
 800a14a:	3360      	adds	r3, #96	; 0x60
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f00e fc95 	bl	8018a80 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a156:	e008      	b.n	800a16a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	212c      	movs	r1, #44	; 0x2c
 800a15e:	fb01 f303 	mul.w	r3, r1, r3
 800a162:	4413      	add	r3, r2
 800a164:	3360      	adds	r3, #96	; 0x60
 800a166:	2202      	movs	r2, #2
 800a168:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	4413      	add	r3, r2
 800a172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a176:	461a      	mov	r2, r3
 800a178:	2380      	movs	r3, #128	; 0x80
 800a17a:	6093      	str	r3, [r2, #8]
}
 800a17c:	e197      	b.n	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	4413      	add	r3, r2
 800a186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a194:	d134      	bne.n	800a200 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	0151      	lsls	r1, r2, #5
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	440a      	add	r2, r1
 800a1ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1b0:	f043 0302 	orr.w	r3, r3, #2
 800a1b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	b2d2      	uxtb	r2, r2
 800a1be:	4611      	mov	r1, r2
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f009 f80e 	bl	80131e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	015a      	lsls	r2, r3, #5
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	2310      	movs	r3, #16
 800a1d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	015a      	lsls	r2, r3, #5
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	212c      	movs	r1, #44	; 0x2c
 800a1f2:	fb01 f303 	mul.w	r3, r1, r3
 800a1f6:	4413      	add	r3, r2
 800a1f8:	3361      	adds	r3, #97	; 0x61
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	701a      	strb	r2, [r3, #0]
}
 800a1fe:	e156      	b.n	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	4413      	add	r3, r2
 800a208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f003 0302 	and.w	r3, r3, #2
 800a212:	2b02      	cmp	r3, #2
 800a214:	f040 814b 	bne.w	800a4ae <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	0151      	lsls	r1, r2, #5
 800a22a:	69ba      	ldr	r2, [r7, #24]
 800a22c:	440a      	add	r2, r1
 800a22e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a232:	f023 0302 	bic.w	r3, r3, #2
 800a236:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	212c      	movs	r1, #44	; 0x2c
 800a23e:	fb01 f303 	mul.w	r3, r1, r3
 800a242:	4413      	add	r3, r2
 800a244:	3361      	adds	r3, #97	; 0x61
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d179      	bne.n	800a340 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	212c      	movs	r1, #44	; 0x2c
 800a252:	fb01 f303 	mul.w	r3, r1, r3
 800a256:	4413      	add	r3, r2
 800a258:	3360      	adds	r3, #96	; 0x60
 800a25a:	2201      	movs	r2, #1
 800a25c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	212c      	movs	r1, #44	; 0x2c
 800a264:	fb01 f303 	mul.w	r3, r1, r3
 800a268:	4413      	add	r3, r2
 800a26a:	333f      	adds	r3, #63	; 0x3f
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d00a      	beq.n	800a288 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	212c      	movs	r1, #44	; 0x2c
 800a278:	fb01 f303 	mul.w	r3, r1, r3
 800a27c:	4413      	add	r3, r2
 800a27e:	333f      	adds	r3, #63	; 0x3f
 800a280:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800a282:	2b03      	cmp	r3, #3
 800a284:	f040 80fc 	bne.w	800a480 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d142      	bne.n	800a316 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	212c      	movs	r1, #44	; 0x2c
 800a296:	fb01 f303 	mul.w	r3, r1, r3
 800a29a:	4413      	add	r3, r2
 800a29c:	334c      	adds	r3, #76	; 0x4c
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 80ed 	beq.w	800a480 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	212c      	movs	r1, #44	; 0x2c
 800a2ac:	fb01 f303 	mul.w	r3, r1, r3
 800a2b0:	4413      	add	r3, r2
 800a2b2:	334c      	adds	r3, #76	; 0x4c
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	202c      	movs	r0, #44	; 0x2c
 800a2bc:	fb00 f202 	mul.w	r2, r0, r2
 800a2c0:	440a      	add	r2, r1
 800a2c2:	3240      	adds	r2, #64	; 0x40
 800a2c4:	8812      	ldrh	r2, [r2, #0]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	202c      	movs	r0, #44	; 0x2c
 800a2d0:	fb00 f202 	mul.w	r2, r0, r2
 800a2d4:	440a      	add	r2, r1
 800a2d6:	3240      	adds	r2, #64	; 0x40
 800a2d8:	8812      	ldrh	r2, [r2, #0]
 800a2da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 80ca 	beq.w	800a480 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	212c      	movs	r1, #44	; 0x2c
 800a2f2:	fb01 f303 	mul.w	r3, r1, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3355      	adds	r3, #85	; 0x55
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	f083 0301 	eor.w	r3, r3, #1
 800a300:	b2d8      	uxtb	r0, r3
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	212c      	movs	r1, #44	; 0x2c
 800a308:	fb01 f303 	mul.w	r3, r1, r3
 800a30c:	4413      	add	r3, r2
 800a30e:	3355      	adds	r3, #85	; 0x55
 800a310:	4602      	mov	r2, r0
 800a312:	701a      	strb	r2, [r3, #0]
 800a314:	e0b4      	b.n	800a480 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	212c      	movs	r1, #44	; 0x2c
 800a31c:	fb01 f303 	mul.w	r3, r1, r3
 800a320:	4413      	add	r3, r2
 800a322:	3355      	adds	r3, #85	; 0x55
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	f083 0301 	eor.w	r3, r3, #1
 800a32a:	b2d8      	uxtb	r0, r3
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	212c      	movs	r1, #44	; 0x2c
 800a332:	fb01 f303 	mul.w	r3, r1, r3
 800a336:	4413      	add	r3, r2
 800a338:	3355      	adds	r3, #85	; 0x55
 800a33a:	4602      	mov	r2, r0
 800a33c:	701a      	strb	r2, [r3, #0]
 800a33e:	e09f      	b.n	800a480 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	212c      	movs	r1, #44	; 0x2c
 800a346:	fb01 f303 	mul.w	r3, r1, r3
 800a34a:	4413      	add	r3, r2
 800a34c:	3361      	adds	r3, #97	; 0x61
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	2b03      	cmp	r3, #3
 800a352:	d109      	bne.n	800a368 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	212c      	movs	r1, #44	; 0x2c
 800a35a:	fb01 f303 	mul.w	r3, r1, r3
 800a35e:	4413      	add	r3, r2
 800a360:	3360      	adds	r3, #96	; 0x60
 800a362:	2202      	movs	r2, #2
 800a364:	701a      	strb	r2, [r3, #0]
 800a366:	e08b      	b.n	800a480 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	212c      	movs	r1, #44	; 0x2c
 800a36e:	fb01 f303 	mul.w	r3, r1, r3
 800a372:	4413      	add	r3, r2
 800a374:	3361      	adds	r3, #97	; 0x61
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d109      	bne.n	800a390 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	212c      	movs	r1, #44	; 0x2c
 800a382:	fb01 f303 	mul.w	r3, r1, r3
 800a386:	4413      	add	r3, r2
 800a388:	3360      	adds	r3, #96	; 0x60
 800a38a:	2202      	movs	r2, #2
 800a38c:	701a      	strb	r2, [r3, #0]
 800a38e:	e077      	b.n	800a480 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	212c      	movs	r1, #44	; 0x2c
 800a396:	fb01 f303 	mul.w	r3, r1, r3
 800a39a:	4413      	add	r3, r2
 800a39c:	3361      	adds	r3, #97	; 0x61
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b05      	cmp	r3, #5
 800a3a2:	d109      	bne.n	800a3b8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	212c      	movs	r1, #44	; 0x2c
 800a3aa:	fb01 f303 	mul.w	r3, r1, r3
 800a3ae:	4413      	add	r3, r2
 800a3b0:	3360      	adds	r3, #96	; 0x60
 800a3b2:	2205      	movs	r2, #5
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	e063      	b.n	800a480 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	212c      	movs	r1, #44	; 0x2c
 800a3be:	fb01 f303 	mul.w	r3, r1, r3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	3361      	adds	r3, #97	; 0x61
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b06      	cmp	r3, #6
 800a3ca:	d009      	beq.n	800a3e0 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	212c      	movs	r1, #44	; 0x2c
 800a3d2:	fb01 f303 	mul.w	r3, r1, r3
 800a3d6:	4413      	add	r3, r2
 800a3d8:	3361      	adds	r3, #97	; 0x61
 800a3da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d14f      	bne.n	800a480 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	212c      	movs	r1, #44	; 0x2c
 800a3e6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ea:	4413      	add	r3, r2
 800a3ec:	335c      	adds	r3, #92	; 0x5c
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	1c5a      	adds	r2, r3, #1
 800a3f2:	6879      	ldr	r1, [r7, #4]
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	202c      	movs	r0, #44	; 0x2c
 800a3f8:	fb00 f303 	mul.w	r3, r0, r3
 800a3fc:	440b      	add	r3, r1
 800a3fe:	335c      	adds	r3, #92	; 0x5c
 800a400:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	212c      	movs	r1, #44	; 0x2c
 800a408:	fb01 f303 	mul.w	r3, r1, r3
 800a40c:	4413      	add	r3, r2
 800a40e:	335c      	adds	r3, #92	; 0x5c
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b02      	cmp	r3, #2
 800a414:	d912      	bls.n	800a43c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	212c      	movs	r1, #44	; 0x2c
 800a41c:	fb01 f303 	mul.w	r3, r1, r3
 800a420:	4413      	add	r3, r2
 800a422:	335c      	adds	r3, #92	; 0x5c
 800a424:	2200      	movs	r2, #0
 800a426:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	212c      	movs	r1, #44	; 0x2c
 800a42e:	fb01 f303 	mul.w	r3, r1, r3
 800a432:	4413      	add	r3, r2
 800a434:	3360      	adds	r3, #96	; 0x60
 800a436:	2204      	movs	r2, #4
 800a438:	701a      	strb	r2, [r3, #0]
 800a43a:	e021      	b.n	800a480 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	212c      	movs	r1, #44	; 0x2c
 800a442:	fb01 f303 	mul.w	r3, r1, r3
 800a446:	4413      	add	r3, r2
 800a448:	3360      	adds	r3, #96	; 0x60
 800a44a:	2202      	movs	r2, #2
 800a44c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	015a      	lsls	r2, r3, #5
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	4413      	add	r3, r2
 800a456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a464:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a46c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	4413      	add	r3, r2
 800a476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a47a:	461a      	mov	r2, r3
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	015a      	lsls	r2, r3, #5
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	4413      	add	r3, r2
 800a488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a48c:	461a      	mov	r2, r3
 800a48e:	2302      	movs	r3, #2
 800a490:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	b2d9      	uxtb	r1, r3
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	202c      	movs	r0, #44	; 0x2c
 800a49c:	fb00 f303 	mul.w	r3, r0, r3
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3360      	adds	r3, #96	; 0x60
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f00e fae9 	bl	8018a80 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a4ae:	bf00      	nop
 800a4b0:	3720      	adds	r7, #32
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b08a      	sub	sp, #40	; 0x28
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	f003 030f 	and.w	r3, r3, #15
 800a4d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	0c5b      	lsrs	r3, r3, #17
 800a4dc:	f003 030f 	and.w	r3, r3, #15
 800a4e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	091b      	lsrs	r3, r3, #4
 800a4e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d004      	beq.n	800a4fc <HCD_RXQLVL_IRQHandler+0x46>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b05      	cmp	r3, #5
 800a4f6:	f000 80a9 	beq.w	800a64c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800a4fa:	e0aa      	b.n	800a652 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 80a6 	beq.w	800a650 <HCD_RXQLVL_IRQHandler+0x19a>
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	212c      	movs	r1, #44	; 0x2c
 800a50a:	fb01 f303 	mul.w	r3, r1, r3
 800a50e:	4413      	add	r3, r2
 800a510:	3344      	adds	r3, #68	; 0x44
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 809b 	beq.w	800a650 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	212c      	movs	r1, #44	; 0x2c
 800a520:	fb01 f303 	mul.w	r3, r1, r3
 800a524:	4413      	add	r3, r2
 800a526:	3350      	adds	r3, #80	; 0x50
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	441a      	add	r2, r3
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	202c      	movs	r0, #44	; 0x2c
 800a534:	fb00 f303 	mul.w	r3, r0, r3
 800a538:	440b      	add	r3, r1
 800a53a:	334c      	adds	r3, #76	; 0x4c
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d87a      	bhi.n	800a638 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	212c      	movs	r1, #44	; 0x2c
 800a54c:	fb01 f303 	mul.w	r3, r1, r3
 800a550:	4413      	add	r3, r2
 800a552:	3344      	adds	r3, #68	; 0x44
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	b292      	uxth	r2, r2
 800a55a:	4619      	mov	r1, r3
 800a55c:	f008 f9eb 	bl	8012936 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	212c      	movs	r1, #44	; 0x2c
 800a566:	fb01 f303 	mul.w	r3, r1, r3
 800a56a:	4413      	add	r3, r2
 800a56c:	3344      	adds	r3, #68	; 0x44
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	441a      	add	r2, r3
 800a574:	6879      	ldr	r1, [r7, #4]
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	202c      	movs	r0, #44	; 0x2c
 800a57a:	fb00 f303 	mul.w	r3, r0, r3
 800a57e:	440b      	add	r3, r1
 800a580:	3344      	adds	r3, #68	; 0x44
 800a582:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	212c      	movs	r1, #44	; 0x2c
 800a58a:	fb01 f303 	mul.w	r3, r1, r3
 800a58e:	4413      	add	r3, r2
 800a590:	3350      	adds	r3, #80	; 0x50
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	441a      	add	r2, r3
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	202c      	movs	r0, #44	; 0x2c
 800a59e:	fb00 f303 	mul.w	r3, r0, r3
 800a5a2:	440b      	add	r3, r1
 800a5a4:	3350      	adds	r3, #80	; 0x50
 800a5a6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	6a3b      	ldr	r3, [r7, #32]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	0cdb      	lsrs	r3, r3, #19
 800a5b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	212c      	movs	r1, #44	; 0x2c
 800a5c4:	fb01 f303 	mul.w	r3, r1, r3
 800a5c8:	4413      	add	r3, r2
 800a5ca:	3340      	adds	r3, #64	; 0x40
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d13c      	bne.n	800a650 <HCD_RXQLVL_IRQHandler+0x19a>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d039      	beq.n	800a650 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	015a      	lsls	r2, r3, #5
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	6a3b      	ldr	r3, [r7, #32]
 800a602:	4413      	add	r3, r2
 800a604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a608:	461a      	mov	r2, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	212c      	movs	r1, #44	; 0x2c
 800a614:	fb01 f303 	mul.w	r3, r1, r3
 800a618:	4413      	add	r3, r2
 800a61a:	3354      	adds	r3, #84	; 0x54
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	f083 0301 	eor.w	r3, r3, #1
 800a622:	b2d8      	uxtb	r0, r3
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	212c      	movs	r1, #44	; 0x2c
 800a62a:	fb01 f303 	mul.w	r3, r1, r3
 800a62e:	4413      	add	r3, r2
 800a630:	3354      	adds	r3, #84	; 0x54
 800a632:	4602      	mov	r2, r0
 800a634:	701a      	strb	r2, [r3, #0]
      break;
 800a636:	e00b      	b.n	800a650 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	212c      	movs	r1, #44	; 0x2c
 800a63e:	fb01 f303 	mul.w	r3, r1, r3
 800a642:	4413      	add	r3, r2
 800a644:	3360      	adds	r3, #96	; 0x60
 800a646:	2204      	movs	r2, #4
 800a648:	701a      	strb	r2, [r3, #0]
      break;
 800a64a:	e001      	b.n	800a650 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800a64c:	bf00      	nop
 800a64e:	e000      	b.n	800a652 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800a650:	bf00      	nop
  }
}
 800a652:	bf00      	nop
 800a654:	3728      	adds	r7, #40	; 0x28
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b086      	sub	sp, #24
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a686:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d10b      	bne.n	800a6aa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d102      	bne.n	800a6a2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f00e f9d3 	bl	8018a48 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f043 0302 	orr.w	r3, r3, #2
 800a6a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f003 0308 	and.w	r3, r3, #8
 800a6b0:	2b08      	cmp	r3, #8
 800a6b2:	d132      	bne.n	800a71a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	f043 0308 	orr.w	r3, r3, #8
 800a6ba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f003 0304 	and.w	r3, r3, #4
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d126      	bne.n	800a714 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d113      	bne.n	800a6f6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800a6d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6d8:	d106      	bne.n	800a6e8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2102      	movs	r1, #2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f008 fa57 	bl	8012b94 <USB_InitFSLSPClkSel>
 800a6e6:	e011      	b.n	800a70c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f008 fa50 	bl	8012b94 <USB_InitFSLSPClkSel>
 800a6f4:	e00a      	b.n	800a70c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d106      	bne.n	800a70c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a704:	461a      	mov	r2, r3
 800a706:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a70a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f00e f9c9 	bl	8018aa4 <HAL_HCD_PortEnabled_Callback>
 800a712:	e002      	b.n	800a71a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f00e f9d3 	bl	8018ac0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f003 0320 	and.w	r3, r3, #32
 800a720:	2b20      	cmp	r3, #32
 800a722:	d103      	bne.n	800a72c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f043 0320 	orr.w	r3, r3, #32
 800a72a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a732:	461a      	mov	r2, r3
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	6013      	str	r3, [r2, #0]
}
 800a738:	bf00      	nop
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	e07f      	b.n	800a852 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d106      	bne.n	800a76c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7f8 fc60 	bl	800302c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2224      	movs	r2, #36	; 0x24
 800a770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f022 0201 	bic.w	r2, r2, #1
 800a782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a790:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d107      	bne.n	800a7ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	689a      	ldr	r2, [r3, #8]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7b6:	609a      	str	r2, [r3, #8]
 800a7b8:	e006      	b.n	800a7c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	689a      	ldr	r2, [r3, #8]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a7c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d104      	bne.n	800a7da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	6859      	ldr	r1, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <HAL_I2C_Init+0x11c>)
 800a7e6:	430b      	orrs	r3, r1
 800a7e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691a      	ldr	r2, [r3, #16]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	ea42 0103 	orr.w	r1, r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	021a      	lsls	r2, r3, #8
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	430a      	orrs	r2, r1
 800a812:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	69d9      	ldr	r1, [r3, #28]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a1a      	ldr	r2, [r3, #32]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f042 0201 	orr.w	r2, r2, #1
 800a832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	02008000 	.word	0x02008000

0800a860 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e021      	b.n	800a8b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2224      	movs	r2, #36	; 0x24
 800a876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f022 0201 	bic.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7f8 fc46 	bl	800311c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af02      	add	r7, sp, #8
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	817b      	strh	r3, [r7, #10]
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	813b      	strh	r3, [r7, #8]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	f040 80f9 	bne.w	800aada <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d002      	beq.n	800a8f4 <HAL_I2C_Mem_Write+0x34>
 800a8ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e0ed      	b.n	800aadc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a906:	2b01      	cmp	r3, #1
 800a908:	d101      	bne.n	800a90e <HAL_I2C_Mem_Write+0x4e>
 800a90a:	2302      	movs	r3, #2
 800a90c:	e0e6      	b.n	800aadc <HAL_I2C_Mem_Write+0x21c>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a916:	f7fc f859 	bl	80069cc <HAL_GetTick>
 800a91a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	2319      	movs	r3, #25
 800a922:	2201      	movs	r2, #1
 800a924:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 fac3 	bl	800aeb4 <I2C_WaitOnFlagUntilTimeout>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e0d1      	b.n	800aadc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2221      	movs	r2, #33	; 0x21
 800a93c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2240      	movs	r2, #64	; 0x40
 800a944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6a3a      	ldr	r2, [r7, #32]
 800a952:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a958:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a960:	88f8      	ldrh	r0, [r7, #6]
 800a962:	893a      	ldrh	r2, [r7, #8]
 800a964:	8979      	ldrh	r1, [r7, #10]
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	4603      	mov	r3, r0
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f000 f9d3 	bl	800ad1c <I2C_RequestMemoryWrite>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d005      	beq.n	800a988 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e0a9      	b.n	800aadc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	2bff      	cmp	r3, #255	; 0xff
 800a990:	d90e      	bls.n	800a9b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	22ff      	movs	r2, #255	; 0xff
 800a996:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	8979      	ldrh	r1, [r7, #10]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 fba5 	bl	800b0f8 <I2C_TransferConfig>
 800a9ae:	e00f      	b.n	800a9d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	8979      	ldrh	r1, [r7, #10]
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f000 fb94 	bl	800b0f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9d0:	697a      	ldr	r2, [r7, #20]
 800a9d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f000 faad 	bl	800af34 <I2C_WaitOnTXISFlagUntilTimeout>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e07b      	b.n	800aadc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	1c5a      	adds	r2, r3, #1
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	3b01      	subs	r3, #1
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d034      	beq.n	800aa88 <HAL_I2C_Mem_Write+0x1c8>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d130      	bne.n	800aa88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2180      	movs	r1, #128	; 0x80
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f000 fa3f 	bl	800aeb4 <I2C_WaitOnFlagUntilTimeout>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e04d      	b.n	800aadc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	2bff      	cmp	r3, #255	; 0xff
 800aa48:	d90e      	bls.n	800aa68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	22ff      	movs	r2, #255	; 0xff
 800aa4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	8979      	ldrh	r1, [r7, #10]
 800aa58:	2300      	movs	r3, #0
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 fb49 	bl	800b0f8 <I2C_TransferConfig>
 800aa66:	e00f      	b.n	800aa88 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	8979      	ldrh	r1, [r7, #10]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f000 fb38 	bl	800b0f8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d19e      	bne.n	800a9d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 fa8c 	bl	800afb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e01a      	b.n	800aadc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2220      	movs	r2, #32
 800aaac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	6859      	ldr	r1, [r3, #4]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	4b0a      	ldr	r3, [pc, #40]	; (800aae4 <HAL_I2C_Mem_Write+0x224>)
 800aaba:	400b      	ands	r3, r1
 800aabc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	e000      	b.n	800aadc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800aada:	2302      	movs	r3, #2
  }
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3718      	adds	r7, #24
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	fe00e800 	.word	0xfe00e800

0800aae8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b088      	sub	sp, #32
 800aaec:	af02      	add	r7, sp, #8
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	817b      	strh	r3, [r7, #10]
 800aafa:	460b      	mov	r3, r1
 800aafc:	813b      	strh	r3, [r7, #8]
 800aafe:	4613      	mov	r3, r2
 800ab00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b20      	cmp	r3, #32
 800ab0c:	f040 80fd 	bne.w	800ad0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d002      	beq.n	800ab1c <HAL_I2C_Mem_Read+0x34>
 800ab16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d105      	bne.n	800ab28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ab24:	2301      	movs	r3, #1
 800ab26:	e0f1      	b.n	800ad0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d101      	bne.n	800ab36 <HAL_I2C_Mem_Read+0x4e>
 800ab32:	2302      	movs	r3, #2
 800ab34:	e0ea      	b.n	800ad0c <HAL_I2C_Mem_Read+0x224>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ab3e:	f7fb ff45 	bl	80069cc <HAL_GetTick>
 800ab42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	2319      	movs	r3, #25
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 f9af 	bl	800aeb4 <I2C_WaitOnFlagUntilTimeout>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e0d5      	b.n	800ad0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2222      	movs	r2, #34	; 0x22
 800ab64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2240      	movs	r2, #64	; 0x40
 800ab6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6a3a      	ldr	r2, [r7, #32]
 800ab7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab88:	88f8      	ldrh	r0, [r7, #6]
 800ab8a:	893a      	ldrh	r2, [r7, #8]
 800ab8c:	8979      	ldrh	r1, [r7, #10]
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	9301      	str	r3, [sp, #4]
 800ab92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	4603      	mov	r3, r0
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f000 f913 	bl	800adc4 <I2C_RequestMemoryRead>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d005      	beq.n	800abb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e0ad      	b.n	800ad0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	2bff      	cmp	r3, #255	; 0xff
 800abb8:	d90e      	bls.n	800abd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	22ff      	movs	r2, #255	; 0xff
 800abbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	8979      	ldrh	r1, [r7, #10]
 800abc8:	4b52      	ldr	r3, [pc, #328]	; (800ad14 <HAL_I2C_Mem_Read+0x22c>)
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 fa91 	bl	800b0f8 <I2C_TransferConfig>
 800abd6:	e00f      	b.n	800abf8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abdc:	b29a      	uxth	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	8979      	ldrh	r1, [r7, #10]
 800abea:	4b4a      	ldr	r3, [pc, #296]	; (800ad14 <HAL_I2C_Mem_Read+0x22c>)
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 fa80 	bl	800b0f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	2200      	movs	r2, #0
 800ac00:	2104      	movs	r1, #4
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f956 	bl	800aeb4 <I2C_WaitOnFlagUntilTimeout>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e07c      	b.n	800ad0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	b2d2      	uxtb	r2, r2
 800ac1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d034      	beq.n	800acb8 <HAL_I2C_Mem_Read+0x1d0>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d130      	bne.n	800acb8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	2180      	movs	r1, #128	; 0x80
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 f927 	bl	800aeb4 <I2C_WaitOnFlagUntilTimeout>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e04d      	b.n	800ad0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	2bff      	cmp	r3, #255	; 0xff
 800ac78:	d90e      	bls.n	800ac98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	22ff      	movs	r2, #255	; 0xff
 800ac7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	8979      	ldrh	r1, [r7, #10]
 800ac88:	2300      	movs	r3, #0
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 fa31 	bl	800b0f8 <I2C_TransferConfig>
 800ac96:	e00f      	b.n	800acb8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	8979      	ldrh	r1, [r7, #10]
 800acaa:	2300      	movs	r3, #0
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 fa20 	bl	800b0f8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d19a      	bne.n	800abf8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f000 f974 	bl	800afb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e01a      	b.n	800ad0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2220      	movs	r2, #32
 800acdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6859      	ldr	r1, [r3, #4]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <HAL_I2C_Mem_Read+0x230>)
 800acea:	400b      	ands	r3, r1
 800acec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2220      	movs	r2, #32
 800acf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	e000      	b.n	800ad0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ad0a:	2302      	movs	r3, #2
  }
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	80002400 	.word	0x80002400
 800ad18:	fe00e800 	.word	0xfe00e800

0800ad1c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af02      	add	r7, sp, #8
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	4608      	mov	r0, r1
 800ad26:	4611      	mov	r1, r2
 800ad28:	461a      	mov	r2, r3
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	817b      	strh	r3, [r7, #10]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	813b      	strh	r3, [r7, #8]
 800ad32:	4613      	mov	r3, r2
 800ad34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ad36:	88fb      	ldrh	r3, [r7, #6]
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	8979      	ldrh	r1, [r7, #10]
 800ad3c:	4b20      	ldr	r3, [pc, #128]	; (800adc0 <I2C_RequestMemoryWrite+0xa4>)
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 f9d7 	bl	800b0f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad4a:	69fa      	ldr	r2, [r7, #28]
 800ad4c:	69b9      	ldr	r1, [r7, #24]
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f000 f8f0 	bl	800af34 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e02c      	b.n	800adb8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad5e:	88fb      	ldrh	r3, [r7, #6]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d105      	bne.n	800ad70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad64:	893b      	ldrh	r3, [r7, #8]
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	629a      	str	r2, [r3, #40]	; 0x28
 800ad6e:	e015      	b.n	800ad9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ad70:	893b      	ldrh	r3, [r7, #8]
 800ad72:	0a1b      	lsrs	r3, r3, #8
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad7e:	69fa      	ldr	r2, [r7, #28]
 800ad80:	69b9      	ldr	r1, [r7, #24]
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f000 f8d6 	bl	800af34 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e012      	b.n	800adb8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad92:	893b      	ldrh	r3, [r7, #8]
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	2200      	movs	r2, #0
 800ada4:	2180      	movs	r1, #128	; 0x80
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 f884 	bl	800aeb4 <I2C_WaitOnFlagUntilTimeout>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	80002000 	.word	0x80002000

0800adc4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af02      	add	r7, sp, #8
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	4608      	mov	r0, r1
 800adce:	4611      	mov	r1, r2
 800add0:	461a      	mov	r2, r3
 800add2:	4603      	mov	r3, r0
 800add4:	817b      	strh	r3, [r7, #10]
 800add6:	460b      	mov	r3, r1
 800add8:	813b      	strh	r3, [r7, #8]
 800adda:	4613      	mov	r3, r2
 800addc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800adde:	88fb      	ldrh	r3, [r7, #6]
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	8979      	ldrh	r1, [r7, #10]
 800ade4:	4b20      	ldr	r3, [pc, #128]	; (800ae68 <I2C_RequestMemoryRead+0xa4>)
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	2300      	movs	r3, #0
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 f984 	bl	800b0f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adf0:	69fa      	ldr	r2, [r7, #28]
 800adf2:	69b9      	ldr	r1, [r7, #24]
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 f89d 	bl	800af34 <I2C_WaitOnTXISFlagUntilTimeout>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	e02c      	b.n	800ae5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae04:	88fb      	ldrh	r3, [r7, #6]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d105      	bne.n	800ae16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae0a:	893b      	ldrh	r3, [r7, #8]
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	629a      	str	r2, [r3, #40]	; 0x28
 800ae14:	e015      	b.n	800ae42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ae16:	893b      	ldrh	r3, [r7, #8]
 800ae18:	0a1b      	lsrs	r3, r3, #8
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae24:	69fa      	ldr	r2, [r7, #28]
 800ae26:	69b9      	ldr	r1, [r7, #24]
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 f883 	bl	800af34 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e012      	b.n	800ae5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae38:	893b      	ldrh	r3, [r7, #8]
 800ae3a:	b2da      	uxtb	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	2140      	movs	r1, #64	; 0x40
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 f831 	bl	800aeb4 <I2C_WaitOnFlagUntilTimeout>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e000      	b.n	800ae5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	80002000 	.word	0x80002000

0800ae6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	f003 0302 	and.w	r3, r3, #2
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d103      	bne.n	800ae8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2200      	movs	r2, #0
 800ae88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d007      	beq.n	800aea8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	699a      	ldr	r2, [r3, #24]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f042 0201 	orr.w	r2, r2, #1
 800aea6:	619a      	str	r2, [r3, #24]
  }
}
 800aea8:	bf00      	nop
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	603b      	str	r3, [r7, #0]
 800aec0:	4613      	mov	r3, r2
 800aec2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aec4:	e022      	b.n	800af0c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aecc:	d01e      	beq.n	800af0c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aece:	f7fb fd7d 	bl	80069cc <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d302      	bcc.n	800aee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d113      	bne.n	800af0c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee8:	f043 0220 	orr.w	r2, r3, #32
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2220      	movs	r2, #32
 800aef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e00f      	b.n	800af2c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	699a      	ldr	r2, [r3, #24]
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	4013      	ands	r3, r2
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	429a      	cmp	r2, r3
 800af1a:	bf0c      	ite	eq
 800af1c:	2301      	moveq	r3, #1
 800af1e:	2300      	movne	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	461a      	mov	r2, r3
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	429a      	cmp	r2, r3
 800af28:	d0cd      	beq.n	800aec6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af40:	e02c      	b.n	800af9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	68b9      	ldr	r1, [r7, #8]
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f000 f870 	bl	800b02c <I2C_IsAcknowledgeFailed>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e02a      	b.n	800afac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af5c:	d01e      	beq.n	800af9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af5e:	f7fb fd35 	bl	80069cc <HAL_GetTick>
 800af62:	4602      	mov	r2, r0
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d302      	bcc.n	800af74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d113      	bne.n	800af9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af78:	f043 0220 	orr.w	r2, r3, #32
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2220      	movs	r2, #32
 800af84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	e007      	b.n	800afac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	f003 0302 	and.w	r3, r3, #2
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d1cb      	bne.n	800af42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800afc0:	e028      	b.n	800b014 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	68b9      	ldr	r1, [r7, #8]
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f000 f830 	bl	800b02c <I2C_IsAcknowledgeFailed>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e026      	b.n	800b024 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afd6:	f7fb fcf9 	bl	80069cc <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d302      	bcc.n	800afec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d113      	bne.n	800b014 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff0:	f043 0220 	orr.w	r2, r3, #32
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2220      	movs	r2, #32
 800affc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e007      	b.n	800b024 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	f003 0320 	and.w	r3, r3, #32
 800b01e:	2b20      	cmp	r3, #32
 800b020:	d1cf      	bne.n	800afc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	699b      	ldr	r3, [r3, #24]
 800b03e:	f003 0310 	and.w	r3, r3, #16
 800b042:	2b10      	cmp	r3, #16
 800b044:	d151      	bne.n	800b0ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b046:	e022      	b.n	800b08e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b04e:	d01e      	beq.n	800b08e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b050:	f7fb fcbc 	bl	80069cc <HAL_GetTick>
 800b054:	4602      	mov	r2, r0
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d302      	bcc.n	800b066 <I2C_IsAcknowledgeFailed+0x3a>
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d113      	bne.n	800b08e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b06a:	f043 0220 	orr.w	r2, r3, #32
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2220      	movs	r2, #32
 800b076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2200      	movs	r2, #0
 800b086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e02e      	b.n	800b0ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	f003 0320 	and.w	r3, r3, #32
 800b098:	2b20      	cmp	r3, #32
 800b09a:	d1d5      	bne.n	800b048 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2210      	movs	r2, #16
 800b0a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2220      	movs	r2, #32
 800b0aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f7ff fedd 	bl	800ae6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	6859      	ldr	r1, [r3, #4]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	4b0d      	ldr	r3, [pc, #52]	; (800b0f4 <I2C_IsAcknowledgeFailed+0xc8>)
 800b0be:	400b      	ands	r3, r1
 800b0c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0c6:	f043 0204 	orr.w	r2, r3, #4
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e000      	b.n	800b0ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	fe00e800 	.word	0xfe00e800

0800b0f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	607b      	str	r3, [r7, #4]
 800b102:	460b      	mov	r3, r1
 800b104:	817b      	strh	r3, [r7, #10]
 800b106:	4613      	mov	r3, r2
 800b108:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	0d5b      	lsrs	r3, r3, #21
 800b114:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b118:	4b0d      	ldr	r3, [pc, #52]	; (800b150 <I2C_TransferConfig+0x58>)
 800b11a:	430b      	orrs	r3, r1
 800b11c:	43db      	mvns	r3, r3
 800b11e:	ea02 0103 	and.w	r1, r2, r3
 800b122:	897b      	ldrh	r3, [r7, #10]
 800b124:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b128:	7a7b      	ldrb	r3, [r7, #9]
 800b12a:	041b      	lsls	r3, r3, #16
 800b12c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b130:	431a      	orrs	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	431a      	orrs	r2, r3
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	431a      	orrs	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	430a      	orrs	r2, r1
 800b140:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b142:	bf00      	nop
 800b144:	3714      	adds	r7, #20
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	03ff63ff 	.word	0x03ff63ff

0800b154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b20      	cmp	r3, #32
 800b168:	d138      	bne.n	800b1dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b174:	2302      	movs	r3, #2
 800b176:	e032      	b.n	800b1de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2224      	movs	r2, #36	; 0x24
 800b184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f022 0201 	bic.w	r2, r2, #1
 800b196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b1a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6819      	ldr	r1, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	430a      	orrs	r2, r1
 800b1b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f042 0201 	orr.w	r2, r2, #1
 800b1c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e000      	b.n	800b1de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b1dc:	2302      	movs	r3, #2
  }
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b085      	sub	sp, #20
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b20      	cmp	r3, #32
 800b1fe:	d139      	bne.n	800b274 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b206:	2b01      	cmp	r3, #1
 800b208:	d101      	bne.n	800b20e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b20a:	2302      	movs	r3, #2
 800b20c:	e033      	b.n	800b276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2224      	movs	r2, #36	; 0x24
 800b21a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f022 0201 	bic.w	r2, r2, #1
 800b22c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b23c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	021b      	lsls	r3, r3, #8
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	4313      	orrs	r3, r2
 800b246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0201 	orr.w	r2, r2, #1
 800b25e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2220      	movs	r2, #32
 800b264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	e000      	b.n	800b276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b274:	2302      	movs	r3, #2
  }
}
 800b276:	4618      	mov	r0, r3
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
	...

0800b284 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e0bf      	b.n	800b416 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d106      	bne.n	800b2b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7f7 ff72 	bl	8003194 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	699a      	ldr	r2, [r3, #24]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b2c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	6999      	ldr	r1, [r3, #24]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b2dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	430a      	orrs	r2, r1
 800b2ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6899      	ldr	r1, [r3, #8]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	4b4a      	ldr	r3, [pc, #296]	; (800b420 <HAL_LTDC_Init+0x19c>)
 800b2f8:	400b      	ands	r3, r1
 800b2fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	695b      	ldr	r3, [r3, #20]
 800b300:	041b      	lsls	r3, r3, #16
 800b302:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6899      	ldr	r1, [r3, #8]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	699a      	ldr	r2, [r3, #24]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	431a      	orrs	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	430a      	orrs	r2, r1
 800b318:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68d9      	ldr	r1, [r3, #12]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	4b3e      	ldr	r3, [pc, #248]	; (800b420 <HAL_LTDC_Init+0x19c>)
 800b326:	400b      	ands	r3, r1
 800b328:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	041b      	lsls	r3, r3, #16
 800b330:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68d9      	ldr	r1, [r3, #12]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a1a      	ldr	r2, [r3, #32]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	431a      	orrs	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	430a      	orrs	r2, r1
 800b346:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6919      	ldr	r1, [r3, #16]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	4b33      	ldr	r3, [pc, #204]	; (800b420 <HAL_LTDC_Init+0x19c>)
 800b354:	400b      	ands	r3, r1
 800b356:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35c:	041b      	lsls	r3, r3, #16
 800b35e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6919      	ldr	r1, [r3, #16]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	431a      	orrs	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	430a      	orrs	r2, r1
 800b374:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6959      	ldr	r1, [r3, #20]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	4b27      	ldr	r3, [pc, #156]	; (800b420 <HAL_LTDC_Init+0x19c>)
 800b382:	400b      	ands	r3, r1
 800b384:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38a:	041b      	lsls	r3, r3, #16
 800b38c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6959      	ldr	r1, [r3, #20]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	431a      	orrs	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	430a      	orrs	r2, r1
 800b3a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b3aa:	021b      	lsls	r3, r3, #8
 800b3ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b3b4:	041b      	lsls	r3, r3, #16
 800b3b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b3c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b3da:	431a      	orrs	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	430a      	orrs	r2, r1
 800b3e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0206 	orr.w	r2, r2, #6
 800b3f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	699a      	ldr	r2, [r3, #24]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f042 0201 	orr.w	r2, r2, #1
 800b402:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	f000f800 	.word	0xf000f800

0800b424 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b424:	b5b0      	push	{r4, r5, r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b436:	2b01      	cmp	r3, #1
 800b438:	d101      	bne.n	800b43e <HAL_LTDC_ConfigLayer+0x1a>
 800b43a:	2302      	movs	r3, #2
 800b43c:	e02c      	b.n	800b498 <HAL_LTDC_ConfigLayer+0x74>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2202      	movs	r2, #2
 800b44a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2134      	movs	r1, #52	; 0x34
 800b454:	fb01 f303 	mul.w	r3, r1, r3
 800b458:	4413      	add	r3, r2
 800b45a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	4614      	mov	r4, r2
 800b462:	461d      	mov	r5, r3
 800b464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b46c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b46e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b470:	682b      	ldr	r3, [r5, #0]
 800b472:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	68b9      	ldr	r1, [r7, #8]
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 f847 	bl	800b50c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2201      	movs	r2, #1
 800b484:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3710      	adds	r7, #16
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bdb0      	pop	{r4, r5, r7, pc}

0800b4a0 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d101      	bne.n	800b4ba <HAL_LTDC_SetAddress+0x1a>
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	e024      	b.n	800b504 <HAL_LTDC_SetAddress+0x64>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2202      	movs	r2, #2
 800b4c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2234      	movs	r2, #52	; 0x34
 800b4ce:	fb02 f303 	mul.w	r3, r2, r3
 800b4d2:	3338      	adds	r3, #56	; 0x38
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	6979      	ldr	r1, [r7, #20]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f811 	bl	800b50c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b089      	sub	sp, #36	; 0x24
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	0c1b      	lsrs	r3, r3, #16
 800b524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b528:	4413      	add	r3, r2
 800b52a:	041b      	lsls	r3, r3, #16
 800b52c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	461a      	mov	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	01db      	lsls	r3, r3, #7
 800b538:	4413      	add	r3, r2
 800b53a:	3384      	adds	r3, #132	; 0x84
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	6812      	ldr	r2, [r2, #0]
 800b542:	4611      	mov	r1, r2
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	01d2      	lsls	r2, r2, #7
 800b548:	440a      	add	r2, r1
 800b54a:	3284      	adds	r2, #132	; 0x84
 800b54c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b550:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	0c1b      	lsrs	r3, r3, #16
 800b55e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b562:	4413      	add	r3, r2
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4619      	mov	r1, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	01db      	lsls	r3, r3, #7
 800b570:	440b      	add	r3, r1
 800b572:	3384      	adds	r3, #132	; 0x84
 800b574:	4619      	mov	r1, r3
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	4313      	orrs	r3, r2
 800b57a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	68da      	ldr	r2, [r3, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b58a:	4413      	add	r3, r2
 800b58c:	041b      	lsls	r3, r3, #16
 800b58e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	461a      	mov	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	01db      	lsls	r3, r3, #7
 800b59a:	4413      	add	r3, r2
 800b59c:	3384      	adds	r3, #132	; 0x84
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	6812      	ldr	r2, [r2, #0]
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	01d2      	lsls	r2, r2, #7
 800b5aa:	440a      	add	r2, r1
 800b5ac:	3284      	adds	r2, #132	; 0x84
 800b5ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b5b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	689a      	ldr	r2, [r3, #8]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5c2:	4413      	add	r3, r2
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	01db      	lsls	r3, r3, #7
 800b5d0:	440b      	add	r3, r1
 800b5d2:	3384      	adds	r3, #132	; 0x84
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	01db      	lsls	r3, r3, #7
 800b5e6:	4413      	add	r3, r2
 800b5e8:	3384      	adds	r3, #132	; 0x84
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	6812      	ldr	r2, [r2, #0]
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	01d2      	lsls	r2, r2, #7
 800b5f6:	440a      	add	r2, r1
 800b5f8:	3284      	adds	r2, #132	; 0x84
 800b5fa:	f023 0307 	bic.w	r3, r3, #7
 800b5fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	461a      	mov	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	01db      	lsls	r3, r3, #7
 800b60a:	4413      	add	r3, r2
 800b60c:	3384      	adds	r3, #132	; 0x84
 800b60e:	461a      	mov	r2, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b61c:	021b      	lsls	r3, r3, #8
 800b61e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b626:	041b      	lsls	r3, r3, #16
 800b628:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	061b      	lsls	r3, r3, #24
 800b630:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	01db      	lsls	r3, r3, #7
 800b63c:	4413      	add	r3, r2
 800b63e:	3384      	adds	r3, #132	; 0x84
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	461a      	mov	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	01db      	lsls	r3, r3, #7
 800b64c:	4413      	add	r3, r2
 800b64e:	3384      	adds	r3, #132	; 0x84
 800b650:	461a      	mov	r2, r3
 800b652:	2300      	movs	r3, #0
 800b654:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b65c:	461a      	mov	r2, r3
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	431a      	orrs	r2, r3
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	431a      	orrs	r2, r3
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4619      	mov	r1, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	01db      	lsls	r3, r3, #7
 800b670:	440b      	add	r3, r1
 800b672:	3384      	adds	r3, #132	; 0x84
 800b674:	4619      	mov	r1, r3
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	4313      	orrs	r3, r2
 800b67a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	01db      	lsls	r3, r3, #7
 800b686:	4413      	add	r3, r2
 800b688:	3384      	adds	r3, #132	; 0x84
 800b68a:	695b      	ldr	r3, [r3, #20]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	6812      	ldr	r2, [r2, #0]
 800b690:	4611      	mov	r1, r2
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	01d2      	lsls	r2, r2, #7
 800b696:	440a      	add	r2, r1
 800b698:	3284      	adds	r2, #132	; 0x84
 800b69a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b69e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	01db      	lsls	r3, r3, #7
 800b6aa:	4413      	add	r3, r2
 800b6ac:	3384      	adds	r3, #132	; 0x84
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	01db      	lsls	r3, r3, #7
 800b6c0:	4413      	add	r3, r2
 800b6c2:	3384      	adds	r3, #132	; 0x84
 800b6c4:	69da      	ldr	r2, [r3, #28]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	01db      	lsls	r3, r3, #7
 800b6d0:	440b      	add	r3, r1
 800b6d2:	3384      	adds	r3, #132	; 0x84
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4b58      	ldr	r3, [pc, #352]	; (800b838 <LTDC_SetConfig+0x32c>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	69da      	ldr	r2, [r3, #28]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	6a1b      	ldr	r3, [r3, #32]
 800b6e4:	68f9      	ldr	r1, [r7, #12]
 800b6e6:	6809      	ldr	r1, [r1, #0]
 800b6e8:	4608      	mov	r0, r1
 800b6ea:	6879      	ldr	r1, [r7, #4]
 800b6ec:	01c9      	lsls	r1, r1, #7
 800b6ee:	4401      	add	r1, r0
 800b6f0:	3184      	adds	r1, #132	; 0x84
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	01db      	lsls	r3, r3, #7
 800b700:	4413      	add	r3, r2
 800b702:	3384      	adds	r3, #132	; 0x84
 800b704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	01db      	lsls	r3, r3, #7
 800b710:	4413      	add	r3, r2
 800b712:	3384      	adds	r3, #132	; 0x84
 800b714:	461a      	mov	r2, r3
 800b716:	2300      	movs	r3, #0
 800b718:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	461a      	mov	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	01db      	lsls	r3, r3, #7
 800b724:	4413      	add	r3, r2
 800b726:	3384      	adds	r3, #132	; 0x84
 800b728:	461a      	mov	r2, r3
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d102      	bne.n	800b73e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800b738:	2304      	movs	r3, #4
 800b73a:	61fb      	str	r3, [r7, #28]
 800b73c:	e01b      	b.n	800b776 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d102      	bne.n	800b74c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b746:	2303      	movs	r3, #3
 800b748:	61fb      	str	r3, [r7, #28]
 800b74a:	e014      	b.n	800b776 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	2b04      	cmp	r3, #4
 800b752:	d00b      	beq.n	800b76c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d007      	beq.n	800b76c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b760:	2b03      	cmp	r3, #3
 800b762:	d003      	beq.n	800b76c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b768:	2b07      	cmp	r3, #7
 800b76a:	d102      	bne.n	800b772 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b76c:	2302      	movs	r3, #2
 800b76e:	61fb      	str	r3, [r7, #28]
 800b770:	e001      	b.n	800b776 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b772:	2301      	movs	r3, #1
 800b774:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	01db      	lsls	r3, r3, #7
 800b780:	4413      	add	r3, r2
 800b782:	3384      	adds	r3, #132	; 0x84
 800b784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	6812      	ldr	r2, [r2, #0]
 800b78a:	4611      	mov	r1, r2
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	01d2      	lsls	r2, r2, #7
 800b790:	440a      	add	r2, r1
 800b792:	3284      	adds	r2, #132	; 0x84
 800b794:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b798:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79e:	69fa      	ldr	r2, [r7, #28]
 800b7a0:	fb02 f303 	mul.w	r3, r2, r3
 800b7a4:	041a      	lsls	r2, r3, #16
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	6859      	ldr	r1, [r3, #4]
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	1acb      	subs	r3, r1, r3
 800b7b0:	69f9      	ldr	r1, [r7, #28]
 800b7b2:	fb01 f303 	mul.w	r3, r1, r3
 800b7b6:	3303      	adds	r3, #3
 800b7b8:	68f9      	ldr	r1, [r7, #12]
 800b7ba:	6809      	ldr	r1, [r1, #0]
 800b7bc:	4608      	mov	r0, r1
 800b7be:	6879      	ldr	r1, [r7, #4]
 800b7c0:	01c9      	lsls	r1, r1, #7
 800b7c2:	4401      	add	r1, r0
 800b7c4:	3184      	adds	r1, #132	; 0x84
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	01db      	lsls	r3, r3, #7
 800b7d4:	4413      	add	r3, r2
 800b7d6:	3384      	adds	r3, #132	; 0x84
 800b7d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	01db      	lsls	r3, r3, #7
 800b7e4:	440b      	add	r3, r1
 800b7e6:	3384      	adds	r3, #132	; 0x84
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4b14      	ldr	r3, [pc, #80]	; (800b83c <LTDC_SetConfig+0x330>)
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	01db      	lsls	r3, r3, #7
 800b7fa:	4413      	add	r3, r2
 800b7fc:	3384      	adds	r3, #132	; 0x84
 800b7fe:	461a      	mov	r2, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b804:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	01db      	lsls	r3, r3, #7
 800b810:	4413      	add	r3, r2
 800b812:	3384      	adds	r3, #132	; 0x84
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	6812      	ldr	r2, [r2, #0]
 800b81a:	4611      	mov	r1, r2
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	01d2      	lsls	r2, r2, #7
 800b820:	440a      	add	r2, r1
 800b822:	3284      	adds	r2, #132	; 0x84
 800b824:	f043 0301 	orr.w	r3, r3, #1
 800b828:	6013      	str	r3, [r2, #0]
}
 800b82a:	bf00      	nop
 800b82c:	3724      	adds	r7, #36	; 0x24
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	fffff8f8 	.word	0xfffff8f8
 800b83c:	fffff800 	.word	0xfffff800

0800b840 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b840:	b480      	push	{r7}
 800b842:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a04      	ldr	r2, [pc, #16]	; (800b85c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b84a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b84e:	6013      	str	r3, [r2, #0]
}
 800b850:	bf00      	nop
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	40007000 	.word	0x40007000

0800b860 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b866:	2300      	movs	r3, #0
 800b868:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b86a:	4b23      	ldr	r3, [pc, #140]	; (800b8f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800b86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86e:	4a22      	ldr	r2, [pc, #136]	; (800b8f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800b870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b874:	6413      	str	r3, [r2, #64]	; 0x40
 800b876:	4b20      	ldr	r3, [pc, #128]	; (800b8f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800b878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b882:	4b1e      	ldr	r3, [pc, #120]	; (800b8fc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a1d      	ldr	r2, [pc, #116]	; (800b8fc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b88c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b88e:	f7fb f89d 	bl	80069cc <HAL_GetTick>
 800b892:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b894:	e009      	b.n	800b8aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b896:	f7fb f899 	bl	80069cc <HAL_GetTick>
 800b89a:	4602      	mov	r2, r0
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8a4:	d901      	bls.n	800b8aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	e022      	b.n	800b8f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b8aa:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8b6:	d1ee      	bne.n	800b896 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b8b8:	4b10      	ldr	r3, [pc, #64]	; (800b8fc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a0f      	ldr	r2, [pc, #60]	; (800b8fc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b8be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b8c4:	f7fb f882 	bl	80069cc <HAL_GetTick>
 800b8c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b8ca:	e009      	b.n	800b8e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b8cc:	f7fb f87e 	bl	80069cc <HAL_GetTick>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8da:	d901      	bls.n	800b8e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e007      	b.n	800b8f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b8e0:	4b06      	ldr	r3, [pc, #24]	; (800b8fc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8ec:	d1ee      	bne.n	800b8cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	40023800 	.word	0x40023800
 800b8fc:	40007000 	.word	0x40007000

0800b900 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af02      	add	r7, sp, #8
 800b906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b908:	f7fb f860 	bl	80069cc <HAL_GetTick>
 800b90c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d101      	bne.n	800b918 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	e067      	b.n	800b9e8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b00      	cmp	r3, #0
 800b922:	d10b      	bne.n	800b93c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7f7 fcf1 	bl	8003314 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b932:	f241 3188 	movw	r1, #5000	; 0x1388
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 fda8 	bl	800c48c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	021a      	lsls	r2, r3, #8
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	430a      	orrs	r2, r1
 800b954:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	2120      	movs	r1, #32
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fdd3 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800b968:	4603      	mov	r3, r0
 800b96a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b96c:	7afb      	ldrb	r3, [r7, #11]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d135      	bne.n	800b9de <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	4b1d      	ldr	r3, [pc, #116]	; (800b9f0 <HAL_QSPI_Init+0xf0>)
 800b97a:	4013      	ands	r3, r2
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6852      	ldr	r2, [r2, #4]
 800b980:	0611      	lsls	r1, r2, #24
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	68d2      	ldr	r2, [r2, #12]
 800b986:	4311      	orrs	r1, r2
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	69d2      	ldr	r2, [r2, #28]
 800b98c:	4311      	orrs	r1, r2
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	6a12      	ldr	r2, [r2, #32]
 800b992:	4311      	orrs	r1, r2
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	6812      	ldr	r2, [r2, #0]
 800b998:	430b      	orrs	r3, r1
 800b99a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	685a      	ldr	r2, [r3, #4]
 800b9a2:	4b14      	ldr	r3, [pc, #80]	; (800b9f4 <HAL_QSPI_Init+0xf4>)
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	6912      	ldr	r2, [r2, #16]
 800b9aa:	0411      	lsls	r1, r2, #16
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	6952      	ldr	r2, [r2, #20]
 800b9b0:	4311      	orrs	r1, r2
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	6992      	ldr	r2, [r2, #24]
 800b9b6:	4311      	orrs	r1, r2
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	6812      	ldr	r2, [r2, #0]
 800b9bc:	430b      	orrs	r3, r1
 800b9be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f042 0201 	orr.w	r2, r2, #1
 800b9ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b9e6:	7afb      	ldrb	r3, [r7, #11]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	00ffff2f 	.word	0x00ffff2f
 800b9f4:	ffe0f8fe 	.word	0xffe0f8fe

0800b9f8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f003 0304 	and.w	r3, r3, #4
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d064      	beq.n	800bae4 <HAL_QSPI_IRQHandler+0xec>
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d05f      	beq.n	800bae4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3320      	adds	r3, #32
 800ba2a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	2b12      	cmp	r3, #18
 800ba36:	d125      	bne.n	800ba84 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800ba38:	e01c      	b.n	800ba74 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00f      	beq.n	800ba62 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba46:	781a      	ldrb	r2, [r3, #0]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5a:	1e5a      	subs	r2, r3, #1
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	62da      	str	r2, [r3, #44]	; 0x2c
 800ba60:	e008      	b.n	800ba74 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ba70:	601a      	str	r2, [r3, #0]
          break;
 800ba72:	e033      	b.n	800badc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	f003 0304 	and.w	r3, r3, #4
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1db      	bne.n	800ba3a <HAL_QSPI_IRQHandler+0x42>
 800ba82:	e02b      	b.n	800badc <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	2b22      	cmp	r3, #34	; 0x22
 800ba8e:	d125      	bne.n	800badc <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800ba90:	e01d      	b.n	800bace <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d010      	beq.n	800babc <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	7812      	ldrb	r2, [r2, #0]
 800baa2:	b2d2      	uxtb	r2, r2
 800baa4:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baaa:	1c5a      	adds	r2, r3, #1
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab4:	1e5a      	subs	r2, r3, #1
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	639a      	str	r2, [r3, #56]	; 0x38
 800baba:	e008      	b.n	800bace <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800baca:	601a      	str	r2, [r3, #0]
          break;
 800bacc:	e006      	b.n	800badc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	f003 0304 	and.w	r3, r3, #4
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1da      	bne.n	800ba92 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fbed 	bl	800c2bc <HAL_QSPI_FifoThresholdCallback>
 800bae2:	e142      	b.n	800bd6a <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f003 0302 	and.w	r3, r3, #2
 800baea:	2b00      	cmp	r3, #0
 800baec:	f000 80b6 	beq.w	800bc5c <HAL_QSPI_IRQHandler+0x264>
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f000 80b0 	beq.w	800bc5c <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2202      	movs	r2, #2
 800bb02:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800bb12:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b12      	cmp	r3, #18
 800bb1e:	d123      	bne.n	800bb68 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 0304 	and.w	r3, r3, #4
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d011      	beq.n	800bb52 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f022 0204 	bic.w	r2, r2, #4
 800bb3c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f022 0201 	bic.w	r2, r2, #1
 800bb50:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fc3e 	bl	800c3d4 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fba1 	bl	800c2a8 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800bb66:	e0fd      	b.n	800bd64 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b22      	cmp	r3, #34	; 0x22
 800bb72:	d146      	bne.n	800bc02 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 0304 	and.w	r3, r3, #4
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d012      	beq.n	800bba8 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f022 0204 	bic.w	r2, r2, #4
 800bb90:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f022 0201 	bic.w	r2, r2, #1
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	e021      	b.n	800bbec <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	3320      	adds	r3, #32
 800bbae:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800bbb0:	e013      	b.n	800bbda <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d017      	beq.n	800bbea <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	7812      	ldrb	r2, [r2, #0]
 800bbc2:	b2d2      	uxtb	r2, r2
 800bbc4:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbca:	1c5a      	adds	r2, r3, #1
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd4:	1e5a      	subs	r2, r3, #1
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1e4      	bne.n	800bbb2 <HAL_QSPI_IRQHandler+0x1ba>
 800bbe8:	e000      	b.n	800bbec <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800bbea:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fbf1 	bl	800c3d4 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fb4a 	bl	800c294 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800bc00:	e0b0      	b.n	800bd64 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d107      	bne.n	800bc1e <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2201      	movs	r2, #1
 800bc12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fb32 	bl	800c280 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800bc1c:	e0a2      	b.n	800bd64 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	2b08      	cmp	r3, #8
 800bc28:	f040 809c 	bne.w	800bd64 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	695a      	ldr	r2, [r3, #20]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800bc3a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d103      	bne.n	800bc54 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fb0d 	bl	800c26c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800bc52:	e087      	b.n	800bd64 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 faff 	bl	800c258 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800bc5a:	e083      	b.n	800bd64 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	f003 0308 	and.w	r3, r3, #8
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d01f      	beq.n	800bca6 <HAL_QSPI_IRQHandler+0x2ae>
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d01a      	beq.n	800bca6 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2208      	movs	r2, #8
 800bc76:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00b      	beq.n	800bc9e <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800bc94:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fb16 	bl	800c2d0 <HAL_QSPI_StatusMatchCallback>
 800bca4:	e061      	b.n	800bd6a <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d047      	beq.n	800bd40 <HAL_QSPI_IRQHandler+0x348>
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d042      	beq.n	800bd40 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800bcd0:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd6:	f043 0202 	orr.w	r2, r3, #2
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 0304 	and.w	r3, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d021      	beq.n	800bd30 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f022 0204 	bic.w	r2, r2, #4
 800bcfa:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd00:	4a1c      	ldr	r2, [pc, #112]	; (800bd74 <HAL_QSPI_IRQHandler+0x37c>)
 800bd02:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7fb fe59 	bl	80079c0 <HAL_DMA_Abort_IT>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d029      	beq.n	800bd68 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd18:	f043 0204 	orr.w	r2, r3, #4
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fa95 	bl	800c258 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800bd2e:	e01b      	b.n	800bd68 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fa8d 	bl	800c258 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800bd3e:	e013      	b.n	800bd68 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f003 0310 	and.w	r3, r3, #16
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00f      	beq.n	800bd6a <HAL_QSPI_IRQHandler+0x372>
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00a      	beq.n	800bd6a <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2210      	movs	r2, #16
 800bd5a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fac1 	bl	800c2e4 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800bd62:	e002      	b.n	800bd6a <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800bd64:	bf00      	nop
 800bd66:	e000      	b.n	800bd6a <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800bd68:	bf00      	nop
}
 800bd6a:	bf00      	nop
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	0800c4a9 	.word	0x0800c4a9

0800bd78 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b088      	sub	sp, #32
 800bd7c:	af02      	add	r7, sp, #8
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bd84:	f7fa fe22 	bl	80069cc <HAL_GetTick>
 800bd88:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d101      	bne.n	800bd9a <HAL_QSPI_Command+0x22>
 800bd96:	2302      	movs	r3, #2
 800bd98:	e048      	b.n	800be2c <HAL_QSPI_Command+0xb4>
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d137      	bne.n	800be1e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2120      	movs	r1, #32
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f000 fba1 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d125      	bne.n	800be22 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	68b9      	ldr	r1, [r7, #8]
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 fbce 	bl	800c57c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d115      	bne.n	800be14 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	2102      	movs	r1, #2
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f000 fb8b 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10f      	bne.n	800be22 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2202      	movs	r2, #2
 800be08:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2201      	movs	r2, #1
 800be0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be12:	e006      	b.n	800be22 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be1c:	e001      	b.n	800be22 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800be1e:	2302      	movs	r3, #2
 800be20:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3718      	adds	r7, #24
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b08a      	sub	sp, #40	; 0x28
 800be38:	af02      	add	r7, sp, #8
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800be44:	f7fa fdc2 	bl	80069cc <HAL_GetTick>
 800be48:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3320      	adds	r3, #32
 800be50:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d101      	bne.n	800be62 <HAL_QSPI_Transmit+0x2e>
 800be5e:	2302      	movs	r3, #2
 800be60:	e07b      	b.n	800bf5a <HAL_QSPI_Transmit+0x126>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be70:	b2db      	uxtb	r3, r3
 800be72:	2b01      	cmp	r3, #1
 800be74:	d16a      	bne.n	800bf4c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d05b      	beq.n	800bf3a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2212      	movs	r2, #18
 800be86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	695a      	ldr	r2, [r3, #20]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800beb6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800beb8:	e01b      	b.n	800bef2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	2201      	movs	r2, #1
 800bec2:	2104      	movs	r1, #4
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 fb22 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800beca:	4603      	mov	r3, r0
 800becc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800bece:	7ffb      	ldrb	r3, [r7, #31]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d113      	bne.n	800befc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	1e5a      	subs	r2, r3, #1
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1df      	bne.n	800beba <HAL_QSPI_Transmit+0x86>
 800befa:	e000      	b.n	800befe <HAL_QSPI_Transmit+0xca>
          break;
 800befc:	bf00      	nop
      }

      if (status == HAL_OK)
 800befe:	7ffb      	ldrb	r3, [r7, #31]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d115      	bne.n	800bf30 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	9300      	str	r3, [sp, #0]
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	2102      	movs	r1, #2
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 fafd 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800bf14:	4603      	mov	r3, r0
 800bf16:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800bf18:	7ffb      	ldrb	r3, [r7, #31]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d108      	bne.n	800bf30 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2202      	movs	r2, #2
 800bf24:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f000 f9e6 	bl	800c2f8 <HAL_QSPI_Abort>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf38:	e00a      	b.n	800bf50 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3e:	f043 0208 	orr.w	r2, r3, #8
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	77fb      	strb	r3, [r7, #31]
 800bf4a:	e001      	b.n	800bf50 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800bf58:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3720      	adds	r7, #32
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b08a      	sub	sp, #40	; 0x28
 800bf66:	af02      	add	r7, sp, #8
 800bf68:	60f8      	str	r0, [r7, #12]
 800bf6a:	60b9      	str	r1, [r7, #8]
 800bf6c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800bf72:	f7fa fd2b 	bl	80069cc <HAL_GetTick>
 800bf76:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	3320      	adds	r3, #32
 800bf86:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d101      	bne.n	800bf98 <HAL_QSPI_Receive+0x36>
 800bf94:	2302      	movs	r3, #2
 800bf96:	e082      	b.n	800c09e <HAL_QSPI_Receive+0x13c>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d171      	bne.n	800c090 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d062      	beq.n	800c07e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2222      	movs	r2, #34	; 0x22
 800bfbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	1c5a      	adds	r2, r3, #1
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	1c5a      	adds	r2, r3, #1
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	695b      	ldr	r3, [r3, #20]
 800bfe4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bff0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800bffa:	e01c      	b.n	800c036 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	2201      	movs	r2, #1
 800c004:	2106      	movs	r1, #6
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f000 fa81 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800c00c:	4603      	mov	r3, r0
 800c00e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c010:	7ffb      	ldrb	r3, [r7, #31]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d114      	bne.n	800c040 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01a:	693a      	ldr	r2, [r7, #16]
 800c01c:	7812      	ldrb	r2, [r2, #0]
 800c01e:	b2d2      	uxtb	r2, r2
 800c020:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c030:	1e5a      	subs	r2, r3, #1
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1de      	bne.n	800bffc <HAL_QSPI_Receive+0x9a>
 800c03e:	e000      	b.n	800c042 <HAL_QSPI_Receive+0xe0>
          break;
 800c040:	bf00      	nop
      }

      if (status == HAL_OK)
 800c042:	7ffb      	ldrb	r3, [r7, #31]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d115      	bne.n	800c074 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	2201      	movs	r2, #1
 800c050:	2102      	movs	r1, #2
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f000 fa5b 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800c058:	4603      	mov	r3, r0
 800c05a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c05c:	7ffb      	ldrb	r3, [r7, #31]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d108      	bne.n	800c074 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2202      	movs	r2, #2
 800c068:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f000 f944 	bl	800c2f8 <HAL_QSPI_Abort>
 800c070:	4603      	mov	r3, r0
 800c072:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2201      	movs	r2, #1
 800c078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c07c:	e00a      	b.n	800c094 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c082:	f043 0208 	orr.w	r2, r3, #8
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	77fb      	strb	r3, [r7, #31]
 800c08e:	e001      	b.n	800c094 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c090:	2302      	movs	r3, #2
 800c092:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c09c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3720      	adds	r7, #32
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b088      	sub	sp, #32
 800c0aa:	af02      	add	r7, sp, #8
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	607a      	str	r2, [r7, #4]
 800c0b2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c0b4:	f7fa fc8a 	bl	80069cc <HAL_GetTick>
 800c0b8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d101      	bne.n	800c0ca <HAL_QSPI_AutoPolling+0x24>
 800c0c6:	2302      	movs	r3, #2
 800c0c8:	e060      	b.n	800c18c <HAL_QSPI_AutoPolling+0xe6>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d14f      	bne.n	800c17e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2242      	movs	r2, #66	; 0x42
 800c0e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	2120      	movs	r1, #32
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f000 fa09 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c100:	7dfb      	ldrb	r3, [r7, #23]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d13d      	bne.n	800c182 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	6812      	ldr	r2, [r2, #0]
 800c10e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	6852      	ldr	r2, [r2, #4]
 800c118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	6892      	ldr	r2, [r2, #8]
 800c122:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	431a      	orrs	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c13c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68da      	ldr	r2, [r3, #12]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c146:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c14a:	68b9      	ldr	r1, [r7, #8]
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f000 fa15 	bl	800c57c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	2201      	movs	r2, #1
 800c15a:	2108      	movs	r1, #8
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f000 f9d6 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800c162:	4603      	mov	r3, r0
 800c164:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c166:	7dfb      	ldrb	r3, [r7, #23]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10a      	bne.n	800c182 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2208      	movs	r2, #8
 800c172:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c17c:	e001      	b.n	800c182 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c17e:	2302      	movs	r3, #2
 800c180:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3718      	adds	r7, #24
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af02      	add	r7, sp, #8
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c1a0:	f7fa fc14 	bl	80069cc <HAL_GetTick>
 800c1a4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d101      	bne.n	800c1b6 <HAL_QSPI_MemoryMapped+0x22>
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	e04c      	b.n	800c250 <HAL_QSPI_MemoryMapped+0xbc>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d13b      	bne.n	800c242 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2282      	movs	r2, #130	; 0x82
 800c1d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1dc:	9300      	str	r3, [sp, #0]
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	2120      	movs	r1, #32
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f000 f992 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d128      	bne.n	800c246 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f023 0108 	bic.w	r1, r3, #8
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	685a      	ldr	r2, [r3, #4]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	2b08      	cmp	r3, #8
 800c210:	d110      	bne.n	800c234 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	6812      	ldr	r2, [r2, #0]
 800c21a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2210      	movs	r2, #16
 800c222:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c232:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800c234:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800c238:	68b9      	ldr	r1, [r7, #8]
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f000 f99e 	bl	800c57c <QSPI_Config>
 800c240:	e001      	b.n	800c246 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c242:	2302      	movs	r3, #2
 800c244:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c24e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3718      	adds	r7, #24
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800c288:	bf00      	nop
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800c29c:	bf00      	nop
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800c2c4:	bf00      	nop
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af02      	add	r7, sp, #8
 800c2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800c304:	f7fa fb62 	bl	80069cc <HAL_GetTick>
 800c308:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c310:	b2db      	uxtb	r3, r3
 800c312:	f003 0302 	and.w	r3, r3, #2
 800c316:	2b00      	cmp	r3, #0
 800c318:	d056      	beq.n	800c3c8 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 0304 	and.w	r3, r3, #4
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d017      	beq.n	800c360 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f022 0204 	bic.w	r2, r2, #4
 800c33e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c344:	4618      	mov	r0, r3
 800c346:	f7fb facb 	bl	80078e0 <HAL_DMA_Abort>
 800c34a:	4603      	mov	r3, r0
 800c34c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d005      	beq.n	800c360 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c358:	f043 0204 	orr.w	r2, r3, #4
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f042 0202 	orr.w	r2, r2, #2
 800c36e:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2201      	movs	r2, #1
 800c37a:	2102      	movs	r1, #2
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f8c6 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800c382:	4603      	mov	r3, r0
 800c384:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10e      	bne.n	800c3aa <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2202      	movs	r2, #2
 800c392:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	2200      	movs	r2, #0
 800c39e:	2120      	movs	r1, #32
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 f8b4 	bl	800c50e <QSPI_WaitFlagStateUntilTimeout>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10b      	bne.n	800c3c8 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	695a      	ldr	r2, [r3, #20]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c3be:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
	...

0800c3d4 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	f003 0302 	and.w	r3, r3, #2
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d046      	beq.n	800c47e <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2208      	movs	r2, #8
 800c3fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800c40e:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 0304 	and.w	r3, r3, #4
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d01b      	beq.n	800c456 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f022 0204 	bic.w	r2, r2, #4
 800c42c:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c432:	4a15      	ldr	r2, [pc, #84]	; (800c488 <HAL_QSPI_Abort_IT+0xb4>)
 800c434:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fb fac0 	bl	80079c0 <HAL_DMA_Abort_IT>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d01b      	beq.n	800c47e <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f7ff ff0c 	bl	800c26c <HAL_QSPI_AbortCpltCallback>
 800c454:	e013      	b.n	800c47e <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2202      	movs	r2, #2
 800c45c:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c46c:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f042 0202 	orr.w	r2, r2, #2
 800c47c:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	0800c4a9 	.word	0x0800c4a9

0800c48c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	683a      	ldr	r2, [r7, #0]
 800c49a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b4:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	2b08      	cmp	r3, #8
 800c4cc:	d114      	bne.n	800c4f8 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c4e4:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0202 	orr.w	r2, r2, #2
 800c4f4:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800c4f6:	e006      	b.n	800c506 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f7ff fea9 	bl	800c258 <HAL_QSPI_ErrorCallback>
}
 800c506:	bf00      	nop
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b084      	sub	sp, #16
 800c512:	af00      	add	r7, sp, #0
 800c514:	60f8      	str	r0, [r7, #12]
 800c516:	60b9      	str	r1, [r7, #8]
 800c518:	603b      	str	r3, [r7, #0]
 800c51a:	4613      	mov	r3, r2
 800c51c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c51e:	e01a      	b.n	800c556 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c526:	d016      	beq.n	800c556 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c528:	f7fa fa50 	bl	80069cc <HAL_GetTick>
 800c52c:	4602      	mov	r2, r0
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	69ba      	ldr	r2, [r7, #24]
 800c534:	429a      	cmp	r2, r3
 800c536:	d302      	bcc.n	800c53e <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10b      	bne.n	800c556 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2204      	movs	r2, #4
 800c542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c54a:	f043 0201 	orr.w	r2, r3, #1
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e00e      	b.n	800c574 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	689a      	ldr	r2, [r3, #8]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	4013      	ands	r3, r2
 800c560:	2b00      	cmp	r3, #0
 800c562:	bf14      	ite	ne
 800c564:	2301      	movne	r3, #1
 800c566:	2300      	moveq	r3, #0
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	461a      	mov	r2, r3
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d1d6      	bne.n	800c520 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d009      	beq.n	800c5a4 <QSPI_Config+0x28>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c596:	d005      	beq.n	800c5a4 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3a01      	subs	r2, #1
 800c5a2:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 80b9 	beq.w	800c720 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	6a1b      	ldr	r3, [r3, #32]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d05f      	beq.n	800c676 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	6892      	ldr	r2, [r2, #8]
 800c5be:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	69db      	ldr	r3, [r3, #28]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d031      	beq.n	800c62c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d0:	431a      	orrs	r2, r3
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d6:	431a      	orrs	r2, r3
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5dc:	431a      	orrs	r2, r3
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	049b      	lsls	r3, r3, #18
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	431a      	orrs	r2, r3
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
 800c5f0:	431a      	orrs	r2, r3
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	431a      	orrs	r2, r3
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	69db      	ldr	r3, [r3, #28]
 800c5fc:	431a      	orrs	r2, r3
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	699b      	ldr	r3, [r3, #24]
 800c602:	431a      	orrs	r2, r3
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	ea42 0103 	orr.w	r1, r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	430a      	orrs	r2, r1
 800c614:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c61c:	f000 812e 	beq.w	800c87c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	6852      	ldr	r2, [r2, #4]
 800c628:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c62a:	e127      	b.n	800c87c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c634:	431a      	orrs	r2, r3
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c63a:	431a      	orrs	r2, r3
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c640:	431a      	orrs	r2, r3
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	695b      	ldr	r3, [r3, #20]
 800c646:	049b      	lsls	r3, r3, #18
 800c648:	431a      	orrs	r2, r3
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	431a      	orrs	r2, r3
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	6a1b      	ldr	r3, [r3, #32]
 800c654:	431a      	orrs	r2, r3
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	431a      	orrs	r2, r3
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	699b      	ldr	r3, [r3, #24]
 800c660:	431a      	orrs	r2, r3
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	ea42 0103 	orr.w	r1, r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	430a      	orrs	r2, r1
 800c672:	615a      	str	r2, [r3, #20]
}
 800c674:	e102      	b.n	800c87c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	69db      	ldr	r3, [r3, #28]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d02e      	beq.n	800c6dc <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c686:	431a      	orrs	r2, r3
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c68c:	431a      	orrs	r2, r3
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c692:	431a      	orrs	r2, r3
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	049b      	lsls	r3, r3, #18
 800c69a:	431a      	orrs	r2, r3
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	6a1b      	ldr	r3, [r3, #32]
 800c6a0:	431a      	orrs	r2, r3
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	431a      	orrs	r2, r3
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	69db      	ldr	r3, [r3, #28]
 800c6ac:	431a      	orrs	r2, r3
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	431a      	orrs	r2, r3
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	ea42 0103 	orr.w	r1, r2, r3
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c6cc:	f000 80d6 	beq.w	800c87c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	6852      	ldr	r2, [r2, #4]
 800c6d8:	619a      	str	r2, [r3, #24]
}
 800c6da:	e0cf      	b.n	800c87c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e4:	431a      	orrs	r2, r3
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	049b      	lsls	r3, r3, #18
 800c6f8:	431a      	orrs	r2, r3
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	6a1b      	ldr	r3, [r3, #32]
 800c6fe:	431a      	orrs	r2, r3
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	69db      	ldr	r3, [r3, #28]
 800c704:	431a      	orrs	r2, r3
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	431a      	orrs	r2, r3
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	ea42 0103 	orr.w	r1, r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	430a      	orrs	r2, r1
 800c71c:	615a      	str	r2, [r3, #20]
}
 800c71e:	e0ad      	b.n	800c87c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	6a1b      	ldr	r3, [r3, #32]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d058      	beq.n	800c7da <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	6892      	ldr	r2, [r2, #8]
 800c730:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	69db      	ldr	r3, [r3, #28]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d02d      	beq.n	800c796 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c742:	431a      	orrs	r2, r3
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c748:	431a      	orrs	r2, r3
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74e:	431a      	orrs	r2, r3
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	049b      	lsls	r3, r3, #18
 800c756:	431a      	orrs	r2, r3
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	431a      	orrs	r2, r3
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	6a1b      	ldr	r3, [r3, #32]
 800c762:	431a      	orrs	r2, r3
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	431a      	orrs	r2, r3
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	431a      	orrs	r2, r3
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	ea42 0103 	orr.w	r1, r2, r3
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	430a      	orrs	r2, r1
 800c780:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c788:	d078      	beq.n	800c87c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68ba      	ldr	r2, [r7, #8]
 800c790:	6852      	ldr	r2, [r2, #4]
 800c792:	619a      	str	r2, [r3, #24]
}
 800c794:	e072      	b.n	800c87c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7a4:	431a      	orrs	r2, r3
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7aa:	431a      	orrs	r2, r3
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	695b      	ldr	r3, [r3, #20]
 800c7b0:	049b      	lsls	r3, r3, #18
 800c7b2:	431a      	orrs	r2, r3
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	431a      	orrs	r2, r3
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	6a1b      	ldr	r3, [r3, #32]
 800c7be:	431a      	orrs	r2, r3
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	69db      	ldr	r3, [r3, #28]
 800c7c4:	431a      	orrs	r2, r3
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	ea42 0103 	orr.w	r1, r2, r3
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	430a      	orrs	r2, r1
 800c7d6:	615a      	str	r2, [r3, #20]
}
 800c7d8:	e050      	b.n	800c87c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d02a      	beq.n	800c838 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ea:	431a      	orrs	r2, r3
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f6:	431a      	orrs	r2, r3
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	695b      	ldr	r3, [r3, #20]
 800c7fc:	049b      	lsls	r3, r3, #18
 800c7fe:	431a      	orrs	r2, r3
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	6a1b      	ldr	r3, [r3, #32]
 800c804:	431a      	orrs	r2, r3
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	431a      	orrs	r2, r3
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	69db      	ldr	r3, [r3, #28]
 800c810:	431a      	orrs	r2, r3
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	ea42 0103 	orr.w	r1, r2, r3
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	430a      	orrs	r2, r1
 800c822:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c82a:	d027      	beq.n	800c87c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	6852      	ldr	r2, [r2, #4]
 800c834:	619a      	str	r2, [r3, #24]
}
 800c836:	e021      	b.n	800c87c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d01d      	beq.n	800c87c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c848:	431a      	orrs	r2, r3
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c84e:	431a      	orrs	r2, r3
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c854:	431a      	orrs	r2, r3
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	695b      	ldr	r3, [r3, #20]
 800c85a:	049b      	lsls	r3, r3, #18
 800c85c:	431a      	orrs	r2, r3
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	431a      	orrs	r2, r3
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	69db      	ldr	r3, [r3, #28]
 800c868:	431a      	orrs	r2, r3
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	699b      	ldr	r3, [r3, #24]
 800c86e:	ea42 0103 	orr.w	r1, r2, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	430a      	orrs	r2, r1
 800c87a:	615a      	str	r2, [r3, #20]
}
 800c87c:	bf00      	nop
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c890:	2300      	movs	r3, #0
 800c892:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d101      	bne.n	800c89e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e291      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f000 8087 	beq.w	800c9ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c8ac:	4b96      	ldr	r3, [pc, #600]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	f003 030c 	and.w	r3, r3, #12
 800c8b4:	2b04      	cmp	r3, #4
 800c8b6:	d00c      	beq.n	800c8d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c8b8:	4b93      	ldr	r3, [pc, #588]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	f003 030c 	and.w	r3, r3, #12
 800c8c0:	2b08      	cmp	r3, #8
 800c8c2:	d112      	bne.n	800c8ea <HAL_RCC_OscConfig+0x62>
 800c8c4:	4b90      	ldr	r3, [pc, #576]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8d0:	d10b      	bne.n	800c8ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8d2:	4b8d      	ldr	r3, [pc, #564]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d06c      	beq.n	800c9b8 <HAL_RCC_OscConfig+0x130>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d168      	bne.n	800c9b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e26b      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8f2:	d106      	bne.n	800c902 <HAL_RCC_OscConfig+0x7a>
 800c8f4:	4b84      	ldr	r3, [pc, #528]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a83      	ldr	r2, [pc, #524]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c8fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8fe:	6013      	str	r3, [r2, #0]
 800c900:	e02e      	b.n	800c960 <HAL_RCC_OscConfig+0xd8>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10c      	bne.n	800c924 <HAL_RCC_OscConfig+0x9c>
 800c90a:	4b7f      	ldr	r3, [pc, #508]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a7e      	ldr	r2, [pc, #504]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c914:	6013      	str	r3, [r2, #0]
 800c916:	4b7c      	ldr	r3, [pc, #496]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a7b      	ldr	r2, [pc, #492]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c91c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c920:	6013      	str	r3, [r2, #0]
 800c922:	e01d      	b.n	800c960 <HAL_RCC_OscConfig+0xd8>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c92c:	d10c      	bne.n	800c948 <HAL_RCC_OscConfig+0xc0>
 800c92e:	4b76      	ldr	r3, [pc, #472]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a75      	ldr	r2, [pc, #468]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c938:	6013      	str	r3, [r2, #0]
 800c93a:	4b73      	ldr	r3, [pc, #460]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a72      	ldr	r2, [pc, #456]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	e00b      	b.n	800c960 <HAL_RCC_OscConfig+0xd8>
 800c948:	4b6f      	ldr	r3, [pc, #444]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a6e      	ldr	r2, [pc, #440]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c94e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	4b6c      	ldr	r3, [pc, #432]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a6b      	ldr	r2, [pc, #428]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c95a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c95e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d013      	beq.n	800c990 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c968:	f7fa f830 	bl	80069cc <HAL_GetTick>
 800c96c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c96e:	e008      	b.n	800c982 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c970:	f7fa f82c 	bl	80069cc <HAL_GetTick>
 800c974:	4602      	mov	r2, r0
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	2b64      	cmp	r3, #100	; 0x64
 800c97c:	d901      	bls.n	800c982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c97e:	2303      	movs	r3, #3
 800c980:	e21f      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c982:	4b61      	ldr	r3, [pc, #388]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0f0      	beq.n	800c970 <HAL_RCC_OscConfig+0xe8>
 800c98e:	e014      	b.n	800c9ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c990:	f7fa f81c 	bl	80069cc <HAL_GetTick>
 800c994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c996:	e008      	b.n	800c9aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c998:	f7fa f818 	bl	80069cc <HAL_GetTick>
 800c99c:	4602      	mov	r2, r0
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	2b64      	cmp	r3, #100	; 0x64
 800c9a4:	d901      	bls.n	800c9aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e20b      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c9aa:	4b57      	ldr	r3, [pc, #348]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1f0      	bne.n	800c998 <HAL_RCC_OscConfig+0x110>
 800c9b6:	e000      	b.n	800c9ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f003 0302 	and.w	r3, r3, #2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d069      	beq.n	800ca9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c9c6:	4b50      	ldr	r3, [pc, #320]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f003 030c 	and.w	r3, r3, #12
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00b      	beq.n	800c9ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c9d2:	4b4d      	ldr	r3, [pc, #308]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	f003 030c 	and.w	r3, r3, #12
 800c9da:	2b08      	cmp	r3, #8
 800c9dc:	d11c      	bne.n	800ca18 <HAL_RCC_OscConfig+0x190>
 800c9de:	4b4a      	ldr	r3, [pc, #296]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d116      	bne.n	800ca18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c9ea:	4b47      	ldr	r3, [pc, #284]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f003 0302 	and.w	r3, r3, #2
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d005      	beq.n	800ca02 <HAL_RCC_OscConfig+0x17a>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d001      	beq.n	800ca02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e1df      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca02:	4b41      	ldr	r3, [pc, #260]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	00db      	lsls	r3, r3, #3
 800ca10:	493d      	ldr	r1, [pc, #244]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800ca12:	4313      	orrs	r3, r2
 800ca14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca16:	e040      	b.n	800ca9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d023      	beq.n	800ca68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ca20:	4b39      	ldr	r3, [pc, #228]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a38      	ldr	r2, [pc, #224]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800ca26:	f043 0301 	orr.w	r3, r3, #1
 800ca2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca2c:	f7f9 ffce 	bl	80069cc <HAL_GetTick>
 800ca30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca32:	e008      	b.n	800ca46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca34:	f7f9 ffca 	bl	80069cc <HAL_GetTick>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d901      	bls.n	800ca46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800ca42:	2303      	movs	r3, #3
 800ca44:	e1bd      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca46:	4b30      	ldr	r3, [pc, #192]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f003 0302 	and.w	r3, r3, #2
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0f0      	beq.n	800ca34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca52:	4b2d      	ldr	r3, [pc, #180]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	4929      	ldr	r1, [pc, #164]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800ca62:	4313      	orrs	r3, r2
 800ca64:	600b      	str	r3, [r1, #0]
 800ca66:	e018      	b.n	800ca9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ca68:	4b27      	ldr	r3, [pc, #156]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a26      	ldr	r2, [pc, #152]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800ca6e:	f023 0301 	bic.w	r3, r3, #1
 800ca72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca74:	f7f9 ffaa 	bl	80069cc <HAL_GetTick>
 800ca78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ca7a:	e008      	b.n	800ca8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca7c:	f7f9 ffa6 	bl	80069cc <HAL_GetTick>
 800ca80:	4602      	mov	r2, r0
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	d901      	bls.n	800ca8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	e199      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ca8e:	4b1e      	ldr	r3, [pc, #120]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f003 0302 	and.w	r3, r3, #2
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1f0      	bne.n	800ca7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f003 0308 	and.w	r3, r3, #8
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d038      	beq.n	800cb18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	695b      	ldr	r3, [r3, #20]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d019      	beq.n	800cae2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800caae:	4b16      	ldr	r3, [pc, #88]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800cab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cab2:	4a15      	ldr	r2, [pc, #84]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800cab4:	f043 0301 	orr.w	r3, r3, #1
 800cab8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caba:	f7f9 ff87 	bl	80069cc <HAL_GetTick>
 800cabe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cac0:	e008      	b.n	800cad4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cac2:	f7f9 ff83 	bl	80069cc <HAL_GetTick>
 800cac6:	4602      	mov	r2, r0
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	1ad3      	subs	r3, r2, r3
 800cacc:	2b02      	cmp	r3, #2
 800cace:	d901      	bls.n	800cad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cad0:	2303      	movs	r3, #3
 800cad2:	e176      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cad4:	4b0c      	ldr	r3, [pc, #48]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800cad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cad8:	f003 0302 	and.w	r3, r3, #2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d0f0      	beq.n	800cac2 <HAL_RCC_OscConfig+0x23a>
 800cae0:	e01a      	b.n	800cb18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cae2:	4b09      	ldr	r3, [pc, #36]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800cae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cae6:	4a08      	ldr	r2, [pc, #32]	; (800cb08 <HAL_RCC_OscConfig+0x280>)
 800cae8:	f023 0301 	bic.w	r3, r3, #1
 800caec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caee:	f7f9 ff6d 	bl	80069cc <HAL_GetTick>
 800caf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800caf4:	e00a      	b.n	800cb0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800caf6:	f7f9 ff69 	bl	80069cc <HAL_GetTick>
 800cafa:	4602      	mov	r2, r0
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	2b02      	cmp	r3, #2
 800cb02:	d903      	bls.n	800cb0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cb04:	2303      	movs	r3, #3
 800cb06:	e15c      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
 800cb08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb0c:	4b91      	ldr	r3, [pc, #580]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cb0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb10:	f003 0302 	and.w	r3, r3, #2
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1ee      	bne.n	800caf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 0304 	and.w	r3, r3, #4
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 80a4 	beq.w	800cc6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb26:	4b8b      	ldr	r3, [pc, #556]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d10d      	bne.n	800cb4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb32:	4b88      	ldr	r3, [pc, #544]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb36:	4a87      	ldr	r2, [pc, #540]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cb38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb3c:	6413      	str	r3, [r2, #64]	; 0x40
 800cb3e:	4b85      	ldr	r3, [pc, #532]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb46:	60bb      	str	r3, [r7, #8]
 800cb48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cb4e:	4b82      	ldr	r3, [pc, #520]	; (800cd58 <HAL_RCC_OscConfig+0x4d0>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d118      	bne.n	800cb8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800cb5a:	4b7f      	ldr	r3, [pc, #508]	; (800cd58 <HAL_RCC_OscConfig+0x4d0>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a7e      	ldr	r2, [pc, #504]	; (800cd58 <HAL_RCC_OscConfig+0x4d0>)
 800cb60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cb66:	f7f9 ff31 	bl	80069cc <HAL_GetTick>
 800cb6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cb6c:	e008      	b.n	800cb80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cb6e:	f7f9 ff2d 	bl	80069cc <HAL_GetTick>
 800cb72:	4602      	mov	r2, r0
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	1ad3      	subs	r3, r2, r3
 800cb78:	2b64      	cmp	r3, #100	; 0x64
 800cb7a:	d901      	bls.n	800cb80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800cb7c:	2303      	movs	r3, #3
 800cb7e:	e120      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cb80:	4b75      	ldr	r3, [pc, #468]	; (800cd58 <HAL_RCC_OscConfig+0x4d0>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d0f0      	beq.n	800cb6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d106      	bne.n	800cba2 <HAL_RCC_OscConfig+0x31a>
 800cb94:	4b6f      	ldr	r3, [pc, #444]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cb96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb98:	4a6e      	ldr	r2, [pc, #440]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cb9a:	f043 0301 	orr.w	r3, r3, #1
 800cb9e:	6713      	str	r3, [r2, #112]	; 0x70
 800cba0:	e02d      	b.n	800cbfe <HAL_RCC_OscConfig+0x376>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10c      	bne.n	800cbc4 <HAL_RCC_OscConfig+0x33c>
 800cbaa:	4b6a      	ldr	r3, [pc, #424]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbae:	4a69      	ldr	r2, [pc, #420]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbb0:	f023 0301 	bic.w	r3, r3, #1
 800cbb4:	6713      	str	r3, [r2, #112]	; 0x70
 800cbb6:	4b67      	ldr	r3, [pc, #412]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbba:	4a66      	ldr	r2, [pc, #408]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbbc:	f023 0304 	bic.w	r3, r3, #4
 800cbc0:	6713      	str	r3, [r2, #112]	; 0x70
 800cbc2:	e01c      	b.n	800cbfe <HAL_RCC_OscConfig+0x376>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	2b05      	cmp	r3, #5
 800cbca:	d10c      	bne.n	800cbe6 <HAL_RCC_OscConfig+0x35e>
 800cbcc:	4b61      	ldr	r3, [pc, #388]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd0:	4a60      	ldr	r2, [pc, #384]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbd2:	f043 0304 	orr.w	r3, r3, #4
 800cbd6:	6713      	str	r3, [r2, #112]	; 0x70
 800cbd8:	4b5e      	ldr	r3, [pc, #376]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbdc:	4a5d      	ldr	r2, [pc, #372]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbde:	f043 0301 	orr.w	r3, r3, #1
 800cbe2:	6713      	str	r3, [r2, #112]	; 0x70
 800cbe4:	e00b      	b.n	800cbfe <HAL_RCC_OscConfig+0x376>
 800cbe6:	4b5b      	ldr	r3, [pc, #364]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbea:	4a5a      	ldr	r2, [pc, #360]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbec:	f023 0301 	bic.w	r3, r3, #1
 800cbf0:	6713      	str	r3, [r2, #112]	; 0x70
 800cbf2:	4b58      	ldr	r3, [pc, #352]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbf6:	4a57      	ldr	r2, [pc, #348]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cbf8:	f023 0304 	bic.w	r3, r3, #4
 800cbfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d015      	beq.n	800cc32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc06:	f7f9 fee1 	bl	80069cc <HAL_GetTick>
 800cc0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc0c:	e00a      	b.n	800cc24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc0e:	f7f9 fedd 	bl	80069cc <HAL_GetTick>
 800cc12:	4602      	mov	r2, r0
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d901      	bls.n	800cc24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e0ce      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc24:	4b4b      	ldr	r3, [pc, #300]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cc26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc28:	f003 0302 	and.w	r3, r3, #2
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d0ee      	beq.n	800cc0e <HAL_RCC_OscConfig+0x386>
 800cc30:	e014      	b.n	800cc5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc32:	f7f9 fecb 	bl	80069cc <HAL_GetTick>
 800cc36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc38:	e00a      	b.n	800cc50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc3a:	f7f9 fec7 	bl	80069cc <HAL_GetTick>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	1ad3      	subs	r3, r2, r3
 800cc44:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d901      	bls.n	800cc50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	e0b8      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc50:	4b40      	ldr	r3, [pc, #256]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cc52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc54:	f003 0302 	and.w	r3, r3, #2
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1ee      	bne.n	800cc3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d105      	bne.n	800cc6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cc62:	4b3c      	ldr	r3, [pc, #240]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc66:	4a3b      	ldr	r2, [pc, #236]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cc68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	699b      	ldr	r3, [r3, #24]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	f000 80a4 	beq.w	800cdc0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cc78:	4b36      	ldr	r3, [pc, #216]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	f003 030c 	and.w	r3, r3, #12
 800cc80:	2b08      	cmp	r3, #8
 800cc82:	d06b      	beq.n	800cd5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	2b02      	cmp	r3, #2
 800cc8a:	d149      	bne.n	800cd20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc8c:	4b31      	ldr	r3, [pc, #196]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a30      	ldr	r2, [pc, #192]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cc92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc98:	f7f9 fe98 	bl	80069cc <HAL_GetTick>
 800cc9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cc9e:	e008      	b.n	800ccb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cca0:	f7f9 fe94 	bl	80069cc <HAL_GetTick>
 800cca4:	4602      	mov	r2, r0
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	d901      	bls.n	800ccb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	e087      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccb2:	4b28      	ldr	r3, [pc, #160]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1f0      	bne.n	800cca0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	69da      	ldr	r2, [r3, #28]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6a1b      	ldr	r3, [r3, #32]
 800ccc6:	431a      	orrs	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cccc:	019b      	lsls	r3, r3, #6
 800ccce:	431a      	orrs	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd4:	085b      	lsrs	r3, r3, #1
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	041b      	lsls	r3, r3, #16
 800ccda:	431a      	orrs	r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce0:	061b      	lsls	r3, r3, #24
 800cce2:	4313      	orrs	r3, r2
 800cce4:	4a1b      	ldr	r2, [pc, #108]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cce6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ccea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ccec:	4b19      	ldr	r3, [pc, #100]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a18      	ldr	r2, [pc, #96]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800ccf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ccf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccf8:	f7f9 fe68 	bl	80069cc <HAL_GetTick>
 800ccfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ccfe:	e008      	b.n	800cd12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd00:	f7f9 fe64 	bl	80069cc <HAL_GetTick>
 800cd04:	4602      	mov	r2, r0
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	2b02      	cmp	r3, #2
 800cd0c:	d901      	bls.n	800cd12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e057      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd12:	4b10      	ldr	r3, [pc, #64]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0f0      	beq.n	800cd00 <HAL_RCC_OscConfig+0x478>
 800cd1e:	e04f      	b.n	800cdc0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd20:	4b0c      	ldr	r3, [pc, #48]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a0b      	ldr	r2, [pc, #44]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cd26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd2c:	f7f9 fe4e 	bl	80069cc <HAL_GetTick>
 800cd30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd32:	e008      	b.n	800cd46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd34:	f7f9 fe4a 	bl	80069cc <HAL_GetTick>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d901      	bls.n	800cd46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800cd42:	2303      	movs	r3, #3
 800cd44:	e03d      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd46:	4b03      	ldr	r3, [pc, #12]	; (800cd54 <HAL_RCC_OscConfig+0x4cc>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d1f0      	bne.n	800cd34 <HAL_RCC_OscConfig+0x4ac>
 800cd52:	e035      	b.n	800cdc0 <HAL_RCC_OscConfig+0x538>
 800cd54:	40023800 	.word	0x40023800
 800cd58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800cd5c:	4b1b      	ldr	r3, [pc, #108]	; (800cdcc <HAL_RCC_OscConfig+0x544>)
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	699b      	ldr	r3, [r3, #24]
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d028      	beq.n	800cdbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d121      	bne.n	800cdbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d11a      	bne.n	800cdbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cd92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d111      	bne.n	800cdbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda2:	085b      	lsrs	r3, r3, #1
 800cda4:	3b01      	subs	r3, #1
 800cda6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d107      	bne.n	800cdbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d001      	beq.n	800cdc0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e000      	b.n	800cdc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	40023800 	.word	0x40023800

0800cdd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e0d0      	b.n	800cf8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cde8:	4b6a      	ldr	r3, [pc, #424]	; (800cf94 <HAL_RCC_ClockConfig+0x1c4>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 030f 	and.w	r3, r3, #15
 800cdf0:	683a      	ldr	r2, [r7, #0]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d910      	bls.n	800ce18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cdf6:	4b67      	ldr	r3, [pc, #412]	; (800cf94 <HAL_RCC_ClockConfig+0x1c4>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f023 020f 	bic.w	r2, r3, #15
 800cdfe:	4965      	ldr	r1, [pc, #404]	; (800cf94 <HAL_RCC_ClockConfig+0x1c4>)
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	4313      	orrs	r3, r2
 800ce04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce06:	4b63      	ldr	r3, [pc, #396]	; (800cf94 <HAL_RCC_ClockConfig+0x1c4>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f003 030f 	and.w	r3, r3, #15
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d001      	beq.n	800ce18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e0b8      	b.n	800cf8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 0302 	and.w	r3, r3, #2
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d020      	beq.n	800ce66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f003 0304 	and.w	r3, r3, #4
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d005      	beq.n	800ce3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ce30:	4b59      	ldr	r3, [pc, #356]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	4a58      	ldr	r2, [pc, #352]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800ce36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ce3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f003 0308 	and.w	r3, r3, #8
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d005      	beq.n	800ce54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ce48:	4b53      	ldr	r3, [pc, #332]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	4a52      	ldr	r2, [pc, #328]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800ce4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ce52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ce54:	4b50      	ldr	r3, [pc, #320]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	494d      	ldr	r1, [pc, #308]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800ce62:	4313      	orrs	r3, r2
 800ce64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f003 0301 	and.w	r3, r3, #1
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d040      	beq.n	800cef4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d107      	bne.n	800ce8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce7a:	4b47      	ldr	r3, [pc, #284]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d115      	bne.n	800ceb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e07f      	b.n	800cf8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d107      	bne.n	800cea2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce92:	4b41      	ldr	r3, [pc, #260]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d109      	bne.n	800ceb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e073      	b.n	800cf8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cea2:	4b3d      	ldr	r3, [pc, #244]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f003 0302 	and.w	r3, r3, #2
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d101      	bne.n	800ceb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e06b      	b.n	800cf8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ceb2:	4b39      	ldr	r3, [pc, #228]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	f023 0203 	bic.w	r2, r3, #3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	4936      	ldr	r1, [pc, #216]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800cec0:	4313      	orrs	r3, r2
 800cec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cec4:	f7f9 fd82 	bl	80069cc <HAL_GetTick>
 800cec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ceca:	e00a      	b.n	800cee2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cecc:	f7f9 fd7e 	bl	80069cc <HAL_GetTick>
 800ced0:	4602      	mov	r2, r0
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d901      	bls.n	800cee2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cede:	2303      	movs	r3, #3
 800cee0:	e053      	b.n	800cf8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cee2:	4b2d      	ldr	r3, [pc, #180]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	f003 020c 	and.w	r2, r3, #12
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d1eb      	bne.n	800cecc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cef4:	4b27      	ldr	r3, [pc, #156]	; (800cf94 <HAL_RCC_ClockConfig+0x1c4>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f003 030f 	and.w	r3, r3, #15
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d210      	bcs.n	800cf24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf02:	4b24      	ldr	r3, [pc, #144]	; (800cf94 <HAL_RCC_ClockConfig+0x1c4>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f023 020f 	bic.w	r2, r3, #15
 800cf0a:	4922      	ldr	r1, [pc, #136]	; (800cf94 <HAL_RCC_ClockConfig+0x1c4>)
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf12:	4b20      	ldr	r3, [pc, #128]	; (800cf94 <HAL_RCC_ClockConfig+0x1c4>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f003 030f 	and.w	r3, r3, #15
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d001      	beq.n	800cf24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	e032      	b.n	800cf8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 0304 	and.w	r3, r3, #4
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d008      	beq.n	800cf42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cf30:	4b19      	ldr	r3, [pc, #100]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	4916      	ldr	r1, [pc, #88]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f003 0308 	and.w	r3, r3, #8
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d009      	beq.n	800cf62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cf4e:	4b12      	ldr	r3, [pc, #72]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	00db      	lsls	r3, r3, #3
 800cf5c:	490e      	ldr	r1, [pc, #56]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cf62:	f000 f821 	bl	800cfa8 <HAL_RCC_GetSysClockFreq>
 800cf66:	4602      	mov	r2, r0
 800cf68:	4b0b      	ldr	r3, [pc, #44]	; (800cf98 <HAL_RCC_ClockConfig+0x1c8>)
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	091b      	lsrs	r3, r3, #4
 800cf6e:	f003 030f 	and.w	r3, r3, #15
 800cf72:	490a      	ldr	r1, [pc, #40]	; (800cf9c <HAL_RCC_ClockConfig+0x1cc>)
 800cf74:	5ccb      	ldrb	r3, [r1, r3]
 800cf76:	fa22 f303 	lsr.w	r3, r2, r3
 800cf7a:	4a09      	ldr	r2, [pc, #36]	; (800cfa0 <HAL_RCC_ClockConfig+0x1d0>)
 800cf7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cf7e:	4b09      	ldr	r3, [pc, #36]	; (800cfa4 <HAL_RCC_ClockConfig+0x1d4>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7f6 feaa 	bl	8003cdc <HAL_InitTick>

  return HAL_OK;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	40023c00 	.word	0x40023c00
 800cf98:	40023800 	.word	0x40023800
 800cf9c:	0801b728 	.word	0x0801b728
 800cfa0:	20000008 	.word	0x20000008
 800cfa4:	20000030 	.word	0x20000030

0800cfa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cfa8:	b5b0      	push	{r4, r5, r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cfae:	2100      	movs	r1, #0
 800cfb0:	6079      	str	r1, [r7, #4]
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	60f9      	str	r1, [r7, #12]
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800cfba:	2100      	movs	r1, #0
 800cfbc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cfbe:	4952      	ldr	r1, [pc, #328]	; (800d108 <HAL_RCC_GetSysClockFreq+0x160>)
 800cfc0:	6889      	ldr	r1, [r1, #8]
 800cfc2:	f001 010c 	and.w	r1, r1, #12
 800cfc6:	2908      	cmp	r1, #8
 800cfc8:	d00d      	beq.n	800cfe6 <HAL_RCC_GetSysClockFreq+0x3e>
 800cfca:	2908      	cmp	r1, #8
 800cfcc:	f200 8094 	bhi.w	800d0f8 <HAL_RCC_GetSysClockFreq+0x150>
 800cfd0:	2900      	cmp	r1, #0
 800cfd2:	d002      	beq.n	800cfda <HAL_RCC_GetSysClockFreq+0x32>
 800cfd4:	2904      	cmp	r1, #4
 800cfd6:	d003      	beq.n	800cfe0 <HAL_RCC_GetSysClockFreq+0x38>
 800cfd8:	e08e      	b.n	800d0f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cfda:	4b4c      	ldr	r3, [pc, #304]	; (800d10c <HAL_RCC_GetSysClockFreq+0x164>)
 800cfdc:	60bb      	str	r3, [r7, #8]
      break;
 800cfde:	e08e      	b.n	800d0fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cfe0:	4b4b      	ldr	r3, [pc, #300]	; (800d110 <HAL_RCC_GetSysClockFreq+0x168>)
 800cfe2:	60bb      	str	r3, [r7, #8]
      break;
 800cfe4:	e08b      	b.n	800d0fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cfe6:	4948      	ldr	r1, [pc, #288]	; (800d108 <HAL_RCC_GetSysClockFreq+0x160>)
 800cfe8:	6849      	ldr	r1, [r1, #4]
 800cfea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800cfee:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cff0:	4945      	ldr	r1, [pc, #276]	; (800d108 <HAL_RCC_GetSysClockFreq+0x160>)
 800cff2:	6849      	ldr	r1, [r1, #4]
 800cff4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800cff8:	2900      	cmp	r1, #0
 800cffa:	d024      	beq.n	800d046 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cffc:	4942      	ldr	r1, [pc, #264]	; (800d108 <HAL_RCC_GetSysClockFreq+0x160>)
 800cffe:	6849      	ldr	r1, [r1, #4]
 800d000:	0989      	lsrs	r1, r1, #6
 800d002:	4608      	mov	r0, r1
 800d004:	f04f 0100 	mov.w	r1, #0
 800d008:	f240 14ff 	movw	r4, #511	; 0x1ff
 800d00c:	f04f 0500 	mov.w	r5, #0
 800d010:	ea00 0204 	and.w	r2, r0, r4
 800d014:	ea01 0305 	and.w	r3, r1, r5
 800d018:	493d      	ldr	r1, [pc, #244]	; (800d110 <HAL_RCC_GetSysClockFreq+0x168>)
 800d01a:	fb01 f003 	mul.w	r0, r1, r3
 800d01e:	2100      	movs	r1, #0
 800d020:	fb01 f102 	mul.w	r1, r1, r2
 800d024:	1844      	adds	r4, r0, r1
 800d026:	493a      	ldr	r1, [pc, #232]	; (800d110 <HAL_RCC_GetSysClockFreq+0x168>)
 800d028:	fba2 0101 	umull	r0, r1, r2, r1
 800d02c:	1863      	adds	r3, r4, r1
 800d02e:	4619      	mov	r1, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	461a      	mov	r2, r3
 800d034:	f04f 0300 	mov.w	r3, #0
 800d038:	f7f3 fd88 	bl	8000b4c <__aeabi_uldivmod>
 800d03c:	4602      	mov	r2, r0
 800d03e:	460b      	mov	r3, r1
 800d040:	4613      	mov	r3, r2
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	e04a      	b.n	800d0dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d046:	4b30      	ldr	r3, [pc, #192]	; (800d108 <HAL_RCC_GetSysClockFreq+0x160>)
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	099b      	lsrs	r3, r3, #6
 800d04c:	461a      	mov	r2, r3
 800d04e:	f04f 0300 	mov.w	r3, #0
 800d052:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d056:	f04f 0100 	mov.w	r1, #0
 800d05a:	ea02 0400 	and.w	r4, r2, r0
 800d05e:	ea03 0501 	and.w	r5, r3, r1
 800d062:	4620      	mov	r0, r4
 800d064:	4629      	mov	r1, r5
 800d066:	f04f 0200 	mov.w	r2, #0
 800d06a:	f04f 0300 	mov.w	r3, #0
 800d06e:	014b      	lsls	r3, r1, #5
 800d070:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d074:	0142      	lsls	r2, r0, #5
 800d076:	4610      	mov	r0, r2
 800d078:	4619      	mov	r1, r3
 800d07a:	1b00      	subs	r0, r0, r4
 800d07c:	eb61 0105 	sbc.w	r1, r1, r5
 800d080:	f04f 0200 	mov.w	r2, #0
 800d084:	f04f 0300 	mov.w	r3, #0
 800d088:	018b      	lsls	r3, r1, #6
 800d08a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800d08e:	0182      	lsls	r2, r0, #6
 800d090:	1a12      	subs	r2, r2, r0
 800d092:	eb63 0301 	sbc.w	r3, r3, r1
 800d096:	f04f 0000 	mov.w	r0, #0
 800d09a:	f04f 0100 	mov.w	r1, #0
 800d09e:	00d9      	lsls	r1, r3, #3
 800d0a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d0a4:	00d0      	lsls	r0, r2, #3
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	1912      	adds	r2, r2, r4
 800d0ac:	eb45 0303 	adc.w	r3, r5, r3
 800d0b0:	f04f 0000 	mov.w	r0, #0
 800d0b4:	f04f 0100 	mov.w	r1, #0
 800d0b8:	0299      	lsls	r1, r3, #10
 800d0ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800d0be:	0290      	lsls	r0, r2, #10
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	4610      	mov	r0, r2
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	f04f 0300 	mov.w	r3, #0
 800d0d0:	f7f3 fd3c 	bl	8000b4c <__aeabi_uldivmod>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	4613      	mov	r3, r2
 800d0da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d0dc:	4b0a      	ldr	r3, [pc, #40]	; (800d108 <HAL_RCC_GetSysClockFreq+0x160>)
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	0c1b      	lsrs	r3, r3, #16
 800d0e2:	f003 0303 	and.w	r3, r3, #3
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f4:	60bb      	str	r3, [r7, #8]
      break;
 800d0f6:	e002      	b.n	800d0fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d0f8:	4b04      	ldr	r3, [pc, #16]	; (800d10c <HAL_RCC_GetSysClockFreq+0x164>)
 800d0fa:	60bb      	str	r3, [r7, #8]
      break;
 800d0fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d0fe:	68bb      	ldr	r3, [r7, #8]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bdb0      	pop	{r4, r5, r7, pc}
 800d108:	40023800 	.word	0x40023800
 800d10c:	00f42400 	.word	0x00f42400
 800d110:	017d7840 	.word	0x017d7840

0800d114 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d114:	b480      	push	{r7}
 800d116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d118:	4b03      	ldr	r3, [pc, #12]	; (800d128 <HAL_RCC_GetHCLKFreq+0x14>)
 800d11a:	681b      	ldr	r3, [r3, #0]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	20000008 	.word	0x20000008

0800d12c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d130:	f7ff fff0 	bl	800d114 <HAL_RCC_GetHCLKFreq>
 800d134:	4602      	mov	r2, r0
 800d136:	4b05      	ldr	r3, [pc, #20]	; (800d14c <HAL_RCC_GetPCLK1Freq+0x20>)
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	0a9b      	lsrs	r3, r3, #10
 800d13c:	f003 0307 	and.w	r3, r3, #7
 800d140:	4903      	ldr	r1, [pc, #12]	; (800d150 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d142:	5ccb      	ldrb	r3, [r1, r3]
 800d144:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d148:	4618      	mov	r0, r3
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	40023800 	.word	0x40023800
 800d150:	0801b738 	.word	0x0801b738

0800d154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d158:	f7ff ffdc 	bl	800d114 <HAL_RCC_GetHCLKFreq>
 800d15c:	4602      	mov	r2, r0
 800d15e:	4b05      	ldr	r3, [pc, #20]	; (800d174 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	0b5b      	lsrs	r3, r3, #13
 800d164:	f003 0307 	and.w	r3, r3, #7
 800d168:	4903      	ldr	r1, [pc, #12]	; (800d178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d16a:	5ccb      	ldrb	r3, [r1, r3]
 800d16c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d170:	4618      	mov	r0, r3
 800d172:	bd80      	pop	{r7, pc}
 800d174:	40023800 	.word	0x40023800
 800d178:	0801b738 	.word	0x0801b738

0800d17c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	220f      	movs	r2, #15
 800d18a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d18c:	4b12      	ldr	r3, [pc, #72]	; (800d1d8 <HAL_RCC_GetClockConfig+0x5c>)
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	f003 0203 	and.w	r2, r3, #3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d198:	4b0f      	ldr	r3, [pc, #60]	; (800d1d8 <HAL_RCC_GetClockConfig+0x5c>)
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d1a4:	4b0c      	ldr	r3, [pc, #48]	; (800d1d8 <HAL_RCC_GetClockConfig+0x5c>)
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d1b0:	4b09      	ldr	r3, [pc, #36]	; (800d1d8 <HAL_RCC_GetClockConfig+0x5c>)
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	08db      	lsrs	r3, r3, #3
 800d1b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d1be:	4b07      	ldr	r3, [pc, #28]	; (800d1dc <HAL_RCC_GetClockConfig+0x60>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f003 020f 	and.w	r2, r3, #15
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	601a      	str	r2, [r3, #0]
}
 800d1ca:	bf00      	nop
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop
 800d1d8:	40023800 	.word	0x40023800
 800d1dc:	40023c00 	.word	0x40023c00

0800d1e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b088      	sub	sp, #32
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 0301 	and.w	r3, r3, #1
 800d204:	2b00      	cmp	r3, #0
 800d206:	d012      	beq.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d208:	4b69      	ldr	r3, [pc, #420]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	4a68      	ldr	r2, [pc, #416]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d20e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d212:	6093      	str	r3, [r2, #8]
 800d214:	4b66      	ldr	r3, [pc, #408]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d216:	689a      	ldr	r2, [r3, #8]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21c:	4964      	ldr	r1, [pc, #400]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d21e:	4313      	orrs	r3, r2
 800d220:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800d22a:	2301      	movs	r3, #1
 800d22c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d236:	2b00      	cmp	r3, #0
 800d238:	d017      	beq.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d23a:	4b5d      	ldr	r3, [pc, #372]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d23c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d248:	4959      	ldr	r1, [pc, #356]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d24a:	4313      	orrs	r3, r2
 800d24c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d258:	d101      	bne.n	800d25e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800d25a:	2301      	movs	r3, #1
 800d25c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d262:	2b00      	cmp	r3, #0
 800d264:	d101      	bne.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800d266:	2301      	movs	r3, #1
 800d268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d272:	2b00      	cmp	r3, #0
 800d274:	d017      	beq.n	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d276:	4b4e      	ldr	r3, [pc, #312]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d27c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d284:	494a      	ldr	r1, [pc, #296]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d286:	4313      	orrs	r3, r2
 800d288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d294:	d101      	bne.n	800d29a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800d296:	2301      	movs	r3, #1
 800d298:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d101      	bne.n	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f003 0320 	and.w	r3, r3, #32
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 808b 	beq.w	800d3da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d2c4:	4b3a      	ldr	r3, [pc, #232]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c8:	4a39      	ldr	r2, [pc, #228]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d2ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2ce:	6413      	str	r3, [r2, #64]	; 0x40
 800d2d0:	4b37      	ldr	r3, [pc, #220]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2d8:	60bb      	str	r3, [r7, #8]
 800d2da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d2dc:	4b35      	ldr	r3, [pc, #212]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a34      	ldr	r2, [pc, #208]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d2e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2e8:	f7f9 fb70 	bl	80069cc <HAL_GetTick>
 800d2ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d2ee:	e008      	b.n	800d302 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d2f0:	f7f9 fb6c 	bl	80069cc <HAL_GetTick>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	2b64      	cmp	r3, #100	; 0x64
 800d2fc:	d901      	bls.n	800d302 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d2fe:	2303      	movs	r3, #3
 800d300:	e357      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d302:	4b2c      	ldr	r3, [pc, #176]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d0f0      	beq.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d30e:	4b28      	ldr	r3, [pc, #160]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d316:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d035      	beq.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d02e      	beq.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d32c:	4b20      	ldr	r3, [pc, #128]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d334:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d336:	4b1e      	ldr	r3, [pc, #120]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d33a:	4a1d      	ldr	r2, [pc, #116]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d33c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d340:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d342:	4b1b      	ldr	r3, [pc, #108]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d346:	4a1a      	ldr	r2, [pc, #104]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d34c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d34e:	4a18      	ldr	r2, [pc, #96]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d354:	4b16      	ldr	r3, [pc, #88]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d358:	f003 0301 	and.w	r3, r3, #1
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d114      	bne.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d360:	f7f9 fb34 	bl	80069cc <HAL_GetTick>
 800d364:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d366:	e00a      	b.n	800d37e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d368:	f7f9 fb30 	bl	80069cc <HAL_GetTick>
 800d36c:	4602      	mov	r2, r0
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	f241 3288 	movw	r2, #5000	; 0x1388
 800d376:	4293      	cmp	r3, r2
 800d378:	d901      	bls.n	800d37e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d37a:	2303      	movs	r3, #3
 800d37c:	e319      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d37e:	4b0c      	ldr	r3, [pc, #48]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d382:	f003 0302 	and.w	r3, r3, #2
 800d386:	2b00      	cmp	r3, #0
 800d388:	d0ee      	beq.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d38e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d396:	d111      	bne.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d398:	4b05      	ldr	r3, [pc, #20]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d3a4:	4b04      	ldr	r3, [pc, #16]	; (800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d3a6:	400b      	ands	r3, r1
 800d3a8:	4901      	ldr	r1, [pc, #4]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	608b      	str	r3, [r1, #8]
 800d3ae:	e00b      	b.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d3b0:	40023800 	.word	0x40023800
 800d3b4:	40007000 	.word	0x40007000
 800d3b8:	0ffffcff 	.word	0x0ffffcff
 800d3bc:	4bb1      	ldr	r3, [pc, #708]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	4ab0      	ldr	r2, [pc, #704]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d3c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d3c6:	6093      	str	r3, [r2, #8]
 800d3c8:	4bae      	ldr	r3, [pc, #696]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d3ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3d4:	49ab      	ldr	r1, [pc, #684]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f003 0310 	and.w	r3, r3, #16
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d010      	beq.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d3e6:	4ba7      	ldr	r3, [pc, #668]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d3e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3ec:	4aa5      	ldr	r2, [pc, #660]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d3ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d3f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d3f6:	4ba3      	ldr	r3, [pc, #652]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d3f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d400:	49a0      	ldr	r1, [pc, #640]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d402:	4313      	orrs	r3, r2
 800d404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00a      	beq.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d414:	4b9b      	ldr	r3, [pc, #620]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d41a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d422:	4998      	ldr	r1, [pc, #608]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d424:	4313      	orrs	r3, r2
 800d426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00a      	beq.n	800d44c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d436:	4b93      	ldr	r3, [pc, #588]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d43c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d444:	498f      	ldr	r1, [pc, #572]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d446:	4313      	orrs	r3, r2
 800d448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00a      	beq.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d458:	4b8a      	ldr	r3, [pc, #552]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d45e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d466:	4987      	ldr	r1, [pc, #540]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d468:	4313      	orrs	r3, r2
 800d46a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00a      	beq.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d47a:	4b82      	ldr	r3, [pc, #520]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d480:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d488:	497e      	ldr	r1, [pc, #504]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d48a:	4313      	orrs	r3, r2
 800d48c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00a      	beq.n	800d4b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d49c:	4b79      	ldr	r3, [pc, #484]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4a2:	f023 0203 	bic.w	r2, r3, #3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4aa:	4976      	ldr	r1, [pc, #472]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00a      	beq.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d4be:	4b71      	ldr	r3, [pc, #452]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4c4:	f023 020c 	bic.w	r2, r3, #12
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4cc:	496d      	ldr	r1, [pc, #436]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d00a      	beq.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d4e0:	4b68      	ldr	r3, [pc, #416]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ee:	4965      	ldr	r1, [pc, #404]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00a      	beq.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d502:	4b60      	ldr	r3, [pc, #384]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d508:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d510:	495c      	ldr	r1, [pc, #368]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d512:	4313      	orrs	r3, r2
 800d514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00a      	beq.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d524:	4b57      	ldr	r3, [pc, #348]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d52a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d532:	4954      	ldr	r1, [pc, #336]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d534:	4313      	orrs	r3, r2
 800d536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00a      	beq.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d546:	4b4f      	ldr	r3, [pc, #316]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d54c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d554:	494b      	ldr	r1, [pc, #300]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d556:	4313      	orrs	r3, r2
 800d558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00a      	beq.n	800d57e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d568:	4b46      	ldr	r3, [pc, #280]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d56e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d576:	4943      	ldr	r1, [pc, #268]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d578:	4313      	orrs	r3, r2
 800d57a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00a      	beq.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d58a:	4b3e      	ldr	r3, [pc, #248]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d590:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d598:	493a      	ldr	r1, [pc, #232]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d59a:	4313      	orrs	r3, r2
 800d59c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00a      	beq.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d5ac:	4b35      	ldr	r3, [pc, #212]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5ba:	4932      	ldr	r1, [pc, #200]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d011      	beq.n	800d5f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d5ce:	4b2d      	ldr	r3, [pc, #180]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5dc:	4929      	ldr	r1, [pc, #164]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5ec:	d101      	bne.n	800d5f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f003 0308 	and.w	r3, r3, #8
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d001      	beq.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d5fe:	2301      	movs	r3, #1
 800d600:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00a      	beq.n	800d624 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d60e:	4b1d      	ldr	r3, [pc, #116]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d614:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d61c:	4919      	ldr	r1, [pc, #100]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d61e:	4313      	orrs	r3, r2
 800d620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00b      	beq.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d630:	4b14      	ldr	r3, [pc, #80]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d636:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d640:	4910      	ldr	r1, [pc, #64]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d642:	4313      	orrs	r3, r2
 800d644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d006      	beq.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 80d9 	beq.w	800d80e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d65c:	4b09      	ldr	r3, [pc, #36]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a08      	ldr	r2, [pc, #32]	; (800d684 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d662:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d668:	f7f9 f9b0 	bl	80069cc <HAL_GetTick>
 800d66c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d66e:	e00b      	b.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d670:	f7f9 f9ac 	bl	80069cc <HAL_GetTick>
 800d674:	4602      	mov	r2, r0
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	2b64      	cmp	r3, #100	; 0x64
 800d67c:	d904      	bls.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d67e:	2303      	movs	r3, #3
 800d680:	e197      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d682:	bf00      	nop
 800d684:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d688:	4b6c      	ldr	r3, [pc, #432]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d690:	2b00      	cmp	r3, #0
 800d692:	d1ed      	bne.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f003 0301 	and.w	r3, r3, #1
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d021      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d11d      	bne.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d6a8:	4b64      	ldr	r3, [pc, #400]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d6aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6ae:	0c1b      	lsrs	r3, r3, #16
 800d6b0:	f003 0303 	and.w	r3, r3, #3
 800d6b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d6b6:	4b61      	ldr	r3, [pc, #388]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d6b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6bc:	0e1b      	lsrs	r3, r3, #24
 800d6be:	f003 030f 	and.w	r3, r3, #15
 800d6c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	019a      	lsls	r2, r3, #6
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	041b      	lsls	r3, r3, #16
 800d6ce:	431a      	orrs	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	061b      	lsls	r3, r3, #24
 800d6d4:	431a      	orrs	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	071b      	lsls	r3, r3, #28
 800d6dc:	4957      	ldr	r1, [pc, #348]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d004      	beq.n	800d6fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6f8:	d00a      	beq.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d702:	2b00      	cmp	r3, #0
 800d704:	d02e      	beq.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d70e:	d129      	bne.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d710:	4b4a      	ldr	r3, [pc, #296]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d716:	0c1b      	lsrs	r3, r3, #16
 800d718:	f003 0303 	and.w	r3, r3, #3
 800d71c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d71e:	4b47      	ldr	r3, [pc, #284]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d724:	0f1b      	lsrs	r3, r3, #28
 800d726:	f003 0307 	and.w	r3, r3, #7
 800d72a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	019a      	lsls	r2, r3, #6
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	041b      	lsls	r3, r3, #16
 800d736:	431a      	orrs	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	061b      	lsls	r3, r3, #24
 800d73e:	431a      	orrs	r2, r3
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	071b      	lsls	r3, r3, #28
 800d744:	493d      	ldr	r1, [pc, #244]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d746:	4313      	orrs	r3, r2
 800d748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d74c:	4b3b      	ldr	r3, [pc, #236]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d74e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d752:	f023 021f 	bic.w	r2, r3, #31
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75a:	3b01      	subs	r3, #1
 800d75c:	4937      	ldr	r1, [pc, #220]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d75e:	4313      	orrs	r3, r2
 800d760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d01d      	beq.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d770:	4b32      	ldr	r3, [pc, #200]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d776:	0e1b      	lsrs	r3, r3, #24
 800d778:	f003 030f 	and.w	r3, r3, #15
 800d77c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d77e:	4b2f      	ldr	r3, [pc, #188]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d784:	0f1b      	lsrs	r3, r3, #28
 800d786:	f003 0307 	and.w	r3, r3, #7
 800d78a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	019a      	lsls	r2, r3, #6
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	041b      	lsls	r3, r3, #16
 800d798:	431a      	orrs	r2, r3
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	061b      	lsls	r3, r3, #24
 800d79e:	431a      	orrs	r2, r3
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	071b      	lsls	r3, r3, #28
 800d7a4:	4925      	ldr	r1, [pc, #148]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d011      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	019a      	lsls	r2, r3, #6
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	041b      	lsls	r3, r3, #16
 800d7c4:	431a      	orrs	r2, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	061b      	lsls	r3, r3, #24
 800d7cc:	431a      	orrs	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	071b      	lsls	r3, r3, #28
 800d7d4:	4919      	ldr	r1, [pc, #100]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d7dc:	4b17      	ldr	r3, [pc, #92]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a16      	ldr	r2, [pc, #88]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d7e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d7e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7e8:	f7f9 f8f0 	bl	80069cc <HAL_GetTick>
 800d7ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d7ee:	e008      	b.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d7f0:	f7f9 f8ec 	bl	80069cc <HAL_GetTick>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	2b64      	cmp	r3, #100	; 0x64
 800d7fc:	d901      	bls.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d7fe:	2303      	movs	r3, #3
 800d800:	e0d7      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d802:	4b0e      	ldr	r3, [pc, #56]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d0f0      	beq.n	800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	2b01      	cmp	r3, #1
 800d812:	f040 80cd 	bne.w	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d816:	4b09      	ldr	r3, [pc, #36]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a08      	ldr	r2, [pc, #32]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d81c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d822:	f7f9 f8d3 	bl	80069cc <HAL_GetTick>
 800d826:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d828:	e00a      	b.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d82a:	f7f9 f8cf 	bl	80069cc <HAL_GetTick>
 800d82e:	4602      	mov	r2, r0
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	1ad3      	subs	r3, r2, r3
 800d834:	2b64      	cmp	r3, #100	; 0x64
 800d836:	d903      	bls.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d838:	2303      	movs	r3, #3
 800d83a:	e0ba      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d83c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d840:	4b5e      	ldr	r3, [pc, #376]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d84c:	d0ed      	beq.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d856:	2b00      	cmp	r3, #0
 800d858:	d003      	beq.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d009      	beq.n	800d876 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d02e      	beq.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d872:	2b00      	cmp	r3, #0
 800d874:	d12a      	bne.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d876:	4b51      	ldr	r3, [pc, #324]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d87c:	0c1b      	lsrs	r3, r3, #16
 800d87e:	f003 0303 	and.w	r3, r3, #3
 800d882:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d884:	4b4d      	ldr	r3, [pc, #308]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d88a:	0f1b      	lsrs	r3, r3, #28
 800d88c:	f003 0307 	and.w	r3, r3, #7
 800d890:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	695b      	ldr	r3, [r3, #20]
 800d896:	019a      	lsls	r2, r3, #6
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	041b      	lsls	r3, r3, #16
 800d89c:	431a      	orrs	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	061b      	lsls	r3, r3, #24
 800d8a4:	431a      	orrs	r2, r3
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	071b      	lsls	r3, r3, #28
 800d8aa:	4944      	ldr	r1, [pc, #272]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d8b2:	4b42      	ldr	r3, [pc, #264]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d8b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	021b      	lsls	r3, r3, #8
 800d8c4:	493d      	ldr	r1, [pc, #244]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d022      	beq.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d8e0:	d11d      	bne.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d8e2:	4b36      	ldr	r3, [pc, #216]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8e8:	0e1b      	lsrs	r3, r3, #24
 800d8ea:	f003 030f 	and.w	r3, r3, #15
 800d8ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d8f0:	4b32      	ldr	r3, [pc, #200]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8f6:	0f1b      	lsrs	r3, r3, #28
 800d8f8:	f003 0307 	and.w	r3, r3, #7
 800d8fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	695b      	ldr	r3, [r3, #20]
 800d902:	019a      	lsls	r2, r3, #6
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6a1b      	ldr	r3, [r3, #32]
 800d908:	041b      	lsls	r3, r3, #16
 800d90a:	431a      	orrs	r2, r3
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	061b      	lsls	r3, r3, #24
 800d910:	431a      	orrs	r2, r3
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	071b      	lsls	r3, r3, #28
 800d916:	4929      	ldr	r1, [pc, #164]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d918:	4313      	orrs	r3, r2
 800d91a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f003 0308 	and.w	r3, r3, #8
 800d926:	2b00      	cmp	r3, #0
 800d928:	d028      	beq.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d92a:	4b24      	ldr	r3, [pc, #144]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d930:	0e1b      	lsrs	r3, r3, #24
 800d932:	f003 030f 	and.w	r3, r3, #15
 800d936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d938:	4b20      	ldr	r3, [pc, #128]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d93e:	0c1b      	lsrs	r3, r3, #16
 800d940:	f003 0303 	and.w	r3, r3, #3
 800d944:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	019a      	lsls	r2, r3, #6
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	041b      	lsls	r3, r3, #16
 800d950:	431a      	orrs	r2, r3
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	061b      	lsls	r3, r3, #24
 800d956:	431a      	orrs	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	69db      	ldr	r3, [r3, #28]
 800d95c:	071b      	lsls	r3, r3, #28
 800d95e:	4917      	ldr	r1, [pc, #92]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d960:	4313      	orrs	r3, r2
 800d962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d966:	4b15      	ldr	r3, [pc, #84]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d96c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d974:	4911      	ldr	r1, [pc, #68]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d976:	4313      	orrs	r3, r2
 800d978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d97c:	4b0f      	ldr	r3, [pc, #60]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a0e      	ldr	r2, [pc, #56]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d988:	f7f9 f820 	bl	80069cc <HAL_GetTick>
 800d98c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d98e:	e008      	b.n	800d9a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d990:	f7f9 f81c 	bl	80069cc <HAL_GetTick>
 800d994:	4602      	mov	r2, r0
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	2b64      	cmp	r3, #100	; 0x64
 800d99c:	d901      	bls.n	800d9a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	e007      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d9a2:	4b06      	ldr	r3, [pc, #24]	; (800d9bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d9ae:	d1ef      	bne.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3720      	adds	r7, #32
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	40023800 	.word	0x40023800

0800d9c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b087      	sub	sp, #28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d9de:	f040 808c 	bne.w	800dafa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d9e2:	4b95      	ldr	r3, [pc, #596]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d9e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9e8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d9f0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d9f8:	d07c      	beq.n	800daf4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da00:	d87d      	bhi.n	800dafe <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d004      	beq.n	800da12 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da0e:	d039      	beq.n	800da84 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800da10:	e075      	b.n	800dafe <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800da12:	4b89      	ldr	r3, [pc, #548]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d108      	bne.n	800da30 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800da1e:	4b86      	ldr	r3, [pc, #536]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da26:	4a85      	ldr	r2, [pc, #532]	; (800dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800da28:	fbb2 f3f3 	udiv	r3, r2, r3
 800da2c:	613b      	str	r3, [r7, #16]
 800da2e:	e007      	b.n	800da40 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800da30:	4b81      	ldr	r3, [pc, #516]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da38:	4a81      	ldr	r2, [pc, #516]	; (800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800da3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da3e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800da40:	4b7d      	ldr	r3, [pc, #500]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da46:	0e1b      	lsrs	r3, r3, #24
 800da48:	f003 030f 	and.w	r3, r3, #15
 800da4c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800da4e:	4b7a      	ldr	r3, [pc, #488]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da54:	099b      	lsrs	r3, r3, #6
 800da56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	fb02 f203 	mul.w	r2, r2, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	fbb2 f3f3 	udiv	r3, r2, r3
 800da66:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800da68:	4b73      	ldr	r3, [pc, #460]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da6e:	0a1b      	lsrs	r3, r3, #8
 800da70:	f003 031f 	and.w	r3, r3, #31
 800da74:	3301      	adds	r3, #1
 800da76:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800da78:	697a      	ldr	r2, [r7, #20]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da80:	617b      	str	r3, [r7, #20]
        break;
 800da82:	e03d      	b.n	800db00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800da84:	4b6c      	ldr	r3, [pc, #432]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d108      	bne.n	800daa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800da90:	4b69      	ldr	r3, [pc, #420]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da98:	4a68      	ldr	r2, [pc, #416]	; (800dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800da9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da9e:	613b      	str	r3, [r7, #16]
 800daa0:	e007      	b.n	800dab2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800daa2:	4b65      	ldr	r3, [pc, #404]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800daaa:	4a65      	ldr	r2, [pc, #404]	; (800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800daac:	fbb2 f3f3 	udiv	r3, r2, r3
 800dab0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800dab2:	4b61      	ldr	r3, [pc, #388]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dab8:	0e1b      	lsrs	r3, r3, #24
 800daba:	f003 030f 	and.w	r3, r3, #15
 800dabe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800dac0:	4b5d      	ldr	r3, [pc, #372]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dac6:	099b      	lsrs	r3, r3, #6
 800dac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dacc:	693a      	ldr	r2, [r7, #16]
 800dace:	fb02 f203 	mul.w	r2, r2, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dad8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800dada:	4b57      	ldr	r3, [pc, #348]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dadc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dae0:	f003 031f 	and.w	r3, r3, #31
 800dae4:	3301      	adds	r3, #1
 800dae6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	fbb2 f3f3 	udiv	r3, r2, r3
 800daf0:	617b      	str	r3, [r7, #20]
        break;
 800daf2:	e005      	b.n	800db00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800daf4:	4b53      	ldr	r3, [pc, #332]	; (800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800daf6:	617b      	str	r3, [r7, #20]
        break;
 800daf8:	e002      	b.n	800db00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800dafa:	bf00      	nop
 800dafc:	e000      	b.n	800db00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800dafe:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db06:	f040 808c 	bne.w	800dc22 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800db0a:	4b4b      	ldr	r3, [pc, #300]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db10:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800db18:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db20:	d07c      	beq.n	800dc1c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db28:	d87d      	bhi.n	800dc26 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d004      	beq.n	800db3a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db36:	d039      	beq.n	800dbac <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800db38:	e075      	b.n	800dc26 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800db3a:	4b3f      	ldr	r3, [pc, #252]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db42:	2b00      	cmp	r3, #0
 800db44:	d108      	bne.n	800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800db46:	4b3c      	ldr	r3, [pc, #240]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db4e:	4a3b      	ldr	r2, [pc, #236]	; (800dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800db50:	fbb2 f3f3 	udiv	r3, r2, r3
 800db54:	613b      	str	r3, [r7, #16]
 800db56:	e007      	b.n	800db68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800db58:	4b37      	ldr	r3, [pc, #220]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db60:	4a37      	ldr	r2, [pc, #220]	; (800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800db62:	fbb2 f3f3 	udiv	r3, r2, r3
 800db66:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800db68:	4b33      	ldr	r3, [pc, #204]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db6e:	0e1b      	lsrs	r3, r3, #24
 800db70:	f003 030f 	and.w	r3, r3, #15
 800db74:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800db76:	4b30      	ldr	r3, [pc, #192]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db7c:	099b      	lsrs	r3, r3, #6
 800db7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db82:	693a      	ldr	r2, [r7, #16]
 800db84:	fb02 f203 	mul.w	r2, r2, r3
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db8e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800db90:	4b29      	ldr	r3, [pc, #164]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db96:	0a1b      	lsrs	r3, r3, #8
 800db98:	f003 031f 	and.w	r3, r3, #31
 800db9c:	3301      	adds	r3, #1
 800db9e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dba8:	617b      	str	r3, [r7, #20]
        break;
 800dbaa:	e03d      	b.n	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800dbac:	4b22      	ldr	r3, [pc, #136]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d108      	bne.n	800dbca <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800dbb8:	4b1f      	ldr	r3, [pc, #124]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbc0:	4a1e      	ldr	r2, [pc, #120]	; (800dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800dbc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbc6:	613b      	str	r3, [r7, #16]
 800dbc8:	e007      	b.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800dbca:	4b1b      	ldr	r3, [pc, #108]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbd2:	4a1b      	ldr	r2, [pc, #108]	; (800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800dbd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbd8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800dbda:	4b17      	ldr	r3, [pc, #92]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbe0:	0e1b      	lsrs	r3, r3, #24
 800dbe2:	f003 030f 	and.w	r3, r3, #15
 800dbe6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800dbe8:	4b13      	ldr	r3, [pc, #76]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbee:	099b      	lsrs	r3, r3, #6
 800dbf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbf4:	693a      	ldr	r2, [r7, #16]
 800dbf6:	fb02 f203 	mul.w	r2, r2, r3
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc00:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800dc02:	4b0d      	ldr	r3, [pc, #52]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc08:	f003 031f 	and.w	r3, r3, #31
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc18:	617b      	str	r3, [r7, #20]
        break;
 800dc1a:	e005      	b.n	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800dc1c:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800dc1e:	617b      	str	r3, [r7, #20]
        break;
 800dc20:	e002      	b.n	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800dc22:	bf00      	nop
 800dc24:	e000      	b.n	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800dc26:	bf00      	nop

  return frequency;
 800dc28:	697b      	ldr	r3, [r7, #20]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	371c      	adds	r7, #28
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	40023800 	.word	0x40023800
 800dc3c:	00f42400 	.word	0x00f42400
 800dc40:	017d7840 	.word	0x017d7840
 800dc44:	00bb8000 	.word	0x00bb8000

0800dc48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e081      	b.n	800dd5e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	7f5b      	ldrb	r3, [r3, #29]
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d105      	bne.n	800dc70 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7f5 fbea 	bl	8003444 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2202      	movs	r2, #2
 800dc74:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	22ca      	movs	r2, #202	; 0xca
 800dc7c:	625a      	str	r2, [r3, #36]	; 0x24
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2253      	movs	r2, #83	; 0x53
 800dc84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 fb16 	bl	800e2b8 <RTC_EnterInitMode>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d008      	beq.n	800dca4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	22ff      	movs	r2, #255	; 0xff
 800dc98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2204      	movs	r2, #4
 800dc9e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e05c      	b.n	800dd5e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6899      	ldr	r1, [r3, #8]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	4b2e      	ldr	r3, [pc, #184]	; (800dd68 <HAL_RTC_Init+0x120>)
 800dcb0:	400b      	ands	r3, r1
 800dcb2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	6899      	ldr	r1, [r3, #8]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	431a      	orrs	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	695b      	ldr	r3, [r3, #20]
 800dcc8:	431a      	orrs	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	430a      	orrs	r2, r1
 800dcd0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	68d2      	ldr	r2, [r2, #12]
 800dcda:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6919      	ldr	r1, [r3, #16]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	041a      	lsls	r2, r3, #16
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	430a      	orrs	r2, r1
 800dcee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68da      	ldr	r2, [r3, #12]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dcfe:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	f003 0320 	and.w	r3, r3, #32
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10e      	bne.n	800dd2c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 faaa 	bl	800e268 <HAL_RTC_WaitForSynchro>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d008      	beq.n	800dd2c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	22ff      	movs	r2, #255	; 0xff
 800dd20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2204      	movs	r2, #4
 800dd26:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e018      	b.n	800dd5e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f022 0208 	bic.w	r2, r2, #8
 800dd3a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	699a      	ldr	r2, [r3, #24]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	430a      	orrs	r2, r1
 800dd4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	22ff      	movs	r2, #255	; 0xff
 800dd54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800dd5c:	2300      	movs	r3, #0
  }
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	ff8fffbf 	.word	0xff8fffbf

0800dd6c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dd6c:	b590      	push	{r4, r7, lr}
 800dd6e:	b087      	sub	sp, #28
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	7f1b      	ldrb	r3, [r3, #28]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d101      	bne.n	800dd88 <HAL_RTC_SetTime+0x1c>
 800dd84:	2302      	movs	r3, #2
 800dd86:	e0a8      	b.n	800deda <HAL_RTC_SetTime+0x16e>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2202      	movs	r2, #2
 800dd92:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d126      	bne.n	800dde8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d102      	bne.n	800ddae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 faac 	bl	800e310 <RTC_ByteToBcd2>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	785b      	ldrb	r3, [r3, #1]
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f000 faa5 	bl	800e310 <RTC_ByteToBcd2>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ddca:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	789b      	ldrb	r3, [r3, #2]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 fa9d 	bl	800e310 <RTC_ByteToBcd2>
 800ddd6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800ddd8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	7b1b      	ldrb	r3, [r3, #12]
 800dde0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800dde2:	4313      	orrs	r3, r2
 800dde4:	617b      	str	r3, [r7, #20]
 800dde6:	e018      	b.n	800de1a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d102      	bne.n	800ddfc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	785b      	ldrb	r3, [r3, #1]
 800de06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800de08:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800de0e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	7b1b      	ldrb	r3, [r3, #12]
 800de14:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800de16:	4313      	orrs	r3, r2
 800de18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	22ca      	movs	r2, #202	; 0xca
 800de20:	625a      	str	r2, [r3, #36]	; 0x24
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2253      	movs	r2, #83	; 0x53
 800de28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f000 fa44 	bl	800e2b8 <RTC_EnterInitMode>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d00b      	beq.n	800de4e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	22ff      	movs	r2, #255	; 0xff
 800de3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2204      	movs	r2, #4
 800de42:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e045      	b.n	800deda <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	6979      	ldr	r1, [r7, #20]
 800de54:	4b23      	ldr	r3, [pc, #140]	; (800dee4 <HAL_RTC_SetTime+0x178>)
 800de56:	400b      	ands	r3, r1
 800de58:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	689a      	ldr	r2, [r3, #8]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800de68:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	6899      	ldr	r1, [r3, #8]
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	691a      	ldr	r2, [r3, #16]
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	431a      	orrs	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	430a      	orrs	r2, r1
 800de80:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	68da      	ldr	r2, [r3, #12]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de90:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	f003 0320 	and.w	r3, r3, #32
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d111      	bne.n	800dec4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f000 f9e1 	bl	800e268 <HAL_RTC_WaitForSynchro>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00b      	beq.n	800dec4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	22ff      	movs	r2, #255	; 0xff
 800deb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2204      	movs	r2, #4
 800deb8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2200      	movs	r2, #0
 800debe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800dec0:	2301      	movs	r3, #1
 800dec2:	e00a      	b.n	800deda <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	22ff      	movs	r2, #255	; 0xff
 800deca:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2201      	movs	r2, #1
 800ded0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2200      	movs	r2, #0
 800ded6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ded8:	2300      	movs	r3, #0
  }
}
 800deda:	4618      	mov	r0, r3
 800dedc:	371c      	adds	r7, #28
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd90      	pop	{r4, r7, pc}
 800dee2:	bf00      	nop
 800dee4:	007f7f7f 	.word	0x007f7f7f

0800dee8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dee8:	b590      	push	{r4, r7, lr}
 800deea:	b087      	sub	sp, #28
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800def4:	2300      	movs	r3, #0
 800def6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	7f1b      	ldrb	r3, [r3, #28]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d101      	bne.n	800df04 <HAL_RTC_SetDate+0x1c>
 800df00:	2302      	movs	r3, #2
 800df02:	e092      	b.n	800e02a <HAL_RTC_SetDate+0x142>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2201      	movs	r2, #1
 800df08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2202      	movs	r2, #2
 800df0e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10e      	bne.n	800df34 <HAL_RTC_SetDate+0x4c>
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	785b      	ldrb	r3, [r3, #1]
 800df1a:	f003 0310 	and.w	r3, r3, #16
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d008      	beq.n	800df34 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	785b      	ldrb	r3, [r3, #1]
 800df26:	f023 0310 	bic.w	r3, r3, #16
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	330a      	adds	r3, #10
 800df2e:	b2da      	uxtb	r2, r3
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d11c      	bne.n	800df74 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	78db      	ldrb	r3, [r3, #3]
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 f9e6 	bl	800e310 <RTC_ByteToBcd2>
 800df44:	4603      	mov	r3, r0
 800df46:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	785b      	ldrb	r3, [r3, #1]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f000 f9df 	bl	800e310 <RTC_ByteToBcd2>
 800df52:	4603      	mov	r3, r0
 800df54:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800df56:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	789b      	ldrb	r3, [r3, #2]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f000 f9d7 	bl	800e310 <RTC_ByteToBcd2>
 800df62:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800df64:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800df6e:	4313      	orrs	r3, r2
 800df70:	617b      	str	r3, [r7, #20]
 800df72:	e00e      	b.n	800df92 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	78db      	ldrb	r3, [r3, #3]
 800df78:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	785b      	ldrb	r3, [r3, #1]
 800df7e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800df80:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800df86:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800df8e:	4313      	orrs	r3, r2
 800df90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	22ca      	movs	r2, #202	; 0xca
 800df98:	625a      	str	r2, [r3, #36]	; 0x24
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2253      	movs	r2, #83	; 0x53
 800dfa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f000 f988 	bl	800e2b8 <RTC_EnterInitMode>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00b      	beq.n	800dfc6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	22ff      	movs	r2, #255	; 0xff
 800dfb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2204      	movs	r2, #4
 800dfba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e031      	b.n	800e02a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	6979      	ldr	r1, [r7, #20]
 800dfcc:	4b19      	ldr	r3, [pc, #100]	; (800e034 <HAL_RTC_SetDate+0x14c>)
 800dfce:	400b      	ands	r3, r1
 800dfd0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	68da      	ldr	r2, [r3, #12]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dfe0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	f003 0320 	and.w	r3, r3, #32
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d111      	bne.n	800e014 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f000 f939 	bl	800e268 <HAL_RTC_WaitForSynchro>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d00b      	beq.n	800e014 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	22ff      	movs	r2, #255	; 0xff
 800e002:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2204      	movs	r2, #4
 800e008:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800e010:	2301      	movs	r3, #1
 800e012:	e00a      	b.n	800e02a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	22ff      	movs	r2, #255	; 0xff
 800e01a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2201      	movs	r2, #1
 800e020:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800e028:	2300      	movs	r3, #0
  }
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	371c      	adds	r7, #28
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd90      	pop	{r4, r7, pc}
 800e032:	bf00      	nop
 800e034:	00ffff3f 	.word	0x00ffff3f

0800e038 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800e038:	b590      	push	{r4, r7, lr}
 800e03a:	b089      	sub	sp, #36	; 0x24
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	60f8      	str	r0, [r7, #12]
 800e040:	60b9      	str	r1, [r7, #8]
 800e042:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800e044:	2300      	movs	r3, #0
 800e046:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800e048:	2300      	movs	r3, #0
 800e04a:	61fb      	str	r3, [r7, #28]
 800e04c:	2300      	movs	r3, #0
 800e04e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	7f1b      	ldrb	r3, [r3, #28]
 800e054:	2b01      	cmp	r3, #1
 800e056:	d101      	bne.n	800e05c <HAL_RTC_SetAlarm+0x24>
 800e058:	2302      	movs	r3, #2
 800e05a:	e101      	b.n	800e260 <HAL_RTC_SetAlarm+0x228>
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2201      	movs	r2, #1
 800e060:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2202      	movs	r2, #2
 800e066:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d137      	bne.n	800e0de <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d102      	bne.n	800e082 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	2200      	movs	r2, #0
 800e080:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	4618      	mov	r0, r3
 800e088:	f000 f942 	bl	800e310 <RTC_ByteToBcd2>
 800e08c:	4603      	mov	r3, r0
 800e08e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	785b      	ldrb	r3, [r3, #1]
 800e094:	4618      	mov	r0, r3
 800e096:	f000 f93b 	bl	800e310 <RTC_ByteToBcd2>
 800e09a:	4603      	mov	r3, r0
 800e09c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800e09e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	789b      	ldrb	r3, [r3, #2]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f000 f933 	bl	800e310 <RTC_ByteToBcd2>
 800e0aa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800e0ac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	7b1b      	ldrb	r3, [r3, #12]
 800e0b4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800e0b6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f000 f925 	bl	800e310 <RTC_ByteToBcd2>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e0ca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800e0d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	61fb      	str	r3, [r7, #28]
 800e0dc:	e023      	b.n	800e126 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d102      	bne.n	800e0f2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	785b      	ldrb	r3, [r3, #1]
 800e0fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800e0fe:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800e100:	68ba      	ldr	r2, [r7, #8]
 800e102:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800e104:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	7b1b      	ldrb	r3, [r3, #12]
 800e10a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800e10c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e114:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e116:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800e11c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800e122:	4313      	orrs	r3, r2
 800e124:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	685a      	ldr	r2, [r3, #4]
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	69db      	ldr	r3, [r3, #28]
 800e12e:	4313      	orrs	r3, r2
 800e130:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	22ca      	movs	r2, #202	; 0xca
 800e138:	625a      	str	r2, [r3, #36]	; 0x24
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2253      	movs	r2, #83	; 0x53
 800e140:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e14a:	d13f      	bne.n	800e1cc <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	689a      	ldr	r2, [r3, #8]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e15a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	689a      	ldr	r2, [r3, #8]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e16a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e16c:	f7f8 fc2e 	bl	80069cc <HAL_GetTick>
 800e170:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800e172:	e013      	b.n	800e19c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e174:	f7f8 fc2a 	bl	80069cc <HAL_GetTick>
 800e178:	4602      	mov	r2, r0
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e182:	d90b      	bls.n	800e19c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	22ff      	movs	r2, #255	; 0xff
 800e18a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2203      	movs	r2, #3
 800e190:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2200      	movs	r2, #0
 800e196:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e198:	2303      	movs	r3, #3
 800e19a:	e061      	b.n	800e260 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	f003 0301 	and.w	r3, r3, #1
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d0e4      	beq.n	800e174 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	69fa      	ldr	r2, [r7, #28]
 800e1b0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	697a      	ldr	r2, [r7, #20]
 800e1b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	689a      	ldr	r2, [r3, #8]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1c8:	609a      	str	r2, [r3, #8]
 800e1ca:	e03e      	b.n	800e24a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	689a      	ldr	r2, [r3, #8]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e1da:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	689a      	ldr	r2, [r3, #8]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e1ea:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e1ec:	f7f8 fbee 	bl	80069cc <HAL_GetTick>
 800e1f0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e1f2:	e013      	b.n	800e21c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e1f4:	f7f8 fbea 	bl	80069cc <HAL_GetTick>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	1ad3      	subs	r3, r2, r3
 800e1fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e202:	d90b      	bls.n	800e21c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	22ff      	movs	r2, #255	; 0xff
 800e20a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2203      	movs	r2, #3
 800e210:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2200      	movs	r2, #0
 800e216:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e218:	2303      	movs	r3, #3
 800e21a:	e021      	b.n	800e260 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	f003 0302 	and.w	r3, r3, #2
 800e226:	2b00      	cmp	r3, #0
 800e228:	d0e4      	beq.n	800e1f4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	69fa      	ldr	r2, [r7, #28]
 800e230:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	697a      	ldr	r2, [r7, #20]
 800e238:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	689a      	ldr	r2, [r3, #8]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e248:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	22ff      	movs	r2, #255	; 0xff
 800e250:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2201      	movs	r2, #1
 800e256:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3724      	adds	r7, #36	; 0x24
 800e264:	46bd      	mov	sp, r7
 800e266:	bd90      	pop	{r4, r7, pc}

0800e268 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e270:	2300      	movs	r3, #0
 800e272:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	68da      	ldr	r2, [r3, #12]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e282:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e284:	f7f8 fba2 	bl	80069cc <HAL_GetTick>
 800e288:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e28a:	e009      	b.n	800e2a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e28c:	f7f8 fb9e 	bl	80069cc <HAL_GetTick>
 800e290:	4602      	mov	r2, r0
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e29a:	d901      	bls.n	800e2a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800e29c:	2303      	movs	r3, #3
 800e29e:	e007      	b.n	800e2b0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	f003 0320 	and.w	r3, r3, #32
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d0ee      	beq.n	800e28c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3710      	adds	r7, #16
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d119      	bne.n	800e306 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e2dc:	f7f8 fb76 	bl	80069cc <HAL_GetTick>
 800e2e0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e2e2:	e009      	b.n	800e2f8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e2e4:	f7f8 fb72 	bl	80069cc <HAL_GetTick>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	1ad3      	subs	r3, r2, r3
 800e2ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e2f2:	d901      	bls.n	800e2f8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	e007      	b.n	800e308 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e302:	2b00      	cmp	r3, #0
 800e304:	d0ee      	beq.n	800e2e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	4603      	mov	r3, r0
 800e318:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800e31e:	e005      	b.n	800e32c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	3301      	adds	r3, #1
 800e324:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800e326:	79fb      	ldrb	r3, [r7, #7]
 800e328:	3b0a      	subs	r3, #10
 800e32a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800e32c:	79fb      	ldrb	r3, [r7, #7]
 800e32e:	2b09      	cmp	r3, #9
 800e330:	d8f6      	bhi.n	800e320 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	b2db      	uxtb	r3, r3
 800e336:	011b      	lsls	r3, r3, #4
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	79fb      	ldrb	r3, [r7, #7]
 800e33c:	4313      	orrs	r3, r2
 800e33e:	b2db      	uxtb	r3, r3
}
 800e340:	4618      	mov	r0, r3
 800e342:	3714      	adds	r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b087      	sub	sp, #28
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	7f1b      	ldrb	r3, [r3, #28]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d101      	bne.n	800e368 <HAL_RTCEx_SetTimeStamp+0x1c>
 800e364:	2302      	movs	r3, #2
 800e366:	e03e      	b.n	800e3e6 <HAL_RTCEx_SetTimeStamp+0x9a>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2201      	movs	r2, #1
 800e36c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2202      	movs	r2, #2
 800e372:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	689a      	ldr	r2, [r3, #8]
 800e37a:	4b1e      	ldr	r3, [pc, #120]	; (800e3f4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800e37c:	4013      	ands	r3, r2
 800e37e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800e380:	697a      	ldr	r2, [r7, #20]
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	4313      	orrs	r3, r2
 800e386:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	22ca      	movs	r2, #202	; 0xca
 800e38e:	625a      	str	r2, [r3, #36]	; 0x24
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2253      	movs	r2, #83	; 0x53
 800e396:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f022 0206 	bic.w	r2, r2, #6
 800e3a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	430a      	orrs	r2, r1
 800e3b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	689a      	ldr	r2, [r3, #8]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e3ce:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	22ff      	movs	r2, #255	; 0xff
 800e3d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	371c      	adds	r7, #28
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	fffff7f7 	.word	0xfffff7f7

0800e3f8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b088      	sub	sp, #32
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800e400:	2300      	movs	r3, #0
 800e402:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800e408:	2300      	movs	r3, #0
 800e40a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d101      	bne.n	800e416 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800e412:	2301      	movs	r3, #1
 800e414:	e156      	b.n	800e6c4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d106      	bne.n	800e430 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2200      	movs	r2, #0
 800e426:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7f5 fb5c 	bl	8003ae8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2202      	movs	r2, #2
 800e434:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 facf 	bl	800e9dc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	2b02      	cmp	r3, #2
 800e444:	d00c      	beq.n	800e460 <HAL_SAI_Init+0x68>
 800e446:	2b02      	cmp	r3, #2
 800e448:	d80d      	bhi.n	800e466 <HAL_SAI_Init+0x6e>
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d002      	beq.n	800e454 <HAL_SAI_Init+0x5c>
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d003      	beq.n	800e45a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800e452:	e008      	b.n	800e466 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800e454:	2300      	movs	r3, #0
 800e456:	61fb      	str	r3, [r7, #28]
      break;
 800e458:	e006      	b.n	800e468 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e45a:	2310      	movs	r3, #16
 800e45c:	61fb      	str	r3, [r7, #28]
      break;
 800e45e:	e003      	b.n	800e468 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e460:	2320      	movs	r3, #32
 800e462:	61fb      	str	r3, [r7, #28]
      break;
 800e464:	e000      	b.n	800e468 <HAL_SAI_Init+0x70>
      break;
 800e466:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	689b      	ldr	r3, [r3, #8]
 800e46c:	2b03      	cmp	r3, #3
 800e46e:	d81e      	bhi.n	800e4ae <HAL_SAI_Init+0xb6>
 800e470:	a201      	add	r2, pc, #4	; (adr r2, 800e478 <HAL_SAI_Init+0x80>)
 800e472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e476:	bf00      	nop
 800e478:	0800e489 	.word	0x0800e489
 800e47c:	0800e48f 	.word	0x0800e48f
 800e480:	0800e497 	.word	0x0800e497
 800e484:	0800e49f 	.word	0x0800e49f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800e488:	2300      	movs	r3, #0
 800e48a:	617b      	str	r3, [r7, #20]
    }
    break;
 800e48c:	e010      	b.n	800e4b0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e48e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e492:	617b      	str	r3, [r7, #20]
    }
    break;
 800e494:	e00c      	b.n	800e4b0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e49a:	617b      	str	r3, [r7, #20]
    }
    break;
 800e49c:	e008      	b.n	800e4b0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e49e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4a2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	f043 0301 	orr.w	r3, r3, #1
 800e4aa:	61fb      	str	r3, [r7, #28]
    }
    break;
 800e4ac:	e000      	b.n	800e4b0 <HAL_SAI_Init+0xb8>
    default:
      break;
 800e4ae:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a85      	ldr	r2, [pc, #532]	; (800e6cc <HAL_SAI_Init+0x2d4>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d004      	beq.n	800e4c4 <HAL_SAI_Init+0xcc>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4a84      	ldr	r2, [pc, #528]	; (800e6d0 <HAL_SAI_Init+0x2d8>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d103      	bne.n	800e4cc <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800e4c4:	4a83      	ldr	r2, [pc, #524]	; (800e6d4 <HAL_SAI_Init+0x2dc>)
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	6013      	str	r3, [r2, #0]
 800e4ca:	e002      	b.n	800e4d2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e4cc:	4a82      	ldr	r2, [pc, #520]	; (800e6d8 <HAL_SAI_Init+0x2e0>)
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	69db      	ldr	r3, [r3, #28]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d04c      	beq.n	800e574 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4a7a      	ldr	r2, [pc, #488]	; (800e6cc <HAL_SAI_Init+0x2d4>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d004      	beq.n	800e4f2 <HAL_SAI_Init+0xfa>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a78      	ldr	r2, [pc, #480]	; (800e6d0 <HAL_SAI_Init+0x2d8>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d104      	bne.n	800e4fc <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e4f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e4f6:	f7ff fa63 	bl	800d9c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e4fa:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a76      	ldr	r2, [pc, #472]	; (800e6dc <HAL_SAI_Init+0x2e4>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d004      	beq.n	800e510 <HAL_SAI_Init+0x118>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a75      	ldr	r2, [pc, #468]	; (800e6e0 <HAL_SAI_Init+0x2e8>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d104      	bne.n	800e51a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e510:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e514:	f7ff fa54 	bl	800d9c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e518:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800e51a:	693a      	ldr	r2, [r7, #16]
 800e51c:	4613      	mov	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	4413      	add	r3, r2
 800e522:	005b      	lsls	r3, r3, #1
 800e524:	461a      	mov	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	69db      	ldr	r3, [r3, #28]
 800e52a:	025b      	lsls	r3, r3, #9
 800e52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e530:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	4a6b      	ldr	r2, [pc, #428]	; (800e6e4 <HAL_SAI_Init+0x2ec>)
 800e536:	fba2 2303 	umull	r2, r3, r2, r3
 800e53a:	08da      	lsrs	r2, r3, #3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800e540:	68f9      	ldr	r1, [r7, #12]
 800e542:	4b68      	ldr	r3, [pc, #416]	; (800e6e4 <HAL_SAI_Init+0x2ec>)
 800e544:	fba3 2301 	umull	r2, r3, r3, r1
 800e548:	08da      	lsrs	r2, r3, #3
 800e54a:	4613      	mov	r3, r2
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	4413      	add	r3, r2
 800e550:	005b      	lsls	r3, r3, #1
 800e552:	1aca      	subs	r2, r1, r3
 800e554:	2a08      	cmp	r2, #8
 800e556:	d904      	bls.n	800e562 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6a1b      	ldr	r3, [r3, #32]
 800e55c:	1c5a      	adds	r2, r3, #1
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e566:	2b04      	cmp	r3, #4
 800e568:	d104      	bne.n	800e574 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
 800e56e:	085a      	lsrs	r2, r3, #1
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d003      	beq.n	800e584 <HAL_SAI_Init+0x18c>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	2b02      	cmp	r3, #2
 800e582:	d109      	bne.n	800e598 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d101      	bne.n	800e590 <HAL_SAI_Init+0x198>
 800e58c:	2300      	movs	r3, #0
 800e58e:	e001      	b.n	800e594 <HAL_SAI_Init+0x19c>
 800e590:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e594:	61bb      	str	r3, [r7, #24]
 800e596:	e008      	b.n	800e5aa <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d102      	bne.n	800e5a6 <HAL_SAI_Init+0x1ae>
 800e5a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5a4:	e000      	b.n	800e5a8 <HAL_SAI_Init+0x1b0>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	6819      	ldr	r1, [r3, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	4b4c      	ldr	r3, [pc, #304]	; (800e6e8 <HAL_SAI_Init+0x2f0>)
 800e5b6:	400b      	ands	r3, r1
 800e5b8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	6819      	ldr	r1, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5c8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e5ce:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d4:	431a      	orrs	r2, r3
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800e5e2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	691b      	ldr	r3, [r3, #16]
 800e5e8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e5ee:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6a1b      	ldr	r3, [r3, #32]
 800e5f4:	051b      	lsls	r3, r3, #20
 800e5f6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	430a      	orrs	r2, r1
 800e5fe:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6859      	ldr	r1, [r3, #4]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	4b38      	ldr	r3, [pc, #224]	; (800e6ec <HAL_SAI_Init+0x2f4>)
 800e60c:	400b      	ands	r3, r1
 800e60e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6859      	ldr	r1, [r3, #4]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	699a      	ldr	r2, [r3, #24]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e61e:	431a      	orrs	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e624:	431a      	orrs	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	430a      	orrs	r2, r1
 800e62c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	6899      	ldr	r1, [r3, #8]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	4b2d      	ldr	r3, [pc, #180]	; (800e6f0 <HAL_SAI_Init+0x2f8>)
 800e63a:	400b      	ands	r3, r1
 800e63c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	6899      	ldr	r1, [r3, #8]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e648:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800e64e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800e654:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800e65a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e660:	3b01      	subs	r3, #1
 800e662:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e664:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	430a      	orrs	r2, r1
 800e66c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	68d9      	ldr	r1, [r3, #12]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	f24f 0320 	movw	r3, #61472	; 0xf020
 800e67c:	400b      	ands	r3, r1
 800e67e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	68d9      	ldr	r1, [r3, #12]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e68e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e694:	041b      	lsls	r3, r3, #16
 800e696:	431a      	orrs	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e69c:	3b01      	subs	r3, #1
 800e69e:	021b      	lsls	r3, r3, #8
 800e6a0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	430a      	orrs	r2, r1
 800e6a8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e6c2:	2300      	movs	r3, #0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3720      	adds	r7, #32
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	40015804 	.word	0x40015804
 800e6d0:	40015824 	.word	0x40015824
 800e6d4:	40015800 	.word	0x40015800
 800e6d8:	40015c00 	.word	0x40015c00
 800e6dc:	40015c04 	.word	0x40015c04
 800e6e0:	40015c24 	.word	0x40015c24
 800e6e4:	cccccccd 	.word	0xcccccccd
 800e6e8:	ff05c010 	.word	0xff05c010
 800e6ec:	ffff1ff0 	.word	0xffff1ff0
 800e6f0:	fff88000 	.word	0xfff88000

0800e6f4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	4613      	mov	r3, r2
 800e700:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800e702:	f7f8 f963 	bl	80069cc <HAL_GetTick>
 800e706:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d002      	beq.n	800e714 <HAL_SAI_Transmit_DMA+0x20>
 800e70e:	88fb      	ldrh	r3, [r7, #6]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d101      	bne.n	800e718 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800e714:	2301      	movs	r3, #1
 800e716:	e093      	b.n	800e840 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	2b01      	cmp	r3, #1
 800e722:	f040 808c 	bne.w	800e83e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d101      	bne.n	800e734 <HAL_SAI_Transmit_DMA+0x40>
 800e730:	2302      	movs	r3, #2
 800e732:	e085      	b.n	800e840 <HAL_SAI_Transmit_DMA+0x14c>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	88fa      	ldrh	r2, [r7, #6]
 800e746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	88fa      	ldrh	r2, [r7, #6]
 800e74e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2212      	movs	r2, #18
 800e75e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e766:	4a38      	ldr	r2, [pc, #224]	; (800e848 <HAL_SAI_Transmit_DMA+0x154>)
 800e768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e76e:	4a37      	ldr	r2, [pc, #220]	; (800e84c <HAL_SAI_Transmit_DMA+0x158>)
 800e770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e776:	4a36      	ldr	r2, [pc, #216]	; (800e850 <HAL_SAI_Transmit_DMA+0x15c>)
 800e778:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e77e:	2200      	movs	r2, #0
 800e780:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e78a:	4619      	mov	r1, r3
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	331c      	adds	r3, #28
 800e792:	461a      	mov	r2, r3
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e79a:	f7f9 f841 	bl	8007820 <HAL_DMA_Start_IT>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d005      	beq.n	800e7b0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	e047      	b.n	800e840 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f000 f8dc 	bl	800e970 <SAI_InterruptFlag>
 800e7b8:	4601      	mov	r1, r0
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	691a      	ldr	r2, [r3, #16]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	430a      	orrs	r2, r1
 800e7c6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e7d6:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e7d8:	e015      	b.n	800e806 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e7da:	f7f8 f8f7 	bl	80069cc <HAL_GetTick>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	1ad3      	subs	r3, r2, r3
 800e7e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7e8:	d90d      	bls.n	800e806 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e802:	2303      	movs	r3, #3
 800e804:	e01c      	b.n	800e840 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d0e2      	beq.n	800e7da <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d107      	bne.n	800e832 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e830:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e83a:	2300      	movs	r3, #0
 800e83c:	e000      	b.n	800e840 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800e83e:	2302      	movs	r3, #2
  }
}
 800e840:	4618      	mov	r0, r3
 800e842:	3718      	adds	r7, #24
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	0800eaad 	.word	0x0800eaad
 800e84c:	0800ea4d 	.word	0x0800ea4d
 800e850:	0800eb45 	.word	0x0800eb45

0800e854 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	4613      	mov	r3, r2
 800e860:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d002      	beq.n	800e86e <HAL_SAI_Receive_DMA+0x1a>
 800e868:	88fb      	ldrh	r3, [r7, #6]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d101      	bne.n	800e872 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e86e:	2301      	movs	r3, #1
 800e870:	e074      	b.n	800e95c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d16d      	bne.n	800e95a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e884:	2b01      	cmp	r3, #1
 800e886:	d101      	bne.n	800e88c <HAL_SAI_Receive_DMA+0x38>
 800e888:	2302      	movs	r3, #2
 800e88a:	e067      	b.n	800e95c <HAL_SAI_Receive_DMA+0x108>
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2201      	movs	r2, #1
 800e890:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	88fa      	ldrh	r2, [r7, #6]
 800e89e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	88fa      	ldrh	r2, [r7, #6]
 800e8a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2222      	movs	r2, #34	; 0x22
 800e8b6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8be:	4a29      	ldr	r2, [pc, #164]	; (800e964 <HAL_SAI_Receive_DMA+0x110>)
 800e8c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8c6:	4a28      	ldr	r2, [pc, #160]	; (800e968 <HAL_SAI_Receive_DMA+0x114>)
 800e8c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8ce:	4a27      	ldr	r2, [pc, #156]	; (800e96c <HAL_SAI_Receive_DMA+0x118>)
 800e8d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	331c      	adds	r3, #28
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e8f2:	f7f8 ff95 	bl	8007820 <HAL_DMA_Start_IT>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d005      	beq.n	800e908 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800e904:	2301      	movs	r3, #1
 800e906:	e029      	b.n	800e95c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e908:	2100      	movs	r1, #0
 800e90a:	68f8      	ldr	r0, [r7, #12]
 800e90c:	f000 f830 	bl	800e970 <SAI_InterruptFlag>
 800e910:	4601      	mov	r1, r0
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	691a      	ldr	r2, [r3, #16]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	430a      	orrs	r2, r1
 800e91e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e92e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d107      	bne.n	800e94e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e94c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	e000      	b.n	800e95c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800e95a:	2302      	movs	r3, #2
  }
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	0800eb29 	.word	0x0800eb29
 800e968:	0800eac9 	.word	0x0800eac9
 800e96c:	0800eb45 	.word	0x0800eb45

0800e970 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800e970:	b480      	push	{r7}
 800e972:	b085      	sub	sp, #20
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e97a:	2301      	movs	r3, #1
 800e97c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2b01      	cmp	r3, #1
 800e982:	d103      	bne.n	800e98c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f043 0308 	orr.w	r3, r3, #8
 800e98a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e990:	2b08      	cmp	r3, #8
 800e992:	d10b      	bne.n	800e9ac <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e998:	2b03      	cmp	r3, #3
 800e99a:	d003      	beq.n	800e9a4 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d103      	bne.n	800e9ac <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f043 0310 	orr.w	r3, r3, #16
 800e9aa:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	2b03      	cmp	r3, #3
 800e9b2:	d003      	beq.n	800e9bc <SAI_InterruptFlag+0x4c>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	2b02      	cmp	r3, #2
 800e9ba:	d104      	bne.n	800e9c6 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e9c2:	60fb      	str	r3, [r7, #12]
 800e9c4:	e003      	b.n	800e9ce <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f043 0304 	orr.w	r3, r3, #4
 800e9cc:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3714      	adds	r7, #20
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800e9e4:	4b17      	ldr	r3, [pc, #92]	; (800ea44 <SAI_Disable+0x68>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a17      	ldr	r2, [pc, #92]	; (800ea48 <SAI_Disable+0x6c>)
 800e9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e9ee:	0b1b      	lsrs	r3, r3, #12
 800e9f0:	009b      	lsls	r3, r3, #2
 800e9f2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ea06:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	1e5a      	subs	r2, r3, #1
 800ea0c:	60fa      	str	r2, [r7, #12]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10a      	bne.n	800ea28 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800ea22:	2303      	movs	r3, #3
 800ea24:	72fb      	strb	r3, [r7, #11]
      break;
 800ea26:	e006      	b.n	800ea36 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1e8      	bne.n	800ea08 <SAI_Disable+0x2c>

  return status;
 800ea36:	7afb      	ldrb	r3, [r7, #11]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3714      	adds	r7, #20
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr
 800ea44:	20000008 	.word	0x20000008
 800ea48:	95cbec1b 	.word	0x95cbec1b

0800ea4c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea58:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	69db      	ldr	r3, [r3, #28]
 800ea5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea62:	d01c      	beq.n	800ea9e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2200      	movs	r2, #0
 800ea68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ea7a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ea7c:	2100      	movs	r1, #0
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	f7ff ff76 	bl	800e970 <SAI_InterruptFlag>
 800ea84:	4603      	mov	r3, r0
 800ea86:	43d9      	mvns	r1, r3
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	691a      	ldr	r2, [r3, #16]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	400a      	ands	r2, r1
 800ea94:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f7f6 fa56 	bl	8004f50 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eaa4:	bf00      	nop
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f7f6 fa52 	bl	8004f64 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eac0:	bf00      	nop
 800eac2:	3710      	adds	r7, #16
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	69db      	ldr	r3, [r3, #28]
 800eada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eade:	d01c      	beq.n	800eb1a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800eaee:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800eaf8:	2100      	movs	r1, #0
 800eafa:	68f8      	ldr	r0, [r7, #12]
 800eafc:	f7ff ff38 	bl	800e970 <SAI_InterruptFlag>
 800eb00:	4603      	mov	r3, r0
 800eb02:	43d9      	mvns	r1, r3
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	691a      	ldr	r2, [r3, #16]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	400a      	ands	r2, r1
 800eb10:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2201      	movs	r2, #1
 800eb16:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f7f2 fab0 	bl	8001080 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eb20:	bf00      	nop
 800eb22:	3710      	adds	r7, #16
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb34:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f7f2 fab2 	bl	80010a0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eb3c:	bf00      	nop
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb50:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d004      	beq.n	800eb76 <SAI_DMAError+0x32>
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d112      	bne.n	800eb9c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800eb84:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f7ff ff28 	bl	800e9dc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f7f6 f9eb 	bl	8004f78 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eba2:	bf00      	nop
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b082      	sub	sp, #8
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d101      	bne.n	800ebbc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e022      	b.n	800ec02 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d105      	bne.n	800ebd4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7f4 fc52 	bl	8003478 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2203      	movs	r2, #3
 800ebd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 f815 	bl	800ec0c <HAL_SD_InitCard>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d001      	beq.n	800ebec <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ebe8:	2301      	movs	r3, #1
 800ebea:	e00a      	b.n	800ec02 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
	...

0800ec0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ec0c:	b5b0      	push	{r4, r5, r7, lr}
 800ec0e:	b08e      	sub	sp, #56	; 0x38
 800ec10:	af04      	add	r7, sp, #16
 800ec12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ec14:	2300      	movs	r3, #0
 800ec16:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ec20:	2300      	movs	r3, #0
 800ec22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ec24:	2300      	movs	r3, #0
 800ec26:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800ec28:	2376      	movs	r3, #118	; 0x76
 800ec2a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681d      	ldr	r5, [r3, #0]
 800ec30:	466c      	mov	r4, sp
 800ec32:	f107 0314 	add.w	r3, r7, #20
 800ec36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ec3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ec3e:	f107 0308 	add.w	r3, r7, #8
 800ec42:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ec44:	4628      	mov	r0, r5
 800ec46:	f002 ffef 	bl	8011c28 <SDMMC_Init>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ec50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d001      	beq.n	800ec5c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e056      	b.n	800ed0a <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	685a      	ldr	r2, [r3, #4]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ec6a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f003 f812 	bl	8011c9a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	685a      	ldr	r2, [r3, #4]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec84:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fe0e 	bl	800f8a8 <SD_PowerON>
 800ec8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec8e:	6a3b      	ldr	r3, [r7, #32]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00b      	beq.n	800ecac <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2201      	movs	r2, #1
 800ec98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eca0:	6a3b      	ldr	r3, [r7, #32]
 800eca2:	431a      	orrs	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e02e      	b.n	800ed0a <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 fd2f 	bl	800f710 <SD_InitCard>
 800ecb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00b      	beq.n	800ecd2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecc6:	6a3b      	ldr	r3, [r7, #32]
 800ecc8:	431a      	orrs	r2, r3
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e01b      	b.n	800ed0a <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f003 f870 	bl	8011dc0 <SDMMC_CmdBlockLength>
 800ece0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ece2:	6a3b      	ldr	r3, [r7, #32]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00f      	beq.n	800ed08 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a09      	ldr	r2, [pc, #36]	; (800ed14 <HAL_SD_InitCard+0x108>)
 800ecee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecf4:	6a3b      	ldr	r3, [r7, #32]
 800ecf6:	431a      	orrs	r2, r3
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ed04:	2301      	movs	r3, #1
 800ed06:	e000      	b.n	800ed0a <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800ed08:	2300      	movs	r3, #0
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3728      	adds	r7, #40	; 0x28
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bdb0      	pop	{r4, r5, r7, pc}
 800ed12:	bf00      	nop
 800ed14:	004005ff 	.word	0x004005ff

0800ed18 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b08c      	sub	sp, #48	; 0x30
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
 800ed24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d107      	bne.n	800ed40 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e0c3      	b.n	800eec8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	f040 80bc 	bne.w	800eec6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2200      	movs	r2, #0
 800ed52:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ed54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	441a      	add	r2, r3
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d907      	bls.n	800ed72 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e0aa      	b.n	800eec8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2203      	movs	r2, #3
 800ed76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ed90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed96:	4a4e      	ldr	r2, [pc, #312]	; (800eed0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800ed98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed9e:	4a4d      	ldr	r2, [pc, #308]	; (800eed4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800eda0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eda6:	2200      	movs	r2, #0
 800eda8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edae:	2200      	movs	r2, #0
 800edb0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edc2:	689a      	ldr	r2, [r3, #8]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	430a      	orrs	r2, r1
 800edcc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	3380      	adds	r3, #128	; 0x80
 800edd8:	4619      	mov	r1, r3
 800edda:	68ba      	ldr	r2, [r7, #8]
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	025b      	lsls	r3, r3, #9
 800ede0:	089b      	lsrs	r3, r3, #2
 800ede2:	f7f8 fd1d 	bl	8007820 <HAL_DMA_Start_IT>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d017      	beq.n	800ee1c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800edfa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a35      	ldr	r2, [pc, #212]	; (800eed8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ee02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2201      	movs	r2, #1
 800ee14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e055      	b.n	800eec8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f042 0208 	orr.w	r2, r2, #8
 800ee2a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d002      	beq.n	800ee3a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800ee34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee36:	025b      	lsls	r3, r3, #9
 800ee38:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ee3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee3e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	025b      	lsls	r3, r3, #9
 800ee44:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ee46:	2390      	movs	r3, #144	; 0x90
 800ee48:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ee4a:	2302      	movs	r3, #2
 800ee4c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800ee52:	2301      	movs	r3, #1
 800ee54:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f107 0210 	add.w	r2, r7, #16
 800ee5e:	4611      	mov	r1, r2
 800ee60:	4618      	mov	r0, r3
 800ee62:	f002 ff81 	bl	8011d68 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d90a      	bls.n	800ee82 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2282      	movs	r2, #130	; 0x82
 800ee70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f002 ffe5 	bl	8011e48 <SDMMC_CmdReadMultiBlock>
 800ee7e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ee80:	e009      	b.n	800ee96 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2281      	movs	r2, #129	; 0x81
 800ee86:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f002 ffb8 	bl	8011e04 <SDMMC_CmdReadSingleBlock>
 800ee94:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ee96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d012      	beq.n	800eec2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a0d      	ldr	r2, [pc, #52]	; (800eed8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800eea2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeaa:	431a      	orrs	r2, r3
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	2200      	movs	r2, #0
 800eebc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800eebe:	2301      	movs	r3, #1
 800eec0:	e002      	b.n	800eec8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	e000      	b.n	800eec8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800eec6:	2302      	movs	r3, #2
  }
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3730      	adds	r7, #48	; 0x30
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	0800f5fb 	.word	0x0800f5fb
 800eed4:	0800f66d 	.word	0x0800f66d
 800eed8:	004005ff 	.word	0x004005ff

0800eedc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08c      	sub	sp, #48	; 0x30
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
 800eee8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d107      	bne.n	800ef04 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eef8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ef00:	2301      	movs	r3, #1
 800ef02:	e0c6      	b.n	800f092 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	f040 80bf 	bne.w	800f090 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2200      	movs	r2, #0
 800ef16:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ef18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	441a      	add	r2, r3
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d907      	bls.n	800ef36 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ef32:	2301      	movs	r3, #1
 800ef34:	e0ad      	b.n	800f092 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2203      	movs	r2, #3
 800ef3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2200      	movs	r2, #0
 800ef44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f042 021a 	orr.w	r2, r2, #26
 800ef54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef5a:	4a50      	ldr	r2, [pc, #320]	; (800f09c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800ef5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef62:	4a4f      	ldr	r2, [pc, #316]	; (800f0a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800ef64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d002      	beq.n	800ef7c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ef76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef78:	025b      	lsls	r3, r3, #9
 800ef7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d90a      	bls.n	800ef98 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	22a0      	movs	r2, #160	; 0xa0
 800ef86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f002 ff9e 	bl	8011ed0 <SDMMC_CmdWriteMultiBlock>
 800ef94:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ef96:	e009      	b.n	800efac <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2290      	movs	r2, #144	; 0x90
 800ef9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800efa4:	4618      	mov	r0, r3
 800efa6:	f002 ff71 	bl	8011e8c <SDMMC_CmdWriteSingleBlock>
 800efaa:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d012      	beq.n	800efd8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a3b      	ldr	r2, [pc, #236]	; (800f0a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800efb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc0:	431a      	orrs	r2, r3
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2201      	movs	r2, #1
 800efca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2200      	movs	r2, #0
 800efd2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800efd4:	2301      	movs	r3, #1
 800efd6:	e05c      	b.n	800f092 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f042 0208 	orr.w	r2, r2, #8
 800efe6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efec:	2240      	movs	r2, #64	; 0x40
 800efee:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f000:	689a      	ldr	r2, [r3, #8]
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	430a      	orrs	r2, r1
 800f00a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f010:	68b9      	ldr	r1, [r7, #8]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	3380      	adds	r3, #128	; 0x80
 800f018:	461a      	mov	r2, r3
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	025b      	lsls	r3, r3, #9
 800f01e:	089b      	lsrs	r3, r3, #2
 800f020:	f7f8 fbfe 	bl	8007820 <HAL_DMA_Start_IT>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d01a      	beq.n	800f060 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f022 021a 	bic.w	r2, r2, #26
 800f038:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4a19      	ldr	r2, [pc, #100]	; (800f0a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f040:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f046:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2201      	movs	r2, #1
 800f052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2200      	movs	r2, #0
 800f05a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f05c:	2301      	movs	r3, #1
 800f05e:	e018      	b.n	800f092 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f064:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	025b      	lsls	r3, r3, #9
 800f06a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f06c:	2390      	movs	r3, #144	; 0x90
 800f06e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f070:	2300      	movs	r3, #0
 800f072:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f074:	2300      	movs	r3, #0
 800f076:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f078:	2301      	movs	r3, #1
 800f07a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f107 0210 	add.w	r2, r7, #16
 800f084:	4611      	mov	r1, r2
 800f086:	4618      	mov	r0, r3
 800f088:	f002 fe6e 	bl	8011d68 <SDMMC_ConfigData>

      return HAL_OK;
 800f08c:	2300      	movs	r3, #0
 800f08e:	e000      	b.n	800f092 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800f090:	2302      	movs	r3, #2
  }
}
 800f092:	4618      	mov	r0, r3
 800f094:	3730      	adds	r7, #48	; 0x30
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	0800f5d1 	.word	0x0800f5d1
 800f0a0:	0800f66d 	.word	0x0800f66d
 800f0a4:	004005ff 	.word	0x004005ff

0800f0a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800f0b0:	bf00      	nop
 800f0b2:	370c      	adds	r7, #12
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0ca:	0f9b      	lsrs	r3, r3, #30
 800f0cc:	b2da      	uxtb	r2, r3
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0d6:	0e9b      	lsrs	r3, r3, #26
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	f003 030f 	and.w	r3, r3, #15
 800f0de:	b2da      	uxtb	r2, r3
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0e8:	0e1b      	lsrs	r3, r3, #24
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	f003 0303 	and.w	r3, r3, #3
 800f0f0:	b2da      	uxtb	r2, r3
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0fa:	0c1b      	lsrs	r3, r3, #16
 800f0fc:	b2da      	uxtb	r2, r3
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f106:	0a1b      	lsrs	r3, r3, #8
 800f108:	b2da      	uxtb	r2, r3
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f112:	b2da      	uxtb	r2, r3
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f11c:	0d1b      	lsrs	r3, r3, #20
 800f11e:	b29a      	uxth	r2, r3
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f128:	0c1b      	lsrs	r3, r3, #16
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	f003 030f 	and.w	r3, r3, #15
 800f130:	b2da      	uxtb	r2, r3
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f13a:	0bdb      	lsrs	r3, r3, #15
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	f003 0301 	and.w	r3, r3, #1
 800f142:	b2da      	uxtb	r2, r3
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f14c:	0b9b      	lsrs	r3, r3, #14
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	f003 0301 	and.w	r3, r3, #1
 800f154:	b2da      	uxtb	r2, r3
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f15e:	0b5b      	lsrs	r3, r3, #13
 800f160:	b2db      	uxtb	r3, r3
 800f162:	f003 0301 	and.w	r3, r3, #1
 800f166:	b2da      	uxtb	r2, r3
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f170:	0b1b      	lsrs	r3, r3, #12
 800f172:	b2db      	uxtb	r3, r3
 800f174:	f003 0301 	and.w	r3, r3, #1
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	2200      	movs	r2, #0
 800f182:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d163      	bne.n	800f254 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f190:	009a      	lsls	r2, r3, #2
 800f192:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f196:	4013      	ands	r3, r2
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800f19c:	0f92      	lsrs	r2, r2, #30
 800f19e:	431a      	orrs	r2, r3
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1a8:	0edb      	lsrs	r3, r3, #27
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	f003 0307 	and.w	r3, r3, #7
 800f1b0:	b2da      	uxtb	r2, r3
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1ba:	0e1b      	lsrs	r3, r3, #24
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	f003 0307 	and.w	r3, r3, #7
 800f1c2:	b2da      	uxtb	r2, r3
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1cc:	0d5b      	lsrs	r3, r3, #21
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	f003 0307 	and.w	r3, r3, #7
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1de:	0c9b      	lsrs	r3, r3, #18
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	f003 0307 	and.w	r3, r3, #7
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1f0:	0bdb      	lsrs	r3, r3, #15
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	f003 0307 	and.w	r3, r3, #7
 800f1f8:	b2da      	uxtb	r2, r3
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	1c5a      	adds	r2, r3, #1
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	7e1b      	ldrb	r3, [r3, #24]
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	f003 0307 	and.w	r3, r3, #7
 800f212:	3302      	adds	r3, #2
 800f214:	2201      	movs	r2, #1
 800f216:	fa02 f303 	lsl.w	r3, r2, r3
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f21e:	fb02 f203 	mul.w	r2, r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	7a1b      	ldrb	r3, [r3, #8]
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	f003 030f 	and.w	r3, r3, #15
 800f230:	2201      	movs	r2, #1
 800f232:	409a      	lsls	r2, r3
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800f240:	0a52      	lsrs	r2, r2, #9
 800f242:	fb02 f203 	mul.w	r2, r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f250:	661a      	str	r2, [r3, #96]	; 0x60
 800f252:	e031      	b.n	800f2b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d11d      	bne.n	800f298 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f260:	041b      	lsls	r3, r3, #16
 800f262:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f26a:	0c1b      	lsrs	r3, r3, #16
 800f26c:	431a      	orrs	r2, r3
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	3301      	adds	r3, #1
 800f278:	029a      	lsls	r2, r3, #10
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f28c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	661a      	str	r2, [r3, #96]	; 0x60
 800f296:	e00f      	b.n	800f2b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4a58      	ldr	r2, [pc, #352]	; (800f400 <HAL_SD_GetCardCSD+0x344>)
 800f29e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	e09d      	b.n	800f3f4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2bc:	0b9b      	lsrs	r3, r3, #14
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	f003 0301 	and.w	r3, r3, #1
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2ce:	09db      	lsrs	r3, r3, #7
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2d6:	b2da      	uxtb	r2, r3
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2e6:	b2da      	uxtb	r2, r3
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2f0:	0fdb      	lsrs	r3, r3, #31
 800f2f2:	b2da      	uxtb	r2, r3
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2fc:	0f5b      	lsrs	r3, r3, #29
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	f003 0303 	and.w	r3, r3, #3
 800f304:	b2da      	uxtb	r2, r3
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f30e:	0e9b      	lsrs	r3, r3, #26
 800f310:	b2db      	uxtb	r3, r3
 800f312:	f003 0307 	and.w	r3, r3, #7
 800f316:	b2da      	uxtb	r2, r3
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f320:	0d9b      	lsrs	r3, r3, #22
 800f322:	b2db      	uxtb	r3, r3
 800f324:	f003 030f 	and.w	r3, r3, #15
 800f328:	b2da      	uxtb	r2, r3
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f332:	0d5b      	lsrs	r3, r3, #21
 800f334:	b2db      	uxtb	r3, r3
 800f336:	f003 0301 	and.w	r3, r3, #1
 800f33a:	b2da      	uxtb	r2, r3
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	2200      	movs	r2, #0
 800f346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f34e:	0c1b      	lsrs	r3, r3, #16
 800f350:	b2db      	uxtb	r3, r3
 800f352:	f003 0301 	and.w	r3, r3, #1
 800f356:	b2da      	uxtb	r2, r3
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f362:	0bdb      	lsrs	r3, r3, #15
 800f364:	b2db      	uxtb	r3, r3
 800f366:	f003 0301 	and.w	r3, r3, #1
 800f36a:	b2da      	uxtb	r2, r3
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f376:	0b9b      	lsrs	r3, r3, #14
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	f003 0301 	and.w	r3, r3, #1
 800f37e:	b2da      	uxtb	r2, r3
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f38a:	0b5b      	lsrs	r3, r3, #13
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	f003 0301 	and.w	r3, r3, #1
 800f392:	b2da      	uxtb	r2, r3
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f39e:	0b1b      	lsrs	r3, r3, #12
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	f003 0301 	and.w	r3, r3, #1
 800f3a6:	b2da      	uxtb	r2, r3
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3b2:	0a9b      	lsrs	r3, r3, #10
 800f3b4:	b2db      	uxtb	r3, r3
 800f3b6:	f003 0303 	and.w	r3, r3, #3
 800f3ba:	b2da      	uxtb	r2, r3
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3c6:	0a1b      	lsrs	r3, r3, #8
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	f003 0303 	and.w	r3, r3, #3
 800f3ce:	b2da      	uxtb	r2, r3
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3da:	085b      	lsrs	r3, r3, #1
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3e2:	b2da      	uxtb	r2, r3
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f3f2:	2300      	movs	r3, #0
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr
 800f400:	004005ff 	.word	0x004005ff

0800f404 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f44e:	2300      	movs	r3, #0
}
 800f450:	4618      	mov	r0, r3
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f45c:	b5b0      	push	{r4, r5, r7, lr}
 800f45e:	b08e      	sub	sp, #56	; 0x38
 800f460:	af04      	add	r7, sp, #16
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800f466:	2300      	movs	r3, #0
 800f468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2203      	movs	r2, #3
 800f470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f478:	2b03      	cmp	r3, #3
 800f47a:	d02e      	beq.n	800f4da <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f482:	d106      	bne.n	800f492 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	639a      	str	r2, [r3, #56]	; 0x38
 800f490:	e029      	b.n	800f4e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f498:	d10a      	bne.n	800f4b0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f000 faba 	bl	800fa14 <SD_WideBus_Enable>
 800f4a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4a6:	6a3b      	ldr	r3, [r7, #32]
 800f4a8:	431a      	orrs	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	639a      	str	r2, [r3, #56]	; 0x38
 800f4ae:	e01a      	b.n	800f4e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d10a      	bne.n	800f4cc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 faf7 	bl	800faaa <SD_WideBus_Disable>
 800f4bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	431a      	orrs	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	639a      	str	r2, [r3, #56]	; 0x38
 800f4ca:	e00c      	b.n	800f4e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	639a      	str	r2, [r3, #56]	; 0x38
 800f4d8:	e005      	b.n	800f4e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00b      	beq.n	800f506 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4a26      	ldr	r2, [pc, #152]	; (800f58c <HAL_SD_ConfigWideBusOperation+0x130>)
 800f4f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800f4fe:	2301      	movs	r3, #1
 800f500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f504:	e01f      	b.n	800f546 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	689b      	ldr	r3, [r3, #8]
 800f510:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	695b      	ldr	r3, [r3, #20]
 800f520:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	699b      	ldr	r3, [r3, #24]
 800f526:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681d      	ldr	r5, [r3, #0]
 800f52c:	466c      	mov	r4, sp
 800f52e:	f107 0314 	add.w	r3, r7, #20
 800f532:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f53a:	f107 0308 	add.w	r3, r7, #8
 800f53e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f540:	4628      	mov	r0, r5
 800f542:	f002 fb71 	bl	8011c28 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f54e:	4618      	mov	r0, r3
 800f550:	f002 fc36 	bl	8011dc0 <SDMMC_CmdBlockLength>
 800f554:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f556:	6a3b      	ldr	r3, [r7, #32]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d00c      	beq.n	800f576 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4a0a      	ldr	r2, [pc, #40]	; (800f58c <HAL_SD_ConfigWideBusOperation+0x130>)
 800f562:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f568:	6a3b      	ldr	r3, [r7, #32]
 800f56a:	431a      	orrs	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800f570:	2301      	movs	r3, #1
 800f572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2201      	movs	r2, #1
 800f57a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800f57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f582:	4618      	mov	r0, r3
 800f584:	3728      	adds	r7, #40	; 0x28
 800f586:	46bd      	mov	sp, r7
 800f588:	bdb0      	pop	{r4, r5, r7, pc}
 800f58a:	bf00      	nop
 800f58c:	004005ff 	.word	0x004005ff

0800f590 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f598:	2300      	movs	r3, #0
 800f59a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f59c:	f107 030c 	add.w	r3, r7, #12
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 fa0e 	bl	800f9c4 <SD_SendStatus>
 800f5a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d005      	beq.n	800f5bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	431a      	orrs	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	0a5b      	lsrs	r3, r3, #9
 800f5c0:	f003 030f 	and.w	r3, r3, #15
 800f5c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f5c6:	693b      	ldr	r3, [r7, #16]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3718      	adds	r7, #24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5dc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f5ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f5ee:	bf00      	nop
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b084      	sub	sp, #16
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f606:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f60c:	2b82      	cmp	r3, #130	; 0x82
 800f60e:	d111      	bne.n	800f634 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4618      	mov	r0, r3
 800f616:	f002 fc7d 	bl	8011f14 <SDMMC_CmdStopTransfer>
 800f61a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d008      	beq.n	800f634 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	431a      	orrs	r2, r3
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	f7ff fd3a 	bl	800f0a8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f022 0208 	bic.w	r2, r2, #8
 800f642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f240 523a 	movw	r2, #1338	; 0x53a
 800f64c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2201      	movs	r2, #1
 800f652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2200      	movs	r2, #0
 800f65a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f004 f829 	bl	80136b4 <HAL_SD_RxCpltCallback>
#endif
}
 800f662:	bf00      	nop
 800f664:	3710      	adds	r7, #16
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
	...

0800f66c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b086      	sub	sp, #24
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f678:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7f8 fb4c 	bl	8007d18 <HAL_DMA_GetError>
 800f680:	4603      	mov	r3, r0
 800f682:	2b02      	cmp	r3, #2
 800f684:	d03e      	beq.n	800f704 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f68c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f694:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d002      	beq.n	800f6a2 <SD_DMAError+0x36>
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d12d      	bne.n	800f6fe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	4a19      	ldr	r2, [pc, #100]	; (800f70c <SD_DMAError+0xa0>)
 800f6a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800f6b8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800f6c6:	6978      	ldr	r0, [r7, #20]
 800f6c8:	f7ff ff62 	bl	800f590 <HAL_SD_GetCardState>
 800f6cc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	2b06      	cmp	r3, #6
 800f6d2:	d002      	beq.n	800f6da <SD_DMAError+0x6e>
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	2b05      	cmp	r3, #5
 800f6d8:	d10a      	bne.n	800f6f0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f002 fc18 	bl	8011f14 <SDMMC_CmdStopTransfer>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ea:	431a      	orrs	r2, r3
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800f6fe:	6978      	ldr	r0, [r7, #20]
 800f700:	f7ff fcd2 	bl	800f0a8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800f704:	bf00      	nop
 800f706:	3718      	adds	r7, #24
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	004005ff 	.word	0x004005ff

0800f710 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f710:	b5b0      	push	{r4, r5, r7, lr}
 800f712:	b094      	sub	sp, #80	; 0x50
 800f714:	af04      	add	r7, sp, #16
 800f716:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f718:	2301      	movs	r3, #1
 800f71a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4618      	mov	r0, r3
 800f722:	f002 fac9 	bl	8011cb8 <SDMMC_GetPowerState>
 800f726:	4603      	mov	r3, r0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d102      	bne.n	800f732 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f72c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f730:	e0b6      	b.n	800f8a0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f736:	2b03      	cmp	r3, #3
 800f738:	d02f      	beq.n	800f79a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	4618      	mov	r0, r3
 800f740:	f002 fcf3 	bl	801212a <SDMMC_CmdSendCID>
 800f744:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <SD_InitCard+0x40>
    {
      return errorstate;
 800f74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f74e:	e0a7      	b.n	800f8a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	2100      	movs	r1, #0
 800f756:	4618      	mov	r0, r3
 800f758:	f002 faf3 	bl	8011d42 <SDMMC_GetResponse>
 800f75c:	4602      	mov	r2, r0
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2104      	movs	r1, #4
 800f768:	4618      	mov	r0, r3
 800f76a:	f002 faea 	bl	8011d42 <SDMMC_GetResponse>
 800f76e:	4602      	mov	r2, r0
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2108      	movs	r1, #8
 800f77a:	4618      	mov	r0, r3
 800f77c:	f002 fae1 	bl	8011d42 <SDMMC_GetResponse>
 800f780:	4602      	mov	r2, r0
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	210c      	movs	r1, #12
 800f78c:	4618      	mov	r0, r3
 800f78e:	f002 fad8 	bl	8011d42 <SDMMC_GetResponse>
 800f792:	4602      	mov	r2, r0
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f79e:	2b03      	cmp	r3, #3
 800f7a0:	d00d      	beq.n	800f7be <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f107 020e 	add.w	r2, r7, #14
 800f7aa:	4611      	mov	r1, r2
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f002 fcf9 	bl	80121a4 <SDMMC_CmdSetRelAdd>
 800f7b2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <SD_InitCard+0xae>
    {
      return errorstate;
 800f7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7bc:	e070      	b.n	800f8a0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7c2:	2b03      	cmp	r3, #3
 800f7c4:	d036      	beq.n	800f834 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f7c6:	89fb      	ldrh	r3, [r7, #14]
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7d6:	041b      	lsls	r3, r3, #16
 800f7d8:	4619      	mov	r1, r3
 800f7da:	4610      	mov	r0, r2
 800f7dc:	f002 fcc3 	bl	8012166 <SDMMC_CmdSendCSD>
 800f7e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d001      	beq.n	800f7ec <SD_InitCard+0xdc>
    {
      return errorstate;
 800f7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ea:	e059      	b.n	800f8a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f002 faa5 	bl	8011d42 <SDMMC_GetResponse>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2104      	movs	r1, #4
 800f804:	4618      	mov	r0, r3
 800f806:	f002 fa9c 	bl	8011d42 <SDMMC_GetResponse>
 800f80a:	4602      	mov	r2, r0
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2108      	movs	r1, #8
 800f816:	4618      	mov	r0, r3
 800f818:	f002 fa93 	bl	8011d42 <SDMMC_GetResponse>
 800f81c:	4602      	mov	r2, r0
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	210c      	movs	r1, #12
 800f828:	4618      	mov	r0, r3
 800f82a:	f002 fa8a 	bl	8011d42 <SDMMC_GetResponse>
 800f82e:	4602      	mov	r2, r0
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2104      	movs	r1, #4
 800f83a:	4618      	mov	r0, r3
 800f83c:	f002 fa81 	bl	8011d42 <SDMMC_GetResponse>
 800f840:	4603      	mov	r3, r0
 800f842:	0d1a      	lsrs	r2, r3, #20
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f848:	f107 0310 	add.w	r3, r7, #16
 800f84c:	4619      	mov	r1, r3
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7ff fc34 	bl	800f0bc <HAL_SD_GetCardCSD>
 800f854:	4603      	mov	r3, r0
 800f856:	2b00      	cmp	r3, #0
 800f858:	d002      	beq.n	800f860 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f85a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f85e:	e01f      	b.n	800f8a0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6819      	ldr	r1, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f868:	041b      	lsls	r3, r3, #16
 800f86a:	461a      	mov	r2, r3
 800f86c:	f04f 0300 	mov.w	r3, #0
 800f870:	4608      	mov	r0, r1
 800f872:	f002 fb71 	bl	8011f58 <SDMMC_CmdSelDesel>
 800f876:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d001      	beq.n	800f882 <SD_InitCard+0x172>
  {
    return errorstate;
 800f87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f880:	e00e      	b.n	800f8a0 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681d      	ldr	r5, [r3, #0]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	466c      	mov	r4, sp
 800f88a:	f103 0210 	add.w	r2, r3, #16
 800f88e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f894:	3304      	adds	r3, #4
 800f896:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f898:	4628      	mov	r0, r5
 800f89a:	f002 f9c5 	bl	8011c28 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f89e:	2300      	movs	r3, #0
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3740      	adds	r7, #64	; 0x40
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bdb0      	pop	{r4, r5, r7, pc}

0800f8a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b086      	sub	sp, #24
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	617b      	str	r3, [r7, #20]
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f002 fb6c 	bl	8011f9e <SDMMC_CmdGoIdleState>
 800f8c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d001      	beq.n	800f8d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	e072      	b.n	800f9b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f002 fb7f 	bl	8011fda <SDMMC_CmdOperCond>
 800f8dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d00d      	beq.n	800f900 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f002 fb55 	bl	8011f9e <SDMMC_CmdGoIdleState>
 800f8f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d004      	beq.n	800f906 <SD_PowerON+0x5e>
    {
      return errorstate;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	e05b      	b.n	800f9b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2201      	movs	r2, #1
 800f904:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d137      	bne.n	800f97e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	2100      	movs	r1, #0
 800f914:	4618      	mov	r0, r3
 800f916:	f002 fb7f 	bl	8012018 <SDMMC_CmdAppCommand>
 800f91a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d02d      	beq.n	800f97e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f922:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f926:	e047      	b.n	800f9b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2100      	movs	r1, #0
 800f92e:	4618      	mov	r0, r3
 800f930:	f002 fb72 	bl	8012018 <SDMMC_CmdAppCommand>
 800f934:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d001      	beq.n	800f940 <SD_PowerON+0x98>
    {
      return errorstate;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	e03b      	b.n	800f9b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	491e      	ldr	r1, [pc, #120]	; (800f9c0 <SD_PowerON+0x118>)
 800f946:	4618      	mov	r0, r3
 800f948:	f002 fb88 	bl	801205c <SDMMC_CmdAppOperCommand>
 800f94c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d002      	beq.n	800f95a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f958:	e02e      	b.n	800f9b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2100      	movs	r1, #0
 800f960:	4618      	mov	r0, r3
 800f962:	f002 f9ee 	bl	8011d42 <SDMMC_GetResponse>
 800f966:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	0fdb      	lsrs	r3, r3, #31
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d101      	bne.n	800f974 <SD_PowerON+0xcc>
 800f970:	2301      	movs	r3, #1
 800f972:	e000      	b.n	800f976 <SD_PowerON+0xce>
 800f974:	2300      	movs	r3, #0
 800f976:	613b      	str	r3, [r7, #16]

    count++;
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	3301      	adds	r3, #1
 800f97c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f984:	4293      	cmp	r3, r2
 800f986:	d802      	bhi.n	800f98e <SD_PowerON+0xe6>
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d0cc      	beq.n	800f928 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f994:	4293      	cmp	r3, r2
 800f996:	d902      	bls.n	800f99e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f99c:	e00c      	b.n	800f9b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d003      	beq.n	800f9b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	645a      	str	r2, [r3, #68]	; 0x44
 800f9ae:	e002      	b.n	800f9b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f9b6:	2300      	movs	r3, #0
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3718      	adds	r7, #24
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	c1100000 	.word	0xc1100000

0800f9c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d102      	bne.n	800f9da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f9d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f9d8:	e018      	b.n	800fa0c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9e2:	041b      	lsls	r3, r3, #16
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	4610      	mov	r0, r2
 800f9e8:	f002 fbfd 	bl	80121e6 <SDMMC_CmdSendStatus>
 800f9ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d001      	beq.n	800f9f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	e009      	b.n	800fa0c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f002 f99f 	bl	8011d42 <SDMMC_GetResponse>
 800fa04:	4602      	mov	r2, r0
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800fa0a:	2300      	movs	r3, #0
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b086      	sub	sp, #24
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	60fb      	str	r3, [r7, #12]
 800fa20:	2300      	movs	r3, #0
 800fa22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2100      	movs	r1, #0
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f002 f989 	bl	8011d42 <SDMMC_GetResponse>
 800fa30:	4603      	mov	r3, r0
 800fa32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fa3a:	d102      	bne.n	800fa42 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800fa3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fa40:	e02f      	b.n	800faa2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800fa42:	f107 030c 	add.w	r3, r7, #12
 800fa46:	4619      	mov	r1, r3
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f000 f879 	bl	800fb40 <SD_FindSCR>
 800fa4e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d001      	beq.n	800fa5a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	e023      	b.n	800faa2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d01c      	beq.n	800fa9e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa6c:	041b      	lsls	r3, r3, #16
 800fa6e:	4619      	mov	r1, r3
 800fa70:	4610      	mov	r0, r2
 800fa72:	f002 fad1 	bl	8012018 <SDMMC_CmdAppCommand>
 800fa76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d001      	beq.n	800fa82 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	e00f      	b.n	800faa2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2102      	movs	r1, #2
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f002 fb0b 	bl	80120a4 <SDMMC_CmdBusWidth>
 800fa8e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d001      	beq.n	800fa9a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	e003      	b.n	800faa2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	e001      	b.n	800faa2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fa9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3718      	adds	r7, #24
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b086      	sub	sp, #24
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800fab2:	2300      	movs	r3, #0
 800fab4:	60fb      	str	r3, [r7, #12]
 800fab6:	2300      	movs	r3, #0
 800fab8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2100      	movs	r1, #0
 800fac0:	4618      	mov	r0, r3
 800fac2:	f002 f93e 	bl	8011d42 <SDMMC_GetResponse>
 800fac6:	4603      	mov	r3, r0
 800fac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800facc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fad0:	d102      	bne.n	800fad8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800fad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fad6:	e02f      	b.n	800fb38 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800fad8:	f107 030c 	add.w	r3, r7, #12
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 f82e 	bl	800fb40 <SD_FindSCR>
 800fae4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d001      	beq.n	800faf0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	e023      	b.n	800fb38 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d01c      	beq.n	800fb34 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb02:	041b      	lsls	r3, r3, #16
 800fb04:	4619      	mov	r1, r3
 800fb06:	4610      	mov	r0, r2
 800fb08:	f002 fa86 	bl	8012018 <SDMMC_CmdAppCommand>
 800fb0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d001      	beq.n	800fb18 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	e00f      	b.n	800fb38 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f002 fac0 	bl	80120a4 <SDMMC_CmdBusWidth>
 800fb24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	e003      	b.n	800fb38 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800fb30:	2300      	movs	r3, #0
 800fb32:	e001      	b.n	800fb38 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fb34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800fb40:	b590      	push	{r4, r7, lr}
 800fb42:	b08f      	sub	sp, #60	; 0x3c
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fb4a:	f7f6 ff3f 	bl	80069cc <HAL_GetTick>
 800fb4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800fb50:	2300      	movs	r3, #0
 800fb52:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800fb54:	2300      	movs	r3, #0
 800fb56:	60bb      	str	r3, [r7, #8]
 800fb58:	2300      	movs	r3, #0
 800fb5a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2108      	movs	r1, #8
 800fb66:	4618      	mov	r0, r3
 800fb68:	f002 f92a 	bl	8011dc0 <SDMMC_CmdBlockLength>
 800fb6c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d001      	beq.n	800fb78 <SD_FindSCR+0x38>
  {
    return errorstate;
 800fb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb76:	e0b2      	b.n	800fcde <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb80:	041b      	lsls	r3, r3, #16
 800fb82:	4619      	mov	r1, r3
 800fb84:	4610      	mov	r0, r2
 800fb86:	f002 fa47 	bl	8012018 <SDMMC_CmdAppCommand>
 800fb8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d001      	beq.n	800fb96 <SD_FindSCR+0x56>
  {
    return errorstate;
 800fb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb94:	e0a3      	b.n	800fcde <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fb96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb9a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800fb9c:	2308      	movs	r3, #8
 800fb9e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800fba0:	2330      	movs	r3, #48	; 0x30
 800fba2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fba4:	2302      	movs	r3, #2
 800fba6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800fbac:	2301      	movs	r3, #1
 800fbae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f107 0210 	add.w	r2, r7, #16
 800fbb8:	4611      	mov	r1, r2
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f002 f8d4 	bl	8011d68 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f002 fa8f 	bl	80120e8 <SDMMC_CmdSendSCR>
 800fbca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d02a      	beq.n	800fc28 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800fbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd4:	e083      	b.n	800fcde <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00f      	beq.n	800fc04 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6819      	ldr	r1, [r3, #0]
 800fbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	f107 0208 	add.w	r2, r7, #8
 800fbf0:	18d4      	adds	r4, r2, r3
 800fbf2:	4608      	mov	r0, r1
 800fbf4:	f002 f844 	bl	8011c80 <SDMMC_ReadFIFO>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	6023      	str	r3, [r4, #0]
      index++;
 800fbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbfe:	3301      	adds	r3, #1
 800fc00:	637b      	str	r3, [r7, #52]	; 0x34
 800fc02:	e006      	b.n	800fc12 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d012      	beq.n	800fc38 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fc12:	f7f6 fedb 	bl	80069cc <HAL_GetTick>
 800fc16:	4602      	mov	r2, r0
 800fc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc20:	d102      	bne.n	800fc28 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800fc22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc26:	e05a      	b.n	800fcde <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc2e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d0cf      	beq.n	800fbd6 <SD_FindSCR+0x96>
 800fc36:	e000      	b.n	800fc3a <SD_FindSCR+0xfa>
      break;
 800fc38:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc40:	f003 0308 	and.w	r3, r3, #8
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d005      	beq.n	800fc54 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2208      	movs	r2, #8
 800fc4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fc50:	2308      	movs	r3, #8
 800fc52:	e044      	b.n	800fcde <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc5a:	f003 0302 	and.w	r3, r3, #2
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d005      	beq.n	800fc6e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2202      	movs	r2, #2
 800fc68:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fc6a:	2302      	movs	r3, #2
 800fc6c:	e037      	b.n	800fcde <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc74:	f003 0320 	and.w	r3, r3, #32
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d005      	beq.n	800fc88 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2220      	movs	r2, #32
 800fc82:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800fc84:	2320      	movs	r3, #32
 800fc86:	e02a      	b.n	800fcde <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f240 523a 	movw	r2, #1338	; 0x53a
 800fc90:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	061a      	lsls	r2, r3, #24
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	021b      	lsls	r3, r3, #8
 800fc9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fc9e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	0a1b      	lsrs	r3, r3, #8
 800fca4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fca8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	0e1b      	lsrs	r3, r3, #24
 800fcae:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb2:	601a      	str	r2, [r3, #0]
    scr++;
 800fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb6:	3304      	adds	r3, #4
 800fcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	061a      	lsls	r2, r3, #24
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	021b      	lsls	r3, r3, #8
 800fcc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fcc6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	0a1b      	lsrs	r3, r3, #8
 800fccc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fcd0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	0e1b      	lsrs	r3, r3, #24
 800fcd6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcda:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800fcdc:	2300      	movs	r3, #0
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	373c      	adds	r7, #60	; 0x3c
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd90      	pop	{r4, r7, pc}

0800fce6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800fce6:	b580      	push	{r7, lr}
 800fce8:	b082      	sub	sp, #8
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
 800fcee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d101      	bne.n	800fcfa <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	e025      	b.n	800fd46 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d106      	bne.n	800fd14 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f7f3 fee0 	bl	8003ad4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2202      	movs	r2, #2
 800fd18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	3304      	adds	r3, #4
 800fd24:	4619      	mov	r1, r3
 800fd26:	4610      	mov	r0, r2
 800fd28:	f001 fe54 	bl	80119d4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6818      	ldr	r0, [r3, #0]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	461a      	mov	r2, r3
 800fd36:	6839      	ldr	r1, [r7, #0]
 800fd38:	f001 febe 	bl	8011ab8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2201      	movs	r2, #1
 800fd40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3708      	adds	r7, #8
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b084      	sub	sp, #16
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	60f8      	str	r0, [r7, #12]
 800fd56:	60b9      	str	r1, [r7, #8]
 800fd58:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd60:	b2db      	uxtb	r3, r3
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	d101      	bne.n	800fd6a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800fd66:	2302      	movs	r3, #2
 800fd68:	e018      	b.n	800fd9c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2202      	movs	r2, #2
 800fd6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	68b9      	ldr	r1, [r7, #8]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f001 ff1c 	bl	8011bb8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	d104      	bne.n	800fd92 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	2205      	movs	r2, #5
 800fd8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800fd90:	e003      	b.n	800fd9a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2201      	movs	r2, #1
 800fd96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800fd9a:	2300      	movs	r3, #0
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	d101      	bne.n	800fdbe <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800fdba:	2302      	movs	r3, #2
 800fdbc:	e00e      	b.n	800fddc <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2202      	movs	r2, #2
 800fdc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	6839      	ldr	r1, [r7, #0]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f001 ff17 	bl	8011c00 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800fdda:	2300      	movs	r3, #0
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d101      	bne.n	800fdf6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e04c      	b.n	800fe90 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d106      	bne.n	800fe10 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2200      	movs	r2, #0
 800fe06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f7f3 fb96 	bl	800353c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2202      	movs	r2, #2
 800fe14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	681a      	ldr	r2, [r3, #0]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f022 0203 	bic.w	r2, r2, #3
 800fe26:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	4b19      	ldr	r3, [pc, #100]	; (800fe98 <HAL_SPDIFRX_Init+0xb4>)
 800fe34:	4013      	ands	r3, r2
 800fe36:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800fe40:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800fe46:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800fe4c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800fe52:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800fe58:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800fe5e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800fe64:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800fe6a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800fe70:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800fe72:	68fa      	ldr	r2, [r7, #12]
 800fe74:	4313      	orrs	r3, r2
 800fe76:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	68fa      	ldr	r2, [r7, #12]
 800fe7e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2200      	movs	r2, #0
 800fe84:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2201      	movs	r2, #1
 800fe8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800fe8e:	2300      	movs	r3, #0
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3710      	adds	r7, #16
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	fff88407 	.word	0xfff88407

0800fe9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d101      	bne.n	800feae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800feaa:	2301      	movs	r3, #1
 800feac:	e049      	b.n	800ff42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d106      	bne.n	800fec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2200      	movs	r2, #0
 800febe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7f3 fb7c 	bl	80035c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2202      	movs	r2, #2
 800fecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681a      	ldr	r2, [r3, #0]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	3304      	adds	r3, #4
 800fed8:	4619      	mov	r1, r3
 800feda:	4610      	mov	r0, r2
 800fedc:	f000 fc22 	bl	8010724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2201      	movs	r2, #1
 800fee4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2201      	movs	r2, #1
 800feec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2201      	movs	r2, #1
 800fef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2201      	movs	r2, #1
 800fefc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2201      	movs	r2, #1
 800ff04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2201      	movs	r2, #1
 800ff14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2201      	movs	r2, #1
 800ff24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2201      	movs	r2, #1
 800ff34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2201      	movs	r2, #1
 800ff3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ff40:	2300      	movs	r3, #0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
	...

0800ff4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff5a:	b2db      	uxtb	r3, r3
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d001      	beq.n	800ff64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ff60:	2301      	movs	r3, #1
 800ff62:	e054      	b.n	801000e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2202      	movs	r2, #2
 800ff68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	68da      	ldr	r2, [r3, #12]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f042 0201 	orr.w	r2, r2, #1
 800ff7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4a26      	ldr	r2, [pc, #152]	; (801001c <HAL_TIM_Base_Start_IT+0xd0>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d022      	beq.n	800ffcc <HAL_TIM_Base_Start_IT+0x80>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff8e:	d01d      	beq.n	800ffcc <HAL_TIM_Base_Start_IT+0x80>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4a22      	ldr	r2, [pc, #136]	; (8010020 <HAL_TIM_Base_Start_IT+0xd4>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d018      	beq.n	800ffcc <HAL_TIM_Base_Start_IT+0x80>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4a21      	ldr	r2, [pc, #132]	; (8010024 <HAL_TIM_Base_Start_IT+0xd8>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d013      	beq.n	800ffcc <HAL_TIM_Base_Start_IT+0x80>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4a1f      	ldr	r2, [pc, #124]	; (8010028 <HAL_TIM_Base_Start_IT+0xdc>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d00e      	beq.n	800ffcc <HAL_TIM_Base_Start_IT+0x80>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a1e      	ldr	r2, [pc, #120]	; (801002c <HAL_TIM_Base_Start_IT+0xe0>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d009      	beq.n	800ffcc <HAL_TIM_Base_Start_IT+0x80>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a1c      	ldr	r2, [pc, #112]	; (8010030 <HAL_TIM_Base_Start_IT+0xe4>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d004      	beq.n	800ffcc <HAL_TIM_Base_Start_IT+0x80>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4a1b      	ldr	r2, [pc, #108]	; (8010034 <HAL_TIM_Base_Start_IT+0xe8>)
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d115      	bne.n	800fff8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	689a      	ldr	r2, [r3, #8]
 800ffd2:	4b19      	ldr	r3, [pc, #100]	; (8010038 <HAL_TIM_Base_Start_IT+0xec>)
 800ffd4:	4013      	ands	r3, r2
 800ffd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2b06      	cmp	r3, #6
 800ffdc:	d015      	beq.n	801000a <HAL_TIM_Base_Start_IT+0xbe>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffe4:	d011      	beq.n	801000a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f042 0201 	orr.w	r2, r2, #1
 800fff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fff6:	e008      	b.n	801000a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f042 0201 	orr.w	r2, r2, #1
 8010006:	601a      	str	r2, [r3, #0]
 8010008:	e000      	b.n	801000c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801000a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801000c:	2300      	movs	r3, #0
}
 801000e:	4618      	mov	r0, r3
 8010010:	3714      	adds	r7, #20
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop
 801001c:	40010000 	.word	0x40010000
 8010020:	40000400 	.word	0x40000400
 8010024:	40000800 	.word	0x40000800
 8010028:	40000c00 	.word	0x40000c00
 801002c:	40010400 	.word	0x40010400
 8010030:	40014000 	.word	0x40014000
 8010034:	40001800 	.word	0x40001800
 8010038:	00010007 	.word	0x00010007

0801003c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d101      	bne.n	801004e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801004a:	2301      	movs	r3, #1
 801004c:	e049      	b.n	80100e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010054:	b2db      	uxtb	r3, r3
 8010056:	2b00      	cmp	r3, #0
 8010058:	d106      	bne.n	8010068 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2200      	movs	r2, #0
 801005e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f7f3 fb1a 	bl	800369c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2202      	movs	r2, #2
 801006c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	3304      	adds	r3, #4
 8010078:	4619      	mov	r1, r3
 801007a:	4610      	mov	r0, r2
 801007c:	f000 fb52 	bl	8010724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2201      	movs	r2, #1
 8010084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2201      	movs	r2, #1
 801008c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2201      	movs	r2, #1
 8010094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2201      	movs	r2, #1
 801009c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2201      	movs	r2, #1
 80100a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2201      	movs	r2, #1
 80100b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2201      	movs	r2, #1
 80100bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2201      	movs	r2, #1
 80100c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2201      	movs	r2, #1
 80100cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2201      	movs	r2, #1
 80100d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2201      	movs	r2, #1
 80100dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80100e0:	2300      	movs	r3, #0
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3708      	adds	r7, #8
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b082      	sub	sp, #8
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	691b      	ldr	r3, [r3, #16]
 80100f8:	f003 0302 	and.w	r3, r3, #2
 80100fc:	2b02      	cmp	r3, #2
 80100fe:	d122      	bne.n	8010146 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	f003 0302 	and.w	r3, r3, #2
 801010a:	2b02      	cmp	r3, #2
 801010c:	d11b      	bne.n	8010146 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f06f 0202 	mvn.w	r2, #2
 8010116:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2201      	movs	r2, #1
 801011c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	699b      	ldr	r3, [r3, #24]
 8010124:	f003 0303 	and.w	r3, r3, #3
 8010128:	2b00      	cmp	r3, #0
 801012a:	d003      	beq.n	8010134 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f000 fadb 	bl	80106e8 <HAL_TIM_IC_CaptureCallback>
 8010132:	e005      	b.n	8010140 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f000 facd 	bl	80106d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 fade 	bl	80106fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2200      	movs	r2, #0
 8010144:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	691b      	ldr	r3, [r3, #16]
 801014c:	f003 0304 	and.w	r3, r3, #4
 8010150:	2b04      	cmp	r3, #4
 8010152:	d122      	bne.n	801019a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	f003 0304 	and.w	r3, r3, #4
 801015e:	2b04      	cmp	r3, #4
 8010160:	d11b      	bne.n	801019a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f06f 0204 	mvn.w	r2, #4
 801016a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2202      	movs	r2, #2
 8010170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	699b      	ldr	r3, [r3, #24]
 8010178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801017c:	2b00      	cmp	r3, #0
 801017e:	d003      	beq.n	8010188 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 fab1 	bl	80106e8 <HAL_TIM_IC_CaptureCallback>
 8010186:	e005      	b.n	8010194 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f000 faa3 	bl	80106d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 fab4 	bl	80106fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2200      	movs	r2, #0
 8010198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	691b      	ldr	r3, [r3, #16]
 80101a0:	f003 0308 	and.w	r3, r3, #8
 80101a4:	2b08      	cmp	r3, #8
 80101a6:	d122      	bne.n	80101ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	68db      	ldr	r3, [r3, #12]
 80101ae:	f003 0308 	and.w	r3, r3, #8
 80101b2:	2b08      	cmp	r3, #8
 80101b4:	d11b      	bne.n	80101ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	f06f 0208 	mvn.w	r2, #8
 80101be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2204      	movs	r2, #4
 80101c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	69db      	ldr	r3, [r3, #28]
 80101cc:	f003 0303 	and.w	r3, r3, #3
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d003      	beq.n	80101dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f000 fa87 	bl	80106e8 <HAL_TIM_IC_CaptureCallback>
 80101da:	e005      	b.n	80101e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f000 fa79 	bl	80106d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 fa8a 	bl	80106fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2200      	movs	r2, #0
 80101ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	691b      	ldr	r3, [r3, #16]
 80101f4:	f003 0310 	and.w	r3, r3, #16
 80101f8:	2b10      	cmp	r3, #16
 80101fa:	d122      	bne.n	8010242 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	f003 0310 	and.w	r3, r3, #16
 8010206:	2b10      	cmp	r3, #16
 8010208:	d11b      	bne.n	8010242 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f06f 0210 	mvn.w	r2, #16
 8010212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2208      	movs	r2, #8
 8010218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	69db      	ldr	r3, [r3, #28]
 8010220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010224:	2b00      	cmp	r3, #0
 8010226:	d003      	beq.n	8010230 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 fa5d 	bl	80106e8 <HAL_TIM_IC_CaptureCallback>
 801022e:	e005      	b.n	801023c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f000 fa4f 	bl	80106d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f000 fa60 	bl	80106fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	691b      	ldr	r3, [r3, #16]
 8010248:	f003 0301 	and.w	r3, r3, #1
 801024c:	2b01      	cmp	r3, #1
 801024e:	d10e      	bne.n	801026e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	f003 0301 	and.w	r3, r3, #1
 801025a:	2b01      	cmp	r3, #1
 801025c:	d107      	bne.n	801026e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f06f 0201 	mvn.w	r2, #1
 8010266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7f2 fd03 	bl	8002c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	691b      	ldr	r3, [r3, #16]
 8010274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010278:	2b80      	cmp	r3, #128	; 0x80
 801027a:	d10e      	bne.n	801029a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010286:	2b80      	cmp	r3, #128	; 0x80
 8010288:	d107      	bne.n	801029a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 fef3 	bl	8011080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	691b      	ldr	r3, [r3, #16]
 80102a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102a8:	d10e      	bne.n	80102c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102b4:	2b80      	cmp	r3, #128	; 0x80
 80102b6:	d107      	bne.n	80102c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80102c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 fee6 	bl	8011094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102d2:	2b40      	cmp	r3, #64	; 0x40
 80102d4:	d10e      	bne.n	80102f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102e0:	2b40      	cmp	r3, #64	; 0x40
 80102e2:	d107      	bne.n	80102f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80102ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f000 fa0e 	bl	8010710 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	691b      	ldr	r3, [r3, #16]
 80102fa:	f003 0320 	and.w	r3, r3, #32
 80102fe:	2b20      	cmp	r3, #32
 8010300:	d10e      	bne.n	8010320 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	f003 0320 	and.w	r3, r3, #32
 801030c:	2b20      	cmp	r3, #32
 801030e:	d107      	bne.n	8010320 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f06f 0220 	mvn.w	r2, #32
 8010318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 fea6 	bl	801106c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010320:	bf00      	nop
 8010322:	3708      	adds	r7, #8
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801033a:	2b01      	cmp	r3, #1
 801033c:	d101      	bne.n	8010342 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801033e:	2302      	movs	r3, #2
 8010340:	e0fd      	b.n	801053e <HAL_TIM_PWM_ConfigChannel+0x216>
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2201      	movs	r2, #1
 8010346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2b14      	cmp	r3, #20
 801034e:	f200 80f0 	bhi.w	8010532 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010352:	a201      	add	r2, pc, #4	; (adr r2, 8010358 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010358:	080103ad 	.word	0x080103ad
 801035c:	08010533 	.word	0x08010533
 8010360:	08010533 	.word	0x08010533
 8010364:	08010533 	.word	0x08010533
 8010368:	080103ed 	.word	0x080103ed
 801036c:	08010533 	.word	0x08010533
 8010370:	08010533 	.word	0x08010533
 8010374:	08010533 	.word	0x08010533
 8010378:	0801042f 	.word	0x0801042f
 801037c:	08010533 	.word	0x08010533
 8010380:	08010533 	.word	0x08010533
 8010384:	08010533 	.word	0x08010533
 8010388:	0801046f 	.word	0x0801046f
 801038c:	08010533 	.word	0x08010533
 8010390:	08010533 	.word	0x08010533
 8010394:	08010533 	.word	0x08010533
 8010398:	080104b1 	.word	0x080104b1
 801039c:	08010533 	.word	0x08010533
 80103a0:	08010533 	.word	0x08010533
 80103a4:	08010533 	.word	0x08010533
 80103a8:	080104f1 	.word	0x080104f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	68b9      	ldr	r1, [r7, #8]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f000 fa56 	bl	8010864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	699a      	ldr	r2, [r3, #24]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f042 0208 	orr.w	r2, r2, #8
 80103c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	699a      	ldr	r2, [r3, #24]
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f022 0204 	bic.w	r2, r2, #4
 80103d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	6999      	ldr	r1, [r3, #24]
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	691a      	ldr	r2, [r3, #16]
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	430a      	orrs	r2, r1
 80103e8:	619a      	str	r2, [r3, #24]
      break;
 80103ea:	e0a3      	b.n	8010534 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	68b9      	ldr	r1, [r7, #8]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f000 faa8 	bl	8010948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	699a      	ldr	r2, [r3, #24]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	699a      	ldr	r2, [r3, #24]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	6999      	ldr	r1, [r3, #24]
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	021a      	lsls	r2, r3, #8
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	430a      	orrs	r2, r1
 801042a:	619a      	str	r2, [r3, #24]
      break;
 801042c:	e082      	b.n	8010534 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	68b9      	ldr	r1, [r7, #8]
 8010434:	4618      	mov	r0, r3
 8010436:	f000 faff 	bl	8010a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	69da      	ldr	r2, [r3, #28]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f042 0208 	orr.w	r2, r2, #8
 8010448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	69da      	ldr	r2, [r3, #28]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f022 0204 	bic.w	r2, r2, #4
 8010458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	69d9      	ldr	r1, [r3, #28]
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	691a      	ldr	r2, [r3, #16]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	430a      	orrs	r2, r1
 801046a:	61da      	str	r2, [r3, #28]
      break;
 801046c:	e062      	b.n	8010534 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	68b9      	ldr	r1, [r7, #8]
 8010474:	4618      	mov	r0, r3
 8010476:	f000 fb55 	bl	8010b24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	69da      	ldr	r2, [r3, #28]
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	69da      	ldr	r2, [r3, #28]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	69d9      	ldr	r1, [r3, #28]
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	691b      	ldr	r3, [r3, #16]
 80104a4:	021a      	lsls	r2, r3, #8
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	430a      	orrs	r2, r1
 80104ac:	61da      	str	r2, [r3, #28]
      break;
 80104ae:	e041      	b.n	8010534 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	68b9      	ldr	r1, [r7, #8]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f000 fb8c 	bl	8010bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f042 0208 	orr.w	r2, r2, #8
 80104ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f022 0204 	bic.w	r2, r2, #4
 80104da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	691a      	ldr	r2, [r3, #16]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	430a      	orrs	r2, r1
 80104ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80104ee:	e021      	b.n	8010534 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	68b9      	ldr	r1, [r7, #8]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f000 fbbe 	bl	8010c78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801050a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801051a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	691b      	ldr	r3, [r3, #16]
 8010526:	021a      	lsls	r2, r3, #8
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	430a      	orrs	r2, r1
 801052e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010530:	e000      	b.n	8010534 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010532:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2200      	movs	r2, #0
 8010538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801053c:	2300      	movs	r3, #0
}
 801053e:	4618      	mov	r0, r3
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop

08010548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010558:	2b01      	cmp	r3, #1
 801055a:	d101      	bne.n	8010560 <HAL_TIM_ConfigClockSource+0x18>
 801055c:	2302      	movs	r3, #2
 801055e:	e0b3      	b.n	80106c8 <HAL_TIM_ConfigClockSource+0x180>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2201      	movs	r2, #1
 8010564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2202      	movs	r2, #2
 801056c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010578:	68fa      	ldr	r2, [r7, #12]
 801057a:	4b55      	ldr	r3, [pc, #340]	; (80106d0 <HAL_TIM_ConfigClockSource+0x188>)
 801057c:	4013      	ands	r3, r2
 801057e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010586:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010598:	d03e      	beq.n	8010618 <HAL_TIM_ConfigClockSource+0xd0>
 801059a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801059e:	f200 8087 	bhi.w	80106b0 <HAL_TIM_ConfigClockSource+0x168>
 80105a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105a6:	f000 8085 	beq.w	80106b4 <HAL_TIM_ConfigClockSource+0x16c>
 80105aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105ae:	d87f      	bhi.n	80106b0 <HAL_TIM_ConfigClockSource+0x168>
 80105b0:	2b70      	cmp	r3, #112	; 0x70
 80105b2:	d01a      	beq.n	80105ea <HAL_TIM_ConfigClockSource+0xa2>
 80105b4:	2b70      	cmp	r3, #112	; 0x70
 80105b6:	d87b      	bhi.n	80106b0 <HAL_TIM_ConfigClockSource+0x168>
 80105b8:	2b60      	cmp	r3, #96	; 0x60
 80105ba:	d050      	beq.n	801065e <HAL_TIM_ConfigClockSource+0x116>
 80105bc:	2b60      	cmp	r3, #96	; 0x60
 80105be:	d877      	bhi.n	80106b0 <HAL_TIM_ConfigClockSource+0x168>
 80105c0:	2b50      	cmp	r3, #80	; 0x50
 80105c2:	d03c      	beq.n	801063e <HAL_TIM_ConfigClockSource+0xf6>
 80105c4:	2b50      	cmp	r3, #80	; 0x50
 80105c6:	d873      	bhi.n	80106b0 <HAL_TIM_ConfigClockSource+0x168>
 80105c8:	2b40      	cmp	r3, #64	; 0x40
 80105ca:	d058      	beq.n	801067e <HAL_TIM_ConfigClockSource+0x136>
 80105cc:	2b40      	cmp	r3, #64	; 0x40
 80105ce:	d86f      	bhi.n	80106b0 <HAL_TIM_ConfigClockSource+0x168>
 80105d0:	2b30      	cmp	r3, #48	; 0x30
 80105d2:	d064      	beq.n	801069e <HAL_TIM_ConfigClockSource+0x156>
 80105d4:	2b30      	cmp	r3, #48	; 0x30
 80105d6:	d86b      	bhi.n	80106b0 <HAL_TIM_ConfigClockSource+0x168>
 80105d8:	2b20      	cmp	r3, #32
 80105da:	d060      	beq.n	801069e <HAL_TIM_ConfigClockSource+0x156>
 80105dc:	2b20      	cmp	r3, #32
 80105de:	d867      	bhi.n	80106b0 <HAL_TIM_ConfigClockSource+0x168>
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d05c      	beq.n	801069e <HAL_TIM_ConfigClockSource+0x156>
 80105e4:	2b10      	cmp	r3, #16
 80105e6:	d05a      	beq.n	801069e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80105e8:	e062      	b.n	80106b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6818      	ldr	r0, [r3, #0]
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	6899      	ldr	r1, [r3, #8]
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	685a      	ldr	r2, [r3, #4]
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	f000 fc0b 	bl	8010e14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801060c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	609a      	str	r2, [r3, #8]
      break;
 8010616:	e04e      	b.n	80106b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6818      	ldr	r0, [r3, #0]
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	6899      	ldr	r1, [r3, #8]
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	685a      	ldr	r2, [r3, #4]
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	f000 fbf4 	bl	8010e14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	689a      	ldr	r2, [r3, #8]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801063a:	609a      	str	r2, [r3, #8]
      break;
 801063c:	e03b      	b.n	80106b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6818      	ldr	r0, [r3, #0]
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	6859      	ldr	r1, [r3, #4]
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	68db      	ldr	r3, [r3, #12]
 801064a:	461a      	mov	r2, r3
 801064c:	f000 fb68 	bl	8010d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	2150      	movs	r1, #80	; 0x50
 8010656:	4618      	mov	r0, r3
 8010658:	f000 fbc1 	bl	8010dde <TIM_ITRx_SetConfig>
      break;
 801065c:	e02b      	b.n	80106b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6818      	ldr	r0, [r3, #0]
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	6859      	ldr	r1, [r3, #4]
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	461a      	mov	r2, r3
 801066c:	f000 fb87 	bl	8010d7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	2160      	movs	r1, #96	; 0x60
 8010676:	4618      	mov	r0, r3
 8010678:	f000 fbb1 	bl	8010dde <TIM_ITRx_SetConfig>
      break;
 801067c:	e01b      	b.n	80106b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6818      	ldr	r0, [r3, #0]
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	6859      	ldr	r1, [r3, #4]
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	461a      	mov	r2, r3
 801068c:	f000 fb48 	bl	8010d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2140      	movs	r1, #64	; 0x40
 8010696:	4618      	mov	r0, r3
 8010698:	f000 fba1 	bl	8010dde <TIM_ITRx_SetConfig>
      break;
 801069c:	e00b      	b.n	80106b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4619      	mov	r1, r3
 80106a8:	4610      	mov	r0, r2
 80106aa:	f000 fb98 	bl	8010dde <TIM_ITRx_SetConfig>
        break;
 80106ae:	e002      	b.n	80106b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80106b0:	bf00      	nop
 80106b2:	e000      	b.n	80106b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80106b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2201      	movs	r2, #1
 80106ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2200      	movs	r2, #0
 80106c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106c6:	2300      	movs	r3, #0
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3710      	adds	r7, #16
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}
 80106d0:	fffeff88 	.word	0xfffeff88

080106d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80106dc:	bf00      	nop
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b083      	sub	sp, #12
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010704:	bf00      	nop
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010718:	bf00      	nop
 801071a:	370c      	adds	r7, #12
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr

08010724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010724:	b480      	push	{r7}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	4a40      	ldr	r2, [pc, #256]	; (8010838 <TIM_Base_SetConfig+0x114>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d013      	beq.n	8010764 <TIM_Base_SetConfig+0x40>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010742:	d00f      	beq.n	8010764 <TIM_Base_SetConfig+0x40>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	4a3d      	ldr	r2, [pc, #244]	; (801083c <TIM_Base_SetConfig+0x118>)
 8010748:	4293      	cmp	r3, r2
 801074a:	d00b      	beq.n	8010764 <TIM_Base_SetConfig+0x40>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	4a3c      	ldr	r2, [pc, #240]	; (8010840 <TIM_Base_SetConfig+0x11c>)
 8010750:	4293      	cmp	r3, r2
 8010752:	d007      	beq.n	8010764 <TIM_Base_SetConfig+0x40>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	4a3b      	ldr	r2, [pc, #236]	; (8010844 <TIM_Base_SetConfig+0x120>)
 8010758:	4293      	cmp	r3, r2
 801075a:	d003      	beq.n	8010764 <TIM_Base_SetConfig+0x40>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	4a3a      	ldr	r2, [pc, #232]	; (8010848 <TIM_Base_SetConfig+0x124>)
 8010760:	4293      	cmp	r3, r2
 8010762:	d108      	bne.n	8010776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801076a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	68fa      	ldr	r2, [r7, #12]
 8010772:	4313      	orrs	r3, r2
 8010774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4a2f      	ldr	r2, [pc, #188]	; (8010838 <TIM_Base_SetConfig+0x114>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d02b      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010784:	d027      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	4a2c      	ldr	r2, [pc, #176]	; (801083c <TIM_Base_SetConfig+0x118>)
 801078a:	4293      	cmp	r3, r2
 801078c:	d023      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	4a2b      	ldr	r2, [pc, #172]	; (8010840 <TIM_Base_SetConfig+0x11c>)
 8010792:	4293      	cmp	r3, r2
 8010794:	d01f      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	4a2a      	ldr	r2, [pc, #168]	; (8010844 <TIM_Base_SetConfig+0x120>)
 801079a:	4293      	cmp	r3, r2
 801079c:	d01b      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4a29      	ldr	r2, [pc, #164]	; (8010848 <TIM_Base_SetConfig+0x124>)
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d017      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4a28      	ldr	r2, [pc, #160]	; (801084c <TIM_Base_SetConfig+0x128>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d013      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4a27      	ldr	r2, [pc, #156]	; (8010850 <TIM_Base_SetConfig+0x12c>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d00f      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4a26      	ldr	r2, [pc, #152]	; (8010854 <TIM_Base_SetConfig+0x130>)
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d00b      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4a25      	ldr	r2, [pc, #148]	; (8010858 <TIM_Base_SetConfig+0x134>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d007      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4a24      	ldr	r2, [pc, #144]	; (801085c <TIM_Base_SetConfig+0x138>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d003      	beq.n	80107d6 <TIM_Base_SetConfig+0xb2>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	4a23      	ldr	r2, [pc, #140]	; (8010860 <TIM_Base_SetConfig+0x13c>)
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d108      	bne.n	80107e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	68fa      	ldr	r2, [r7, #12]
 80107e4:	4313      	orrs	r3, r2
 80107e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	695b      	ldr	r3, [r3, #20]
 80107f2:	4313      	orrs	r3, r2
 80107f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	68fa      	ldr	r2, [r7, #12]
 80107fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	689a      	ldr	r2, [r3, #8]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	4a0a      	ldr	r2, [pc, #40]	; (8010838 <TIM_Base_SetConfig+0x114>)
 8010810:	4293      	cmp	r3, r2
 8010812:	d003      	beq.n	801081c <TIM_Base_SetConfig+0xf8>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	4a0c      	ldr	r2, [pc, #48]	; (8010848 <TIM_Base_SetConfig+0x124>)
 8010818:	4293      	cmp	r3, r2
 801081a:	d103      	bne.n	8010824 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	691a      	ldr	r2, [r3, #16]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2201      	movs	r2, #1
 8010828:	615a      	str	r2, [r3, #20]
}
 801082a:	bf00      	nop
 801082c:	3714      	adds	r7, #20
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop
 8010838:	40010000 	.word	0x40010000
 801083c:	40000400 	.word	0x40000400
 8010840:	40000800 	.word	0x40000800
 8010844:	40000c00 	.word	0x40000c00
 8010848:	40010400 	.word	0x40010400
 801084c:	40014000 	.word	0x40014000
 8010850:	40014400 	.word	0x40014400
 8010854:	40014800 	.word	0x40014800
 8010858:	40001800 	.word	0x40001800
 801085c:	40001c00 	.word	0x40001c00
 8010860:	40002000 	.word	0x40002000

08010864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010864:	b480      	push	{r7}
 8010866:	b087      	sub	sp, #28
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6a1b      	ldr	r3, [r3, #32]
 8010872:	f023 0201 	bic.w	r2, r3, #1
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6a1b      	ldr	r3, [r3, #32]
 801087e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	699b      	ldr	r3, [r3, #24]
 801088a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801088c:	68fa      	ldr	r2, [r7, #12]
 801088e:	4b2b      	ldr	r3, [pc, #172]	; (801093c <TIM_OC1_SetConfig+0xd8>)
 8010890:	4013      	ands	r3, r2
 8010892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f023 0303 	bic.w	r3, r3, #3
 801089a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	68fa      	ldr	r2, [r7, #12]
 80108a2:	4313      	orrs	r3, r2
 80108a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	f023 0302 	bic.w	r3, r3, #2
 80108ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	689b      	ldr	r3, [r3, #8]
 80108b2:	697a      	ldr	r2, [r7, #20]
 80108b4:	4313      	orrs	r3, r2
 80108b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	4a21      	ldr	r2, [pc, #132]	; (8010940 <TIM_OC1_SetConfig+0xdc>)
 80108bc:	4293      	cmp	r3, r2
 80108be:	d003      	beq.n	80108c8 <TIM_OC1_SetConfig+0x64>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	4a20      	ldr	r2, [pc, #128]	; (8010944 <TIM_OC1_SetConfig+0xe0>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d10c      	bne.n	80108e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	f023 0308 	bic.w	r3, r3, #8
 80108ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	697a      	ldr	r2, [r7, #20]
 80108d6:	4313      	orrs	r3, r2
 80108d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	f023 0304 	bic.w	r3, r3, #4
 80108e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4a16      	ldr	r2, [pc, #88]	; (8010940 <TIM_OC1_SetConfig+0xdc>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d003      	beq.n	80108f2 <TIM_OC1_SetConfig+0x8e>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	4a15      	ldr	r2, [pc, #84]	; (8010944 <TIM_OC1_SetConfig+0xe0>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d111      	bne.n	8010916 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	695b      	ldr	r3, [r3, #20]
 8010906:	693a      	ldr	r2, [r7, #16]
 8010908:	4313      	orrs	r3, r2
 801090a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	699b      	ldr	r3, [r3, #24]
 8010910:	693a      	ldr	r2, [r7, #16]
 8010912:	4313      	orrs	r3, r2
 8010914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	693a      	ldr	r2, [r7, #16]
 801091a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	68fa      	ldr	r2, [r7, #12]
 8010920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	685a      	ldr	r2, [r3, #4]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	697a      	ldr	r2, [r7, #20]
 801092e:	621a      	str	r2, [r3, #32]
}
 8010930:	bf00      	nop
 8010932:	371c      	adds	r7, #28
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr
 801093c:	fffeff8f 	.word	0xfffeff8f
 8010940:	40010000 	.word	0x40010000
 8010944:	40010400 	.word	0x40010400

08010948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010948:	b480      	push	{r7}
 801094a:	b087      	sub	sp, #28
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6a1b      	ldr	r3, [r3, #32]
 8010956:	f023 0210 	bic.w	r2, r3, #16
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6a1b      	ldr	r3, [r3, #32]
 8010962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	699b      	ldr	r3, [r3, #24]
 801096e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010970:	68fa      	ldr	r2, [r7, #12]
 8010972:	4b2e      	ldr	r3, [pc, #184]	; (8010a2c <TIM_OC2_SetConfig+0xe4>)
 8010974:	4013      	ands	r3, r2
 8010976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801097e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	021b      	lsls	r3, r3, #8
 8010986:	68fa      	ldr	r2, [r7, #12]
 8010988:	4313      	orrs	r3, r2
 801098a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	f023 0320 	bic.w	r3, r3, #32
 8010992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	011b      	lsls	r3, r3, #4
 801099a:	697a      	ldr	r2, [r7, #20]
 801099c:	4313      	orrs	r3, r2
 801099e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4a23      	ldr	r2, [pc, #140]	; (8010a30 <TIM_OC2_SetConfig+0xe8>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d003      	beq.n	80109b0 <TIM_OC2_SetConfig+0x68>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4a22      	ldr	r2, [pc, #136]	; (8010a34 <TIM_OC2_SetConfig+0xec>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d10d      	bne.n	80109cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	011b      	lsls	r3, r3, #4
 80109be:	697a      	ldr	r2, [r7, #20]
 80109c0:	4313      	orrs	r3, r2
 80109c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	4a18      	ldr	r2, [pc, #96]	; (8010a30 <TIM_OC2_SetConfig+0xe8>)
 80109d0:	4293      	cmp	r3, r2
 80109d2:	d003      	beq.n	80109dc <TIM_OC2_SetConfig+0x94>
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	4a17      	ldr	r2, [pc, #92]	; (8010a34 <TIM_OC2_SetConfig+0xec>)
 80109d8:	4293      	cmp	r3, r2
 80109da:	d113      	bne.n	8010a04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80109e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80109ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	695b      	ldr	r3, [r3, #20]
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	693a      	ldr	r2, [r7, #16]
 80109f4:	4313      	orrs	r3, r2
 80109f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	699b      	ldr	r3, [r3, #24]
 80109fc:	009b      	lsls	r3, r3, #2
 80109fe:	693a      	ldr	r2, [r7, #16]
 8010a00:	4313      	orrs	r3, r2
 8010a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	693a      	ldr	r2, [r7, #16]
 8010a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	68fa      	ldr	r2, [r7, #12]
 8010a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	685a      	ldr	r2, [r3, #4]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	697a      	ldr	r2, [r7, #20]
 8010a1c:	621a      	str	r2, [r3, #32]
}
 8010a1e:	bf00      	nop
 8010a20:	371c      	adds	r7, #28
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	feff8fff 	.word	0xfeff8fff
 8010a30:	40010000 	.word	0x40010000
 8010a34:	40010400 	.word	0x40010400

08010a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b087      	sub	sp, #28
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6a1b      	ldr	r3, [r3, #32]
 8010a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6a1b      	ldr	r3, [r3, #32]
 8010a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	685b      	ldr	r3, [r3, #4]
 8010a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	69db      	ldr	r3, [r3, #28]
 8010a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010a60:	68fa      	ldr	r2, [r7, #12]
 8010a62:	4b2d      	ldr	r3, [pc, #180]	; (8010b18 <TIM_OC3_SetConfig+0xe0>)
 8010a64:	4013      	ands	r3, r2
 8010a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f023 0303 	bic.w	r3, r3, #3
 8010a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	68fa      	ldr	r2, [r7, #12]
 8010a76:	4313      	orrs	r3, r2
 8010a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	689b      	ldr	r3, [r3, #8]
 8010a86:	021b      	lsls	r3, r3, #8
 8010a88:	697a      	ldr	r2, [r7, #20]
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4a22      	ldr	r2, [pc, #136]	; (8010b1c <TIM_OC3_SetConfig+0xe4>)
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d003      	beq.n	8010a9e <TIM_OC3_SetConfig+0x66>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	4a21      	ldr	r2, [pc, #132]	; (8010b20 <TIM_OC3_SetConfig+0xe8>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d10d      	bne.n	8010aba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	021b      	lsls	r3, r3, #8
 8010aac:	697a      	ldr	r2, [r7, #20]
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4a17      	ldr	r2, [pc, #92]	; (8010b1c <TIM_OC3_SetConfig+0xe4>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d003      	beq.n	8010aca <TIM_OC3_SetConfig+0x92>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	4a16      	ldr	r2, [pc, #88]	; (8010b20 <TIM_OC3_SetConfig+0xe8>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d113      	bne.n	8010af2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	695b      	ldr	r3, [r3, #20]
 8010ade:	011b      	lsls	r3, r3, #4
 8010ae0:	693a      	ldr	r2, [r7, #16]
 8010ae2:	4313      	orrs	r3, r2
 8010ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	699b      	ldr	r3, [r3, #24]
 8010aea:	011b      	lsls	r3, r3, #4
 8010aec:	693a      	ldr	r2, [r7, #16]
 8010aee:	4313      	orrs	r3, r2
 8010af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	693a      	ldr	r2, [r7, #16]
 8010af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	68fa      	ldr	r2, [r7, #12]
 8010afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	685a      	ldr	r2, [r3, #4]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	697a      	ldr	r2, [r7, #20]
 8010b0a:	621a      	str	r2, [r3, #32]
}
 8010b0c:	bf00      	nop
 8010b0e:	371c      	adds	r7, #28
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr
 8010b18:	fffeff8f 	.word	0xfffeff8f
 8010b1c:	40010000 	.word	0x40010000
 8010b20:	40010400 	.word	0x40010400

08010b24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b087      	sub	sp, #28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6a1b      	ldr	r3, [r3, #32]
 8010b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6a1b      	ldr	r3, [r3, #32]
 8010b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	69db      	ldr	r3, [r3, #28]
 8010b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	4b1e      	ldr	r3, [pc, #120]	; (8010bc8 <TIM_OC4_SetConfig+0xa4>)
 8010b50:	4013      	ands	r3, r2
 8010b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	021b      	lsls	r3, r3, #8
 8010b62:	68fa      	ldr	r2, [r7, #12]
 8010b64:	4313      	orrs	r3, r2
 8010b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	689b      	ldr	r3, [r3, #8]
 8010b74:	031b      	lsls	r3, r3, #12
 8010b76:	693a      	ldr	r2, [r7, #16]
 8010b78:	4313      	orrs	r3, r2
 8010b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	4a13      	ldr	r2, [pc, #76]	; (8010bcc <TIM_OC4_SetConfig+0xa8>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d003      	beq.n	8010b8c <TIM_OC4_SetConfig+0x68>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	4a12      	ldr	r2, [pc, #72]	; (8010bd0 <TIM_OC4_SetConfig+0xac>)
 8010b88:	4293      	cmp	r3, r2
 8010b8a:	d109      	bne.n	8010ba0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	695b      	ldr	r3, [r3, #20]
 8010b98:	019b      	lsls	r3, r3, #6
 8010b9a:	697a      	ldr	r2, [r7, #20]
 8010b9c:	4313      	orrs	r3, r2
 8010b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	697a      	ldr	r2, [r7, #20]
 8010ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	685a      	ldr	r2, [r3, #4]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	693a      	ldr	r2, [r7, #16]
 8010bb8:	621a      	str	r2, [r3, #32]
}
 8010bba:	bf00      	nop
 8010bbc:	371c      	adds	r7, #28
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	feff8fff 	.word	0xfeff8fff
 8010bcc:	40010000 	.word	0x40010000
 8010bd0:	40010400 	.word	0x40010400

08010bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b087      	sub	sp, #28
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6a1b      	ldr	r3, [r3, #32]
 8010be2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6a1b      	ldr	r3, [r3, #32]
 8010bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010bfc:	68fa      	ldr	r2, [r7, #12]
 8010bfe:	4b1b      	ldr	r3, [pc, #108]	; (8010c6c <TIM_OC5_SetConfig+0x98>)
 8010c00:	4013      	ands	r3, r2
 8010c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010c14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	689b      	ldr	r3, [r3, #8]
 8010c1a:	041b      	lsls	r3, r3, #16
 8010c1c:	693a      	ldr	r2, [r7, #16]
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4a12      	ldr	r2, [pc, #72]	; (8010c70 <TIM_OC5_SetConfig+0x9c>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d003      	beq.n	8010c32 <TIM_OC5_SetConfig+0x5e>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4a11      	ldr	r2, [pc, #68]	; (8010c74 <TIM_OC5_SetConfig+0xa0>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d109      	bne.n	8010c46 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010c38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	695b      	ldr	r3, [r3, #20]
 8010c3e:	021b      	lsls	r3, r3, #8
 8010c40:	697a      	ldr	r2, [r7, #20]
 8010c42:	4313      	orrs	r3, r2
 8010c44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	697a      	ldr	r2, [r7, #20]
 8010c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	68fa      	ldr	r2, [r7, #12]
 8010c50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	685a      	ldr	r2, [r3, #4]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	693a      	ldr	r2, [r7, #16]
 8010c5e:	621a      	str	r2, [r3, #32]
}
 8010c60:	bf00      	nop
 8010c62:	371c      	adds	r7, #28
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	fffeff8f 	.word	0xfffeff8f
 8010c70:	40010000 	.word	0x40010000
 8010c74:	40010400 	.word	0x40010400

08010c78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b087      	sub	sp, #28
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6a1b      	ldr	r3, [r3, #32]
 8010c86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6a1b      	ldr	r3, [r3, #32]
 8010c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010ca0:	68fa      	ldr	r2, [r7, #12]
 8010ca2:	4b1c      	ldr	r3, [pc, #112]	; (8010d14 <TIM_OC6_SetConfig+0x9c>)
 8010ca4:	4013      	ands	r3, r2
 8010ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	021b      	lsls	r3, r3, #8
 8010cae:	68fa      	ldr	r2, [r7, #12]
 8010cb0:	4313      	orrs	r3, r2
 8010cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	689b      	ldr	r3, [r3, #8]
 8010cc0:	051b      	lsls	r3, r3, #20
 8010cc2:	693a      	ldr	r2, [r7, #16]
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	4a13      	ldr	r2, [pc, #76]	; (8010d18 <TIM_OC6_SetConfig+0xa0>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d003      	beq.n	8010cd8 <TIM_OC6_SetConfig+0x60>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	4a12      	ldr	r2, [pc, #72]	; (8010d1c <TIM_OC6_SetConfig+0xa4>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d109      	bne.n	8010cec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010cde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	695b      	ldr	r3, [r3, #20]
 8010ce4:	029b      	lsls	r3, r3, #10
 8010ce6:	697a      	ldr	r2, [r7, #20]
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	697a      	ldr	r2, [r7, #20]
 8010cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	68fa      	ldr	r2, [r7, #12]
 8010cf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	685a      	ldr	r2, [r3, #4]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	693a      	ldr	r2, [r7, #16]
 8010d04:	621a      	str	r2, [r3, #32]
}
 8010d06:	bf00      	nop
 8010d08:	371c      	adds	r7, #28
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d10:	4770      	bx	lr
 8010d12:	bf00      	nop
 8010d14:	feff8fff 	.word	0xfeff8fff
 8010d18:	40010000 	.word	0x40010000
 8010d1c:	40010400 	.word	0x40010400

08010d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b087      	sub	sp, #28
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	6a1b      	ldr	r3, [r3, #32]
 8010d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	6a1b      	ldr	r3, [r3, #32]
 8010d36:	f023 0201 	bic.w	r2, r3, #1
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	699b      	ldr	r3, [r3, #24]
 8010d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	011b      	lsls	r3, r3, #4
 8010d50:	693a      	ldr	r2, [r7, #16]
 8010d52:	4313      	orrs	r3, r2
 8010d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	f023 030a 	bic.w	r3, r3, #10
 8010d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010d5e:	697a      	ldr	r2, [r7, #20]
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	4313      	orrs	r3, r2
 8010d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	693a      	ldr	r2, [r7, #16]
 8010d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	697a      	ldr	r2, [r7, #20]
 8010d70:	621a      	str	r2, [r3, #32]
}
 8010d72:	bf00      	nop
 8010d74:	371c      	adds	r7, #28
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr

08010d7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010d7e:	b480      	push	{r7}
 8010d80:	b087      	sub	sp, #28
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	60f8      	str	r0, [r7, #12]
 8010d86:	60b9      	str	r1, [r7, #8]
 8010d88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	6a1b      	ldr	r3, [r3, #32]
 8010d8e:	f023 0210 	bic.w	r2, r3, #16
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	699b      	ldr	r3, [r3, #24]
 8010d9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	6a1b      	ldr	r3, [r3, #32]
 8010da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010da8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	031b      	lsls	r3, r3, #12
 8010dae:	697a      	ldr	r2, [r7, #20]
 8010db0:	4313      	orrs	r3, r2
 8010db2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010dba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	011b      	lsls	r3, r3, #4
 8010dc0:	693a      	ldr	r2, [r7, #16]
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	697a      	ldr	r2, [r7, #20]
 8010dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	693a      	ldr	r2, [r7, #16]
 8010dd0:	621a      	str	r2, [r3, #32]
}
 8010dd2:	bf00      	nop
 8010dd4:	371c      	adds	r7, #28
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr

08010dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010dde:	b480      	push	{r7}
 8010de0:	b085      	sub	sp, #20
 8010de2:	af00      	add	r7, sp, #0
 8010de4:	6078      	str	r0, [r7, #4]
 8010de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	689b      	ldr	r3, [r3, #8]
 8010dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010df6:	683a      	ldr	r2, [r7, #0]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	f043 0307 	orr.w	r3, r3, #7
 8010e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	68fa      	ldr	r2, [r7, #12]
 8010e06:	609a      	str	r2, [r3, #8]
}
 8010e08:	bf00      	nop
 8010e0a:	3714      	adds	r7, #20
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b087      	sub	sp, #28
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	607a      	str	r2, [r7, #4]
 8010e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	689b      	ldr	r3, [r3, #8]
 8010e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	021a      	lsls	r2, r3, #8
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	431a      	orrs	r2, r3
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	4313      	orrs	r3, r2
 8010e3c:	697a      	ldr	r2, [r7, #20]
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	697a      	ldr	r2, [r7, #20]
 8010e46:	609a      	str	r2, [r3, #8]
}
 8010e48:	bf00      	nop
 8010e4a:	371c      	adds	r7, #28
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b085      	sub	sp, #20
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d101      	bne.n	8010e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010e68:	2302      	movs	r3, #2
 8010e6a:	e06d      	b.n	8010f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2201      	movs	r2, #1
 8010e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2202      	movs	r2, #2
 8010e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4a30      	ldr	r2, [pc, #192]	; (8010f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d004      	beq.n	8010ea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	4a2f      	ldr	r2, [pc, #188]	; (8010f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d108      	bne.n	8010eb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010ea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	68fa      	ldr	r2, [r7, #12]
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	4313      	orrs	r3, r2
 8010ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4a20      	ldr	r2, [pc, #128]	; (8010f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	d022      	beq.n	8010f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ede:	d01d      	beq.n	8010f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4a1d      	ldr	r2, [pc, #116]	; (8010f5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d018      	beq.n	8010f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	4a1c      	ldr	r2, [pc, #112]	; (8010f60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d013      	beq.n	8010f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a1a      	ldr	r2, [pc, #104]	; (8010f64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d00e      	beq.n	8010f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4a15      	ldr	r2, [pc, #84]	; (8010f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d009      	beq.n	8010f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4a16      	ldr	r2, [pc, #88]	; (8010f68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d004      	beq.n	8010f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4a15      	ldr	r2, [pc, #84]	; (8010f6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d10c      	bne.n	8010f36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	689b      	ldr	r3, [r3, #8]
 8010f28:	68ba      	ldr	r2, [r7, #8]
 8010f2a:	4313      	orrs	r3, r2
 8010f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	68ba      	ldr	r2, [r7, #8]
 8010f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2201      	movs	r2, #1
 8010f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010f46:	2300      	movs	r3, #0
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3714      	adds	r7, #20
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	40010000 	.word	0x40010000
 8010f58:	40010400 	.word	0x40010400
 8010f5c:	40000400 	.word	0x40000400
 8010f60:	40000800 	.word	0x40000800
 8010f64:	40000c00 	.word	0x40000c00
 8010f68:	40014000 	.word	0x40014000
 8010f6c:	40001800 	.word	0x40001800

08010f70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010f70:	b480      	push	{r7}
 8010f72:	b085      	sub	sp, #20
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d101      	bne.n	8010f8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010f88:	2302      	movs	r3, #2
 8010f8a:	e065      	b.n	8011058 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2201      	movs	r2, #1
 8010f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	4313      	orrs	r3, r2
 8010fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	689b      	ldr	r3, [r3, #8]
 8010fac:	4313      	orrs	r3, r2
 8010fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	4313      	orrs	r3, r2
 8010fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	691b      	ldr	r3, [r3, #16]
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	695b      	ldr	r3, [r3, #20]
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	699b      	ldr	r3, [r3, #24]
 8011000:	041b      	lsls	r3, r3, #16
 8011002:	4313      	orrs	r3, r2
 8011004:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4a16      	ldr	r2, [pc, #88]	; (8011064 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d004      	beq.n	801101a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4a14      	ldr	r2, [pc, #80]	; (8011068 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d115      	bne.n	8011046 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011024:	051b      	lsls	r3, r3, #20
 8011026:	4313      	orrs	r3, r2
 8011028:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	69db      	ldr	r3, [r3, #28]
 8011034:	4313      	orrs	r3, r2
 8011036:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	6a1b      	ldr	r3, [r3, #32]
 8011042:	4313      	orrs	r3, r2
 8011044:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	68fa      	ldr	r2, [r7, #12]
 801104c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011056:	2300      	movs	r3, #0
}
 8011058:	4618      	mov	r0, r3
 801105a:	3714      	adds	r7, #20
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr
 8011064:	40010000 	.word	0x40010000
 8011068:	40010400 	.word	0x40010400

0801106c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801106c:	b480      	push	{r7}
 801106e:	b083      	sub	sp, #12
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011074:	bf00      	nop
 8011076:	370c      	adds	r7, #12
 8011078:	46bd      	mov	sp, r7
 801107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107e:	4770      	bx	lr

08011080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011088:	bf00      	nop
 801108a:	370c      	adds	r7, #12
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr

08011094 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801109c:	bf00      	nop
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d101      	bne.n	80110ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80110b6:	2301      	movs	r3, #1
 80110b8:	e040      	b.n	801113c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d106      	bne.n	80110d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2200      	movs	r2, #0
 80110c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f7f2 fbd4 	bl	8003878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2224      	movs	r2, #36	; 0x24
 80110d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	f022 0201 	bic.w	r2, r2, #1
 80110e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f000 f8c0 	bl	801126c <UART_SetConfig>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d101      	bne.n	80110f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80110f2:	2301      	movs	r3, #1
 80110f4:	e022      	b.n	801113c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d002      	beq.n	8011104 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f000 fb16 	bl	8011730 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	685a      	ldr	r2, [r3, #4]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	689a      	ldr	r2, [r3, #8]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f042 0201 	orr.w	r2, r2, #1
 8011132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f000 fb9d 	bl	8011874 <UART_CheckIdleState>
 801113a:	4603      	mov	r3, r0
}
 801113c:	4618      	mov	r0, r3
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b08a      	sub	sp, #40	; 0x28
 8011148:	af02      	add	r7, sp, #8
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	603b      	str	r3, [r7, #0]
 8011150:	4613      	mov	r3, r2
 8011152:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011158:	2b20      	cmp	r3, #32
 801115a:	f040 8081 	bne.w	8011260 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d002      	beq.n	801116a <HAL_UART_Transmit+0x26>
 8011164:	88fb      	ldrh	r3, [r7, #6]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d101      	bne.n	801116e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801116a:	2301      	movs	r3, #1
 801116c:	e079      	b.n	8011262 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011174:	2b01      	cmp	r3, #1
 8011176:	d101      	bne.n	801117c <HAL_UART_Transmit+0x38>
 8011178:	2302      	movs	r3, #2
 801117a:	e072      	b.n	8011262 <HAL_UART_Transmit+0x11e>
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	2201      	movs	r2, #1
 8011180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	2200      	movs	r2, #0
 8011188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2221      	movs	r2, #33	; 0x21
 8011190:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011192:	f7f5 fc1b 	bl	80069cc <HAL_GetTick>
 8011196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	88fa      	ldrh	r2, [r7, #6]
 801119c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	88fa      	ldrh	r2, [r7, #6]
 80111a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	689b      	ldr	r3, [r3, #8]
 80111ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111b0:	d108      	bne.n	80111c4 <HAL_UART_Transmit+0x80>
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	691b      	ldr	r3, [r3, #16]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d104      	bne.n	80111c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80111ba:	2300      	movs	r3, #0
 80111bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	61bb      	str	r3, [r7, #24]
 80111c2:	e003      	b.n	80111cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80111c8:	2300      	movs	r3, #0
 80111ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2200      	movs	r2, #0
 80111d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80111d4:	e02c      	b.n	8011230 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	9300      	str	r3, [sp, #0]
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	2200      	movs	r2, #0
 80111de:	2180      	movs	r1, #128	; 0x80
 80111e0:	68f8      	ldr	r0, [r7, #12]
 80111e2:	f000 fb7a 	bl	80118da <UART_WaitOnFlagUntilTimeout>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d001      	beq.n	80111f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80111ec:	2303      	movs	r3, #3
 80111ee:	e038      	b.n	8011262 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d10b      	bne.n	801120e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80111f6:	69bb      	ldr	r3, [r7, #24]
 80111f8:	881b      	ldrh	r3, [r3, #0]
 80111fa:	461a      	mov	r2, r3
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011204:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	3302      	adds	r3, #2
 801120a:	61bb      	str	r3, [r7, #24]
 801120c:	e007      	b.n	801121e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801120e:	69fb      	ldr	r3, [r7, #28]
 8011210:	781a      	ldrb	r2, [r3, #0]
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011218:	69fb      	ldr	r3, [r7, #28]
 801121a:	3301      	adds	r3, #1
 801121c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011224:	b29b      	uxth	r3, r3
 8011226:	3b01      	subs	r3, #1
 8011228:	b29a      	uxth	r2, r3
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011236:	b29b      	uxth	r3, r3
 8011238:	2b00      	cmp	r3, #0
 801123a:	d1cc      	bne.n	80111d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	2200      	movs	r2, #0
 8011244:	2140      	movs	r1, #64	; 0x40
 8011246:	68f8      	ldr	r0, [r7, #12]
 8011248:	f000 fb47 	bl	80118da <UART_WaitOnFlagUntilTimeout>
 801124c:	4603      	mov	r3, r0
 801124e:	2b00      	cmp	r3, #0
 8011250:	d001      	beq.n	8011256 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8011252:	2303      	movs	r3, #3
 8011254:	e005      	b.n	8011262 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2220      	movs	r2, #32
 801125a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801125c:	2300      	movs	r3, #0
 801125e:	e000      	b.n	8011262 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8011260:	2302      	movs	r3, #2
  }
}
 8011262:	4618      	mov	r0, r3
 8011264:	3720      	adds	r7, #32
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
	...

0801126c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b088      	sub	sp, #32
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011274:	2300      	movs	r3, #0
 8011276:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	689a      	ldr	r2, [r3, #8]
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	691b      	ldr	r3, [r3, #16]
 8011280:	431a      	orrs	r2, r3
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	695b      	ldr	r3, [r3, #20]
 8011286:	431a      	orrs	r2, r3
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	69db      	ldr	r3, [r3, #28]
 801128c:	4313      	orrs	r3, r2
 801128e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	681a      	ldr	r2, [r3, #0]
 8011296:	4ba7      	ldr	r3, [pc, #668]	; (8011534 <UART_SetConfig+0x2c8>)
 8011298:	4013      	ands	r3, r2
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	6812      	ldr	r2, [r2, #0]
 801129e:	6979      	ldr	r1, [r7, #20]
 80112a0:	430b      	orrs	r3, r1
 80112a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	68da      	ldr	r2, [r3, #12]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	430a      	orrs	r2, r1
 80112b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	699b      	ldr	r3, [r3, #24]
 80112be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6a1b      	ldr	r3, [r3, #32]
 80112c4:	697a      	ldr	r2, [r7, #20]
 80112c6:	4313      	orrs	r3, r2
 80112c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	689b      	ldr	r3, [r3, #8]
 80112d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	697a      	ldr	r2, [r7, #20]
 80112da:	430a      	orrs	r2, r1
 80112dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	4a95      	ldr	r2, [pc, #596]	; (8011538 <UART_SetConfig+0x2cc>)
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d120      	bne.n	801132a <UART_SetConfig+0xbe>
 80112e8:	4b94      	ldr	r3, [pc, #592]	; (801153c <UART_SetConfig+0x2d0>)
 80112ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112ee:	f003 0303 	and.w	r3, r3, #3
 80112f2:	2b03      	cmp	r3, #3
 80112f4:	d816      	bhi.n	8011324 <UART_SetConfig+0xb8>
 80112f6:	a201      	add	r2, pc, #4	; (adr r2, 80112fc <UART_SetConfig+0x90>)
 80112f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112fc:	0801130d 	.word	0x0801130d
 8011300:	08011319 	.word	0x08011319
 8011304:	08011313 	.word	0x08011313
 8011308:	0801131f 	.word	0x0801131f
 801130c:	2301      	movs	r3, #1
 801130e:	77fb      	strb	r3, [r7, #31]
 8011310:	e14f      	b.n	80115b2 <UART_SetConfig+0x346>
 8011312:	2302      	movs	r3, #2
 8011314:	77fb      	strb	r3, [r7, #31]
 8011316:	e14c      	b.n	80115b2 <UART_SetConfig+0x346>
 8011318:	2304      	movs	r3, #4
 801131a:	77fb      	strb	r3, [r7, #31]
 801131c:	e149      	b.n	80115b2 <UART_SetConfig+0x346>
 801131e:	2308      	movs	r3, #8
 8011320:	77fb      	strb	r3, [r7, #31]
 8011322:	e146      	b.n	80115b2 <UART_SetConfig+0x346>
 8011324:	2310      	movs	r3, #16
 8011326:	77fb      	strb	r3, [r7, #31]
 8011328:	e143      	b.n	80115b2 <UART_SetConfig+0x346>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	4a84      	ldr	r2, [pc, #528]	; (8011540 <UART_SetConfig+0x2d4>)
 8011330:	4293      	cmp	r3, r2
 8011332:	d132      	bne.n	801139a <UART_SetConfig+0x12e>
 8011334:	4b81      	ldr	r3, [pc, #516]	; (801153c <UART_SetConfig+0x2d0>)
 8011336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801133a:	f003 030c 	and.w	r3, r3, #12
 801133e:	2b0c      	cmp	r3, #12
 8011340:	d828      	bhi.n	8011394 <UART_SetConfig+0x128>
 8011342:	a201      	add	r2, pc, #4	; (adr r2, 8011348 <UART_SetConfig+0xdc>)
 8011344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011348:	0801137d 	.word	0x0801137d
 801134c:	08011395 	.word	0x08011395
 8011350:	08011395 	.word	0x08011395
 8011354:	08011395 	.word	0x08011395
 8011358:	08011389 	.word	0x08011389
 801135c:	08011395 	.word	0x08011395
 8011360:	08011395 	.word	0x08011395
 8011364:	08011395 	.word	0x08011395
 8011368:	08011383 	.word	0x08011383
 801136c:	08011395 	.word	0x08011395
 8011370:	08011395 	.word	0x08011395
 8011374:	08011395 	.word	0x08011395
 8011378:	0801138f 	.word	0x0801138f
 801137c:	2300      	movs	r3, #0
 801137e:	77fb      	strb	r3, [r7, #31]
 8011380:	e117      	b.n	80115b2 <UART_SetConfig+0x346>
 8011382:	2302      	movs	r3, #2
 8011384:	77fb      	strb	r3, [r7, #31]
 8011386:	e114      	b.n	80115b2 <UART_SetConfig+0x346>
 8011388:	2304      	movs	r3, #4
 801138a:	77fb      	strb	r3, [r7, #31]
 801138c:	e111      	b.n	80115b2 <UART_SetConfig+0x346>
 801138e:	2308      	movs	r3, #8
 8011390:	77fb      	strb	r3, [r7, #31]
 8011392:	e10e      	b.n	80115b2 <UART_SetConfig+0x346>
 8011394:	2310      	movs	r3, #16
 8011396:	77fb      	strb	r3, [r7, #31]
 8011398:	e10b      	b.n	80115b2 <UART_SetConfig+0x346>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	4a69      	ldr	r2, [pc, #420]	; (8011544 <UART_SetConfig+0x2d8>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d120      	bne.n	80113e6 <UART_SetConfig+0x17a>
 80113a4:	4b65      	ldr	r3, [pc, #404]	; (801153c <UART_SetConfig+0x2d0>)
 80113a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80113ae:	2b30      	cmp	r3, #48	; 0x30
 80113b0:	d013      	beq.n	80113da <UART_SetConfig+0x16e>
 80113b2:	2b30      	cmp	r3, #48	; 0x30
 80113b4:	d814      	bhi.n	80113e0 <UART_SetConfig+0x174>
 80113b6:	2b20      	cmp	r3, #32
 80113b8:	d009      	beq.n	80113ce <UART_SetConfig+0x162>
 80113ba:	2b20      	cmp	r3, #32
 80113bc:	d810      	bhi.n	80113e0 <UART_SetConfig+0x174>
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d002      	beq.n	80113c8 <UART_SetConfig+0x15c>
 80113c2:	2b10      	cmp	r3, #16
 80113c4:	d006      	beq.n	80113d4 <UART_SetConfig+0x168>
 80113c6:	e00b      	b.n	80113e0 <UART_SetConfig+0x174>
 80113c8:	2300      	movs	r3, #0
 80113ca:	77fb      	strb	r3, [r7, #31]
 80113cc:	e0f1      	b.n	80115b2 <UART_SetConfig+0x346>
 80113ce:	2302      	movs	r3, #2
 80113d0:	77fb      	strb	r3, [r7, #31]
 80113d2:	e0ee      	b.n	80115b2 <UART_SetConfig+0x346>
 80113d4:	2304      	movs	r3, #4
 80113d6:	77fb      	strb	r3, [r7, #31]
 80113d8:	e0eb      	b.n	80115b2 <UART_SetConfig+0x346>
 80113da:	2308      	movs	r3, #8
 80113dc:	77fb      	strb	r3, [r7, #31]
 80113de:	e0e8      	b.n	80115b2 <UART_SetConfig+0x346>
 80113e0:	2310      	movs	r3, #16
 80113e2:	77fb      	strb	r3, [r7, #31]
 80113e4:	e0e5      	b.n	80115b2 <UART_SetConfig+0x346>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4a57      	ldr	r2, [pc, #348]	; (8011548 <UART_SetConfig+0x2dc>)
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d120      	bne.n	8011432 <UART_SetConfig+0x1c6>
 80113f0:	4b52      	ldr	r3, [pc, #328]	; (801153c <UART_SetConfig+0x2d0>)
 80113f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80113fa:	2bc0      	cmp	r3, #192	; 0xc0
 80113fc:	d013      	beq.n	8011426 <UART_SetConfig+0x1ba>
 80113fe:	2bc0      	cmp	r3, #192	; 0xc0
 8011400:	d814      	bhi.n	801142c <UART_SetConfig+0x1c0>
 8011402:	2b80      	cmp	r3, #128	; 0x80
 8011404:	d009      	beq.n	801141a <UART_SetConfig+0x1ae>
 8011406:	2b80      	cmp	r3, #128	; 0x80
 8011408:	d810      	bhi.n	801142c <UART_SetConfig+0x1c0>
 801140a:	2b00      	cmp	r3, #0
 801140c:	d002      	beq.n	8011414 <UART_SetConfig+0x1a8>
 801140e:	2b40      	cmp	r3, #64	; 0x40
 8011410:	d006      	beq.n	8011420 <UART_SetConfig+0x1b4>
 8011412:	e00b      	b.n	801142c <UART_SetConfig+0x1c0>
 8011414:	2300      	movs	r3, #0
 8011416:	77fb      	strb	r3, [r7, #31]
 8011418:	e0cb      	b.n	80115b2 <UART_SetConfig+0x346>
 801141a:	2302      	movs	r3, #2
 801141c:	77fb      	strb	r3, [r7, #31]
 801141e:	e0c8      	b.n	80115b2 <UART_SetConfig+0x346>
 8011420:	2304      	movs	r3, #4
 8011422:	77fb      	strb	r3, [r7, #31]
 8011424:	e0c5      	b.n	80115b2 <UART_SetConfig+0x346>
 8011426:	2308      	movs	r3, #8
 8011428:	77fb      	strb	r3, [r7, #31]
 801142a:	e0c2      	b.n	80115b2 <UART_SetConfig+0x346>
 801142c:	2310      	movs	r3, #16
 801142e:	77fb      	strb	r3, [r7, #31]
 8011430:	e0bf      	b.n	80115b2 <UART_SetConfig+0x346>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	4a45      	ldr	r2, [pc, #276]	; (801154c <UART_SetConfig+0x2e0>)
 8011438:	4293      	cmp	r3, r2
 801143a:	d125      	bne.n	8011488 <UART_SetConfig+0x21c>
 801143c:	4b3f      	ldr	r3, [pc, #252]	; (801153c <UART_SetConfig+0x2d0>)
 801143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801144a:	d017      	beq.n	801147c <UART_SetConfig+0x210>
 801144c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011450:	d817      	bhi.n	8011482 <UART_SetConfig+0x216>
 8011452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011456:	d00b      	beq.n	8011470 <UART_SetConfig+0x204>
 8011458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801145c:	d811      	bhi.n	8011482 <UART_SetConfig+0x216>
 801145e:	2b00      	cmp	r3, #0
 8011460:	d003      	beq.n	801146a <UART_SetConfig+0x1fe>
 8011462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011466:	d006      	beq.n	8011476 <UART_SetConfig+0x20a>
 8011468:	e00b      	b.n	8011482 <UART_SetConfig+0x216>
 801146a:	2300      	movs	r3, #0
 801146c:	77fb      	strb	r3, [r7, #31]
 801146e:	e0a0      	b.n	80115b2 <UART_SetConfig+0x346>
 8011470:	2302      	movs	r3, #2
 8011472:	77fb      	strb	r3, [r7, #31]
 8011474:	e09d      	b.n	80115b2 <UART_SetConfig+0x346>
 8011476:	2304      	movs	r3, #4
 8011478:	77fb      	strb	r3, [r7, #31]
 801147a:	e09a      	b.n	80115b2 <UART_SetConfig+0x346>
 801147c:	2308      	movs	r3, #8
 801147e:	77fb      	strb	r3, [r7, #31]
 8011480:	e097      	b.n	80115b2 <UART_SetConfig+0x346>
 8011482:	2310      	movs	r3, #16
 8011484:	77fb      	strb	r3, [r7, #31]
 8011486:	e094      	b.n	80115b2 <UART_SetConfig+0x346>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a30      	ldr	r2, [pc, #192]	; (8011550 <UART_SetConfig+0x2e4>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d125      	bne.n	80114de <UART_SetConfig+0x272>
 8011492:	4b2a      	ldr	r3, [pc, #168]	; (801153c <UART_SetConfig+0x2d0>)
 8011494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011498:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801149c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80114a0:	d017      	beq.n	80114d2 <UART_SetConfig+0x266>
 80114a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80114a6:	d817      	bhi.n	80114d8 <UART_SetConfig+0x26c>
 80114a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114ac:	d00b      	beq.n	80114c6 <UART_SetConfig+0x25a>
 80114ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114b2:	d811      	bhi.n	80114d8 <UART_SetConfig+0x26c>
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d003      	beq.n	80114c0 <UART_SetConfig+0x254>
 80114b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114bc:	d006      	beq.n	80114cc <UART_SetConfig+0x260>
 80114be:	e00b      	b.n	80114d8 <UART_SetConfig+0x26c>
 80114c0:	2301      	movs	r3, #1
 80114c2:	77fb      	strb	r3, [r7, #31]
 80114c4:	e075      	b.n	80115b2 <UART_SetConfig+0x346>
 80114c6:	2302      	movs	r3, #2
 80114c8:	77fb      	strb	r3, [r7, #31]
 80114ca:	e072      	b.n	80115b2 <UART_SetConfig+0x346>
 80114cc:	2304      	movs	r3, #4
 80114ce:	77fb      	strb	r3, [r7, #31]
 80114d0:	e06f      	b.n	80115b2 <UART_SetConfig+0x346>
 80114d2:	2308      	movs	r3, #8
 80114d4:	77fb      	strb	r3, [r7, #31]
 80114d6:	e06c      	b.n	80115b2 <UART_SetConfig+0x346>
 80114d8:	2310      	movs	r3, #16
 80114da:	77fb      	strb	r3, [r7, #31]
 80114dc:	e069      	b.n	80115b2 <UART_SetConfig+0x346>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4a1c      	ldr	r2, [pc, #112]	; (8011554 <UART_SetConfig+0x2e8>)
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d137      	bne.n	8011558 <UART_SetConfig+0x2ec>
 80114e8:	4b14      	ldr	r3, [pc, #80]	; (801153c <UART_SetConfig+0x2d0>)
 80114ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80114f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80114f6:	d017      	beq.n	8011528 <UART_SetConfig+0x2bc>
 80114f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80114fc:	d817      	bhi.n	801152e <UART_SetConfig+0x2c2>
 80114fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011502:	d00b      	beq.n	801151c <UART_SetConfig+0x2b0>
 8011504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011508:	d811      	bhi.n	801152e <UART_SetConfig+0x2c2>
 801150a:	2b00      	cmp	r3, #0
 801150c:	d003      	beq.n	8011516 <UART_SetConfig+0x2aa>
 801150e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011512:	d006      	beq.n	8011522 <UART_SetConfig+0x2b6>
 8011514:	e00b      	b.n	801152e <UART_SetConfig+0x2c2>
 8011516:	2300      	movs	r3, #0
 8011518:	77fb      	strb	r3, [r7, #31]
 801151a:	e04a      	b.n	80115b2 <UART_SetConfig+0x346>
 801151c:	2302      	movs	r3, #2
 801151e:	77fb      	strb	r3, [r7, #31]
 8011520:	e047      	b.n	80115b2 <UART_SetConfig+0x346>
 8011522:	2304      	movs	r3, #4
 8011524:	77fb      	strb	r3, [r7, #31]
 8011526:	e044      	b.n	80115b2 <UART_SetConfig+0x346>
 8011528:	2308      	movs	r3, #8
 801152a:	77fb      	strb	r3, [r7, #31]
 801152c:	e041      	b.n	80115b2 <UART_SetConfig+0x346>
 801152e:	2310      	movs	r3, #16
 8011530:	77fb      	strb	r3, [r7, #31]
 8011532:	e03e      	b.n	80115b2 <UART_SetConfig+0x346>
 8011534:	efff69f3 	.word	0xefff69f3
 8011538:	40011000 	.word	0x40011000
 801153c:	40023800 	.word	0x40023800
 8011540:	40004400 	.word	0x40004400
 8011544:	40004800 	.word	0x40004800
 8011548:	40004c00 	.word	0x40004c00
 801154c:	40005000 	.word	0x40005000
 8011550:	40011400 	.word	0x40011400
 8011554:	40007800 	.word	0x40007800
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4a71      	ldr	r2, [pc, #452]	; (8011724 <UART_SetConfig+0x4b8>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d125      	bne.n	80115ae <UART_SetConfig+0x342>
 8011562:	4b71      	ldr	r3, [pc, #452]	; (8011728 <UART_SetConfig+0x4bc>)
 8011564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801156c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011570:	d017      	beq.n	80115a2 <UART_SetConfig+0x336>
 8011572:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011576:	d817      	bhi.n	80115a8 <UART_SetConfig+0x33c>
 8011578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801157c:	d00b      	beq.n	8011596 <UART_SetConfig+0x32a>
 801157e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011582:	d811      	bhi.n	80115a8 <UART_SetConfig+0x33c>
 8011584:	2b00      	cmp	r3, #0
 8011586:	d003      	beq.n	8011590 <UART_SetConfig+0x324>
 8011588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801158c:	d006      	beq.n	801159c <UART_SetConfig+0x330>
 801158e:	e00b      	b.n	80115a8 <UART_SetConfig+0x33c>
 8011590:	2300      	movs	r3, #0
 8011592:	77fb      	strb	r3, [r7, #31]
 8011594:	e00d      	b.n	80115b2 <UART_SetConfig+0x346>
 8011596:	2302      	movs	r3, #2
 8011598:	77fb      	strb	r3, [r7, #31]
 801159a:	e00a      	b.n	80115b2 <UART_SetConfig+0x346>
 801159c:	2304      	movs	r3, #4
 801159e:	77fb      	strb	r3, [r7, #31]
 80115a0:	e007      	b.n	80115b2 <UART_SetConfig+0x346>
 80115a2:	2308      	movs	r3, #8
 80115a4:	77fb      	strb	r3, [r7, #31]
 80115a6:	e004      	b.n	80115b2 <UART_SetConfig+0x346>
 80115a8:	2310      	movs	r3, #16
 80115aa:	77fb      	strb	r3, [r7, #31]
 80115ac:	e001      	b.n	80115b2 <UART_SetConfig+0x346>
 80115ae:	2310      	movs	r3, #16
 80115b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	69db      	ldr	r3, [r3, #28]
 80115b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115ba:	d15b      	bne.n	8011674 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80115bc:	7ffb      	ldrb	r3, [r7, #31]
 80115be:	2b08      	cmp	r3, #8
 80115c0:	d827      	bhi.n	8011612 <UART_SetConfig+0x3a6>
 80115c2:	a201      	add	r2, pc, #4	; (adr r2, 80115c8 <UART_SetConfig+0x35c>)
 80115c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115c8:	080115ed 	.word	0x080115ed
 80115cc:	080115f5 	.word	0x080115f5
 80115d0:	080115fd 	.word	0x080115fd
 80115d4:	08011613 	.word	0x08011613
 80115d8:	08011603 	.word	0x08011603
 80115dc:	08011613 	.word	0x08011613
 80115e0:	08011613 	.word	0x08011613
 80115e4:	08011613 	.word	0x08011613
 80115e8:	0801160b 	.word	0x0801160b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80115ec:	f7fb fd9e 	bl	800d12c <HAL_RCC_GetPCLK1Freq>
 80115f0:	61b8      	str	r0, [r7, #24]
        break;
 80115f2:	e013      	b.n	801161c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80115f4:	f7fb fdae 	bl	800d154 <HAL_RCC_GetPCLK2Freq>
 80115f8:	61b8      	str	r0, [r7, #24]
        break;
 80115fa:	e00f      	b.n	801161c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80115fc:	4b4b      	ldr	r3, [pc, #300]	; (801172c <UART_SetConfig+0x4c0>)
 80115fe:	61bb      	str	r3, [r7, #24]
        break;
 8011600:	e00c      	b.n	801161c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011602:	f7fb fcd1 	bl	800cfa8 <HAL_RCC_GetSysClockFreq>
 8011606:	61b8      	str	r0, [r7, #24]
        break;
 8011608:	e008      	b.n	801161c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801160a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801160e:	61bb      	str	r3, [r7, #24]
        break;
 8011610:	e004      	b.n	801161c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8011612:	2300      	movs	r3, #0
 8011614:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011616:	2301      	movs	r3, #1
 8011618:	77bb      	strb	r3, [r7, #30]
        break;
 801161a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801161c:	69bb      	ldr	r3, [r7, #24]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d074      	beq.n	801170c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	005a      	lsls	r2, r3, #1
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	085b      	lsrs	r3, r3, #1
 801162c:	441a      	add	r2, r3
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	fbb2 f3f3 	udiv	r3, r2, r3
 8011636:	b29b      	uxth	r3, r3
 8011638:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	2b0f      	cmp	r3, #15
 801163e:	d916      	bls.n	801166e <UART_SetConfig+0x402>
 8011640:	693b      	ldr	r3, [r7, #16]
 8011642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011646:	d212      	bcs.n	801166e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	b29b      	uxth	r3, r3
 801164c:	f023 030f 	bic.w	r3, r3, #15
 8011650:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	085b      	lsrs	r3, r3, #1
 8011656:	b29b      	uxth	r3, r3
 8011658:	f003 0307 	and.w	r3, r3, #7
 801165c:	b29a      	uxth	r2, r3
 801165e:	89fb      	ldrh	r3, [r7, #14]
 8011660:	4313      	orrs	r3, r2
 8011662:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	89fa      	ldrh	r2, [r7, #14]
 801166a:	60da      	str	r2, [r3, #12]
 801166c:	e04e      	b.n	801170c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 801166e:	2301      	movs	r3, #1
 8011670:	77bb      	strb	r3, [r7, #30]
 8011672:	e04b      	b.n	801170c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011674:	7ffb      	ldrb	r3, [r7, #31]
 8011676:	2b08      	cmp	r3, #8
 8011678:	d827      	bhi.n	80116ca <UART_SetConfig+0x45e>
 801167a:	a201      	add	r2, pc, #4	; (adr r2, 8011680 <UART_SetConfig+0x414>)
 801167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011680:	080116a5 	.word	0x080116a5
 8011684:	080116ad 	.word	0x080116ad
 8011688:	080116b5 	.word	0x080116b5
 801168c:	080116cb 	.word	0x080116cb
 8011690:	080116bb 	.word	0x080116bb
 8011694:	080116cb 	.word	0x080116cb
 8011698:	080116cb 	.word	0x080116cb
 801169c:	080116cb 	.word	0x080116cb
 80116a0:	080116c3 	.word	0x080116c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116a4:	f7fb fd42 	bl	800d12c <HAL_RCC_GetPCLK1Freq>
 80116a8:	61b8      	str	r0, [r7, #24]
        break;
 80116aa:	e013      	b.n	80116d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80116ac:	f7fb fd52 	bl	800d154 <HAL_RCC_GetPCLK2Freq>
 80116b0:	61b8      	str	r0, [r7, #24]
        break;
 80116b2:	e00f      	b.n	80116d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80116b4:	4b1d      	ldr	r3, [pc, #116]	; (801172c <UART_SetConfig+0x4c0>)
 80116b6:	61bb      	str	r3, [r7, #24]
        break;
 80116b8:	e00c      	b.n	80116d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80116ba:	f7fb fc75 	bl	800cfa8 <HAL_RCC_GetSysClockFreq>
 80116be:	61b8      	str	r0, [r7, #24]
        break;
 80116c0:	e008      	b.n	80116d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116c6:	61bb      	str	r3, [r7, #24]
        break;
 80116c8:	e004      	b.n	80116d4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80116ca:	2300      	movs	r3, #0
 80116cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80116ce:	2301      	movs	r3, #1
 80116d0:	77bb      	strb	r3, [r7, #30]
        break;
 80116d2:	bf00      	nop
    }

    if (pclk != 0U)
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d018      	beq.n	801170c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	085a      	lsrs	r2, r3, #1
 80116e0:	69bb      	ldr	r3, [r7, #24]
 80116e2:	441a      	add	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	685b      	ldr	r3, [r3, #4]
 80116e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	2b0f      	cmp	r3, #15
 80116f4:	d908      	bls.n	8011708 <UART_SetConfig+0x49c>
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116fc:	d204      	bcs.n	8011708 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	693a      	ldr	r2, [r7, #16]
 8011704:	60da      	str	r2, [r3, #12]
 8011706:	e001      	b.n	801170c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8011708:	2301      	movs	r3, #1
 801170a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2200      	movs	r2, #0
 8011710:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2200      	movs	r2, #0
 8011716:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8011718:	7fbb      	ldrb	r3, [r7, #30]
}
 801171a:	4618      	mov	r0, r3
 801171c:	3720      	adds	r7, #32
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
 8011722:	bf00      	nop
 8011724:	40007c00 	.word	0x40007c00
 8011728:	40023800 	.word	0x40023800
 801172c:	00f42400 	.word	0x00f42400

08011730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011730:	b480      	push	{r7}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801173c:	f003 0301 	and.w	r3, r3, #1
 8011740:	2b00      	cmp	r3, #0
 8011742:	d00a      	beq.n	801175a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	430a      	orrs	r2, r1
 8011758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801175e:	f003 0302 	and.w	r3, r3, #2
 8011762:	2b00      	cmp	r3, #0
 8011764:	d00a      	beq.n	801177c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	685b      	ldr	r3, [r3, #4]
 801176c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	430a      	orrs	r2, r1
 801177a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011780:	f003 0304 	and.w	r3, r3, #4
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00a      	beq.n	801179e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	430a      	orrs	r2, r1
 801179c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117a2:	f003 0308 	and.w	r3, r3, #8
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d00a      	beq.n	80117c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	430a      	orrs	r2, r1
 80117be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c4:	f003 0310 	and.w	r3, r3, #16
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d00a      	beq.n	80117e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	689b      	ldr	r3, [r3, #8]
 80117d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	430a      	orrs	r2, r1
 80117e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e6:	f003 0320 	and.w	r3, r3, #32
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00a      	beq.n	8011804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	689b      	ldr	r3, [r3, #8]
 80117f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	430a      	orrs	r2, r1
 8011802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801180c:	2b00      	cmp	r3, #0
 801180e:	d01a      	beq.n	8011846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	430a      	orrs	r2, r1
 8011824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801182a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801182e:	d10a      	bne.n	8011846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	430a      	orrs	r2, r1
 8011844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801184e:	2b00      	cmp	r3, #0
 8011850:	d00a      	beq.n	8011868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	430a      	orrs	r2, r1
 8011866:	605a      	str	r2, [r3, #4]
  }
}
 8011868:	bf00      	nop
 801186a:	370c      	adds	r7, #12
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b086      	sub	sp, #24
 8011878:	af02      	add	r7, sp, #8
 801187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2200      	movs	r2, #0
 8011880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011884:	f7f5 f8a2 	bl	80069cc <HAL_GetTick>
 8011888:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	f003 0308 	and.w	r3, r3, #8
 8011894:	2b08      	cmp	r3, #8
 8011896:	d10e      	bne.n	80118b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801189c:	9300      	str	r3, [sp, #0]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	2200      	movs	r2, #0
 80118a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f000 f817 	bl	80118da <UART_WaitOnFlagUntilTimeout>
 80118ac:	4603      	mov	r3, r0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d001      	beq.n	80118b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118b2:	2303      	movs	r3, #3
 80118b4:	e00d      	b.n	80118d2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2220      	movs	r2, #32
 80118ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2220      	movs	r2, #32
 80118c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80118d0:	2300      	movs	r3, #0
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3710      	adds	r7, #16
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}

080118da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80118da:	b580      	push	{r7, lr}
 80118dc:	b084      	sub	sp, #16
 80118de:	af00      	add	r7, sp, #0
 80118e0:	60f8      	str	r0, [r7, #12]
 80118e2:	60b9      	str	r1, [r7, #8]
 80118e4:	603b      	str	r3, [r7, #0]
 80118e6:	4613      	mov	r3, r2
 80118e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80118ea:	e05e      	b.n	80119aa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118f2:	d05a      	beq.n	80119aa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80118f4:	f7f5 f86a 	bl	80069cc <HAL_GetTick>
 80118f8:	4602      	mov	r2, r0
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	1ad3      	subs	r3, r2, r3
 80118fe:	69ba      	ldr	r2, [r7, #24]
 8011900:	429a      	cmp	r2, r3
 8011902:	d302      	bcc.n	801190a <UART_WaitOnFlagUntilTimeout+0x30>
 8011904:	69bb      	ldr	r3, [r7, #24]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d11b      	bne.n	8011942 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011918:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	689a      	ldr	r2, [r3, #8]
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f022 0201 	bic.w	r2, r2, #1
 8011928:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	2220      	movs	r2, #32
 801192e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2220      	movs	r2, #32
 8011934:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2200      	movs	r2, #0
 801193a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 801193e:	2303      	movs	r3, #3
 8011940:	e043      	b.n	80119ca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	f003 0304 	and.w	r3, r3, #4
 801194c:	2b00      	cmp	r3, #0
 801194e:	d02c      	beq.n	80119aa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	69db      	ldr	r3, [r3, #28]
 8011956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801195a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801195e:	d124      	bne.n	80119aa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011968:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	681a      	ldr	r2, [r3, #0]
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011978:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	689a      	ldr	r2, [r3, #8]
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	f022 0201 	bic.w	r2, r2, #1
 8011988:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	2220      	movs	r2, #32
 801198e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2220      	movs	r2, #32
 8011994:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	2220      	movs	r2, #32
 801199a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2200      	movs	r2, #0
 80119a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80119a6:	2303      	movs	r3, #3
 80119a8:	e00f      	b.n	80119ca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	69da      	ldr	r2, [r3, #28]
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	4013      	ands	r3, r2
 80119b4:	68ba      	ldr	r2, [r7, #8]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	bf0c      	ite	eq
 80119ba:	2301      	moveq	r3, #1
 80119bc:	2300      	movne	r3, #0
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	461a      	mov	r2, r3
 80119c2:	79fb      	ldrb	r3, [r7, #7]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d091      	beq.n	80118ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80119c8:	2300      	movs	r3, #0
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3710      	adds	r7, #16
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
	...

080119d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80119d4:	b480      	push	{r7}
 80119d6:	b085      	sub	sp, #20
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80119de:	2300      	movs	r3, #0
 80119e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80119e2:	2300      	movs	r3, #0
 80119e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d027      	beq.n	8011a3e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80119f4:	68fa      	ldr	r2, [r7, #12]
 80119f6:	4b2f      	ldr	r3, [pc, #188]	; (8011ab4 <FMC_SDRAM_Init+0xe0>)
 80119f8:	4013      	ands	r3, r2
 80119fa:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011a04:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8011a0a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8011a10:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8011a16:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8011a1c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8011a22:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8011a28:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011a2e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011a30:	68fa      	ldr	r2, [r7, #12]
 8011a32:	4313      	orrs	r3, r2
 8011a34:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	68fa      	ldr	r2, [r7, #12]
 8011a3a:	601a      	str	r2, [r3, #0]
 8011a3c:	e032      	b.n	8011aa4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011a4a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011a54:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011a5a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011a5c:	68fa      	ldr	r2, [r7, #12]
 8011a5e:	4313      	orrs	r3, r2
 8011a60:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	685b      	ldr	r3, [r3, #4]
 8011a66:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011a68:	68ba      	ldr	r2, [r7, #8]
 8011a6a:	4b12      	ldr	r3, [pc, #72]	; (8011ab4 <FMC_SDRAM_Init+0xe0>)
 8011a6c:	4013      	ands	r3, r2
 8011a6e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011a78:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8011a7e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8011a84:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8011a8a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8011a90:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011a92:	68ba      	ldr	r2, [r7, #8]
 8011a94:	4313      	orrs	r3, r2
 8011a96:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	68fa      	ldr	r2, [r7, #12]
 8011a9c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	68ba      	ldr	r2, [r7, #8]
 8011aa2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8011aa4:	2300      	movs	r3, #0
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3714      	adds	r7, #20
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop
 8011ab4:	ffff8000 	.word	0xffff8000

08011ab8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011ab8:	b480      	push	{r7}
 8011aba:	b087      	sub	sp, #28
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d02e      	beq.n	8011b30 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	689b      	ldr	r3, [r3, #8]
 8011ad6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011ade:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	3b01      	subs	r3, #1
 8011aec:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011aee:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	689b      	ldr	r3, [r3, #8]
 8011af4:	3b01      	subs	r3, #1
 8011af6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8011af8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	68db      	ldr	r3, [r3, #12]
 8011afe:	3b01      	subs	r3, #1
 8011b00:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011b02:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	691b      	ldr	r3, [r3, #16]
 8011b08:	3b01      	subs	r3, #1
 8011b0a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8011b0c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	695b      	ldr	r3, [r3, #20]
 8011b12:	3b01      	subs	r3, #1
 8011b14:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011b16:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	699b      	ldr	r3, [r3, #24]
 8011b1c:	3b01      	subs	r3, #1
 8011b1e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011b20:	4313      	orrs	r3, r2
 8011b22:	697a      	ldr	r2, [r7, #20]
 8011b24:	4313      	orrs	r3, r2
 8011b26:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	697a      	ldr	r2, [r7, #20]
 8011b2c:	609a      	str	r2, [r3, #8]
 8011b2e:	e039      	b.n	8011ba4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8011b36:	697a      	ldr	r2, [r7, #20]
 8011b38:	4b1e      	ldr	r3, [pc, #120]	; (8011bb4 <FMC_SDRAM_Timing_Init+0xfc>)
 8011b3a:	4013      	ands	r3, r2
 8011b3c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	68db      	ldr	r3, [r3, #12]
 8011b42:	3b01      	subs	r3, #1
 8011b44:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	695b      	ldr	r3, [r3, #20]
 8011b4a:	3b01      	subs	r3, #1
 8011b4c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	697a      	ldr	r2, [r7, #20]
 8011b52:	4313      	orrs	r3, r2
 8011b54:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011b62:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	3b01      	subs	r3, #1
 8011b70:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011b72:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	689b      	ldr	r3, [r3, #8]
 8011b78:	3b01      	subs	r3, #1
 8011b7a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8011b7c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	691b      	ldr	r3, [r3, #16]
 8011b82:	3b01      	subs	r3, #1
 8011b84:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011b86:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	699b      	ldr	r3, [r3, #24]
 8011b8c:	3b01      	subs	r3, #1
 8011b8e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011b90:	4313      	orrs	r3, r2
 8011b92:	693a      	ldr	r2, [r7, #16]
 8011b94:	4313      	orrs	r3, r2
 8011b96:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	697a      	ldr	r2, [r7, #20]
 8011b9c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	693a      	ldr	r2, [r7, #16]
 8011ba2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8011ba4:	2300      	movs	r3, #0
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	371c      	adds	r7, #28
 8011baa:	46bd      	mov	sp, r7
 8011bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb0:	4770      	bx	lr
 8011bb2:	bf00      	nop
 8011bb4:	ff0f0fff 	.word	0xff0f0fff

08011bb8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8011bb8:	b480      	push	{r7}
 8011bba:	b085      	sub	sp, #20
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	60b9      	str	r1, [r7, #8]
 8011bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	691a      	ldr	r2, [r3, #16]
 8011bc8:	4b0c      	ldr	r3, [pc, #48]	; (8011bfc <FMC_SDRAM_SendCommand+0x44>)
 8011bca:	4013      	ands	r3, r2
 8011bcc:	68ba      	ldr	r2, [r7, #8]
 8011bce:	6811      	ldr	r1, [r2, #0]
 8011bd0:	68ba      	ldr	r2, [r7, #8]
 8011bd2:	6852      	ldr	r2, [r2, #4]
 8011bd4:	4311      	orrs	r1, r2
 8011bd6:	68ba      	ldr	r2, [r7, #8]
 8011bd8:	6892      	ldr	r2, [r2, #8]
 8011bda:	3a01      	subs	r2, #1
 8011bdc:	0152      	lsls	r2, r2, #5
 8011bde:	4311      	orrs	r1, r2
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	68d2      	ldr	r2, [r2, #12]
 8011be4:	0252      	lsls	r2, r2, #9
 8011be6:	430a      	orrs	r2, r1
 8011be8:	431a      	orrs	r2, r3
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8011bee:	2300      	movs	r3, #0
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3714      	adds	r7, #20
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr
 8011bfc:	ffc00000 	.word	0xffc00000

08011c00 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	695a      	ldr	r2, [r3, #20]
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	005b      	lsls	r3, r3, #1
 8011c12:	431a      	orrs	r2, r3
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8011c18:	2300      	movs	r3, #0
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	370c      	adds	r7, #12
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c24:	4770      	bx	lr
	...

08011c28 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011c28:	b084      	sub	sp, #16
 8011c2a:	b480      	push	{r7}
 8011c2c:	b085      	sub	sp, #20
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
 8011c32:	f107 001c 	add.w	r0, r7, #28
 8011c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011c3e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011c40:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011c42:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011c46:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011c4a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8011c4e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011c52:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011c54:	68fa      	ldr	r2, [r7, #12]
 8011c56:	4313      	orrs	r3, r2
 8011c58:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	685a      	ldr	r2, [r3, #4]
 8011c5e:	4b07      	ldr	r3, [pc, #28]	; (8011c7c <SDMMC_Init+0x54>)
 8011c60:	4013      	ands	r3, r2
 8011c62:	68fa      	ldr	r2, [r7, #12]
 8011c64:	431a      	orrs	r2, r3
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011c6a:	2300      	movs	r3, #0
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3714      	adds	r7, #20
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	b004      	add	sp, #16
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	ffff8100 	.word	0xffff8100

08011c80 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b083      	sub	sp, #12
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	370c      	adds	r7, #12
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr

08011c9a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8011c9a:	b580      	push	{r7, lr}
 8011c9c:	b082      	sub	sp, #8
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2203      	movs	r2, #3
 8011ca6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8011ca8:	2002      	movs	r0, #2
 8011caa:	f7f4 fe9b 	bl	80069e4 <HAL_Delay>
  
  return HAL_OK;
 8011cae:	2300      	movs	r3, #0
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3708      	adds	r7, #8
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}

08011cb8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	f003 0303 	and.w	r3, r3, #3
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	370c      	adds	r7, #12
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr

08011cd4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b085      	sub	sp, #20
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011cf2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011cf8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011cfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011d00:	68fa      	ldr	r2, [r7, #12]
 8011d02:	4313      	orrs	r3, r2
 8011d04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	68da      	ldr	r2, [r3, #12]
 8011d0a:	4b06      	ldr	r3, [pc, #24]	; (8011d24 <SDMMC_SendCommand+0x50>)
 8011d0c:	4013      	ands	r3, r2
 8011d0e:	68fa      	ldr	r2, [r7, #12]
 8011d10:	431a      	orrs	r2, r3
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011d16:	2300      	movs	r3, #0
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3714      	adds	r7, #20
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr
 8011d24:	fffff000 	.word	0xfffff000

08011d28 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	691b      	ldr	r3, [r3, #16]
 8011d34:	b2db      	uxtb	r3, r3
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	370c      	adds	r7, #12
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr

08011d42 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011d42:	b480      	push	{r7}
 8011d44:	b085      	sub	sp, #20
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
 8011d4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	3314      	adds	r3, #20
 8011d50:	461a      	mov	r2, r3
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	4413      	add	r3, r2
 8011d56:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	681b      	ldr	r3, [r3, #0]
}  
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3714      	adds	r7, #20
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr

08011d68 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b085      	sub	sp, #20
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011d72:	2300      	movs	r3, #0
 8011d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	681a      	ldr	r2, [r3, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	685a      	ldr	r2, [r3, #4]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011d8e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011d94:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011d9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011d9c:	68fa      	ldr	r2, [r7, #12]
 8011d9e:	4313      	orrs	r3, r2
 8011da0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	431a      	orrs	r2, r3
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011db2:	2300      	movs	r3, #0

}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3714      	adds	r7, #20
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr

08011dc0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b088      	sub	sp, #32
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011dce:	2310      	movs	r3, #16
 8011dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011dd2:	2340      	movs	r3, #64	; 0x40
 8011dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011de0:	f107 0308 	add.w	r3, r7, #8
 8011de4:	4619      	mov	r1, r3
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f7ff ff74 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8011df0:	2110      	movs	r1, #16
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f000 fa46 	bl	8012284 <SDMMC_GetCmdResp1>
 8011df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dfa:	69fb      	ldr	r3, [r7, #28]
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3720      	adds	r7, #32
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b088      	sub	sp, #32
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011e12:	2311      	movs	r3, #17
 8011e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e16:	2340      	movs	r3, #64	; 0x40
 8011e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e24:	f107 0308 	add.w	r3, r7, #8
 8011e28:	4619      	mov	r1, r3
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7ff ff52 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e34:	2111      	movs	r1, #17
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 fa24 	bl	8012284 <SDMMC_GetCmdResp1>
 8011e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e3e:	69fb      	ldr	r3, [r7, #28]
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3720      	adds	r7, #32
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b088      	sub	sp, #32
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011e56:	2312      	movs	r3, #18
 8011e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e5a:	2340      	movs	r3, #64	; 0x40
 8011e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e68:	f107 0308 	add.w	r3, r7, #8
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7ff ff30 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e78:	2112      	movs	r1, #18
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 fa02 	bl	8012284 <SDMMC_GetCmdResp1>
 8011e80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e82:	69fb      	ldr	r3, [r7, #28]
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3720      	adds	r7, #32
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b088      	sub	sp, #32
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011e9a:	2318      	movs	r3, #24
 8011e9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e9e:	2340      	movs	r3, #64	; 0x40
 8011ea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011eaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011eac:	f107 0308 	add.w	r3, r7, #8
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f7ff ff0e 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ebc:	2118      	movs	r1, #24
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f000 f9e0 	bl	8012284 <SDMMC_GetCmdResp1>
 8011ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ec6:	69fb      	ldr	r3, [r7, #28]
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3720      	adds	r7, #32
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b088      	sub	sp, #32
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011ede:	2319      	movs	r3, #25
 8011ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ee2:	2340      	movs	r3, #64	; 0x40
 8011ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011eee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ef0:	f107 0308 	add.w	r3, r7, #8
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f7ff feec 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f00:	2119      	movs	r1, #25
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f000 f9be 	bl	8012284 <SDMMC_GetCmdResp1>
 8011f08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f0a:	69fb      	ldr	r3, [r7, #28]
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3720      	adds	r7, #32
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b088      	sub	sp, #32
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011f20:	230c      	movs	r3, #12
 8011f22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f24:	2340      	movs	r3, #64	; 0x40
 8011f26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f32:	f107 0308 	add.w	r3, r7, #8
 8011f36:	4619      	mov	r1, r3
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7ff fecb 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011f3e:	4a05      	ldr	r2, [pc, #20]	; (8011f54 <SDMMC_CmdStopTransfer+0x40>)
 8011f40:	210c      	movs	r1, #12
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 f99e 	bl	8012284 <SDMMC_GetCmdResp1>
 8011f48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f4a:	69fb      	ldr	r3, [r7, #28]
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3720      	adds	r7, #32
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	05f5e100 	.word	0x05f5e100

08011f58 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b08a      	sub	sp, #40	; 0x28
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011f68:	2307      	movs	r3, #7
 8011f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f6c:	2340      	movs	r3, #64	; 0x40
 8011f6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f70:	2300      	movs	r3, #0
 8011f72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f78:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f7a:	f107 0310 	add.w	r3, r7, #16
 8011f7e:	4619      	mov	r1, r3
 8011f80:	68f8      	ldr	r0, [r7, #12]
 8011f82:	f7ff fea7 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f8a:	2107      	movs	r1, #7
 8011f8c:	68f8      	ldr	r0, [r7, #12]
 8011f8e:	f000 f979 	bl	8012284 <SDMMC_GetCmdResp1>
 8011f92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3728      	adds	r7, #40	; 0x28
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}

08011f9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011f9e:	b580      	push	{r7, lr}
 8011fa0:	b088      	sub	sp, #32
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011faa:	2300      	movs	r3, #0
 8011fac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fbc:	f107 0308 	add.w	r3, r7, #8
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f7ff fe86 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f000 f92f 	bl	801222c <SDMMC_GetCmdError>
 8011fce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fd0:	69fb      	ldr	r3, [r7, #28]
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3720      	adds	r7, #32
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b088      	sub	sp, #32
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011fe2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011fe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011fe8:	2308      	movs	r3, #8
 8011fea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fec:	2340      	movs	r3, #64	; 0x40
 8011fee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ff8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ffa:	f107 0308 	add.w	r3, r7, #8
 8011ffe:	4619      	mov	r1, r3
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f7ff fe67 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 fb26 	bl	8012658 <SDMMC_GetCmdResp7>
 801200c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801200e:	69fb      	ldr	r3, [r7, #28]
}
 8012010:	4618      	mov	r0, r3
 8012012:	3720      	adds	r7, #32
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b088      	sub	sp, #32
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012026:	2337      	movs	r3, #55	; 0x37
 8012028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801202a:	2340      	movs	r3, #64	; 0x40
 801202c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801202e:	2300      	movs	r3, #0
 8012030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012036:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012038:	f107 0308 	add.w	r3, r7, #8
 801203c:	4619      	mov	r1, r3
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f7ff fe48 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012044:	f241 3288 	movw	r2, #5000	; 0x1388
 8012048:	2137      	movs	r1, #55	; 0x37
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f000 f91a 	bl	8012284 <SDMMC_GetCmdResp1>
 8012050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012052:	69fb      	ldr	r3, [r7, #28]
}
 8012054:	4618      	mov	r0, r3
 8012056:	3720      	adds	r7, #32
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b088      	sub	sp, #32
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8012066:	683a      	ldr	r2, [r7, #0]
 8012068:	4b0d      	ldr	r3, [pc, #52]	; (80120a0 <SDMMC_CmdAppOperCommand+0x44>)
 801206a:	4313      	orrs	r3, r2
 801206c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801206e:	2329      	movs	r3, #41	; 0x29
 8012070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012072:	2340      	movs	r3, #64	; 0x40
 8012074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012076:	2300      	movs	r3, #0
 8012078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801207a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801207e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012080:	f107 0308 	add.w	r3, r7, #8
 8012084:	4619      	mov	r1, r3
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f7ff fe24 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 fa2f 	bl	80124f0 <SDMMC_GetCmdResp3>
 8012092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012094:	69fb      	ldr	r3, [r7, #28]
}
 8012096:	4618      	mov	r0, r3
 8012098:	3720      	adds	r7, #32
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	80100000 	.word	0x80100000

080120a4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b088      	sub	sp, #32
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80120b2:	2306      	movs	r3, #6
 80120b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120b6:	2340      	movs	r3, #64	; 0x40
 80120b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120ba:	2300      	movs	r3, #0
 80120bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120c4:	f107 0308 	add.w	r3, r7, #8
 80120c8:	4619      	mov	r1, r3
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7ff fe02 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80120d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80120d4:	2106      	movs	r1, #6
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 f8d4 	bl	8012284 <SDMMC_GetCmdResp1>
 80120dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120de:	69fb      	ldr	r3, [r7, #28]
}
 80120e0:	4618      	mov	r0, r3
 80120e2:	3720      	adds	r7, #32
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}

080120e8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b088      	sub	sp, #32
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80120f0:	2300      	movs	r3, #0
 80120f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80120f4:	2333      	movs	r3, #51	; 0x33
 80120f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120f8:	2340      	movs	r3, #64	; 0x40
 80120fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120fc:	2300      	movs	r3, #0
 80120fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012106:	f107 0308 	add.w	r3, r7, #8
 801210a:	4619      	mov	r1, r3
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f7ff fde1 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012112:	f241 3288 	movw	r2, #5000	; 0x1388
 8012116:	2133      	movs	r1, #51	; 0x33
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f000 f8b3 	bl	8012284 <SDMMC_GetCmdResp1>
 801211e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012120:	69fb      	ldr	r3, [r7, #28]
}
 8012122:	4618      	mov	r0, r3
 8012124:	3720      	adds	r7, #32
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}

0801212a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801212a:	b580      	push	{r7, lr}
 801212c:	b088      	sub	sp, #32
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012132:	2300      	movs	r3, #0
 8012134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012136:	2302      	movs	r3, #2
 8012138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801213a:	23c0      	movs	r3, #192	; 0xc0
 801213c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801213e:	2300      	movs	r3, #0
 8012140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012148:	f107 0308 	add.w	r3, r7, #8
 801214c:	4619      	mov	r1, r3
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7ff fdc0 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f000 f983 	bl	8012460 <SDMMC_GetCmdResp2>
 801215a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801215c:	69fb      	ldr	r3, [r7, #28]
}
 801215e:	4618      	mov	r0, r3
 8012160:	3720      	adds	r7, #32
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}

08012166 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b088      	sub	sp, #32
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
 801216e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012174:	2309      	movs	r3, #9
 8012176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012178:	23c0      	movs	r3, #192	; 0xc0
 801217a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801217c:	2300      	movs	r3, #0
 801217e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012184:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012186:	f107 0308 	add.w	r3, r7, #8
 801218a:	4619      	mov	r1, r3
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f7ff fda1 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f000 f964 	bl	8012460 <SDMMC_GetCmdResp2>
 8012198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801219a:	69fb      	ldr	r3, [r7, #28]
}
 801219c:	4618      	mov	r0, r3
 801219e:	3720      	adds	r7, #32
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b088      	sub	sp, #32
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80121ae:	2300      	movs	r3, #0
 80121b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80121b2:	2303      	movs	r3, #3
 80121b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121b6:	2340      	movs	r3, #64	; 0x40
 80121b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121ba:	2300      	movs	r3, #0
 80121bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121c4:	f107 0308 	add.w	r3, r7, #8
 80121c8:	4619      	mov	r1, r3
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7ff fd82 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80121d0:	683a      	ldr	r2, [r7, #0]
 80121d2:	2103      	movs	r1, #3
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f000 f9c9 	bl	801256c <SDMMC_GetCmdResp6>
 80121da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121dc:	69fb      	ldr	r3, [r7, #28]
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3720      	adds	r7, #32
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80121e6:	b580      	push	{r7, lr}
 80121e8:	b088      	sub	sp, #32
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	6078      	str	r0, [r7, #4]
 80121ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80121f4:	230d      	movs	r3, #13
 80121f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121f8:	2340      	movs	r3, #64	; 0x40
 80121fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121fc:	2300      	movs	r3, #0
 80121fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012206:	f107 0308 	add.w	r3, r7, #8
 801220a:	4619      	mov	r1, r3
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7ff fd61 	bl	8011cd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012212:	f241 3288 	movw	r2, #5000	; 0x1388
 8012216:	210d      	movs	r1, #13
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 f833 	bl	8012284 <SDMMC_GetCmdResp1>
 801221e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012220:	69fb      	ldr	r3, [r7, #28]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3720      	adds	r7, #32
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}
	...

0801222c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801222c:	b480      	push	{r7}
 801222e:	b085      	sub	sp, #20
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012234:	4b11      	ldr	r3, [pc, #68]	; (801227c <SDMMC_GetCmdError+0x50>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	4a11      	ldr	r2, [pc, #68]	; (8012280 <SDMMC_GetCmdError+0x54>)
 801223a:	fba2 2303 	umull	r2, r3, r2, r3
 801223e:	0a5b      	lsrs	r3, r3, #9
 8012240:	f241 3288 	movw	r2, #5000	; 0x1388
 8012244:	fb02 f303 	mul.w	r3, r2, r3
 8012248:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	1e5a      	subs	r2, r3, #1
 801224e:	60fa      	str	r2, [r7, #12]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d102      	bne.n	801225a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012254:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012258:	e009      	b.n	801226e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012262:	2b00      	cmp	r3, #0
 8012264:	d0f1      	beq.n	801224a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	22c5      	movs	r2, #197	; 0xc5
 801226a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801226c:	2300      	movs	r3, #0
}
 801226e:	4618      	mov	r0, r3
 8012270:	3714      	adds	r7, #20
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop
 801227c:	20000008 	.word	0x20000008
 8012280:	10624dd3 	.word	0x10624dd3

08012284 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b088      	sub	sp, #32
 8012288:	af00      	add	r7, sp, #0
 801228a:	60f8      	str	r0, [r7, #12]
 801228c:	460b      	mov	r3, r1
 801228e:	607a      	str	r2, [r7, #4]
 8012290:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012292:	4b70      	ldr	r3, [pc, #448]	; (8012454 <SDMMC_GetCmdResp1+0x1d0>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	4a70      	ldr	r2, [pc, #448]	; (8012458 <SDMMC_GetCmdResp1+0x1d4>)
 8012298:	fba2 2303 	umull	r2, r3, r2, r3
 801229c:	0a5a      	lsrs	r2, r3, #9
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	fb02 f303 	mul.w	r3, r2, r3
 80122a4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	1e5a      	subs	r2, r3, #1
 80122aa:	61fa      	str	r2, [r7, #28]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d102      	bne.n	80122b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80122b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80122b4:	e0c9      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122ba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80122bc:	69bb      	ldr	r3, [r7, #24]
 80122be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d0ef      	beq.n	80122a6 <SDMMC_GetCmdResp1+0x22>
 80122c6:	69bb      	ldr	r3, [r7, #24]
 80122c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d1ea      	bne.n	80122a6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122d4:	f003 0304 	and.w	r3, r3, #4
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d004      	beq.n	80122e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2204      	movs	r2, #4
 80122e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80122e2:	2304      	movs	r3, #4
 80122e4:	e0b1      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122ea:	f003 0301 	and.w	r3, r3, #1
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d004      	beq.n	80122fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2201      	movs	r2, #1
 80122f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122f8:	2301      	movs	r3, #1
 80122fa:	e0a6      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	22c5      	movs	r2, #197	; 0xc5
 8012300:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012302:	68f8      	ldr	r0, [r7, #12]
 8012304:	f7ff fd10 	bl	8011d28 <SDMMC_GetCommandResponse>
 8012308:	4603      	mov	r3, r0
 801230a:	461a      	mov	r2, r3
 801230c:	7afb      	ldrb	r3, [r7, #11]
 801230e:	4293      	cmp	r3, r2
 8012310:	d001      	beq.n	8012316 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012312:	2301      	movs	r3, #1
 8012314:	e099      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012316:	2100      	movs	r1, #0
 8012318:	68f8      	ldr	r0, [r7, #12]
 801231a:	f7ff fd12 	bl	8011d42 <SDMMC_GetResponse>
 801231e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012320:	697a      	ldr	r2, [r7, #20]
 8012322:	4b4e      	ldr	r3, [pc, #312]	; (801245c <SDMMC_GetCmdResp1+0x1d8>)
 8012324:	4013      	ands	r3, r2
 8012326:	2b00      	cmp	r3, #0
 8012328:	d101      	bne.n	801232e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801232a:	2300      	movs	r3, #0
 801232c:	e08d      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	2b00      	cmp	r3, #0
 8012332:	da02      	bge.n	801233a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012338:	e087      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012340:	2b00      	cmp	r3, #0
 8012342:	d001      	beq.n	8012348 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012344:	2340      	movs	r3, #64	; 0x40
 8012346:	e080      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801234e:	2b00      	cmp	r3, #0
 8012350:	d001      	beq.n	8012356 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012352:	2380      	movs	r3, #128	; 0x80
 8012354:	e079      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801235c:	2b00      	cmp	r3, #0
 801235e:	d002      	beq.n	8012366 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012364:	e071      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801236c:	2b00      	cmp	r3, #0
 801236e:	d002      	beq.n	8012376 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012374:	e069      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801237c:	2b00      	cmp	r3, #0
 801237e:	d002      	beq.n	8012386 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012384:	e061      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801238c:	2b00      	cmp	r3, #0
 801238e:	d002      	beq.n	8012396 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012394:	e059      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801239c:	2b00      	cmp	r3, #0
 801239e:	d002      	beq.n	80123a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80123a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123a4:	e051      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d002      	beq.n	80123b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80123b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80123b4:	e049      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d002      	beq.n	80123c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80123c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80123c4:	e041      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d002      	beq.n	80123d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80123d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80123d4:	e039      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d002      	beq.n	80123e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80123e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80123e4:	e031      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d002      	beq.n	80123f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80123f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80123f4:	e029      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d002      	beq.n	8012406 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012400:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012404:	e021      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801240c:	2b00      	cmp	r3, #0
 801240e:	d002      	beq.n	8012416 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012410:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012414:	e019      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801241c:	2b00      	cmp	r3, #0
 801241e:	d002      	beq.n	8012426 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012420:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012424:	e011      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801242c:	2b00      	cmp	r3, #0
 801242e:	d002      	beq.n	8012436 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012430:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012434:	e009      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	f003 0308 	and.w	r3, r3, #8
 801243c:	2b00      	cmp	r3, #0
 801243e:	d002      	beq.n	8012446 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012440:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012444:	e001      	b.n	801244a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801244a:	4618      	mov	r0, r3
 801244c:	3720      	adds	r7, #32
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	20000008 	.word	0x20000008
 8012458:	10624dd3 	.word	0x10624dd3
 801245c:	fdffe008 	.word	0xfdffe008

08012460 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012460:	b480      	push	{r7}
 8012462:	b085      	sub	sp, #20
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012468:	4b1f      	ldr	r3, [pc, #124]	; (80124e8 <SDMMC_GetCmdResp2+0x88>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	4a1f      	ldr	r2, [pc, #124]	; (80124ec <SDMMC_GetCmdResp2+0x8c>)
 801246e:	fba2 2303 	umull	r2, r3, r2, r3
 8012472:	0a5b      	lsrs	r3, r3, #9
 8012474:	f241 3288 	movw	r2, #5000	; 0x1388
 8012478:	fb02 f303 	mul.w	r3, r2, r3
 801247c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	1e5a      	subs	r2, r3, #1
 8012482:	60fa      	str	r2, [r7, #12]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d102      	bne.n	801248e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801248c:	e026      	b.n	80124dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012492:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801249a:	2b00      	cmp	r3, #0
 801249c:	d0ef      	beq.n	801247e <SDMMC_GetCmdResp2+0x1e>
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d1ea      	bne.n	801247e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ac:	f003 0304 	and.w	r3, r3, #4
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d004      	beq.n	80124be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2204      	movs	r2, #4
 80124b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80124ba:	2304      	movs	r3, #4
 80124bc:	e00e      	b.n	80124dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124c2:	f003 0301 	and.w	r3, r3, #1
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d004      	beq.n	80124d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2201      	movs	r2, #1
 80124ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124d0:	2301      	movs	r3, #1
 80124d2:	e003      	b.n	80124dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	22c5      	movs	r2, #197	; 0xc5
 80124d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80124da:	2300      	movs	r3, #0
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3714      	adds	r7, #20
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr
 80124e8:	20000008 	.word	0x20000008
 80124ec:	10624dd3 	.word	0x10624dd3

080124f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80124f0:	b480      	push	{r7}
 80124f2:	b085      	sub	sp, #20
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80124f8:	4b1a      	ldr	r3, [pc, #104]	; (8012564 <SDMMC_GetCmdResp3+0x74>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	4a1a      	ldr	r2, [pc, #104]	; (8012568 <SDMMC_GetCmdResp3+0x78>)
 80124fe:	fba2 2303 	umull	r2, r3, r2, r3
 8012502:	0a5b      	lsrs	r3, r3, #9
 8012504:	f241 3288 	movw	r2, #5000	; 0x1388
 8012508:	fb02 f303 	mul.w	r3, r2, r3
 801250c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	1e5a      	subs	r2, r3, #1
 8012512:	60fa      	str	r2, [r7, #12]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d102      	bne.n	801251e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012518:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801251c:	e01b      	b.n	8012556 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012522:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801252a:	2b00      	cmp	r3, #0
 801252c:	d0ef      	beq.n	801250e <SDMMC_GetCmdResp3+0x1e>
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012534:	2b00      	cmp	r3, #0
 8012536:	d1ea      	bne.n	801250e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801253c:	f003 0304 	and.w	r3, r3, #4
 8012540:	2b00      	cmp	r3, #0
 8012542:	d004      	beq.n	801254e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2204      	movs	r2, #4
 8012548:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801254a:	2304      	movs	r3, #4
 801254c:	e003      	b.n	8012556 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	22c5      	movs	r2, #197	; 0xc5
 8012552:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012554:	2300      	movs	r3, #0
}
 8012556:	4618      	mov	r0, r3
 8012558:	3714      	adds	r7, #20
 801255a:	46bd      	mov	sp, r7
 801255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012560:	4770      	bx	lr
 8012562:	bf00      	nop
 8012564:	20000008 	.word	0x20000008
 8012568:	10624dd3 	.word	0x10624dd3

0801256c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b088      	sub	sp, #32
 8012570:	af00      	add	r7, sp, #0
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	460b      	mov	r3, r1
 8012576:	607a      	str	r2, [r7, #4]
 8012578:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801257a:	4b35      	ldr	r3, [pc, #212]	; (8012650 <SDMMC_GetCmdResp6+0xe4>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	4a35      	ldr	r2, [pc, #212]	; (8012654 <SDMMC_GetCmdResp6+0xe8>)
 8012580:	fba2 2303 	umull	r2, r3, r2, r3
 8012584:	0a5b      	lsrs	r3, r3, #9
 8012586:	f241 3288 	movw	r2, #5000	; 0x1388
 801258a:	fb02 f303 	mul.w	r3, r2, r3
 801258e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8012590:	69fb      	ldr	r3, [r7, #28]
 8012592:	1e5a      	subs	r2, r3, #1
 8012594:	61fa      	str	r2, [r7, #28]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d102      	bne.n	80125a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801259a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801259e:	e052      	b.n	8012646 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d0ef      	beq.n	8012590 <SDMMC_GetCmdResp6+0x24>
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d1ea      	bne.n	8012590 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125be:	f003 0304 	and.w	r3, r3, #4
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d004      	beq.n	80125d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	2204      	movs	r2, #4
 80125ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125cc:	2304      	movs	r3, #4
 80125ce:	e03a      	b.n	8012646 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125d4:	f003 0301 	and.w	r3, r3, #1
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d004      	beq.n	80125e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	2201      	movs	r2, #1
 80125e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125e2:	2301      	movs	r3, #1
 80125e4:	e02f      	b.n	8012646 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f7ff fb9e 	bl	8011d28 <SDMMC_GetCommandResponse>
 80125ec:	4603      	mov	r3, r0
 80125ee:	461a      	mov	r2, r3
 80125f0:	7afb      	ldrb	r3, [r7, #11]
 80125f2:	4293      	cmp	r3, r2
 80125f4:	d001      	beq.n	80125fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125f6:	2301      	movs	r3, #1
 80125f8:	e025      	b.n	8012646 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	22c5      	movs	r2, #197	; 0xc5
 80125fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012600:	2100      	movs	r1, #0
 8012602:	68f8      	ldr	r0, [r7, #12]
 8012604:	f7ff fb9d 	bl	8011d42 <SDMMC_GetResponse>
 8012608:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012610:	2b00      	cmp	r3, #0
 8012612:	d106      	bne.n	8012622 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	0c1b      	lsrs	r3, r3, #16
 8012618:	b29a      	uxth	r2, r3
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801261e:	2300      	movs	r3, #0
 8012620:	e011      	b.n	8012646 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012628:	2b00      	cmp	r3, #0
 801262a:	d002      	beq.n	8012632 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801262c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012630:	e009      	b.n	8012646 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801263c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012640:	e001      	b.n	8012646 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012646:	4618      	mov	r0, r3
 8012648:	3720      	adds	r7, #32
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
 801264e:	bf00      	nop
 8012650:	20000008 	.word	0x20000008
 8012654:	10624dd3 	.word	0x10624dd3

08012658 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012658:	b480      	push	{r7}
 801265a:	b085      	sub	sp, #20
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012660:	4b22      	ldr	r3, [pc, #136]	; (80126ec <SDMMC_GetCmdResp7+0x94>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	4a22      	ldr	r2, [pc, #136]	; (80126f0 <SDMMC_GetCmdResp7+0x98>)
 8012666:	fba2 2303 	umull	r2, r3, r2, r3
 801266a:	0a5b      	lsrs	r3, r3, #9
 801266c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012670:	fb02 f303 	mul.w	r3, r2, r3
 8012674:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	1e5a      	subs	r2, r3, #1
 801267a:	60fa      	str	r2, [r7, #12]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d102      	bne.n	8012686 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012684:	e02c      	b.n	80126e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801268a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012692:	2b00      	cmp	r3, #0
 8012694:	d0ef      	beq.n	8012676 <SDMMC_GetCmdResp7+0x1e>
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801269c:	2b00      	cmp	r3, #0
 801269e:	d1ea      	bne.n	8012676 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126a4:	f003 0304 	and.w	r3, r3, #4
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d004      	beq.n	80126b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2204      	movs	r2, #4
 80126b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80126b2:	2304      	movs	r3, #4
 80126b4:	e014      	b.n	80126e0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126ba:	f003 0301 	and.w	r3, r3, #1
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d004      	beq.n	80126cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	2201      	movs	r2, #1
 80126c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80126c8:	2301      	movs	r3, #1
 80126ca:	e009      	b.n	80126e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d002      	beq.n	80126de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2240      	movs	r2, #64	; 0x40
 80126dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80126de:	2300      	movs	r3, #0
  
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3714      	adds	r7, #20
 80126e4:	46bd      	mov	sp, r7
 80126e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ea:	4770      	bx	lr
 80126ec:	20000008 	.word	0x20000008
 80126f0:	10624dd3 	.word	0x10624dd3

080126f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80126f4:	b084      	sub	sp, #16
 80126f6:	b580      	push	{r7, lr}
 80126f8:	b084      	sub	sp, #16
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
 80126fe:	f107 001c 	add.w	r0, r7, #28
 8012702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012708:	2b01      	cmp	r3, #1
 801270a:	d120      	bne.n	801274e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	68da      	ldr	r2, [r3, #12]
 801271c:	4b20      	ldr	r3, [pc, #128]	; (80127a0 <USB_CoreInit+0xac>)
 801271e:	4013      	ands	r3, r2
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012732:	2b01      	cmp	r3, #1
 8012734:	d105      	bne.n	8012742 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f000 f942 	bl	80129cc <USB_CoreReset>
 8012748:	4603      	mov	r3, r0
 801274a:	73fb      	strb	r3, [r7, #15]
 801274c:	e010      	b.n	8012770 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	68db      	ldr	r3, [r3, #12]
 8012752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f000 f936 	bl	80129cc <USB_CoreReset>
 8012760:	4603      	mov	r3, r0
 8012762:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012768:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8012770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012772:	2b01      	cmp	r3, #1
 8012774:	d10b      	bne.n	801278e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	f043 0206 	orr.w	r2, r3, #6
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	689b      	ldr	r3, [r3, #8]
 8012786:	f043 0220 	orr.w	r2, r3, #32
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012790:	4618      	mov	r0, r3
 8012792:	3710      	adds	r7, #16
 8012794:	46bd      	mov	sp, r7
 8012796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801279a:	b004      	add	sp, #16
 801279c:	4770      	bx	lr
 801279e:	bf00      	nop
 80127a0:	ffbdffbf 	.word	0xffbdffbf

080127a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	689b      	ldr	r3, [r3, #8]
 80127b0:	f043 0201 	orr.w	r2, r3, #1
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80127b8:	2300      	movs	r3, #0
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	370c      	adds	r7, #12
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr

080127c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80127c6:	b480      	push	{r7}
 80127c8:	b083      	sub	sp, #12
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	689b      	ldr	r3, [r3, #8]
 80127d2:	f023 0201 	bic.w	r2, r3, #1
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80127da:	2300      	movs	r3, #0
}
 80127dc:	4618      	mov	r0, r3
 80127de:	370c      	adds	r7, #12
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	460b      	mov	r3, r1
 80127f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012800:	78fb      	ldrb	r3, [r7, #3]
 8012802:	2b01      	cmp	r3, #1
 8012804:	d106      	bne.n	8012814 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	60da      	str	r2, [r3, #12]
 8012812:	e00b      	b.n	801282c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8012814:	78fb      	ldrb	r3, [r7, #3]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d106      	bne.n	8012828 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	68db      	ldr	r3, [r3, #12]
 801281e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	60da      	str	r2, [r3, #12]
 8012826:	e001      	b.n	801282c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8012828:	2301      	movs	r3, #1
 801282a:	e003      	b.n	8012834 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 801282c:	2032      	movs	r0, #50	; 0x32
 801282e:	f7f4 f8d9 	bl	80069e4 <HAL_Delay>

  return HAL_OK;
 8012832:	2300      	movs	r3, #0
}
 8012834:	4618      	mov	r0, r3
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}

0801283c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801283c:	b480      	push	{r7}
 801283e:	b085      	sub	sp, #20
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
 8012844:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8012846:	2300      	movs	r3, #0
 8012848:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	019b      	lsls	r3, r3, #6
 801284e:	f043 0220 	orr.w	r2, r3, #32
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	3301      	adds	r3, #1
 801285a:	60fb      	str	r3, [r7, #12]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	4a09      	ldr	r2, [pc, #36]	; (8012884 <USB_FlushTxFifo+0x48>)
 8012860:	4293      	cmp	r3, r2
 8012862:	d901      	bls.n	8012868 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012864:	2303      	movs	r3, #3
 8012866:	e006      	b.n	8012876 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	691b      	ldr	r3, [r3, #16]
 801286c:	f003 0320 	and.w	r3, r3, #32
 8012870:	2b20      	cmp	r3, #32
 8012872:	d0f0      	beq.n	8012856 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012874:	2300      	movs	r3, #0
}
 8012876:	4618      	mov	r0, r3
 8012878:	3714      	adds	r7, #20
 801287a:	46bd      	mov	sp, r7
 801287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012880:	4770      	bx	lr
 8012882:	bf00      	nop
 8012884:	00030d40 	.word	0x00030d40

08012888 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012888:	b480      	push	{r7}
 801288a:	b085      	sub	sp, #20
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012890:	2300      	movs	r3, #0
 8012892:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2210      	movs	r2, #16
 8012898:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	3301      	adds	r3, #1
 801289e:	60fb      	str	r3, [r7, #12]
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	4a09      	ldr	r2, [pc, #36]	; (80128c8 <USB_FlushRxFifo+0x40>)
 80128a4:	4293      	cmp	r3, r2
 80128a6:	d901      	bls.n	80128ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80128a8:	2303      	movs	r3, #3
 80128aa:	e006      	b.n	80128ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	691b      	ldr	r3, [r3, #16]
 80128b0:	f003 0310 	and.w	r3, r3, #16
 80128b4:	2b10      	cmp	r3, #16
 80128b6:	d0f0      	beq.n	801289a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3714      	adds	r7, #20
 80128be:	46bd      	mov	sp, r7
 80128c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c4:	4770      	bx	lr
 80128c6:	bf00      	nop
 80128c8:	00030d40 	.word	0x00030d40

080128cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b089      	sub	sp, #36	; 0x24
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	4611      	mov	r1, r2
 80128d8:	461a      	mov	r2, r3
 80128da:	460b      	mov	r3, r1
 80128dc:	71fb      	strb	r3, [r7, #7]
 80128de:	4613      	mov	r3, r2
 80128e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80128ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d11a      	bne.n	8012928 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80128f2:	88bb      	ldrh	r3, [r7, #4]
 80128f4:	3303      	adds	r3, #3
 80128f6:	089b      	lsrs	r3, r3, #2
 80128f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80128fa:	2300      	movs	r3, #0
 80128fc:	61bb      	str	r3, [r7, #24]
 80128fe:	e00f      	b.n	8012920 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012900:	79fb      	ldrb	r3, [r7, #7]
 8012902:	031a      	lsls	r2, r3, #12
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	4413      	add	r3, r2
 8012908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801290c:	461a      	mov	r2, r3
 801290e:	69fb      	ldr	r3, [r7, #28]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012914:	69fb      	ldr	r3, [r7, #28]
 8012916:	3304      	adds	r3, #4
 8012918:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	3301      	adds	r3, #1
 801291e:	61bb      	str	r3, [r7, #24]
 8012920:	69ba      	ldr	r2, [r7, #24]
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	429a      	cmp	r2, r3
 8012926:	d3eb      	bcc.n	8012900 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012928:	2300      	movs	r3, #0
}
 801292a:	4618      	mov	r0, r3
 801292c:	3724      	adds	r7, #36	; 0x24
 801292e:	46bd      	mov	sp, r7
 8012930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012934:	4770      	bx	lr

08012936 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012936:	b480      	push	{r7}
 8012938:	b089      	sub	sp, #36	; 0x24
 801293a:	af00      	add	r7, sp, #0
 801293c:	60f8      	str	r0, [r7, #12]
 801293e:	60b9      	str	r1, [r7, #8]
 8012940:	4613      	mov	r3, r2
 8012942:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801294c:	88fb      	ldrh	r3, [r7, #6]
 801294e:	3303      	adds	r3, #3
 8012950:	089b      	lsrs	r3, r3, #2
 8012952:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012954:	2300      	movs	r3, #0
 8012956:	61bb      	str	r3, [r7, #24]
 8012958:	e00b      	b.n	8012972 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	69fb      	ldr	r3, [r7, #28]
 8012964:	601a      	str	r2, [r3, #0]
    pDest++;
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	3304      	adds	r3, #4
 801296a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801296c:	69bb      	ldr	r3, [r7, #24]
 801296e:	3301      	adds	r3, #1
 8012970:	61bb      	str	r3, [r7, #24]
 8012972:	69ba      	ldr	r2, [r7, #24]
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	429a      	cmp	r2, r3
 8012978:	d3ef      	bcc.n	801295a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801297a:	69fb      	ldr	r3, [r7, #28]
}
 801297c:	4618      	mov	r0, r3
 801297e:	3724      	adds	r7, #36	; 0x24
 8012980:	46bd      	mov	sp, r7
 8012982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012986:	4770      	bx	lr

08012988 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012988:	b480      	push	{r7}
 801298a:	b085      	sub	sp, #20
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	695b      	ldr	r3, [r3, #20]
 8012994:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	699b      	ldr	r3, [r3, #24]
 801299a:	68fa      	ldr	r2, [r7, #12]
 801299c:	4013      	ands	r3, r2
 801299e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80129a0:	68fb      	ldr	r3, [r7, #12]
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3714      	adds	r7, #20
 80129a6:	46bd      	mov	sp, r7
 80129a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ac:	4770      	bx	lr

080129ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80129ae:	b480      	push	{r7}
 80129b0:	b083      	sub	sp, #12
 80129b2:	af00      	add	r7, sp, #0
 80129b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	695b      	ldr	r3, [r3, #20]
 80129ba:	f003 0301 	and.w	r3, r3, #1
}
 80129be:	4618      	mov	r0, r3
 80129c0:	370c      	adds	r7, #12
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr
	...

080129cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80129cc:	b480      	push	{r7}
 80129ce:	b085      	sub	sp, #20
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80129d4:	2300      	movs	r3, #0
 80129d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	3301      	adds	r3, #1
 80129dc:	60fb      	str	r3, [r7, #12]
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	4a13      	ldr	r2, [pc, #76]	; (8012a30 <USB_CoreReset+0x64>)
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d901      	bls.n	80129ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80129e6:	2303      	movs	r3, #3
 80129e8:	e01b      	b.n	8012a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	691b      	ldr	r3, [r3, #16]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	daf2      	bge.n	80129d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80129f2:	2300      	movs	r3, #0
 80129f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	691b      	ldr	r3, [r3, #16]
 80129fa:	f043 0201 	orr.w	r2, r3, #1
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	3301      	adds	r3, #1
 8012a06:	60fb      	str	r3, [r7, #12]
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	4a09      	ldr	r2, [pc, #36]	; (8012a30 <USB_CoreReset+0x64>)
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d901      	bls.n	8012a14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012a10:	2303      	movs	r3, #3
 8012a12:	e006      	b.n	8012a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	691b      	ldr	r3, [r3, #16]
 8012a18:	f003 0301 	and.w	r3, r3, #1
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d0f0      	beq.n	8012a02 <USB_CoreReset+0x36>

  return HAL_OK;
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3714      	adds	r7, #20
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr
 8012a2e:	bf00      	nop
 8012a30:	00030d40 	.word	0x00030d40

08012a34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012a34:	b084      	sub	sp, #16
 8012a36:	b580      	push	{r7, lr}
 8012a38:	b084      	sub	sp, #16
 8012a3a:	af00      	add	r7, sp, #0
 8012a3c:	6078      	str	r0, [r7, #4]
 8012a3e:	f107 001c 	add.w	r0, r7, #28
 8012a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012a50:	461a      	mov	r2, r3
 8012a52:	2300      	movs	r3, #0
 8012a54:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a5a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d018      	beq.n	8012aa0 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8012a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a70:	2b01      	cmp	r3, #1
 8012a72:	d10a      	bne.n	8012a8a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	68ba      	ldr	r2, [r7, #8]
 8012a7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012a82:	f043 0304 	orr.w	r3, r3, #4
 8012a86:	6013      	str	r3, [r2, #0]
 8012a88:	e014      	b.n	8012ab4 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	68ba      	ldr	r2, [r7, #8]
 8012a94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012a98:	f023 0304 	bic.w	r3, r3, #4
 8012a9c:	6013      	str	r3, [r2, #0]
 8012a9e:	e009      	b.n	8012ab4 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	68ba      	ldr	r2, [r7, #8]
 8012aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012aae:	f023 0304 	bic.w	r3, r3, #4
 8012ab2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8012ab4:	2110      	movs	r1, #16
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	f7ff fec0 	bl	801283c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f7ff fee3 	bl	8012888 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	60fb      	str	r3, [r7, #12]
 8012ac6:	e015      	b.n	8012af4 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	015a      	lsls	r2, r3, #5
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	4413      	add	r3, r2
 8012ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ada:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	015a      	lsls	r2, r3, #5
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	4413      	add	r3, r2
 8012ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ae8:	461a      	mov	r2, r3
 8012aea:	2300      	movs	r3, #0
 8012aec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	3301      	adds	r3, #1
 8012af2:	60fb      	str	r3, [r7, #12]
 8012af4:	6a3b      	ldr	r3, [r7, #32]
 8012af6:	68fa      	ldr	r2, [r7, #12]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d3e5      	bcc.n	8012ac8 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8012afc:	2101      	movs	r1, #1
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f000 f8ac 	bl	8012c5c <USB_DriveVbus>

  HAL_Delay(200U);
 8012b04:	20c8      	movs	r0, #200	; 0xc8
 8012b06:	f7f3 ff6d 	bl	80069e4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b16:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d00b      	beq.n	8012b3c <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b2a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	4a14      	ldr	r2, [pc, #80]	; (8012b80 <USB_HostInit+0x14c>)
 8012b30:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	4a13      	ldr	r2, [pc, #76]	; (8012b84 <USB_HostInit+0x150>)
 8012b36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8012b3a:	e009      	b.n	8012b50 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2280      	movs	r2, #128	; 0x80
 8012b40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	4a10      	ldr	r2, [pc, #64]	; (8012b88 <USB_HostInit+0x154>)
 8012b46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	4a10      	ldr	r2, [pc, #64]	; (8012b8c <USB_HostInit+0x158>)
 8012b4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d105      	bne.n	8012b62 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	699b      	ldr	r3, [r3, #24]
 8012b5a:	f043 0210 	orr.w	r2, r3, #16
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	699a      	ldr	r2, [r3, #24]
 8012b66:	4b0a      	ldr	r3, [pc, #40]	; (8012b90 <USB_HostInit+0x15c>)
 8012b68:	4313      	orrs	r3, r2
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8012b6e:	2300      	movs	r3, #0
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3710      	adds	r7, #16
 8012b74:	46bd      	mov	sp, r7
 8012b76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012b7a:	b004      	add	sp, #16
 8012b7c:	4770      	bx	lr
 8012b7e:	bf00      	nop
 8012b80:	01000200 	.word	0x01000200
 8012b84:	00e00300 	.word	0x00e00300
 8012b88:	00600080 	.word	0x00600080
 8012b8c:	004000e0 	.word	0x004000e0
 8012b90:	a3200008 	.word	0xa3200008

08012b94 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8012b94:	b480      	push	{r7}
 8012b96:	b085      	sub	sp, #20
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	460b      	mov	r3, r1
 8012b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	68fa      	ldr	r2, [r7, #12]
 8012bae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012bb2:	f023 0303 	bic.w	r3, r3, #3
 8012bb6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012bbe:	681a      	ldr	r2, [r3, #0]
 8012bc0:	78fb      	ldrb	r3, [r7, #3]
 8012bc2:	f003 0303 	and.w	r3, r3, #3
 8012bc6:	68f9      	ldr	r1, [r7, #12]
 8012bc8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012bcc:	4313      	orrs	r3, r2
 8012bce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8012bd0:	78fb      	ldrb	r3, [r7, #3]
 8012bd2:	2b01      	cmp	r3, #1
 8012bd4:	d107      	bne.n	8012be6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012bdc:	461a      	mov	r2, r3
 8012bde:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8012be2:	6053      	str	r3, [r2, #4]
 8012be4:	e009      	b.n	8012bfa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8012be6:	78fb      	ldrb	r3, [r7, #3]
 8012be8:	2b02      	cmp	r3, #2
 8012bea:	d106      	bne.n	8012bfa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	f241 7370 	movw	r3, #6000	; 0x1770
 8012bf8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3714      	adds	r7, #20
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr

08012c08 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b084      	sub	sp, #16
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8012c14:	2300      	movs	r3, #0
 8012c16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8012c28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8012c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012c36:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8012c38:	2064      	movs	r0, #100	; 0x64
 8012c3a:	f7f3 fed3 	bl	80069e4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	68fa      	ldr	r2, [r7, #12]
 8012c42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8012c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012c4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8012c4c:	200a      	movs	r0, #10
 8012c4e:	f7f3 fec9 	bl	80069e4 <HAL_Delay>

  return HAL_OK;
 8012c52:	2300      	movs	r3, #0
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3710      	adds	r7, #16
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b085      	sub	sp, #20
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	460b      	mov	r3, r1
 8012c66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8012c80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d109      	bne.n	8012ca0 <USB_DriveVbus+0x44>
 8012c8c:	78fb      	ldrb	r3, [r7, #3]
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d106      	bne.n	8012ca0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8012c9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012c9e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012caa:	d109      	bne.n	8012cc0 <USB_DriveVbus+0x64>
 8012cac:	78fb      	ldrb	r3, [r7, #3]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d106      	bne.n	8012cc0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	68fa      	ldr	r2, [r7, #12]
 8012cb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8012cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012cbe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8012cc0:	2300      	movs	r3, #0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3714      	adds	r7, #20
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ccc:	4770      	bx	lr

08012cce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012cce:	b480      	push	{r7}
 8012cd0:	b085      	sub	sp, #20
 8012cd2:	af00      	add	r7, sp, #0
 8012cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	0c5b      	lsrs	r3, r3, #17
 8012cec:	f003 0303 	and.w	r3, r3, #3
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3714      	adds	r7, #20
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr

08012cfc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b085      	sub	sp, #20
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012d0e:	689b      	ldr	r3, [r3, #8]
 8012d10:	b29b      	uxth	r3, r3
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3714      	adds	r7, #20
 8012d16:	46bd      	mov	sp, r7
 8012d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1c:	4770      	bx	lr
	...

08012d20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b088      	sub	sp, #32
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	4608      	mov	r0, r1
 8012d2a:	4611      	mov	r1, r2
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	4603      	mov	r3, r0
 8012d30:	70fb      	strb	r3, [r7, #3]
 8012d32:	460b      	mov	r3, r1
 8012d34:	70bb      	strb	r3, [r7, #2]
 8012d36:	4613      	mov	r3, r2
 8012d38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8012d42:	78fb      	ldrb	r3, [r7, #3]
 8012d44:	015a      	lsls	r2, r3, #5
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	4413      	add	r3, r2
 8012d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d4e:	461a      	mov	r2, r3
 8012d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8012d56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d5a:	2b03      	cmp	r3, #3
 8012d5c:	d87e      	bhi.n	8012e5c <USB_HC_Init+0x13c>
 8012d5e:	a201      	add	r2, pc, #4	; (adr r2, 8012d64 <USB_HC_Init+0x44>)
 8012d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d64:	08012d75 	.word	0x08012d75
 8012d68:	08012e1f 	.word	0x08012e1f
 8012d6c:	08012d75 	.word	0x08012d75
 8012d70:	08012de1 	.word	0x08012de1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012d74:	78fb      	ldrb	r3, [r7, #3]
 8012d76:	015a      	lsls	r2, r3, #5
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	4413      	add	r3, r2
 8012d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d80:	461a      	mov	r2, r3
 8012d82:	f240 439d 	movw	r3, #1181	; 0x49d
 8012d86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8012d88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	da10      	bge.n	8012db2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012d90:	78fb      	ldrb	r3, [r7, #3]
 8012d92:	015a      	lsls	r2, r3, #5
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	4413      	add	r3, r2
 8012d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d9c:	68db      	ldr	r3, [r3, #12]
 8012d9e:	78fa      	ldrb	r2, [r7, #3]
 8012da0:	0151      	lsls	r1, r2, #5
 8012da2:	693a      	ldr	r2, [r7, #16]
 8012da4:	440a      	add	r2, r1
 8012da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012dae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8012db0:	e057      	b.n	8012e62 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d051      	beq.n	8012e62 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8012dbe:	78fb      	ldrb	r3, [r7, #3]
 8012dc0:	015a      	lsls	r2, r3, #5
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	78fa      	ldrb	r2, [r7, #3]
 8012dce:	0151      	lsls	r1, r2, #5
 8012dd0:	693a      	ldr	r2, [r7, #16]
 8012dd2:	440a      	add	r2, r1
 8012dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012dd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012ddc:	60d3      	str	r3, [r2, #12]
      break;
 8012dde:	e040      	b.n	8012e62 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012de0:	78fb      	ldrb	r3, [r7, #3]
 8012de2:	015a      	lsls	r2, r3, #5
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	4413      	add	r3, r2
 8012de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012dec:	461a      	mov	r2, r3
 8012dee:	f240 639d 	movw	r3, #1693	; 0x69d
 8012df2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8012df4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	da34      	bge.n	8012e66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012dfc:	78fb      	ldrb	r3, [r7, #3]
 8012dfe:	015a      	lsls	r2, r3, #5
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	4413      	add	r3, r2
 8012e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012e08:	68db      	ldr	r3, [r3, #12]
 8012e0a:	78fa      	ldrb	r2, [r7, #3]
 8012e0c:	0151      	lsls	r1, r2, #5
 8012e0e:	693a      	ldr	r2, [r7, #16]
 8012e10:	440a      	add	r2, r1
 8012e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012e1a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8012e1c:	e023      	b.n	8012e66 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012e1e:	78fb      	ldrb	r3, [r7, #3]
 8012e20:	015a      	lsls	r2, r3, #5
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	4413      	add	r3, r2
 8012e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	f240 2325 	movw	r3, #549	; 0x225
 8012e30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8012e32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	da17      	bge.n	8012e6a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8012e3a:	78fb      	ldrb	r3, [r7, #3]
 8012e3c:	015a      	lsls	r2, r3, #5
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	4413      	add	r3, r2
 8012e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012e46:	68db      	ldr	r3, [r3, #12]
 8012e48:	78fa      	ldrb	r2, [r7, #3]
 8012e4a:	0151      	lsls	r1, r2, #5
 8012e4c:	693a      	ldr	r2, [r7, #16]
 8012e4e:	440a      	add	r2, r1
 8012e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012e54:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8012e58:	60d3      	str	r3, [r2, #12]
      }
      break;
 8012e5a:	e006      	b.n	8012e6a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	77fb      	strb	r3, [r7, #31]
      break;
 8012e60:	e004      	b.n	8012e6c <USB_HC_Init+0x14c>
      break;
 8012e62:	bf00      	nop
 8012e64:	e002      	b.n	8012e6c <USB_HC_Init+0x14c>
      break;
 8012e66:	bf00      	nop
 8012e68:	e000      	b.n	8012e6c <USB_HC_Init+0x14c>
      break;
 8012e6a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012e72:	699a      	ldr	r2, [r3, #24]
 8012e74:	78fb      	ldrb	r3, [r7, #3]
 8012e76:	f003 030f 	and.w	r3, r3, #15
 8012e7a:	2101      	movs	r1, #1
 8012e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8012e80:	6939      	ldr	r1, [r7, #16]
 8012e82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012e86:	4313      	orrs	r3, r2
 8012e88:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	699b      	ldr	r3, [r3, #24]
 8012e8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8012e96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	da03      	bge.n	8012ea6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8012e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012ea2:	61bb      	str	r3, [r7, #24]
 8012ea4:	e001      	b.n	8012eaa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ff ff0f 	bl	8012cce <USB_GetHostSpeed>
 8012eb0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8012eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012eb6:	2b02      	cmp	r3, #2
 8012eb8:	d106      	bne.n	8012ec8 <USB_HC_Init+0x1a8>
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	2b02      	cmp	r3, #2
 8012ebe:	d003      	beq.n	8012ec8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8012ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012ec4:	617b      	str	r3, [r7, #20]
 8012ec6:	e001      	b.n	8012ecc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012ecc:	787b      	ldrb	r3, [r7, #1]
 8012ece:	059b      	lsls	r3, r3, #22
 8012ed0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8012ed4:	78bb      	ldrb	r3, [r7, #2]
 8012ed6:	02db      	lsls	r3, r3, #11
 8012ed8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012edc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012ede:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ee2:	049b      	lsls	r3, r3, #18
 8012ee4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8012ee8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012eea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012eec:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012ef0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012ef6:	78fb      	ldrb	r3, [r7, #3]
 8012ef8:	0159      	lsls	r1, r3, #5
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	440b      	add	r3, r1
 8012efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012f02:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012f08:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8012f0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012f0e:	2b03      	cmp	r3, #3
 8012f10:	d10f      	bne.n	8012f32 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8012f12:	78fb      	ldrb	r3, [r7, #3]
 8012f14:	015a      	lsls	r2, r3, #5
 8012f16:	693b      	ldr	r3, [r7, #16]
 8012f18:	4413      	add	r3, r2
 8012f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	78fa      	ldrb	r2, [r7, #3]
 8012f22:	0151      	lsls	r1, r2, #5
 8012f24:	693a      	ldr	r2, [r7, #16]
 8012f26:	440a      	add	r2, r1
 8012f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012f2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012f30:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8012f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3720      	adds	r7, #32
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b08c      	sub	sp, #48	; 0x30
 8012f40:	af02      	add	r7, sp, #8
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	60b9      	str	r1, [r7, #8]
 8012f46:	4613      	mov	r3, r2
 8012f48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	785b      	ldrb	r3, [r3, #1]
 8012f52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8012f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f58:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d02d      	beq.n	8012fc2 <USB_HC_StartXfer+0x86>
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	791b      	ldrb	r3, [r3, #4]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d129      	bne.n	8012fc2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8012f6e:	79fb      	ldrb	r3, [r7, #7]
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	d117      	bne.n	8012fa4 <USB_HC_StartXfer+0x68>
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	79db      	ldrb	r3, [r3, #7]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d003      	beq.n	8012f84 <USB_HC_StartXfer+0x48>
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	79db      	ldrb	r3, [r3, #7]
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	d10f      	bne.n	8012fa4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8012f84:	69fb      	ldr	r3, [r7, #28]
 8012f86:	015a      	lsls	r2, r3, #5
 8012f88:	6a3b      	ldr	r3, [r7, #32]
 8012f8a:	4413      	add	r3, r2
 8012f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012f90:	68db      	ldr	r3, [r3, #12]
 8012f92:	69fa      	ldr	r2, [r7, #28]
 8012f94:	0151      	lsls	r1, r2, #5
 8012f96:	6a3a      	ldr	r2, [r7, #32]
 8012f98:	440a      	add	r2, r1
 8012f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fa2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8012fa4:	79fb      	ldrb	r3, [r7, #7]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d10b      	bne.n	8012fc2 <USB_HC_StartXfer+0x86>
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	795b      	ldrb	r3, [r3, #5]
 8012fae:	2b01      	cmp	r3, #1
 8012fb0:	d107      	bne.n	8012fc2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	785b      	ldrb	r3, [r3, #1]
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	f000 fa2f 	bl	801341c <USB_DoPing>
      return HAL_OK;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	e0f8      	b.n	80131b4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	695b      	ldr	r3, [r3, #20]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d018      	beq.n	8012ffc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	695b      	ldr	r3, [r3, #20]
 8012fce:	68ba      	ldr	r2, [r7, #8]
 8012fd0:	8912      	ldrh	r2, [r2, #8]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	3b01      	subs	r3, #1
 8012fd6:	68ba      	ldr	r2, [r7, #8]
 8012fd8:	8912      	ldrh	r2, [r2, #8]
 8012fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fde:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8012fe0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012fe2:	8b7b      	ldrh	r3, [r7, #26]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d90b      	bls.n	8013000 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8012fe8:	8b7b      	ldrh	r3, [r7, #26]
 8012fea:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012fec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012fee:	68ba      	ldr	r2, [r7, #8]
 8012ff0:	8912      	ldrh	r2, [r2, #8]
 8012ff2:	fb02 f203 	mul.w	r2, r2, r3
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	611a      	str	r2, [r3, #16]
 8012ffa:	e001      	b.n	8013000 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	78db      	ldrb	r3, [r3, #3]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d007      	beq.n	8013018 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8013008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801300a:	68ba      	ldr	r2, [r7, #8]
 801300c:	8912      	ldrh	r2, [r2, #8]
 801300e:	fb02 f203 	mul.w	r2, r2, r3
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	611a      	str	r2, [r3, #16]
 8013016:	e003      	b.n	8013020 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	695a      	ldr	r2, [r3, #20]
 801301c:	68bb      	ldr	r3, [r7, #8]
 801301e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	691b      	ldr	r3, [r3, #16]
 8013024:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013028:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801302a:	04d9      	lsls	r1, r3, #19
 801302c:	4b63      	ldr	r3, [pc, #396]	; (80131bc <USB_HC_StartXfer+0x280>)
 801302e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8013030:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	7a9b      	ldrb	r3, [r3, #10]
 8013036:	075b      	lsls	r3, r3, #29
 8013038:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801303c:	69f9      	ldr	r1, [r7, #28]
 801303e:	0148      	lsls	r0, r1, #5
 8013040:	6a39      	ldr	r1, [r7, #32]
 8013042:	4401      	add	r1, r0
 8013044:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013048:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801304a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 801304c:	79fb      	ldrb	r3, [r7, #7]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d009      	beq.n	8013066 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	68d9      	ldr	r1, [r3, #12]
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	015a      	lsls	r2, r3, #5
 801305a:	6a3b      	ldr	r3, [r7, #32]
 801305c:	4413      	add	r3, r2
 801305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013062:	460a      	mov	r2, r1
 8013064:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8013066:	6a3b      	ldr	r3, [r7, #32]
 8013068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801306c:	689b      	ldr	r3, [r3, #8]
 801306e:	f003 0301 	and.w	r3, r3, #1
 8013072:	2b00      	cmp	r3, #0
 8013074:	bf0c      	ite	eq
 8013076:	2301      	moveq	r3, #1
 8013078:	2300      	movne	r3, #0
 801307a:	b2db      	uxtb	r3, r3
 801307c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801307e:	69fb      	ldr	r3, [r7, #28]
 8013080:	015a      	lsls	r2, r3, #5
 8013082:	6a3b      	ldr	r3, [r7, #32]
 8013084:	4413      	add	r3, r2
 8013086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	69fa      	ldr	r2, [r7, #28]
 801308e:	0151      	lsls	r1, r2, #5
 8013090:	6a3a      	ldr	r2, [r7, #32]
 8013092:	440a      	add	r2, r1
 8013094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013098:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801309c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	015a      	lsls	r2, r3, #5
 80130a2:	6a3b      	ldr	r3, [r7, #32]
 80130a4:	4413      	add	r3, r2
 80130a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	7e7b      	ldrb	r3, [r7, #25]
 80130ae:	075b      	lsls	r3, r3, #29
 80130b0:	69f9      	ldr	r1, [r7, #28]
 80130b2:	0148      	lsls	r0, r1, #5
 80130b4:	6a39      	ldr	r1, [r7, #32]
 80130b6:	4401      	add	r1, r0
 80130b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80130bc:	4313      	orrs	r3, r2
 80130be:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	015a      	lsls	r2, r3, #5
 80130c4:	6a3b      	ldr	r3, [r7, #32]
 80130c6:	4413      	add	r3, r2
 80130c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80130d6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	78db      	ldrb	r3, [r3, #3]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d004      	beq.n	80130ea <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80130e6:	613b      	str	r3, [r7, #16]
 80130e8:	e003      	b.n	80130f2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80130f0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80130f8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	015a      	lsls	r2, r3, #5
 80130fe:	6a3b      	ldr	r3, [r7, #32]
 8013100:	4413      	add	r3, r2
 8013102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013106:	461a      	mov	r2, r3
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801310c:	79fb      	ldrb	r3, [r7, #7]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d001      	beq.n	8013116 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8013112:	2300      	movs	r3, #0
 8013114:	e04e      	b.n	80131b4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	78db      	ldrb	r3, [r3, #3]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d149      	bne.n	80131b2 <USB_HC_StartXfer+0x276>
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	695b      	ldr	r3, [r3, #20]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d045      	beq.n	80131b2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	79db      	ldrb	r3, [r3, #7]
 801312a:	2b03      	cmp	r3, #3
 801312c:	d830      	bhi.n	8013190 <USB_HC_StartXfer+0x254>
 801312e:	a201      	add	r2, pc, #4	; (adr r2, 8013134 <USB_HC_StartXfer+0x1f8>)
 8013130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013134:	08013145 	.word	0x08013145
 8013138:	08013169 	.word	0x08013169
 801313c:	08013145 	.word	0x08013145
 8013140:	08013169 	.word	0x08013169
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	695b      	ldr	r3, [r3, #20]
 8013148:	3303      	adds	r3, #3
 801314a:	089b      	lsrs	r3, r3, #2
 801314c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801314e:	8afa      	ldrh	r2, [r7, #22]
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013154:	b29b      	uxth	r3, r3
 8013156:	429a      	cmp	r2, r3
 8013158:	d91c      	bls.n	8013194 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	699b      	ldr	r3, [r3, #24]
 801315e:	f043 0220 	orr.w	r2, r3, #32
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	619a      	str	r2, [r3, #24]
        }
        break;
 8013166:	e015      	b.n	8013194 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	695b      	ldr	r3, [r3, #20]
 801316c:	3303      	adds	r3, #3
 801316e:	089b      	lsrs	r3, r3, #2
 8013170:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8013172:	8afa      	ldrh	r2, [r7, #22]
 8013174:	6a3b      	ldr	r3, [r7, #32]
 8013176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801317a:	691b      	ldr	r3, [r3, #16]
 801317c:	b29b      	uxth	r3, r3
 801317e:	429a      	cmp	r2, r3
 8013180:	d90a      	bls.n	8013198 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	699b      	ldr	r3, [r3, #24]
 8013186:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	619a      	str	r2, [r3, #24]
        }
        break;
 801318e:	e003      	b.n	8013198 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8013190:	bf00      	nop
 8013192:	e002      	b.n	801319a <USB_HC_StartXfer+0x25e>
        break;
 8013194:	bf00      	nop
 8013196:	e000      	b.n	801319a <USB_HC_StartXfer+0x25e>
        break;
 8013198:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	68d9      	ldr	r1, [r3, #12]
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	785a      	ldrb	r2, [r3, #1]
 80131a2:	68bb      	ldr	r3, [r7, #8]
 80131a4:	695b      	ldr	r3, [r3, #20]
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	2000      	movs	r0, #0
 80131aa:	9000      	str	r0, [sp, #0]
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f7ff fb8d 	bl	80128cc <USB_WritePacket>
  }

  return HAL_OK;
 80131b2:	2300      	movs	r3, #0
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3728      	adds	r7, #40	; 0x28
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	1ff80000 	.word	0x1ff80000

080131c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80131c0:	b480      	push	{r7}
 80131c2:	b085      	sub	sp, #20
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80131d2:	695b      	ldr	r3, [r3, #20]
 80131d4:	b29b      	uxth	r3, r3
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3714      	adds	r7, #20
 80131da:	46bd      	mov	sp, r7
 80131dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e0:	4770      	bx	lr

080131e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80131e2:	b480      	push	{r7}
 80131e4:	b089      	sub	sp, #36	; 0x24
 80131e6:	af00      	add	r7, sp, #0
 80131e8:	6078      	str	r0, [r7, #4]
 80131ea:	460b      	mov	r3, r1
 80131ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80131f2:	78fb      	ldrb	r3, [r7, #3]
 80131f4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80131f6:	2300      	movs	r3, #0
 80131f8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	015a      	lsls	r2, r3, #5
 80131fe:	69bb      	ldr	r3, [r7, #24]
 8013200:	4413      	add	r3, r2
 8013202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	0c9b      	lsrs	r3, r3, #18
 801320a:	f003 0303 	and.w	r3, r3, #3
 801320e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	015a      	lsls	r2, r3, #5
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	4413      	add	r3, r2
 8013218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	0fdb      	lsrs	r3, r3, #31
 8013220:	f003 0301 	and.w	r3, r3, #1
 8013224:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	689b      	ldr	r3, [r3, #8]
 801322a:	f003 0320 	and.w	r3, r3, #32
 801322e:	2b20      	cmp	r3, #32
 8013230:	d104      	bne.n	801323c <USB_HC_Halt+0x5a>
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d101      	bne.n	801323c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8013238:	2300      	movs	r3, #0
 801323a:	e0e8      	b.n	801340e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d002      	beq.n	8013248 <USB_HC_Halt+0x66>
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	2b02      	cmp	r3, #2
 8013246:	d173      	bne.n	8013330 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	015a      	lsls	r2, r3, #5
 801324c:	69bb      	ldr	r3, [r7, #24]
 801324e:	4413      	add	r3, r2
 8013250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	697a      	ldr	r2, [r7, #20]
 8013258:	0151      	lsls	r1, r2, #5
 801325a:	69ba      	ldr	r2, [r7, #24]
 801325c:	440a      	add	r2, r1
 801325e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013266:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	689b      	ldr	r3, [r3, #8]
 801326c:	f003 0320 	and.w	r3, r3, #32
 8013270:	2b00      	cmp	r3, #0
 8013272:	f040 80cb 	bne.w	801340c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801327a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801327e:	2b00      	cmp	r3, #0
 8013280:	d143      	bne.n	801330a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	015a      	lsls	r2, r3, #5
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	4413      	add	r3, r2
 801328a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	697a      	ldr	r2, [r7, #20]
 8013292:	0151      	lsls	r1, r2, #5
 8013294:	69ba      	ldr	r2, [r7, #24]
 8013296:	440a      	add	r2, r1
 8013298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801329c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80132a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	015a      	lsls	r2, r3, #5
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	4413      	add	r3, r2
 80132aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	697a      	ldr	r2, [r7, #20]
 80132b2:	0151      	lsls	r1, r2, #5
 80132b4:	69ba      	ldr	r2, [r7, #24]
 80132b6:	440a      	add	r2, r1
 80132b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80132bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80132c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	015a      	lsls	r2, r3, #5
 80132c6:	69bb      	ldr	r3, [r7, #24]
 80132c8:	4413      	add	r3, r2
 80132ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	697a      	ldr	r2, [r7, #20]
 80132d2:	0151      	lsls	r1, r2, #5
 80132d4:	69ba      	ldr	r2, [r7, #24]
 80132d6:	440a      	add	r2, r1
 80132d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80132dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80132e0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	3301      	adds	r3, #1
 80132e6:	61fb      	str	r3, [r7, #28]
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80132ee:	d81d      	bhi.n	801332c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	015a      	lsls	r2, r3, #5
 80132f4:	69bb      	ldr	r3, [r7, #24]
 80132f6:	4413      	add	r3, r2
 80132f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013306:	d0ec      	beq.n	80132e2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8013308:	e080      	b.n	801340c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	015a      	lsls	r2, r3, #5
 801330e:	69bb      	ldr	r3, [r7, #24]
 8013310:	4413      	add	r3, r2
 8013312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	697a      	ldr	r2, [r7, #20]
 801331a:	0151      	lsls	r1, r2, #5
 801331c:	69ba      	ldr	r2, [r7, #24]
 801331e:	440a      	add	r2, r1
 8013320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013328:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801332a:	e06f      	b.n	801340c <USB_HC_Halt+0x22a>
            break;
 801332c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801332e:	e06d      	b.n	801340c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	015a      	lsls	r2, r3, #5
 8013334:	69bb      	ldr	r3, [r7, #24]
 8013336:	4413      	add	r3, r2
 8013338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	697a      	ldr	r2, [r7, #20]
 8013340:	0151      	lsls	r1, r2, #5
 8013342:	69ba      	ldr	r2, [r7, #24]
 8013344:	440a      	add	r2, r1
 8013346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801334a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801334e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013356:	691b      	ldr	r3, [r3, #16]
 8013358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801335c:	2b00      	cmp	r3, #0
 801335e:	d143      	bne.n	80133e8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	015a      	lsls	r2, r3, #5
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	4413      	add	r3, r2
 8013368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	697a      	ldr	r2, [r7, #20]
 8013370:	0151      	lsls	r1, r2, #5
 8013372:	69ba      	ldr	r2, [r7, #24]
 8013374:	440a      	add	r2, r1
 8013376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801337a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801337e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	015a      	lsls	r2, r3, #5
 8013384:	69bb      	ldr	r3, [r7, #24]
 8013386:	4413      	add	r3, r2
 8013388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	697a      	ldr	r2, [r7, #20]
 8013390:	0151      	lsls	r1, r2, #5
 8013392:	69ba      	ldr	r2, [r7, #24]
 8013394:	440a      	add	r2, r1
 8013396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801339a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801339e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	015a      	lsls	r2, r3, #5
 80133a4:	69bb      	ldr	r3, [r7, #24]
 80133a6:	4413      	add	r3, r2
 80133a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	697a      	ldr	r2, [r7, #20]
 80133b0:	0151      	lsls	r1, r2, #5
 80133b2:	69ba      	ldr	r2, [r7, #24]
 80133b4:	440a      	add	r2, r1
 80133b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80133ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80133be:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80133c0:	69fb      	ldr	r3, [r7, #28]
 80133c2:	3301      	adds	r3, #1
 80133c4:	61fb      	str	r3, [r7, #28]
 80133c6:	69fb      	ldr	r3, [r7, #28]
 80133c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80133cc:	d81d      	bhi.n	801340a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	015a      	lsls	r2, r3, #5
 80133d2:	69bb      	ldr	r3, [r7, #24]
 80133d4:	4413      	add	r3, r2
 80133d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133e4:	d0ec      	beq.n	80133c0 <USB_HC_Halt+0x1de>
 80133e6:	e011      	b.n	801340c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	015a      	lsls	r2, r3, #5
 80133ec:	69bb      	ldr	r3, [r7, #24]
 80133ee:	4413      	add	r3, r2
 80133f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	697a      	ldr	r2, [r7, #20]
 80133f8:	0151      	lsls	r1, r2, #5
 80133fa:	69ba      	ldr	r2, [r7, #24]
 80133fc:	440a      	add	r2, r1
 80133fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013402:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013406:	6013      	str	r3, [r2, #0]
 8013408:	e000      	b.n	801340c <USB_HC_Halt+0x22a>
          break;
 801340a:	bf00      	nop
    }
  }

  return HAL_OK;
 801340c:	2300      	movs	r3, #0
}
 801340e:	4618      	mov	r0, r3
 8013410:	3724      	adds	r7, #36	; 0x24
 8013412:	46bd      	mov	sp, r7
 8013414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013418:	4770      	bx	lr
	...

0801341c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 801341c:	b480      	push	{r7}
 801341e:	b087      	sub	sp, #28
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	460b      	mov	r3, r1
 8013426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 801342c:	78fb      	ldrb	r3, [r7, #3]
 801342e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8013430:	2301      	movs	r3, #1
 8013432:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	04da      	lsls	r2, r3, #19
 8013438:	4b15      	ldr	r3, [pc, #84]	; (8013490 <USB_DoPing+0x74>)
 801343a:	4013      	ands	r3, r2
 801343c:	693a      	ldr	r2, [r7, #16]
 801343e:	0151      	lsls	r1, r2, #5
 8013440:	697a      	ldr	r2, [r7, #20]
 8013442:	440a      	add	r2, r1
 8013444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013448:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801344c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801344e:	693b      	ldr	r3, [r7, #16]
 8013450:	015a      	lsls	r2, r3, #5
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	4413      	add	r3, r2
 8013456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013464:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801346c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	015a      	lsls	r2, r3, #5
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	4413      	add	r3, r2
 8013476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801347a:	461a      	mov	r2, r3
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8013480:	2300      	movs	r3, #0
}
 8013482:	4618      	mov	r0, r3
 8013484:	371c      	adds	r7, #28
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr
 801348e:	bf00      	nop
 8013490:	1ff80000 	.word	0x1ff80000

08013494 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b086      	sub	sp, #24
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80134a0:	2300      	movs	r3, #0
 80134a2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7ff f98e 	bl	80127c6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80134aa:	2110      	movs	r1, #16
 80134ac:	6878      	ldr	r0, [r7, #4]
 80134ae:	f7ff f9c5 	bl	801283c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	f7ff f9e8 	bl	8012888 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80134b8:	2300      	movs	r3, #0
 80134ba:	613b      	str	r3, [r7, #16]
 80134bc:	e01f      	b.n	80134fe <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80134be:	693b      	ldr	r3, [r7, #16]
 80134c0:	015a      	lsls	r2, r3, #5
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	4413      	add	r3, r2
 80134c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80134d4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80134dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80134e4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	015a      	lsls	r2, r3, #5
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	4413      	add	r3, r2
 80134ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134f2:	461a      	mov	r2, r3
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	3301      	adds	r3, #1
 80134fc:	613b      	str	r3, [r7, #16]
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	2b0f      	cmp	r3, #15
 8013502:	d9dc      	bls.n	80134be <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8013504:	2300      	movs	r3, #0
 8013506:	613b      	str	r3, [r7, #16]
 8013508:	e034      	b.n	8013574 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	015a      	lsls	r2, r3, #5
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	4413      	add	r3, r2
 8013512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013520:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013528:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013530:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8013532:	693b      	ldr	r3, [r7, #16]
 8013534:	015a      	lsls	r2, r3, #5
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	4413      	add	r3, r2
 801353a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801353e:	461a      	mov	r2, r3
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	3301      	adds	r3, #1
 8013548:	617b      	str	r3, [r7, #20]
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013550:	d80c      	bhi.n	801356c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013552:	693b      	ldr	r3, [r7, #16]
 8013554:	015a      	lsls	r2, r3, #5
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	4413      	add	r3, r2
 801355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013568:	d0ec      	beq.n	8013544 <USB_StopHost+0xb0>
 801356a:	e000      	b.n	801356e <USB_StopHost+0xda>
        break;
 801356c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	3301      	adds	r3, #1
 8013572:	613b      	str	r3, [r7, #16]
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	2b0f      	cmp	r3, #15
 8013578:	d9c7      	bls.n	801350a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013580:	461a      	mov	r2, r3
 8013582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013586:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801358e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f7ff f907 	bl	80127a4 <USB_EnableGlobalInt>

  return HAL_OK;
 8013596:	2300      	movs	r3, #0
}
 8013598:	4618      	mov	r0, r3
 801359a:	3718      	adds	r7, #24
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}

080135a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80135a4:	4904      	ldr	r1, [pc, #16]	; (80135b8 <MX_FATFS_Init+0x18>)
 80135a6:	4805      	ldr	r0, [pc, #20]	; (80135bc <MX_FATFS_Init+0x1c>)
 80135a8:	f002 fbf0 	bl	8015d8c <FATFS_LinkDriver>
 80135ac:	4603      	mov	r3, r0
 80135ae:	461a      	mov	r2, r3
 80135b0:	4b03      	ldr	r3, [pc, #12]	; (80135c0 <MX_FATFS_Init+0x20>)
 80135b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80135b4:	bf00      	nop
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	2004d2d0 	.word	0x2004d2d0
 80135bc:	0801e254 	.word	0x0801e254
 80135c0:	2004d2cc 	.word	0x2004d2cc

080135c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80135ca:	2300      	movs	r3, #0
 80135cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80135ce:	f000 f87b 	bl	80136c8 <BSP_SD_IsDetected>
 80135d2:	4603      	mov	r3, r0
 80135d4:	2b01      	cmp	r3, #1
 80135d6:	d001      	beq.n	80135dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80135d8:	2302      	movs	r3, #2
 80135da:	e012      	b.n	8013602 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80135dc:	480b      	ldr	r0, [pc, #44]	; (801360c <BSP_SD_Init+0x48>)
 80135de:	f7fb fae4 	bl	800ebaa <HAL_SD_Init>
 80135e2:	4603      	mov	r3, r0
 80135e4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80135e6:	79fb      	ldrb	r3, [r7, #7]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d109      	bne.n	8013600 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80135ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80135f0:	4806      	ldr	r0, [pc, #24]	; (801360c <BSP_SD_Init+0x48>)
 80135f2:	f7fb ff33 	bl	800f45c <HAL_SD_ConfigWideBusOperation>
 80135f6:	4603      	mov	r3, r0
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d001      	beq.n	8013600 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80135fc:	2301      	movs	r3, #1
 80135fe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013600:	79fb      	ldrb	r3, [r7, #7]
}
 8013602:	4618      	mov	r0, r3
 8013604:	3708      	adds	r7, #8
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	2000d0ec 	.word	0x2000d0ec

08013610 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b086      	sub	sp, #24
 8013614:	af00      	add	r7, sp, #0
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801361c:	2300      	movs	r3, #0
 801361e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	68ba      	ldr	r2, [r7, #8]
 8013624:	68f9      	ldr	r1, [r7, #12]
 8013626:	4806      	ldr	r0, [pc, #24]	; (8013640 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013628:	f7fb fb76 	bl	800ed18 <HAL_SD_ReadBlocks_DMA>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d001      	beq.n	8013636 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013632:	2301      	movs	r3, #1
 8013634:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013636:	7dfb      	ldrb	r3, [r7, #23]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3718      	adds	r7, #24
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	2000d0ec 	.word	0x2000d0ec

08013644 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b086      	sub	sp, #24
 8013648:	af00      	add	r7, sp, #0
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013650:	2300      	movs	r3, #0
 8013652:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	68ba      	ldr	r2, [r7, #8]
 8013658:	68f9      	ldr	r1, [r7, #12]
 801365a:	4806      	ldr	r0, [pc, #24]	; (8013674 <BSP_SD_WriteBlocks_DMA+0x30>)
 801365c:	f7fb fc3e 	bl	800eedc <HAL_SD_WriteBlocks_DMA>
 8013660:	4603      	mov	r3, r0
 8013662:	2b00      	cmp	r3, #0
 8013664:	d001      	beq.n	801366a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013666:	2301      	movs	r3, #1
 8013668:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801366a:	7dfb      	ldrb	r3, [r7, #23]
}
 801366c:	4618      	mov	r0, r3
 801366e:	3718      	adds	r7, #24
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}
 8013674:	2000d0ec 	.word	0x2000d0ec

08013678 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801367c:	4805      	ldr	r0, [pc, #20]	; (8013694 <BSP_SD_GetCardState+0x1c>)
 801367e:	f7fb ff87 	bl	800f590 <HAL_SD_GetCardState>
 8013682:	4603      	mov	r3, r0
 8013684:	2b04      	cmp	r3, #4
 8013686:	bf14      	ite	ne
 8013688:	2301      	movne	r3, #1
 801368a:	2300      	moveq	r3, #0
 801368c:	b2db      	uxtb	r3, r3
}
 801368e:	4618      	mov	r0, r3
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	2000d0ec 	.word	0x2000d0ec

08013698 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80136a0:	6879      	ldr	r1, [r7, #4]
 80136a2:	4803      	ldr	r0, [pc, #12]	; (80136b0 <BSP_SD_GetCardInfo+0x18>)
 80136a4:	f7fb feae 	bl	800f404 <HAL_SD_GetCardInfo>
}
 80136a8:	bf00      	nop
 80136aa:	3708      	adds	r7, #8
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	2000d0ec 	.word	0x2000d0ec

080136b4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b082      	sub	sp, #8
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80136bc:	f000 f9b2 	bl	8013a24 <BSP_SD_ReadCpltCallback>
}
 80136c0:	bf00      	nop
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}

080136c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80136ce:	2301      	movs	r3, #1
 80136d0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80136d2:	f000 f80b 	bl	80136ec <BSP_PlatformIsDetected>
 80136d6:	4603      	mov	r3, r0
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d101      	bne.n	80136e0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80136dc:	2300      	movs	r3, #0
 80136de:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80136e0:	79fb      	ldrb	r3, [r7, #7]
 80136e2:	b2db      	uxtb	r3, r3
}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3708      	adds	r7, #8
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}

080136ec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80136f2:	2301      	movs	r3, #1
 80136f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80136f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80136fa:	4806      	ldr	r0, [pc, #24]	; (8013714 <BSP_PlatformIsDetected+0x28>)
 80136fc:	f7f5 fa4c 	bl	8008b98 <HAL_GPIO_ReadPin>
 8013700:	4603      	mov	r3, r0
 8013702:	2b00      	cmp	r3, #0
 8013704:	d001      	beq.n	801370a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013706:	2300      	movs	r3, #0
 8013708:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801370a:	79fb      	ldrb	r3, [r7, #7]
}
 801370c:	4618      	mov	r0, r3
 801370e:	3708      	adds	r7, #8
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}
 8013714:	40020800 	.word	0x40020800

08013718 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8013720:	f002 fb80 	bl	8015e24 <osKernelSysTick>
 8013724:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8013726:	e006      	b.n	8013736 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013728:	f7ff ffa6 	bl	8013678 <BSP_SD_GetCardState>
 801372c:	4603      	mov	r3, r0
 801372e:	2b00      	cmp	r3, #0
 8013730:	d101      	bne.n	8013736 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013732:	2300      	movs	r3, #0
 8013734:	e009      	b.n	801374a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8013736:	f002 fb75 	bl	8015e24 <osKernelSysTick>
 801373a:	4602      	mov	r2, r0
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	687a      	ldr	r2, [r7, #4]
 8013742:	429a      	cmp	r2, r3
 8013744:	d8f0      	bhi.n	8013728 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801374a:	4618      	mov	r0, r3
 801374c:	3710      	adds	r7, #16
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}
	...

08013754 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b082      	sub	sp, #8
 8013758:	af00      	add	r7, sp, #0
 801375a:	4603      	mov	r3, r0
 801375c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801375e:	4b0b      	ldr	r3, [pc, #44]	; (801378c <SD_CheckStatus+0x38>)
 8013760:	2201      	movs	r2, #1
 8013762:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013764:	f7ff ff88 	bl	8013678 <BSP_SD_GetCardState>
 8013768:	4603      	mov	r3, r0
 801376a:	2b00      	cmp	r3, #0
 801376c:	d107      	bne.n	801377e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801376e:	4b07      	ldr	r3, [pc, #28]	; (801378c <SD_CheckStatus+0x38>)
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	b2db      	uxtb	r3, r3
 8013774:	f023 0301 	bic.w	r3, r3, #1
 8013778:	b2da      	uxtb	r2, r3
 801377a:	4b04      	ldr	r3, [pc, #16]	; (801378c <SD_CheckStatus+0x38>)
 801377c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801377e:	4b03      	ldr	r3, [pc, #12]	; (801378c <SD_CheckStatus+0x38>)
 8013780:	781b      	ldrb	r3, [r3, #0]
 8013782:	b2db      	uxtb	r3, r3
}
 8013784:	4618      	mov	r0, r3
 8013786:	3708      	adds	r7, #8
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	20000035 	.word	0x20000035

08013790 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013790:	b590      	push	{r4, r7, lr}
 8013792:	b087      	sub	sp, #28
 8013794:	af00      	add	r7, sp, #0
 8013796:	4603      	mov	r3, r0
 8013798:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801379a:	4b20      	ldr	r3, [pc, #128]	; (801381c <SD_initialize+0x8c>)
 801379c:	2201      	movs	r2, #1
 801379e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80137a0:	f002 fb34 	bl	8015e0c <osKernelRunning>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d030      	beq.n	801380c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80137aa:	f7ff ff0b 	bl	80135c4 <BSP_SD_Init>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d107      	bne.n	80137c4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80137b4:	79fb      	ldrb	r3, [r7, #7]
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7ff ffcc 	bl	8013754 <SD_CheckStatus>
 80137bc:	4603      	mov	r3, r0
 80137be:	461a      	mov	r2, r3
 80137c0:	4b16      	ldr	r3, [pc, #88]	; (801381c <SD_initialize+0x8c>)
 80137c2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80137c4:	4b15      	ldr	r3, [pc, #84]	; (801381c <SD_initialize+0x8c>)
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	b2db      	uxtb	r3, r3
 80137ca:	2b01      	cmp	r3, #1
 80137cc:	d01e      	beq.n	801380c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80137ce:	4b14      	ldr	r3, [pc, #80]	; (8013820 <SD_initialize+0x90>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d10e      	bne.n	80137f4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80137d6:	4b13      	ldr	r3, [pc, #76]	; (8013824 <SD_initialize+0x94>)
 80137d8:	f107 0408 	add.w	r4, r7, #8
 80137dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80137de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80137e2:	f107 0308 	add.w	r3, r7, #8
 80137e6:	2100      	movs	r1, #0
 80137e8:	4618      	mov	r0, r3
 80137ea:	f002 fc17 	bl	801601c <osMessageCreate>
 80137ee:	4603      	mov	r3, r0
 80137f0:	4a0b      	ldr	r2, [pc, #44]	; (8013820 <SD_initialize+0x90>)
 80137f2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80137f4:	4b0a      	ldr	r3, [pc, #40]	; (8013820 <SD_initialize+0x90>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d107      	bne.n	801380c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80137fc:	4b07      	ldr	r3, [pc, #28]	; (801381c <SD_initialize+0x8c>)
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	b2db      	uxtb	r3, r3
 8013802:	f043 0301 	orr.w	r3, r3, #1
 8013806:	b2da      	uxtb	r2, r3
 8013808:	4b04      	ldr	r3, [pc, #16]	; (801381c <SD_initialize+0x8c>)
 801380a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801380c:	4b03      	ldr	r3, [pc, #12]	; (801381c <SD_initialize+0x8c>)
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	b2db      	uxtb	r3, r3
}
 8013812:	4618      	mov	r0, r3
 8013814:	371c      	adds	r7, #28
 8013816:	46bd      	mov	sp, r7
 8013818:	bd90      	pop	{r4, r7, pc}
 801381a:	bf00      	nop
 801381c:	20000035 	.word	0x20000035
 8013820:	200003d4 	.word	0x200003d4
 8013824:	0801b6d4 	.word	0x0801b6d4

08013828 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	4603      	mov	r3, r0
 8013830:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013832:	79fb      	ldrb	r3, [r7, #7]
 8013834:	4618      	mov	r0, r3
 8013836:	f7ff ff8d 	bl	8013754 <SD_CheckStatus>
 801383a:	4603      	mov	r3, r0
}
 801383c:	4618      	mov	r0, r3
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b08a      	sub	sp, #40	; 0x28
 8013848:	af00      	add	r7, sp, #0
 801384a:	60b9      	str	r1, [r7, #8]
 801384c:	607a      	str	r2, [r7, #4]
 801384e:	603b      	str	r3, [r7, #0]
 8013850:	4603      	mov	r3, r0
 8013852:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013854:	2301      	movs	r3, #1
 8013856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801385a:	f247 5030 	movw	r0, #30000	; 0x7530
 801385e:	f7ff ff5b 	bl	8013718 <SD_CheckStatusWithTimeout>
 8013862:	4603      	mov	r3, r0
 8013864:	2b00      	cmp	r3, #0
 8013866:	da02      	bge.n	801386e <SD_read+0x2a>
  {
    return res;
 8013868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801386c:	e032      	b.n	80138d4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801386e:	683a      	ldr	r2, [r7, #0]
 8013870:	6879      	ldr	r1, [r7, #4]
 8013872:	68b8      	ldr	r0, [r7, #8]
 8013874:	f7ff fecc 	bl	8013610 <BSP_SD_ReadBlocks_DMA>
 8013878:	4603      	mov	r3, r0
 801387a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 801387e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013882:	2b00      	cmp	r3, #0
 8013884:	d124      	bne.n	80138d0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8013886:	4b15      	ldr	r3, [pc, #84]	; (80138dc <SD_read+0x98>)
 8013888:	6819      	ldr	r1, [r3, #0]
 801388a:	f107 0314 	add.w	r3, r7, #20
 801388e:	f247 5230 	movw	r2, #30000	; 0x7530
 8013892:	4618      	mov	r0, r3
 8013894:	f002 fc2a 	bl	80160ec <osMessageGet>

    if (event.status == osEventMessage)
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	2b10      	cmp	r3, #16
 801389c:	d118      	bne.n	80138d0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	2b01      	cmp	r3, #1
 80138a2:	d115      	bne.n	80138d0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80138a4:	f002 fabe 	bl	8015e24 <osKernelSysTick>
 80138a8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80138aa:	e008      	b.n	80138be <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80138ac:	f7ff fee4 	bl	8013678 <BSP_SD_GetCardState>
 80138b0:	4603      	mov	r3, r0
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d103      	bne.n	80138be <SD_read+0x7a>
              {
                res = RES_OK;
 80138b6:	2300      	movs	r3, #0
 80138b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80138bc:	e008      	b.n	80138d0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80138be:	f002 fab1 	bl	8015e24 <osKernelSysTick>
 80138c2:	4602      	mov	r2, r0
 80138c4:	6a3b      	ldr	r3, [r7, #32]
 80138c6:	1ad3      	subs	r3, r2, r3
 80138c8:	f247 522f 	movw	r2, #29999	; 0x752f
 80138cc:	4293      	cmp	r3, r2
 80138ce:	d9ed      	bls.n	80138ac <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80138d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3728      	adds	r7, #40	; 0x28
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}
 80138dc:	200003d4 	.word	0x200003d4

080138e0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b08a      	sub	sp, #40	; 0x28
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	60b9      	str	r1, [r7, #8]
 80138e8:	607a      	str	r2, [r7, #4]
 80138ea:	603b      	str	r3, [r7, #0]
 80138ec:	4603      	mov	r3, r0
 80138ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80138f0:	2301      	movs	r3, #1
 80138f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80138f6:	f247 5030 	movw	r0, #30000	; 0x7530
 80138fa:	f7ff ff0d 	bl	8013718 <SD_CheckStatusWithTimeout>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	da02      	bge.n	801390a <SD_write+0x2a>
  {
    return res;
 8013904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013908:	e02e      	b.n	8013968 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801390a:	683a      	ldr	r2, [r7, #0]
 801390c:	6879      	ldr	r1, [r7, #4]
 801390e:	68b8      	ldr	r0, [r7, #8]
 8013910:	f7ff fe98 	bl	8013644 <BSP_SD_WriteBlocks_DMA>
 8013914:	4603      	mov	r3, r0
 8013916:	2b00      	cmp	r3, #0
 8013918:	d124      	bne.n	8013964 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801391a:	4b15      	ldr	r3, [pc, #84]	; (8013970 <SD_write+0x90>)
 801391c:	6819      	ldr	r1, [r3, #0]
 801391e:	f107 0314 	add.w	r3, r7, #20
 8013922:	f247 5230 	movw	r2, #30000	; 0x7530
 8013926:	4618      	mov	r0, r3
 8013928:	f002 fbe0 	bl	80160ec <osMessageGet>

    if (event.status == osEventMessage)
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	2b10      	cmp	r3, #16
 8013930:	d118      	bne.n	8013964 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	2b02      	cmp	r3, #2
 8013936:	d115      	bne.n	8013964 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8013938:	f002 fa74 	bl	8015e24 <osKernelSysTick>
 801393c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801393e:	e008      	b.n	8013952 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013940:	f7ff fe9a 	bl	8013678 <BSP_SD_GetCardState>
 8013944:	4603      	mov	r3, r0
 8013946:	2b00      	cmp	r3, #0
 8013948:	d103      	bne.n	8013952 <SD_write+0x72>
          {
            res = RES_OK;
 801394a:	2300      	movs	r3, #0
 801394c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8013950:	e008      	b.n	8013964 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8013952:	f002 fa67 	bl	8015e24 <osKernelSysTick>
 8013956:	4602      	mov	r2, r0
 8013958:	6a3b      	ldr	r3, [r7, #32]
 801395a:	1ad3      	subs	r3, r2, r3
 801395c:	f247 522f 	movw	r2, #29999	; 0x752f
 8013960:	4293      	cmp	r3, r2
 8013962:	d9ed      	bls.n	8013940 <SD_write+0x60>
    }

  }
#endif

  return res;
 8013964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013968:	4618      	mov	r0, r3
 801396a:	3728      	adds	r7, #40	; 0x28
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	200003d4 	.word	0x200003d4

08013974 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b08c      	sub	sp, #48	; 0x30
 8013978:	af00      	add	r7, sp, #0
 801397a:	4603      	mov	r3, r0
 801397c:	603a      	str	r2, [r7, #0]
 801397e:	71fb      	strb	r3, [r7, #7]
 8013980:	460b      	mov	r3, r1
 8013982:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013984:	2301      	movs	r3, #1
 8013986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801398a:	4b25      	ldr	r3, [pc, #148]	; (8013a20 <SD_ioctl+0xac>)
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	b2db      	uxtb	r3, r3
 8013990:	f003 0301 	and.w	r3, r3, #1
 8013994:	2b00      	cmp	r3, #0
 8013996:	d001      	beq.n	801399c <SD_ioctl+0x28>
 8013998:	2303      	movs	r3, #3
 801399a:	e03c      	b.n	8013a16 <SD_ioctl+0xa2>

  switch (cmd)
 801399c:	79bb      	ldrb	r3, [r7, #6]
 801399e:	2b03      	cmp	r3, #3
 80139a0:	d834      	bhi.n	8013a0c <SD_ioctl+0x98>
 80139a2:	a201      	add	r2, pc, #4	; (adr r2, 80139a8 <SD_ioctl+0x34>)
 80139a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139a8:	080139b9 	.word	0x080139b9
 80139ac:	080139c1 	.word	0x080139c1
 80139b0:	080139d9 	.word	0x080139d9
 80139b4:	080139f3 	.word	0x080139f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80139b8:	2300      	movs	r3, #0
 80139ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80139be:	e028      	b.n	8013a12 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80139c0:	f107 030c 	add.w	r3, r7, #12
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7ff fe67 	bl	8013698 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80139ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80139d0:	2300      	movs	r3, #0
 80139d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80139d6:	e01c      	b.n	8013a12 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80139d8:	f107 030c 	add.w	r3, r7, #12
 80139dc:	4618      	mov	r0, r3
 80139de:	f7ff fe5b 	bl	8013698 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80139e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e4:	b29a      	uxth	r2, r3
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80139ea:	2300      	movs	r3, #0
 80139ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80139f0:	e00f      	b.n	8013a12 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80139f2:	f107 030c 	add.w	r3, r7, #12
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7ff fe4e 	bl	8013698 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80139fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fe:	0a5a      	lsrs	r2, r3, #9
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013a04:	2300      	movs	r3, #0
 8013a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013a0a:	e002      	b.n	8013a12 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013a0c:	2304      	movs	r3, #4
 8013a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3730      	adds	r7, #48	; 0x30
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	20000035 	.word	0x20000035

08013a24 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8013a28:	4b04      	ldr	r3, [pc, #16]	; (8013a3c <BSP_SD_ReadCpltCallback+0x18>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	2101      	movs	r1, #1
 8013a30:	4618      	mov	r0, r3
 8013a32:	f002 fb1b 	bl	801606c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8013a36:	bf00      	nop
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	200003d4 	.word	0x200003d4

08013a40 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8013a40:	b480      	push	{r7}
 8013a42:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8013a44:	bf00      	nop
 8013a46:	46bd      	mov	sp, r7
 8013a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4c:	4770      	bx	lr

08013a4e <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8013a4e:	b590      	push	{r4, r7, lr}
 8013a50:	b089      	sub	sp, #36	; 0x24
 8013a52:	af04      	add	r7, sp, #16
 8013a54:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8013a56:	2301      	movs	r3, #1
 8013a58:	2202      	movs	r2, #2
 8013a5a:	2102      	movs	r1, #2
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f000 fcb9 	bl	80143d4 <USBH_FindInterface>
 8013a62:	4603      	mov	r3, r0
 8013a64:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8013a66:	7bfb      	ldrb	r3, [r7, #15]
 8013a68:	2bff      	cmp	r3, #255	; 0xff
 8013a6a:	d002      	beq.n	8013a72 <USBH_CDC_InterfaceInit+0x24>
 8013a6c:	7bfb      	ldrb	r3, [r7, #15]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d901      	bls.n	8013a76 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8013a72:	2302      	movs	r3, #2
 8013a74:	e13d      	b.n	8013cf2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8013a76:	7bfb      	ldrb	r3, [r7, #15]
 8013a78:	4619      	mov	r1, r3
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	f000 fc8e 	bl	801439c <USBH_SelectInterface>
 8013a80:	4603      	mov	r3, r0
 8013a82:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8013a84:	7bbb      	ldrb	r3, [r7, #14]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d001      	beq.n	8013a8e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8013a8a:	2302      	movs	r3, #2
 8013a8c:	e131      	b.n	8013cf2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8013a94:	2050      	movs	r0, #80	; 0x50
 8013a96:	f006 fb31 	bl	801a0fc <malloc>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013aa4:	69db      	ldr	r3, [r3, #28]
 8013aa6:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d101      	bne.n	8013ab2 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8013aae:	2302      	movs	r3, #2
 8013ab0:	e11f      	b.n	8013cf2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8013ab2:	2250      	movs	r2, #80	; 0x50
 8013ab4:	2100      	movs	r1, #0
 8013ab6:	68b8      	ldr	r0, [r7, #8]
 8013ab8:	f006 fb3e 	bl	801a138 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8013abc:	7bfb      	ldrb	r3, [r7, #15]
 8013abe:	687a      	ldr	r2, [r7, #4]
 8013ac0:	211a      	movs	r1, #26
 8013ac2:	fb01 f303 	mul.w	r3, r1, r3
 8013ac6:	4413      	add	r3, r2
 8013ac8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	b25b      	sxtb	r3, r3
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	da15      	bge.n	8013b00 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013ad4:	7bfb      	ldrb	r3, [r7, #15]
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	211a      	movs	r1, #26
 8013ada:	fb01 f303 	mul.w	r3, r1, r3
 8013ade:	4413      	add	r3, r2
 8013ae0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013ae4:	781a      	ldrb	r2, [r3, #0]
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8013aea:	7bfb      	ldrb	r3, [r7, #15]
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	211a      	movs	r1, #26
 8013af0:	fb01 f303 	mul.w	r3, r1, r3
 8013af4:	4413      	add	r3, r2
 8013af6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8013afa:	881a      	ldrh	r2, [r3, #0]
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	785b      	ldrb	r3, [r3, #1]
 8013b04:	4619      	mov	r1, r3
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f002 f891 	bl	8015c2e <USBH_AllocPipe>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	461a      	mov	r2, r3
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	7819      	ldrb	r1, [r3, #0]
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	7858      	ldrb	r0, [r3, #1]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013b28:	68ba      	ldr	r2, [r7, #8]
 8013b2a:	8952      	ldrh	r2, [r2, #10]
 8013b2c:	9202      	str	r2, [sp, #8]
 8013b2e:	2203      	movs	r2, #3
 8013b30:	9201      	str	r2, [sp, #4]
 8013b32:	9300      	str	r3, [sp, #0]
 8013b34:	4623      	mov	r3, r4
 8013b36:	4602      	mov	r2, r0
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f002 f849 	bl	8015bd0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	2200      	movs	r2, #0
 8013b44:	4619      	mov	r1, r3
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f005 f938 	bl	8018dbc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	2200      	movs	r2, #0
 8013b50:	210a      	movs	r1, #10
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f000 fc3e 	bl	80143d4 <USBH_FindInterface>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8013b5c:	7bfb      	ldrb	r3, [r7, #15]
 8013b5e:	2bff      	cmp	r3, #255	; 0xff
 8013b60:	d002      	beq.n	8013b68 <USBH_CDC_InterfaceInit+0x11a>
 8013b62:	7bfb      	ldrb	r3, [r7, #15]
 8013b64:	2b01      	cmp	r3, #1
 8013b66:	d901      	bls.n	8013b6c <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8013b68:	2302      	movs	r3, #2
 8013b6a:	e0c2      	b.n	8013cf2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8013b6c:	7bfb      	ldrb	r3, [r7, #15]
 8013b6e:	687a      	ldr	r2, [r7, #4]
 8013b70:	211a      	movs	r1, #26
 8013b72:	fb01 f303 	mul.w	r3, r1, r3
 8013b76:	4413      	add	r3, r2
 8013b78:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	b25b      	sxtb	r3, r3
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	da16      	bge.n	8013bb2 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013b84:	7bfb      	ldrb	r3, [r7, #15]
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	211a      	movs	r1, #26
 8013b8a:	fb01 f303 	mul.w	r3, r1, r3
 8013b8e:	4413      	add	r3, r2
 8013b90:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013b94:	781a      	ldrb	r2, [r3, #0]
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8013b9a:	7bfb      	ldrb	r3, [r7, #15]
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	211a      	movs	r1, #26
 8013ba0:	fb01 f303 	mul.w	r3, r1, r3
 8013ba4:	4413      	add	r3, r2
 8013ba6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8013baa:	881a      	ldrh	r2, [r3, #0]
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	835a      	strh	r2, [r3, #26]
 8013bb0:	e015      	b.n	8013bde <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013bb2:	7bfb      	ldrb	r3, [r7, #15]
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	211a      	movs	r1, #26
 8013bb8:	fb01 f303 	mul.w	r3, r1, r3
 8013bbc:	4413      	add	r3, r2
 8013bbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013bc2:	781a      	ldrb	r2, [r3, #0]
 8013bc4:	68bb      	ldr	r3, [r7, #8]
 8013bc6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8013bc8:	7bfb      	ldrb	r3, [r7, #15]
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	211a      	movs	r1, #26
 8013bce:	fb01 f303 	mul.w	r3, r1, r3
 8013bd2:	4413      	add	r3, r2
 8013bd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8013bd8:	881a      	ldrh	r2, [r3, #0]
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8013bde:	7bfb      	ldrb	r3, [r7, #15]
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	211a      	movs	r1, #26
 8013be4:	fb01 f303 	mul.w	r3, r1, r3
 8013be8:	4413      	add	r3, r2
 8013bea:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013bee:	781b      	ldrb	r3, [r3, #0]
 8013bf0:	b25b      	sxtb	r3, r3
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	da16      	bge.n	8013c24 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8013bf6:	7bfb      	ldrb	r3, [r7, #15]
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	211a      	movs	r1, #26
 8013bfc:	fb01 f303 	mul.w	r3, r1, r3
 8013c00:	4413      	add	r3, r2
 8013c02:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013c06:	781a      	ldrb	r2, [r3, #0]
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8013c0c:	7bfb      	ldrb	r3, [r7, #15]
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	211a      	movs	r1, #26
 8013c12:	fb01 f303 	mul.w	r3, r1, r3
 8013c16:	4413      	add	r3, r2
 8013c18:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013c1c:	881a      	ldrh	r2, [r3, #0]
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	835a      	strh	r2, [r3, #26]
 8013c22:	e015      	b.n	8013c50 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8013c24:	7bfb      	ldrb	r3, [r7, #15]
 8013c26:	687a      	ldr	r2, [r7, #4]
 8013c28:	211a      	movs	r1, #26
 8013c2a:	fb01 f303 	mul.w	r3, r1, r3
 8013c2e:	4413      	add	r3, r2
 8013c30:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013c34:	781a      	ldrb	r2, [r3, #0]
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8013c3a:	7bfb      	ldrb	r3, [r7, #15]
 8013c3c:	687a      	ldr	r2, [r7, #4]
 8013c3e:	211a      	movs	r1, #26
 8013c40:	fb01 f303 	mul.w	r3, r1, r3
 8013c44:	4413      	add	r3, r2
 8013c46:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013c4a:	881a      	ldrh	r2, [r3, #0]
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	7b9b      	ldrb	r3, [r3, #14]
 8013c54:	4619      	mov	r1, r3
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f001 ffe9 	bl	8015c2e <USBH_AllocPipe>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	461a      	mov	r2, r3
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	7bdb      	ldrb	r3, [r3, #15]
 8013c68:	4619      	mov	r1, r3
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f001 ffdf 	bl	8015c2e <USBH_AllocPipe>
 8013c70:	4603      	mov	r3, r0
 8013c72:	461a      	mov	r2, r3
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	7b59      	ldrb	r1, [r3, #13]
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	7b98      	ldrb	r0, [r3, #14]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013c8c:	68ba      	ldr	r2, [r7, #8]
 8013c8e:	8b12      	ldrh	r2, [r2, #24]
 8013c90:	9202      	str	r2, [sp, #8]
 8013c92:	2202      	movs	r2, #2
 8013c94:	9201      	str	r2, [sp, #4]
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	4623      	mov	r3, r4
 8013c9a:	4602      	mov	r2, r0
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f001 ff97 	bl	8015bd0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	7b19      	ldrb	r1, [r3, #12]
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	7bd8      	ldrb	r0, [r3, #15]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013cb6:	68ba      	ldr	r2, [r7, #8]
 8013cb8:	8b52      	ldrh	r2, [r2, #26]
 8013cba:	9202      	str	r2, [sp, #8]
 8013cbc:	2202      	movs	r2, #2
 8013cbe:	9201      	str	r2, [sp, #4]
 8013cc0:	9300      	str	r3, [sp, #0]
 8013cc2:	4623      	mov	r3, r4
 8013cc4:	4602      	mov	r2, r0
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f001 ff82 	bl	8015bd0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	7b5b      	ldrb	r3, [r3, #13]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	4619      	mov	r1, r3
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f005 f86d 	bl	8018dbc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	7b1b      	ldrb	r3, [r3, #12]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	4619      	mov	r1, r3
 8013cea:	6878      	ldr	r0, [r7, #4]
 8013cec:	f005 f866 	bl	8018dbc <USBH_LL_SetToggle>

  return USBH_OK;
 8013cf0:	2300      	movs	r3, #0
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	3714      	adds	r7, #20
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd90      	pop	{r4, r7, pc}

08013cfa <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8013cfa:	b580      	push	{r7, lr}
 8013cfc:	b084      	sub	sp, #16
 8013cfe:	af00      	add	r7, sp, #0
 8013d00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013d08:	69db      	ldr	r3, [r3, #28]
 8013d0a:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d00e      	beq.n	8013d32 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	781b      	ldrb	r3, [r3, #0]
 8013d18:	4619      	mov	r1, r3
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f001 ff77 	bl	8015c0e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	4619      	mov	r1, r3
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f001 ffa2 	bl	8015c70 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	7b1b      	ldrb	r3, [r3, #12]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d00e      	beq.n	8013d58 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	7b1b      	ldrb	r3, [r3, #12]
 8013d3e:	4619      	mov	r1, r3
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f001 ff64 	bl	8015c0e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	7b1b      	ldrb	r3, [r3, #12]
 8013d4a:	4619      	mov	r1, r3
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f001 ff8f 	bl	8015c70 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	2200      	movs	r2, #0
 8013d56:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	7b5b      	ldrb	r3, [r3, #13]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d00e      	beq.n	8013d7e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	7b5b      	ldrb	r3, [r3, #13]
 8013d64:	4619      	mov	r1, r3
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f001 ff51 	bl	8015c0e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	7b5b      	ldrb	r3, [r3, #13]
 8013d70:	4619      	mov	r1, r3
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f001 ff7c 	bl	8015c70 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013d84:	69db      	ldr	r3, [r3, #28]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d00b      	beq.n	8013da2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013d90:	69db      	ldr	r3, [r3, #28]
 8013d92:	4618      	mov	r0, r3
 8013d94:	f006 f9ba 	bl	801a10c <free>
    phost->pActiveClass->pData = 0U;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013d9e:	2200      	movs	r2, #0
 8013da0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8013da2:	2300      	movs	r3, #0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3710      	adds	r7, #16
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013dba:	69db      	ldr	r3, [r3, #28]
 8013dbc:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	3340      	adds	r3, #64	; 0x40
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f000 f8b2 	bl	8013f2e <GetLineCoding>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8013dce:	7afb      	ldrb	r3, [r7, #11]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d105      	bne.n	8013de0 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013dda:	2102      	movs	r1, #2
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8013de0:	7afb      	ldrb	r3, [r7, #11]
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3710      	adds	r7, #16
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
	...

08013dec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b084      	sub	sp, #16
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013df4:	2301      	movs	r3, #1
 8013df6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013e02:	69db      	ldr	r3, [r3, #28]
 8013e04:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8013e06:	68bb      	ldr	r3, [r7, #8]
 8013e08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013e0c:	2b04      	cmp	r3, #4
 8013e0e:	d877      	bhi.n	8013f00 <USBH_CDC_Process+0x114>
 8013e10:	a201      	add	r2, pc, #4	; (adr r2, 8013e18 <USBH_CDC_Process+0x2c>)
 8013e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e16:	bf00      	nop
 8013e18:	08013e2d 	.word	0x08013e2d
 8013e1c:	08013e33 	.word	0x08013e33
 8013e20:	08013e63 	.word	0x08013e63
 8013e24:	08013ed7 	.word	0x08013ed7
 8013e28:	08013ee5 	.word	0x08013ee5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8013e30:	e06d      	b.n	8013f0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e36:	4619      	mov	r1, r3
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f000 f897 	bl	8013f6c <SetLineCoding>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013e42:	7bbb      	ldrb	r3, [r7, #14]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d104      	bne.n	8013e52 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	2202      	movs	r2, #2
 8013e4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8013e50:	e058      	b.n	8013f04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8013e52:	7bbb      	ldrb	r3, [r7, #14]
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	d055      	beq.n	8013f04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	2204      	movs	r2, #4
 8013e5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8013e60:	e050      	b.n	8013f04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	3340      	adds	r3, #64	; 0x40
 8013e66:	4619      	mov	r1, r3
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	f000 f860 	bl	8013f2e <GetLineCoding>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013e72:	7bbb      	ldrb	r3, [r7, #14]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d126      	bne.n	8013ec6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e8a:	791b      	ldrb	r3, [r3, #4]
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	d13b      	bne.n	8013f08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e9a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d133      	bne.n	8013f08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013eaa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d12b      	bne.n	8013f08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013eb8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d124      	bne.n	8013f08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f000 f982 	bl	80141c8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8013ec4:	e020      	b.n	8013f08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8013ec6:	7bbb      	ldrb	r3, [r7, #14]
 8013ec8:	2b01      	cmp	r3, #1
 8013eca:	d01d      	beq.n	8013f08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	2204      	movs	r2, #4
 8013ed0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8013ed4:	e018      	b.n	8013f08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f000 f867 	bl	8013faa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f000 f8f6 	bl	80140ce <CDC_ProcessReception>
      break;
 8013ee2:	e014      	b.n	8013f0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8013ee4:	2100      	movs	r1, #0
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	f001 f951 	bl	801518e <USBH_ClrFeature>
 8013eec:	4603      	mov	r3, r0
 8013eee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013ef0:	7bbb      	ldrb	r3, [r7, #14]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d10a      	bne.n	8013f0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8013efe:	e005      	b.n	8013f0c <USBH_CDC_Process+0x120>

    default:
      break;
 8013f00:	bf00      	nop
 8013f02:	e004      	b.n	8013f0e <USBH_CDC_Process+0x122>
      break;
 8013f04:	bf00      	nop
 8013f06:	e002      	b.n	8013f0e <USBH_CDC_Process+0x122>
      break;
 8013f08:	bf00      	nop
 8013f0a:	e000      	b.n	8013f0e <USBH_CDC_Process+0x122>
      break;
 8013f0c:	bf00      	nop

  }

  return status;
 8013f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	3710      	adds	r7, #16
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}

08013f18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b083      	sub	sp, #12
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8013f20:	2300      	movs	r3, #0
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	370c      	adds	r7, #12
 8013f26:	46bd      	mov	sp, r7
 8013f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2c:	4770      	bx	lr

08013f2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8013f2e:	b580      	push	{r7, lr}
 8013f30:	b082      	sub	sp, #8
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
 8013f36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	22a1      	movs	r2, #161	; 0xa1
 8013f3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2221      	movs	r2, #33	; 0x21
 8013f42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2200      	movs	r2, #0
 8013f48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2207      	movs	r2, #7
 8013f54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	2207      	movs	r2, #7
 8013f5a:	4619      	mov	r1, r3
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f001 faf6 	bl	801554e <USBH_CtlReq>
 8013f62:	4603      	mov	r3, r0
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3708      	adds	r7, #8
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2221      	movs	r2, #33	; 0x21
 8013f7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2220      	movs	r2, #32
 8013f80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2200      	movs	r2, #0
 8013f86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2207      	movs	r2, #7
 8013f92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	2207      	movs	r2, #7
 8013f98:	4619      	mov	r1, r3
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f001 fad7 	bl	801554e <USBH_CtlReq>
 8013fa0:	4603      	mov	r3, r0
}
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	3708      	adds	r7, #8
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd80      	pop	{r7, pc}

08013faa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8013faa:	b580      	push	{r7, lr}
 8013fac:	b086      	sub	sp, #24
 8013fae:	af02      	add	r7, sp, #8
 8013fb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013fb8:	69db      	ldr	r3, [r3, #28]
 8013fba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	d002      	beq.n	8013fd0 <CDC_ProcessTransmission+0x26>
 8013fca:	2b02      	cmp	r3, #2
 8013fcc:	d023      	beq.n	8014016 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8013fce:	e07a      	b.n	80140c6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd4:	68fa      	ldr	r2, [r7, #12]
 8013fd6:	8b12      	ldrh	r2, [r2, #24]
 8013fd8:	4293      	cmp	r3, r2
 8013fda:	d90b      	bls.n	8013ff4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	69d9      	ldr	r1, [r3, #28]
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	8b1a      	ldrh	r2, [r3, #24]
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	7b5b      	ldrb	r3, [r3, #13]
 8013fe8:	2001      	movs	r0, #1
 8013fea:	9000      	str	r0, [sp, #0]
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f001 fdac 	bl	8015b4a <USBH_BulkSendData>
 8013ff2:	e00b      	b.n	801400c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	7b5b      	ldrb	r3, [r3, #13]
 8014002:	2001      	movs	r0, #1
 8014004:	9000      	str	r0, [sp, #0]
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f001 fd9f 	bl	8015b4a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	2202      	movs	r2, #2
 8014010:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8014014:	e057      	b.n	80140c6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	7b5b      	ldrb	r3, [r3, #13]
 801401a:	4619      	mov	r1, r3
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f004 fea3 	bl	8018d68 <USBH_LL_GetURBState>
 8014022:	4603      	mov	r3, r0
 8014024:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8014026:	7afb      	ldrb	r3, [r7, #11]
 8014028:	2b01      	cmp	r3, #1
 801402a:	d136      	bne.n	801409a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014030:	68fa      	ldr	r2, [r7, #12]
 8014032:	8b12      	ldrh	r2, [r2, #24]
 8014034:	4293      	cmp	r3, r2
 8014036:	d90e      	bls.n	8014056 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801403c:	68fa      	ldr	r2, [r7, #12]
 801403e:	8b12      	ldrh	r2, [r2, #24]
 8014040:	1a9a      	subs	r2, r3, r2
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	69db      	ldr	r3, [r3, #28]
 801404a:	68fa      	ldr	r2, [r7, #12]
 801404c:	8b12      	ldrh	r2, [r2, #24]
 801404e:	441a      	add	r2, r3
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	61da      	str	r2, [r3, #28]
 8014054:	e002      	b.n	801405c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	2200      	movs	r2, #0
 801405a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014060:	2b00      	cmp	r3, #0
 8014062:	d004      	beq.n	801406e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2201      	movs	r2, #1
 8014068:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 801406c:	e006      	b.n	801407c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	2200      	movs	r2, #0
 8014072:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f000 f892 	bl	80141a0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2204      	movs	r2, #4
 8014080:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014090:	2200      	movs	r2, #0
 8014092:	4619      	mov	r1, r3
 8014094:	f001 ffea 	bl	801606c <osMessagePut>
      break;
 8014098:	e014      	b.n	80140c4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 801409a:	7afb      	ldrb	r3, [r7, #11]
 801409c:	2b02      	cmp	r3, #2
 801409e:	d111      	bne.n	80140c4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	2201      	movs	r2, #1
 80140a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	2204      	movs	r2, #4
 80140ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80140bc:	2200      	movs	r2, #0
 80140be:	4619      	mov	r1, r3
 80140c0:	f001 ffd4 	bl	801606c <osMessagePut>
      break;
 80140c4:	bf00      	nop
  }
}
 80140c6:	bf00      	nop
 80140c8:	3710      	adds	r7, #16
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd80      	pop	{r7, pc}

080140ce <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80140ce:	b580      	push	{r7, lr}
 80140d0:	b086      	sub	sp, #24
 80140d2:	af00      	add	r7, sp, #0
 80140d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80140dc:	69db      	ldr	r3, [r3, #28]
 80140de:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80140e0:	2300      	movs	r3, #0
 80140e2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80140ea:	2b03      	cmp	r3, #3
 80140ec:	d002      	beq.n	80140f4 <CDC_ProcessReception+0x26>
 80140ee:	2b04      	cmp	r3, #4
 80140f0:	d00e      	beq.n	8014110 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80140f2:	e051      	b.n	8014198 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	6a19      	ldr	r1, [r3, #32]
 80140f8:	697b      	ldr	r3, [r7, #20]
 80140fa:	8b5a      	ldrh	r2, [r3, #26]
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	7b1b      	ldrb	r3, [r3, #12]
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f001 fd47 	bl	8015b94 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	2204      	movs	r2, #4
 801410a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 801410e:	e043      	b.n	8014198 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	7b1b      	ldrb	r3, [r3, #12]
 8014114:	4619      	mov	r1, r3
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f004 fe26 	bl	8018d68 <USBH_LL_GetURBState>
 801411c:	4603      	mov	r3, r0
 801411e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8014120:	7cfb      	ldrb	r3, [r7, #19]
 8014122:	2b01      	cmp	r3, #1
 8014124:	d137      	bne.n	8014196 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	7b1b      	ldrb	r3, [r3, #12]
 801412a:	4619      	mov	r1, r3
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f004 fd89 	bl	8018c44 <USBH_LL_GetLastXferSize>
 8014132:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014138:	68fa      	ldr	r2, [r7, #12]
 801413a:	429a      	cmp	r2, r3
 801413c:	d016      	beq.n	801416c <CDC_ProcessReception+0x9e>
 801413e:	697b      	ldr	r3, [r7, #20]
 8014140:	8b5b      	ldrh	r3, [r3, #26]
 8014142:	461a      	mov	r2, r3
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	4293      	cmp	r3, r2
 8014148:	d910      	bls.n	801416c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	1ad2      	subs	r2, r2, r3
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8014156:	697b      	ldr	r3, [r7, #20]
 8014158:	6a1a      	ldr	r2, [r3, #32]
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	441a      	add	r2, r3
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	2203      	movs	r2, #3
 8014166:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801416a:	e006      	b.n	801417a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	2200      	movs	r2, #0
 8014170:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f000 f81d 	bl	80141b4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2204      	movs	r2, #4
 801417e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801418e:	2200      	movs	r2, #0
 8014190:	4619      	mov	r1, r3
 8014192:	f001 ff6b 	bl	801606c <osMessagePut>
      break;
 8014196:	bf00      	nop
  }
}
 8014198:	bf00      	nop
 801419a:	3718      	adds	r7, #24
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}

080141a0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80141a0:	b480      	push	{r7}
 80141a2:	b083      	sub	sp, #12
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80141a8:	bf00      	nop
 80141aa:	370c      	adds	r7, #12
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr

080141b4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80141b4:	b480      	push	{r7}
 80141b6:	b083      	sub	sp, #12
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80141bc:	bf00      	nop
 80141be:	370c      	adds	r7, #12
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr

080141c8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80141c8:	b480      	push	{r7}
 80141ca:	b083      	sub	sp, #12
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80141d0:	bf00      	nop
 80141d2:	370c      	adds	r7, #12
 80141d4:	46bd      	mov	sp, r7
 80141d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141da:	4770      	bx	lr

080141dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80141dc:	b5b0      	push	{r4, r5, r7, lr}
 80141de:	b090      	sub	sp, #64	; 0x40
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	60b9      	str	r1, [r7, #8]
 80141e6:	4613      	mov	r3, r2
 80141e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d101      	bne.n	80141f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80141f0:	2302      	movs	r3, #2
 80141f2:	e04d      	b.n	8014290 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	79fa      	ldrb	r2, [r7, #7]
 80141f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	2200      	movs	r2, #0
 8014200:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	2200      	movs	r2, #0
 8014208:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 801420c:	68f8      	ldr	r0, [r7, #12]
 801420e:	f000 f847 	bl	80142a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	2200      	movs	r2, #0
 8014216:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	2200      	movs	r2, #0
 801421e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	2200      	movs	r2, #0
 8014226:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2200      	movs	r2, #0
 801422e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d003      	beq.n	8014240 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	68ba      	ldr	r2, [r7, #8]
 801423c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8014240:	4b15      	ldr	r3, [pc, #84]	; (8014298 <USBH_Init+0xbc>)
 8014242:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8014246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 801424c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014250:	2100      	movs	r1, #0
 8014252:	4618      	mov	r0, r3
 8014254:	f001 fee2 	bl	801601c <osMessageCreate>
 8014258:	4602      	mov	r2, r0
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8014260:	4b0e      	ldr	r3, [pc, #56]	; (801429c <USBH_Init+0xc0>)
 8014262:	f107 0414 	add.w	r4, r7, #20
 8014266:	461d      	mov	r5, r3
 8014268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801426a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801426c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8014274:	f107 0314 	add.w	r3, r7, #20
 8014278:	68f9      	ldr	r1, [r7, #12]
 801427a:	4618      	mov	r0, r3
 801427c:	f001 fde2 	bl	8015e44 <osThreadCreate>
 8014280:	4602      	mov	r2, r0
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8014288:	68f8      	ldr	r0, [r7, #12]
 801428a:	f004 fc27 	bl	8018adc <USBH_LL_Init>

  return USBH_OK;
 801428e:	2300      	movs	r3, #0
}
 8014290:	4618      	mov	r0, r3
 8014292:	3740      	adds	r7, #64	; 0x40
 8014294:	46bd      	mov	sp, r7
 8014296:	bdb0      	pop	{r4, r5, r7, pc}
 8014298:	0801b6f4 	.word	0x0801b6f4
 801429c:	0801b704 	.word	0x0801b704

080142a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80142a0:	b480      	push	{r7}
 80142a2:	b085      	sub	sp, #20
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80142a8:	2300      	movs	r3, #0
 80142aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80142ac:	2300      	movs	r3, #0
 80142ae:	60fb      	str	r3, [r7, #12]
 80142b0:	e009      	b.n	80142c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	33e0      	adds	r3, #224	; 0xe0
 80142b8:	009b      	lsls	r3, r3, #2
 80142ba:	4413      	add	r3, r2
 80142bc:	2200      	movs	r2, #0
 80142be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	3301      	adds	r3, #1
 80142c4:	60fb      	str	r3, [r7, #12]
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	2b0e      	cmp	r3, #14
 80142ca:	d9f2      	bls.n	80142b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80142cc:	2300      	movs	r3, #0
 80142ce:	60fb      	str	r3, [r7, #12]
 80142d0:	e009      	b.n	80142e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80142d2:	687a      	ldr	r2, [r7, #4]
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	4413      	add	r3, r2
 80142d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80142dc:	2200      	movs	r2, #0
 80142de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	3301      	adds	r3, #1
 80142e4:	60fb      	str	r3, [r7, #12]
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80142ec:	d3f1      	bcc.n	80142d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2200      	movs	r2, #0
 80142f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2200      	movs	r2, #0
 80142f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2201      	movs	r2, #1
 80142fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2200      	movs	r2, #0
 8014304:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2201      	movs	r2, #1
 801430c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2240      	movs	r2, #64	; 0x40
 8014312:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2200      	movs	r2, #0
 8014318:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2200      	movs	r2, #0
 801431e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	2201      	movs	r2, #1
 8014326:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2200      	movs	r2, #0
 801432e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2200      	movs	r2, #0
 8014336:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 801433a:	2300      	movs	r3, #0
}
 801433c:	4618      	mov	r0, r3
 801433e:	3714      	adds	r7, #20
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr

08014348 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8014348:	b480      	push	{r7}
 801434a:	b085      	sub	sp, #20
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8014352:	2300      	movs	r3, #0
 8014354:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d016      	beq.n	801438a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014362:	2b00      	cmp	r3, #0
 8014364:	d10e      	bne.n	8014384 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801436c:	1c59      	adds	r1, r3, #1
 801436e:	687a      	ldr	r2, [r7, #4]
 8014370:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8014374:	687a      	ldr	r2, [r7, #4]
 8014376:	33de      	adds	r3, #222	; 0xde
 8014378:	6839      	ldr	r1, [r7, #0]
 801437a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 801437e:	2300      	movs	r3, #0
 8014380:	73fb      	strb	r3, [r7, #15]
 8014382:	e004      	b.n	801438e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8014384:	2302      	movs	r3, #2
 8014386:	73fb      	strb	r3, [r7, #15]
 8014388:	e001      	b.n	801438e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801438a:	2302      	movs	r3, #2
 801438c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014390:	4618      	mov	r0, r3
 8014392:	3714      	adds	r7, #20
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr

0801439c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801439c:	b480      	push	{r7}
 801439e:	b085      	sub	sp, #20
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
 80143a4:	460b      	mov	r3, r1
 80143a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80143a8:	2300      	movs	r3, #0
 80143aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80143b2:	78fa      	ldrb	r2, [r7, #3]
 80143b4:	429a      	cmp	r2, r3
 80143b6:	d204      	bcs.n	80143c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	78fa      	ldrb	r2, [r7, #3]
 80143bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80143c0:	e001      	b.n	80143c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80143c2:	2302      	movs	r3, #2
 80143c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80143c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3714      	adds	r7, #20
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr

080143d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80143d4:	b480      	push	{r7}
 80143d6:	b087      	sub	sp, #28
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	4608      	mov	r0, r1
 80143de:	4611      	mov	r1, r2
 80143e0:	461a      	mov	r2, r3
 80143e2:	4603      	mov	r3, r0
 80143e4:	70fb      	strb	r3, [r7, #3]
 80143e6:	460b      	mov	r3, r1
 80143e8:	70bb      	strb	r3, [r7, #2]
 80143ea:	4613      	mov	r3, r2
 80143ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80143ee:	2300      	movs	r3, #0
 80143f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80143f2:	2300      	movs	r3, #0
 80143f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80143fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80143fe:	e025      	b.n	801444c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8014400:	7dfb      	ldrb	r3, [r7, #23]
 8014402:	221a      	movs	r2, #26
 8014404:	fb02 f303 	mul.w	r3, r2, r3
 8014408:	3308      	adds	r3, #8
 801440a:	68fa      	ldr	r2, [r7, #12]
 801440c:	4413      	add	r3, r2
 801440e:	3302      	adds	r3, #2
 8014410:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	795b      	ldrb	r3, [r3, #5]
 8014416:	78fa      	ldrb	r2, [r7, #3]
 8014418:	429a      	cmp	r2, r3
 801441a:	d002      	beq.n	8014422 <USBH_FindInterface+0x4e>
 801441c:	78fb      	ldrb	r3, [r7, #3]
 801441e:	2bff      	cmp	r3, #255	; 0xff
 8014420:	d111      	bne.n	8014446 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8014426:	78ba      	ldrb	r2, [r7, #2]
 8014428:	429a      	cmp	r2, r3
 801442a:	d002      	beq.n	8014432 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801442c:	78bb      	ldrb	r3, [r7, #2]
 801442e:	2bff      	cmp	r3, #255	; 0xff
 8014430:	d109      	bne.n	8014446 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8014436:	787a      	ldrb	r2, [r7, #1]
 8014438:	429a      	cmp	r2, r3
 801443a:	d002      	beq.n	8014442 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801443c:	787b      	ldrb	r3, [r7, #1]
 801443e:	2bff      	cmp	r3, #255	; 0xff
 8014440:	d101      	bne.n	8014446 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8014442:	7dfb      	ldrb	r3, [r7, #23]
 8014444:	e006      	b.n	8014454 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8014446:	7dfb      	ldrb	r3, [r7, #23]
 8014448:	3301      	adds	r3, #1
 801444a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801444c:	7dfb      	ldrb	r3, [r7, #23]
 801444e:	2b01      	cmp	r3, #1
 8014450:	d9d6      	bls.n	8014400 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8014452:	23ff      	movs	r3, #255	; 0xff
}
 8014454:	4618      	mov	r0, r3
 8014456:	371c      	adds	r7, #28
 8014458:	46bd      	mov	sp, r7
 801445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445e:	4770      	bx	lr

08014460 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b082      	sub	sp, #8
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f004 fb73 	bl	8018b54 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 801446e:	2101      	movs	r1, #1
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f004 fc8c 	bl	8018d8e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8014476:	2300      	movs	r3, #0
}
 8014478:	4618      	mov	r0, r3
 801447a:	3708      	adds	r7, #8
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}

08014480 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b088      	sub	sp, #32
 8014484:	af04      	add	r7, sp, #16
 8014486:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8014488:	2302      	movs	r3, #2
 801448a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 801448c:	2300      	movs	r3, #0
 801448e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8014496:	b2db      	uxtb	r3, r3
 8014498:	2b01      	cmp	r3, #1
 801449a:	d102      	bne.n	80144a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2203      	movs	r2, #3
 80144a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	b2db      	uxtb	r3, r3
 80144a8:	2b0b      	cmp	r3, #11
 80144aa:	f200 823c 	bhi.w	8014926 <USBH_Process+0x4a6>
 80144ae:	a201      	add	r2, pc, #4	; (adr r2, 80144b4 <USBH_Process+0x34>)
 80144b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144b4:	080144e5 	.word	0x080144e5
 80144b8:	08014533 	.word	0x08014533
 80144bc:	080145b7 	.word	0x080145b7
 80144c0:	080148a5 	.word	0x080148a5
 80144c4:	08014927 	.word	0x08014927
 80144c8:	08014677 	.word	0x08014677
 80144cc:	0801482f 	.word	0x0801482f
 80144d0:	080146c9 	.word	0x080146c9
 80144d4:	08014705 	.word	0x08014705
 80144d8:	0801473f 	.word	0x0801473f
 80144dc:	08014787 	.word	0x08014787
 80144e0:	0801488d 	.word	0x0801488d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80144ea:	b2db      	uxtb	r3, r3
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	f000 821c 	beq.w	801492a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2201      	movs	r2, #1
 80144f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80144f8:	20c8      	movs	r0, #200	; 0xc8
 80144fa:	f004 fc8f 	bl	8018e1c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f004 fb85 	bl	8018c0e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2200      	movs	r2, #0
 8014508:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2200      	movs	r2, #0
 8014510:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2201      	movs	r2, #1
 8014518:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014528:	2200      	movs	r2, #0
 801452a:	4619      	mov	r1, r3
 801452c:	f001 fd9e 	bl	801606c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8014530:	e1fb      	b.n	801492a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8014538:	2b01      	cmp	r3, #1
 801453a:	d107      	bne.n	801454c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2200      	movs	r2, #0
 8014540:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2202      	movs	r2, #2
 8014548:	701a      	strb	r2, [r3, #0]
 801454a:	e025      	b.n	8014598 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8014552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014556:	d914      	bls.n	8014582 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801455e:	3301      	adds	r3, #1
 8014560:	b2da      	uxtb	r2, r3
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801456e:	2b03      	cmp	r3, #3
 8014570:	d903      	bls.n	801457a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	220d      	movs	r2, #13
 8014576:	701a      	strb	r2, [r3, #0]
 8014578:	e00e      	b.n	8014598 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2200      	movs	r2, #0
 801457e:	701a      	strb	r2, [r3, #0]
 8014580:	e00a      	b.n	8014598 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8014588:	f103 020a 	add.w	r2, r3, #10
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8014592:	200a      	movs	r0, #10
 8014594:	f004 fc42 	bl	8018e1c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2201      	movs	r2, #1
 801459c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80145ac:	2200      	movs	r2, #0
 80145ae:	4619      	mov	r1, r3
 80145b0:	f001 fd5c 	bl	801606c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80145b4:	e1c0      	b.n	8014938 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d005      	beq.n	80145cc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80145c6:	2104      	movs	r1, #4
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80145cc:	2064      	movs	r0, #100	; 0x64
 80145ce:	f004 fc25 	bl	8018e1c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f004 faf4 	bl	8018bc0 <USBH_LL_GetSpeed>
 80145d8:	4603      	mov	r3, r0
 80145da:	461a      	mov	r2, r3
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2205      	movs	r2, #5
 80145e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80145e8:	2100      	movs	r1, #0
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f001 fb1f 	bl	8015c2e <USBH_AllocPipe>
 80145f0:	4603      	mov	r3, r0
 80145f2:	461a      	mov	r2, r3
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80145f8:	2180      	movs	r1, #128	; 0x80
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f001 fb17 	bl	8015c2e <USBH_AllocPipe>
 8014600:	4603      	mov	r3, r0
 8014602:	461a      	mov	r2, r3
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	7919      	ldrb	r1, [r3, #4]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8014618:	687a      	ldr	r2, [r7, #4]
 801461a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801461c:	b292      	uxth	r2, r2
 801461e:	9202      	str	r2, [sp, #8]
 8014620:	2200      	movs	r2, #0
 8014622:	9201      	str	r2, [sp, #4]
 8014624:	9300      	str	r3, [sp, #0]
 8014626:	4603      	mov	r3, r0
 8014628:	2280      	movs	r2, #128	; 0x80
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f001 fad0 	bl	8015bd0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	7959      	ldrb	r1, [r3, #5]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014644:	b292      	uxth	r2, r2
 8014646:	9202      	str	r2, [sp, #8]
 8014648:	2200      	movs	r2, #0
 801464a:	9201      	str	r2, [sp, #4]
 801464c:	9300      	str	r3, [sp, #0]
 801464e:	4603      	mov	r3, r0
 8014650:	2200      	movs	r2, #0
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	f001 fabc 	bl	8015bd0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2201      	movs	r2, #1
 801465c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801466c:	2200      	movs	r2, #0
 801466e:	4619      	mov	r1, r3
 8014670:	f001 fcfc 	bl	801606c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014674:	e160      	b.n	8014938 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 f964 	bl	8014944 <USBH_HandleEnum>
 801467c:	4603      	mov	r3, r0
 801467e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8014680:	7bbb      	ldrb	r3, [r7, #14]
 8014682:	b2db      	uxtb	r3, r3
 8014684:	2b00      	cmp	r3, #0
 8014686:	f040 8152 	bne.w	801492e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	2200      	movs	r2, #0
 801468e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8014698:	2b01      	cmp	r3, #1
 801469a:	d103      	bne.n	80146a4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2208      	movs	r2, #8
 80146a0:	701a      	strb	r2, [r3, #0]
 80146a2:	e002      	b.n	80146aa <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2207      	movs	r2, #7
 80146a8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2205      	movs	r2, #5
 80146ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80146be:	2200      	movs	r2, #0
 80146c0:	4619      	mov	r1, r3
 80146c2:	f001 fcd3 	bl	801606c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80146c6:	e132      	b.n	801492e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	f000 812f 	beq.w	8014932 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80146da:	2101      	movs	r1, #1
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2208      	movs	r2, #8
 80146e4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2205      	movs	r2, #5
 80146ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80146fa:	2200      	movs	r2, #0
 80146fc:	4619      	mov	r1, r3
 80146fe:	f001 fcb5 	bl	801606c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8014702:	e116      	b.n	8014932 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 801470a:	b29b      	uxth	r3, r3
 801470c:	4619      	mov	r1, r3
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f000 fcf6 	bl	8015100 <USBH_SetCfg>
 8014714:	4603      	mov	r3, r0
 8014716:	2b00      	cmp	r3, #0
 8014718:	d102      	bne.n	8014720 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2209      	movs	r2, #9
 801471e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2201      	movs	r2, #1
 8014724:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014734:	2200      	movs	r2, #0
 8014736:	4619      	mov	r1, r3
 8014738:	f001 fc98 	bl	801606c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801473c:	e0fc      	b.n	8014938 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8014744:	f003 0320 	and.w	r3, r3, #32
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00a      	beq.n	8014762 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 801474c:	2101      	movs	r1, #1
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f000 fcf9 	bl	8015146 <USBH_SetFeature>
 8014754:	4603      	mov	r3, r0
 8014756:	2b00      	cmp	r3, #0
 8014758:	d106      	bne.n	8014768 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	220a      	movs	r2, #10
 801475e:	701a      	strb	r2, [r3, #0]
 8014760:	e002      	b.n	8014768 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	220a      	movs	r2, #10
 8014766:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2201      	movs	r2, #1
 801476c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801477c:	2200      	movs	r2, #0
 801477e:	4619      	mov	r1, r3
 8014780:	f001 fc74 	bl	801606c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014784:	e0d8      	b.n	8014938 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801478c:	2b00      	cmp	r3, #0
 801478e:	d03f      	beq.n	8014810 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2200      	movs	r2, #0
 8014794:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8014798:	2300      	movs	r3, #0
 801479a:	73fb      	strb	r3, [r7, #15]
 801479c:	e016      	b.n	80147cc <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801479e:	7bfa      	ldrb	r2, [r7, #15]
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	32de      	adds	r2, #222	; 0xde
 80147a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147a8:	791a      	ldrb	r2, [r3, #4]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d108      	bne.n	80147c6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80147b4:	7bfa      	ldrb	r2, [r7, #15]
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	32de      	adds	r2, #222	; 0xde
 80147ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80147c4:	e005      	b.n	80147d2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80147c6:	7bfb      	ldrb	r3, [r7, #15]
 80147c8:	3301      	adds	r3, #1
 80147ca:	73fb      	strb	r3, [r7, #15]
 80147cc:	7bfb      	ldrb	r3, [r7, #15]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d0e5      	beq.n	801479e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d016      	beq.n	801480a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80147e2:	689b      	ldr	r3, [r3, #8]
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	4798      	blx	r3
 80147e8:	4603      	mov	r3, r0
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d109      	bne.n	8014802 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	2206      	movs	r2, #6
 80147f2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80147fa:	2103      	movs	r1, #3
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	4798      	blx	r3
 8014800:	e006      	b.n	8014810 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	220d      	movs	r2, #13
 8014806:	701a      	strb	r2, [r3, #0]
 8014808:	e002      	b.n	8014810 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	220d      	movs	r2, #13
 801480e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2205      	movs	r2, #5
 8014814:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014824:	2200      	movs	r2, #0
 8014826:	4619      	mov	r1, r3
 8014828:	f001 fc20 	bl	801606c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801482c:	e084      	b.n	8014938 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014834:	2b00      	cmp	r3, #0
 8014836:	d017      	beq.n	8014868 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801483e:	691b      	ldr	r3, [r3, #16]
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	4798      	blx	r3
 8014844:	4603      	mov	r3, r0
 8014846:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8014848:	7bbb      	ldrb	r3, [r7, #14]
 801484a:	b2db      	uxtb	r3, r3
 801484c:	2b00      	cmp	r3, #0
 801484e:	d103      	bne.n	8014858 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	220b      	movs	r2, #11
 8014854:	701a      	strb	r2, [r3, #0]
 8014856:	e00a      	b.n	801486e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8014858:	7bbb      	ldrb	r3, [r7, #14]
 801485a:	b2db      	uxtb	r3, r3
 801485c:	2b02      	cmp	r3, #2
 801485e:	d106      	bne.n	801486e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	220d      	movs	r2, #13
 8014864:	701a      	strb	r2, [r3, #0]
 8014866:	e002      	b.n	801486e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	220d      	movs	r2, #13
 801486c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	2205      	movs	r2, #5
 8014872:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014882:	2200      	movs	r2, #0
 8014884:	4619      	mov	r1, r3
 8014886:	f001 fbf1 	bl	801606c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801488a:	e055      	b.n	8014938 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014892:	2b00      	cmp	r3, #0
 8014894:	d04f      	beq.n	8014936 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801489c:	695b      	ldr	r3, [r3, #20]
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	4798      	blx	r3
      }
      break;
 80148a2:	e048      	b.n	8014936 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2200      	movs	r2, #0
 80148a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f7ff fcf7 	bl	80142a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d009      	beq.n	80148d0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80148c2:	68db      	ldr	r3, [r3, #12]
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2200      	movs	r2, #0
 80148cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d005      	beq.n	80148e6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80148e0:	2105      	movs	r1, #5
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80148ec:	b2db      	uxtb	r3, r3
 80148ee:	2b01      	cmp	r3, #1
 80148f0:	d107      	bne.n	8014902 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2200      	movs	r2, #0
 80148f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f7ff fdb0 	bl	8014460 <USBH_Start>
 8014900:	e002      	b.n	8014908 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f004 f926 	bl	8018b54 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2201      	movs	r2, #1
 801490c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801491c:	2200      	movs	r2, #0
 801491e:	4619      	mov	r1, r3
 8014920:	f001 fba4 	bl	801606c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014924:	e008      	b.n	8014938 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8014926:	bf00      	nop
 8014928:	e006      	b.n	8014938 <USBH_Process+0x4b8>
      break;
 801492a:	bf00      	nop
 801492c:	e004      	b.n	8014938 <USBH_Process+0x4b8>
      break;
 801492e:	bf00      	nop
 8014930:	e002      	b.n	8014938 <USBH_Process+0x4b8>
    break;
 8014932:	bf00      	nop
 8014934:	e000      	b.n	8014938 <USBH_Process+0x4b8>
      break;
 8014936:	bf00      	nop
  }
  return USBH_OK;
 8014938:	2300      	movs	r3, #0
}
 801493a:	4618      	mov	r0, r3
 801493c:	3710      	adds	r7, #16
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}
 8014942:	bf00      	nop

08014944 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b088      	sub	sp, #32
 8014948:	af04      	add	r7, sp, #16
 801494a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 801494c:	2301      	movs	r3, #1
 801494e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8014950:	2301      	movs	r3, #1
 8014952:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	785b      	ldrb	r3, [r3, #1]
 8014958:	2b07      	cmp	r3, #7
 801495a:	f200 8208 	bhi.w	8014d6e <USBH_HandleEnum+0x42a>
 801495e:	a201      	add	r2, pc, #4	; (adr r2, 8014964 <USBH_HandleEnum+0x20>)
 8014960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014964:	08014985 	.word	0x08014985
 8014968:	08014a43 	.word	0x08014a43
 801496c:	08014aad 	.word	0x08014aad
 8014970:	08014b3b 	.word	0x08014b3b
 8014974:	08014ba5 	.word	0x08014ba5
 8014978:	08014c15 	.word	0x08014c15
 801497c:	08014cb1 	.word	0x08014cb1
 8014980:	08014d2f 	.word	0x08014d2f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8014984:	2108      	movs	r1, #8
 8014986:	6878      	ldr	r0, [r7, #4]
 8014988:	f000 faea 	bl	8014f60 <USBH_Get_DevDesc>
 801498c:	4603      	mov	r3, r0
 801498e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014990:	7bbb      	ldrb	r3, [r7, #14]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d130      	bne.n	80149f8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2201      	movs	r2, #1
 80149a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	7919      	ldrb	r1, [r3, #4]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80149ba:	b292      	uxth	r2, r2
 80149bc:	9202      	str	r2, [sp, #8]
 80149be:	2200      	movs	r2, #0
 80149c0:	9201      	str	r2, [sp, #4]
 80149c2:	9300      	str	r3, [sp, #0]
 80149c4:	4603      	mov	r3, r0
 80149c6:	2280      	movs	r2, #128	; 0x80
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f001 f901 	bl	8015bd0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	7959      	ldrb	r1, [r3, #5]
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80149e2:	b292      	uxth	r2, r2
 80149e4:	9202      	str	r2, [sp, #8]
 80149e6:	2200      	movs	r2, #0
 80149e8:	9201      	str	r2, [sp, #4]
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	4603      	mov	r3, r0
 80149ee:	2200      	movs	r2, #0
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f001 f8ed 	bl	8015bd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80149f6:	e1bc      	b.n	8014d72 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80149f8:	7bbb      	ldrb	r3, [r7, #14]
 80149fa:	2b03      	cmp	r3, #3
 80149fc:	f040 81b9 	bne.w	8014d72 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014a06:	3301      	adds	r3, #1
 8014a08:	b2da      	uxtb	r2, r3
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014a16:	2b03      	cmp	r3, #3
 8014a18:	d903      	bls.n	8014a22 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	220d      	movs	r2, #13
 8014a1e:	701a      	strb	r2, [r3, #0]
      break;
 8014a20:	e1a7      	b.n	8014d72 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	795b      	ldrb	r3, [r3, #5]
 8014a26:	4619      	mov	r1, r3
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f001 f921 	bl	8015c70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	791b      	ldrb	r3, [r3, #4]
 8014a32:	4619      	mov	r1, r3
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f001 f91b 	bl	8015c70 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	701a      	strb	r2, [r3, #0]
      break;
 8014a40:	e197      	b.n	8014d72 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8014a42:	2112      	movs	r1, #18
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f000 fa8b 	bl	8014f60 <USBH_Get_DevDesc>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014a4e:	7bbb      	ldrb	r3, [r7, #14]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d103      	bne.n	8014a5c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2202      	movs	r2, #2
 8014a58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8014a5a:	e18c      	b.n	8014d76 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014a5c:	7bbb      	ldrb	r3, [r7, #14]
 8014a5e:	2b03      	cmp	r3, #3
 8014a60:	f040 8189 	bne.w	8014d76 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	b2da      	uxtb	r2, r3
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014a7a:	2b03      	cmp	r3, #3
 8014a7c:	d903      	bls.n	8014a86 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	220d      	movs	r2, #13
 8014a82:	701a      	strb	r2, [r3, #0]
      break;
 8014a84:	e177      	b.n	8014d76 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	795b      	ldrb	r3, [r3, #5]
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	6878      	ldr	r0, [r7, #4]
 8014a8e:	f001 f8ef 	bl	8015c70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	791b      	ldrb	r3, [r3, #4]
 8014a96:	4619      	mov	r1, r3
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f001 f8e9 	bl	8015c70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	701a      	strb	r2, [r3, #0]
      break;
 8014aaa:	e164      	b.n	8014d76 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8014aac:	2101      	movs	r1, #1
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f000 fb02 	bl	80150b8 <USBH_SetAddress>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014ab8:	7bbb      	ldrb	r3, [r7, #14]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d132      	bne.n	8014b24 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8014abe:	2002      	movs	r0, #2
 8014ac0:	f004 f9ac 	bl	8018e1c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2201      	movs	r2, #1
 8014ac8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2203      	movs	r2, #3
 8014ad0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	7919      	ldrb	r1, [r3, #4]
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014ae2:	687a      	ldr	r2, [r7, #4]
 8014ae4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8014ae6:	b292      	uxth	r2, r2
 8014ae8:	9202      	str	r2, [sp, #8]
 8014aea:	2200      	movs	r2, #0
 8014aec:	9201      	str	r2, [sp, #4]
 8014aee:	9300      	str	r3, [sp, #0]
 8014af0:	4603      	mov	r3, r0
 8014af2:	2280      	movs	r2, #128	; 0x80
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f001 f86b 	bl	8015bd0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	7959      	ldrb	r1, [r3, #5]
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014b0a:	687a      	ldr	r2, [r7, #4]
 8014b0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014b0e:	b292      	uxth	r2, r2
 8014b10:	9202      	str	r2, [sp, #8]
 8014b12:	2200      	movs	r2, #0
 8014b14:	9201      	str	r2, [sp, #4]
 8014b16:	9300      	str	r3, [sp, #0]
 8014b18:	4603      	mov	r3, r0
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f001 f857 	bl	8015bd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8014b22:	e12a      	b.n	8014d7a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014b24:	7bbb      	ldrb	r3, [r7, #14]
 8014b26:	2b03      	cmp	r3, #3
 8014b28:	f040 8127 	bne.w	8014d7a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	220d      	movs	r2, #13
 8014b30:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	2200      	movs	r2, #0
 8014b36:	705a      	strb	r2, [r3, #1]
      break;
 8014b38:	e11f      	b.n	8014d7a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8014b3a:	2109      	movs	r1, #9
 8014b3c:	6878      	ldr	r0, [r7, #4]
 8014b3e:	f000 fa37 	bl	8014fb0 <USBH_Get_CfgDesc>
 8014b42:	4603      	mov	r3, r0
 8014b44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014b46:	7bbb      	ldrb	r3, [r7, #14]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d103      	bne.n	8014b54 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2204      	movs	r2, #4
 8014b50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8014b52:	e114      	b.n	8014d7e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014b54:	7bbb      	ldrb	r3, [r7, #14]
 8014b56:	2b03      	cmp	r3, #3
 8014b58:	f040 8111 	bne.w	8014d7e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014b62:	3301      	adds	r3, #1
 8014b64:	b2da      	uxtb	r2, r3
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014b72:	2b03      	cmp	r3, #3
 8014b74:	d903      	bls.n	8014b7e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	220d      	movs	r2, #13
 8014b7a:	701a      	strb	r2, [r3, #0]
      break;
 8014b7c:	e0ff      	b.n	8014d7e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	795b      	ldrb	r3, [r3, #5]
 8014b82:	4619      	mov	r1, r3
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f001 f873 	bl	8015c70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	791b      	ldrb	r3, [r3, #4]
 8014b8e:	4619      	mov	r1, r3
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f001 f86d 	bl	8015c70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	701a      	strb	r2, [r3, #0]
      break;
 8014ba2:	e0ec      	b.n	8014d7e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8014baa:	4619      	mov	r1, r3
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f000 f9ff 	bl	8014fb0 <USBH_Get_CfgDesc>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014bb6:	7bbb      	ldrb	r3, [r7, #14]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d103      	bne.n	8014bc4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2205      	movs	r2, #5
 8014bc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8014bc2:	e0de      	b.n	8014d82 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014bc4:	7bbb      	ldrb	r3, [r7, #14]
 8014bc6:	2b03      	cmp	r3, #3
 8014bc8:	f040 80db 	bne.w	8014d82 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	b2da      	uxtb	r2, r3
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014be2:	2b03      	cmp	r3, #3
 8014be4:	d903      	bls.n	8014bee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	220d      	movs	r2, #13
 8014bea:	701a      	strb	r2, [r3, #0]
      break;
 8014bec:	e0c9      	b.n	8014d82 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	795b      	ldrb	r3, [r3, #5]
 8014bf2:	4619      	mov	r1, r3
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f001 f83b 	bl	8015c70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	791b      	ldrb	r3, [r3, #4]
 8014bfe:	4619      	mov	r1, r3
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f001 f835 	bl	8015c70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	701a      	strb	r2, [r3, #0]
      break;
 8014c12:	e0b6      	b.n	8014d82 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d036      	beq.n	8014c8c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8014c2a:	23ff      	movs	r3, #255	; 0xff
 8014c2c:	6878      	ldr	r0, [r7, #4]
 8014c2e:	f000 f9e3 	bl	8014ff8 <USBH_Get_StringDesc>
 8014c32:	4603      	mov	r3, r0
 8014c34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8014c36:	7bbb      	ldrb	r3, [r7, #14]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d111      	bne.n	8014c60 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2206      	movs	r2, #6
 8014c40:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	2205      	movs	r2, #5
 8014c46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c56:	2200      	movs	r2, #0
 8014c58:	4619      	mov	r1, r3
 8014c5a:	f001 fa07 	bl	801606c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8014c5e:	e092      	b.n	8014d86 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014c60:	7bbb      	ldrb	r3, [r7, #14]
 8014c62:	2b03      	cmp	r3, #3
 8014c64:	f040 808f 	bne.w	8014d86 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	2206      	movs	r2, #6
 8014c6c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	2205      	movs	r2, #5
 8014c72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c82:	2200      	movs	r2, #0
 8014c84:	4619      	mov	r1, r3
 8014c86:	f001 f9f1 	bl	801606c <osMessagePut>
      break;
 8014c8a:	e07c      	b.n	8014d86 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	2206      	movs	r2, #6
 8014c90:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2205      	movs	r2, #5
 8014c96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	4619      	mov	r1, r3
 8014caa:	f001 f9df 	bl	801606c <osMessagePut>
      break;
 8014cae:	e06a      	b.n	8014d86 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d027      	beq.n	8014d0a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8014cc6:	23ff      	movs	r3, #255	; 0xff
 8014cc8:	6878      	ldr	r0, [r7, #4]
 8014cca:	f000 f995 	bl	8014ff8 <USBH_Get_StringDesc>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8014cd2:	7bbb      	ldrb	r3, [r7, #14]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d103      	bne.n	8014ce0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	2207      	movs	r2, #7
 8014cdc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8014cde:	e054      	b.n	8014d8a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014ce0:	7bbb      	ldrb	r3, [r7, #14]
 8014ce2:	2b03      	cmp	r3, #3
 8014ce4:	d151      	bne.n	8014d8a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	2207      	movs	r2, #7
 8014cea:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2205      	movs	r2, #5
 8014cf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d00:	2200      	movs	r2, #0
 8014d02:	4619      	mov	r1, r3
 8014d04:	f001 f9b2 	bl	801606c <osMessagePut>
      break;
 8014d08:	e03f      	b.n	8014d8a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	2207      	movs	r2, #7
 8014d0e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	2205      	movs	r2, #5
 8014d14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d24:	2200      	movs	r2, #0
 8014d26:	4619      	mov	r1, r3
 8014d28:	f001 f9a0 	bl	801606c <osMessagePut>
      break;
 8014d2c:	e02d      	b.n	8014d8a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d017      	beq.n	8014d68 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8014d44:	23ff      	movs	r3, #255	; 0xff
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f000 f956 	bl	8014ff8 <USBH_Get_StringDesc>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8014d50:	7bbb      	ldrb	r3, [r7, #14]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d102      	bne.n	8014d5c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8014d56:	2300      	movs	r3, #0
 8014d58:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8014d5a:	e018      	b.n	8014d8e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014d5c:	7bbb      	ldrb	r3, [r7, #14]
 8014d5e:	2b03      	cmp	r3, #3
 8014d60:	d115      	bne.n	8014d8e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8014d62:	2300      	movs	r3, #0
 8014d64:	73fb      	strb	r3, [r7, #15]
      break;
 8014d66:	e012      	b.n	8014d8e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8014d6c:	e00f      	b.n	8014d8e <USBH_HandleEnum+0x44a>

    default:
      break;
 8014d6e:	bf00      	nop
 8014d70:	e00e      	b.n	8014d90 <USBH_HandleEnum+0x44c>
      break;
 8014d72:	bf00      	nop
 8014d74:	e00c      	b.n	8014d90 <USBH_HandleEnum+0x44c>
      break;
 8014d76:	bf00      	nop
 8014d78:	e00a      	b.n	8014d90 <USBH_HandleEnum+0x44c>
      break;
 8014d7a:	bf00      	nop
 8014d7c:	e008      	b.n	8014d90 <USBH_HandleEnum+0x44c>
      break;
 8014d7e:	bf00      	nop
 8014d80:	e006      	b.n	8014d90 <USBH_HandleEnum+0x44c>
      break;
 8014d82:	bf00      	nop
 8014d84:	e004      	b.n	8014d90 <USBH_HandleEnum+0x44c>
      break;
 8014d86:	bf00      	nop
 8014d88:	e002      	b.n	8014d90 <USBH_HandleEnum+0x44c>
      break;
 8014d8a:	bf00      	nop
 8014d8c:	e000      	b.n	8014d90 <USBH_HandleEnum+0x44c>
      break;
 8014d8e:	bf00      	nop
  }
  return Status;
 8014d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3710      	adds	r7, #16
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
 8014d9a:	bf00      	nop

08014d9c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8014d9c:	b480      	push	{r7}
 8014d9e:	b083      	sub	sp, #12
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	683a      	ldr	r2, [r7, #0]
 8014daa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8014dae:	bf00      	nop
 8014db0:	370c      	adds	r7, #12
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr

08014dba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8014dba:	b580      	push	{r7, lr}
 8014dbc:	b082      	sub	sp, #8
 8014dbe:	af00      	add	r7, sp, #0
 8014dc0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014dc8:	1c5a      	adds	r2, r3, #1
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	f000 f804 	bl	8014dde <USBH_HandleSof>
}
 8014dd6:	bf00      	nop
 8014dd8:	3708      	adds	r7, #8
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}

08014dde <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b082      	sub	sp, #8
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	781b      	ldrb	r3, [r3, #0]
 8014dea:	b2db      	uxtb	r3, r3
 8014dec:	2b0b      	cmp	r3, #11
 8014dee:	d10a      	bne.n	8014e06 <USBH_HandleSof+0x28>
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d005      	beq.n	8014e06 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e00:	699b      	ldr	r3, [r3, #24]
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	4798      	blx	r3
  }
}
 8014e06:	bf00      	nop
 8014e08:	3708      	adds	r7, #8
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd80      	pop	{r7, pc}

08014e0e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8014e0e:	b580      	push	{r7, lr}
 8014e10:	b082      	sub	sp, #8
 8014e12:	af00      	add	r7, sp, #0
 8014e14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2201      	movs	r2, #1
 8014e1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	2201      	movs	r2, #1
 8014e22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e32:	2200      	movs	r2, #0
 8014e34:	4619      	mov	r1, r3
 8014e36:	f001 f919 	bl	801606c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8014e3a:	bf00      	nop
}
 8014e3c:	3708      	adds	r7, #8
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}

08014e42 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8014e42:	b480      	push	{r7}
 8014e44:	b083      	sub	sp, #12
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8014e52:	bf00      	nop
}
 8014e54:	370c      	adds	r7, #12
 8014e56:	46bd      	mov	sp, r7
 8014e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5c:	4770      	bx	lr

08014e5e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8014e5e:	b580      	push	{r7, lr}
 8014e60:	b082      	sub	sp, #8
 8014e62:	af00      	add	r7, sp, #0
 8014e64:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2201      	movs	r2, #1
 8014e6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	2200      	movs	r2, #0
 8014e72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	2201      	movs	r2, #1
 8014e82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e92:	2200      	movs	r2, #0
 8014e94:	4619      	mov	r1, r3
 8014e96:	f001 f8e9 	bl	801606c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8014e9a:	2300      	movs	r3, #0
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2201      	movs	r2, #1
 8014eb0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f003 fe60 	bl	8018b8a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	791b      	ldrb	r3, [r3, #4]
 8014ece:	4619      	mov	r1, r3
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f000 fecd 	bl	8015c70 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	795b      	ldrb	r3, [r3, #5]
 8014eda:	4619      	mov	r1, r3
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f000 fec7 	bl	8015c70 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	2201      	movs	r2, #1
 8014ee6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	4619      	mov	r1, r3
 8014efa:	f001 f8b7 	bl	801606c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8014efe:	2300      	movs	r3, #0
}
 8014f00:	4618      	mov	r0, r3
 8014f02:	3708      	adds	r7, #8
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}

08014f08 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8014f16:	f107 030c 	add.w	r3, r7, #12
 8014f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f001 f8e4 	bl	80160ec <osMessageGet>
    if (event.status == osEventMessage)
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	2b10      	cmp	r3, #16
 8014f28:	d1f2      	bne.n	8014f10 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f7ff faa8 	bl	8014480 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8014f30:	e7ee      	b.n	8014f10 <USBH_Process_OS+0x8>

08014f32 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8014f32:	b580      	push	{r7, lr}
 8014f34:	b082      	sub	sp, #8
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2201      	movs	r2, #1
 8014f3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014f4e:	2200      	movs	r2, #0
 8014f50:	4619      	mov	r1, r3
 8014f52:	f001 f88b 	bl	801606c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8014f56:	2300      	movs	r3, #0
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3708      	adds	r7, #8
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b086      	sub	sp, #24
 8014f64:	af02      	add	r7, sp, #8
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	460b      	mov	r3, r1
 8014f6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8014f72:	78fb      	ldrb	r3, [r7, #3]
 8014f74:	b29b      	uxth	r3, r3
 8014f76:	9300      	str	r3, [sp, #0]
 8014f78:	4613      	mov	r3, r2
 8014f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014f7e:	2100      	movs	r1, #0
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f000 f864 	bl	801504e <USBH_GetDescriptor>
 8014f86:	4603      	mov	r3, r0
 8014f88:	73fb      	strb	r3, [r7, #15]
 8014f8a:	7bfb      	ldrb	r3, [r7, #15]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d10a      	bne.n	8014fa6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f203 3026 	addw	r0, r3, #806	; 0x326
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014f9c:	78fa      	ldrb	r2, [r7, #3]
 8014f9e:	b292      	uxth	r2, r2
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	f000 f918 	bl	80151d6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8014fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3710      	adds	r7, #16
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}

08014fb0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b086      	sub	sp, #24
 8014fb4:	af02      	add	r7, sp, #8
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	460b      	mov	r3, r1
 8014fba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	331c      	adds	r3, #28
 8014fc0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8014fc2:	887b      	ldrh	r3, [r7, #2]
 8014fc4:	9300      	str	r3, [sp, #0]
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014fcc:	2100      	movs	r1, #0
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	f000 f83d 	bl	801504e <USBH_GetDescriptor>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	72fb      	strb	r3, [r7, #11]
 8014fd8:	7afb      	ldrb	r3, [r7, #11]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d107      	bne.n	8014fee <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014fe4:	887a      	ldrh	r2, [r7, #2]
 8014fe6:	68f9      	ldr	r1, [r7, #12]
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f000 f964 	bl	80152b6 <USBH_ParseCfgDesc>
  }

  return status;
 8014fee:	7afb      	ldrb	r3, [r7, #11]
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3710      	adds	r7, #16
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b088      	sub	sp, #32
 8014ffc:	af02      	add	r7, sp, #8
 8014ffe:	60f8      	str	r0, [r7, #12]
 8015000:	607a      	str	r2, [r7, #4]
 8015002:	461a      	mov	r2, r3
 8015004:	460b      	mov	r3, r1
 8015006:	72fb      	strb	r3, [r7, #11]
 8015008:	4613      	mov	r3, r2
 801500a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 801500c:	7afb      	ldrb	r3, [r7, #11]
 801500e:	b29b      	uxth	r3, r3
 8015010:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8015014:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 801501c:	893b      	ldrh	r3, [r7, #8]
 801501e:	9300      	str	r3, [sp, #0]
 8015020:	460b      	mov	r3, r1
 8015022:	2100      	movs	r1, #0
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f000 f812 	bl	801504e <USBH_GetDescriptor>
 801502a:	4603      	mov	r3, r0
 801502c:	75fb      	strb	r3, [r7, #23]
 801502e:	7dfb      	ldrb	r3, [r7, #23]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d107      	bne.n	8015044 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801503a:	893a      	ldrh	r2, [r7, #8]
 801503c:	6879      	ldr	r1, [r7, #4]
 801503e:	4618      	mov	r0, r3
 8015040:	f000 fa37 	bl	80154b2 <USBH_ParseStringDesc>
  }

  return status;
 8015044:	7dfb      	ldrb	r3, [r7, #23]
}
 8015046:	4618      	mov	r0, r3
 8015048:	3718      	adds	r7, #24
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}

0801504e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801504e:	b580      	push	{r7, lr}
 8015050:	b084      	sub	sp, #16
 8015052:	af00      	add	r7, sp, #0
 8015054:	60f8      	str	r0, [r7, #12]
 8015056:	607b      	str	r3, [r7, #4]
 8015058:	460b      	mov	r3, r1
 801505a:	72fb      	strb	r3, [r7, #11]
 801505c:	4613      	mov	r3, r2
 801505e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	789b      	ldrb	r3, [r3, #2]
 8015064:	2b01      	cmp	r3, #1
 8015066:	d11c      	bne.n	80150a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8015068:	7afb      	ldrb	r3, [r7, #11]
 801506a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801506e:	b2da      	uxtb	r2, r3
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	2206      	movs	r2, #6
 8015078:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	893a      	ldrh	r2, [r7, #8]
 801507e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8015080:	893b      	ldrh	r3, [r7, #8]
 8015082:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801508a:	d104      	bne.n	8015096 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	f240 4209 	movw	r2, #1033	; 0x409
 8015092:	829a      	strh	r2, [r3, #20]
 8015094:	e002      	b.n	801509c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2200      	movs	r2, #0
 801509a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	8b3a      	ldrh	r2, [r7, #24]
 80150a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80150a2:	8b3b      	ldrh	r3, [r7, #24]
 80150a4:	461a      	mov	r2, r3
 80150a6:	6879      	ldr	r1, [r7, #4]
 80150a8:	68f8      	ldr	r0, [r7, #12]
 80150aa:	f000 fa50 	bl	801554e <USBH_CtlReq>
 80150ae:	4603      	mov	r3, r0
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3710      	adds	r7, #16
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	460b      	mov	r3, r1
 80150c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	789b      	ldrb	r3, [r3, #2]
 80150c8:	2b01      	cmp	r3, #1
 80150ca:	d10f      	bne.n	80150ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	2200      	movs	r2, #0
 80150d0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2205      	movs	r2, #5
 80150d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80150d8:	78fb      	ldrb	r3, [r7, #3]
 80150da:	b29a      	uxth	r2, r3
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2200      	movs	r2, #0
 80150e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	2200      	movs	r2, #0
 80150ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80150ec:	2200      	movs	r2, #0
 80150ee:	2100      	movs	r1, #0
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f000 fa2c 	bl	801554e <USBH_CtlReq>
 80150f6:	4603      	mov	r3, r0
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3708      	adds	r7, #8
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}

08015100 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	460b      	mov	r3, r1
 801510a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	789b      	ldrb	r3, [r3, #2]
 8015110:	2b01      	cmp	r3, #1
 8015112:	d10e      	bne.n	8015132 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2200      	movs	r2, #0
 8015118:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2209      	movs	r2, #9
 801511e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	887a      	ldrh	r2, [r7, #2]
 8015124:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2200      	movs	r2, #0
 8015130:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8015132:	2200      	movs	r2, #0
 8015134:	2100      	movs	r1, #0
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f000 fa09 	bl	801554e <USBH_CtlReq>
 801513c:	4603      	mov	r3, r0
}
 801513e:	4618      	mov	r0, r3
 8015140:	3708      	adds	r7, #8
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}

08015146 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8015146:	b580      	push	{r7, lr}
 8015148:	b082      	sub	sp, #8
 801514a:	af00      	add	r7, sp, #0
 801514c:	6078      	str	r0, [r7, #4]
 801514e:	460b      	mov	r3, r1
 8015150:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	789b      	ldrb	r3, [r3, #2]
 8015156:	2b01      	cmp	r3, #1
 8015158:	d10f      	bne.n	801517a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2200      	movs	r2, #0
 801515e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	2203      	movs	r2, #3
 8015164:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8015166:	78fb      	ldrb	r3, [r7, #3]
 8015168:	b29a      	uxth	r2, r3
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	2200      	movs	r2, #0
 8015172:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2200      	movs	r2, #0
 8015178:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801517a:	2200      	movs	r2, #0
 801517c:	2100      	movs	r1, #0
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f000 f9e5 	bl	801554e <USBH_CtlReq>
 8015184:	4603      	mov	r3, r0
}
 8015186:	4618      	mov	r0, r3
 8015188:	3708      	adds	r7, #8
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}

0801518e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801518e:	b580      	push	{r7, lr}
 8015190:	b082      	sub	sp, #8
 8015192:	af00      	add	r7, sp, #0
 8015194:	6078      	str	r0, [r7, #4]
 8015196:	460b      	mov	r3, r1
 8015198:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	789b      	ldrb	r3, [r3, #2]
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d10f      	bne.n	80151c2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2202      	movs	r2, #2
 80151a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2201      	movs	r2, #1
 80151ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2200      	movs	r2, #0
 80151b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80151b4:	78fb      	ldrb	r3, [r7, #3]
 80151b6:	b29a      	uxth	r2, r3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2200      	movs	r2, #0
 80151c0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80151c2:	2200      	movs	r2, #0
 80151c4:	2100      	movs	r1, #0
 80151c6:	6878      	ldr	r0, [r7, #4]
 80151c8:	f000 f9c1 	bl	801554e <USBH_CtlReq>
 80151cc:	4603      	mov	r3, r0
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3708      	adds	r7, #8
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}

080151d6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80151d6:	b480      	push	{r7}
 80151d8:	b085      	sub	sp, #20
 80151da:	af00      	add	r7, sp, #0
 80151dc:	60f8      	str	r0, [r7, #12]
 80151de:	60b9      	str	r1, [r7, #8]
 80151e0:	4613      	mov	r3, r2
 80151e2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80151e4:	68bb      	ldr	r3, [r7, #8]
 80151e6:	781a      	ldrb	r2, [r3, #0]
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	785a      	ldrb	r2, [r3, #1]
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	3302      	adds	r3, #2
 80151f8:	781b      	ldrb	r3, [r3, #0]
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	3303      	adds	r3, #3
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	b29b      	uxth	r3, r3
 8015204:	021b      	lsls	r3, r3, #8
 8015206:	b29b      	uxth	r3, r3
 8015208:	4313      	orrs	r3, r2
 801520a:	b29a      	uxth	r2, r3
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	791a      	ldrb	r2, [r3, #4]
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	795a      	ldrb	r2, [r3, #5]
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	799a      	ldrb	r2, [r3, #6]
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	79da      	ldrb	r2, [r3, #7]
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8015230:	88fb      	ldrh	r3, [r7, #6]
 8015232:	2b08      	cmp	r3, #8
 8015234:	d939      	bls.n	80152aa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	3308      	adds	r3, #8
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	b29a      	uxth	r2, r3
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	3309      	adds	r3, #9
 8015242:	781b      	ldrb	r3, [r3, #0]
 8015244:	b29b      	uxth	r3, r3
 8015246:	021b      	lsls	r3, r3, #8
 8015248:	b29b      	uxth	r3, r3
 801524a:	4313      	orrs	r3, r2
 801524c:	b29a      	uxth	r2, r3
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	330a      	adds	r3, #10
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	b29a      	uxth	r2, r3
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	330b      	adds	r3, #11
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	b29b      	uxth	r3, r3
 8015262:	021b      	lsls	r3, r3, #8
 8015264:	b29b      	uxth	r3, r3
 8015266:	4313      	orrs	r3, r2
 8015268:	b29a      	uxth	r2, r3
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	330c      	adds	r3, #12
 8015272:	781b      	ldrb	r3, [r3, #0]
 8015274:	b29a      	uxth	r2, r3
 8015276:	68bb      	ldr	r3, [r7, #8]
 8015278:	330d      	adds	r3, #13
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	b29b      	uxth	r3, r3
 801527e:	021b      	lsls	r3, r3, #8
 8015280:	b29b      	uxth	r3, r3
 8015282:	4313      	orrs	r3, r2
 8015284:	b29a      	uxth	r2, r3
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 801528a:	68bb      	ldr	r3, [r7, #8]
 801528c:	7b9a      	ldrb	r2, [r3, #14]
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8015292:	68bb      	ldr	r3, [r7, #8]
 8015294:	7bda      	ldrb	r2, [r3, #15]
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 801529a:	68bb      	ldr	r3, [r7, #8]
 801529c:	7c1a      	ldrb	r2, [r3, #16]
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80152a2:	68bb      	ldr	r3, [r7, #8]
 80152a4:	7c5a      	ldrb	r2, [r3, #17]
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	745a      	strb	r2, [r3, #17]
  }
}
 80152aa:	bf00      	nop
 80152ac:	3714      	adds	r7, #20
 80152ae:	46bd      	mov	sp, r7
 80152b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b4:	4770      	bx	lr

080152b6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80152b6:	b580      	push	{r7, lr}
 80152b8:	b08a      	sub	sp, #40	; 0x28
 80152ba:	af00      	add	r7, sp, #0
 80152bc:	60f8      	str	r0, [r7, #12]
 80152be:	60b9      	str	r1, [r7, #8]
 80152c0:	4613      	mov	r3, r2
 80152c2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80152c8:	2300      	movs	r3, #0
 80152ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80152ce:	2300      	movs	r3, #0
 80152d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	781a      	ldrb	r2, [r3, #0]
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	785a      	ldrb	r2, [r3, #1]
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	3302      	adds	r3, #2
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	b29a      	uxth	r2, r3
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	3303      	adds	r3, #3
 80152f4:	781b      	ldrb	r3, [r3, #0]
 80152f6:	b29b      	uxth	r3, r3
 80152f8:	021b      	lsls	r3, r3, #8
 80152fa:	b29b      	uxth	r3, r3
 80152fc:	4313      	orrs	r3, r2
 80152fe:	b29a      	uxth	r2, r3
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	791a      	ldrb	r2, [r3, #4]
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	795a      	ldrb	r2, [r3, #5]
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	799a      	ldrb	r2, [r3, #6]
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 801531c:	68bb      	ldr	r3, [r7, #8]
 801531e:	79da      	ldrb	r2, [r3, #7]
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	7a1a      	ldrb	r2, [r3, #8]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801532c:	88fb      	ldrh	r3, [r7, #6]
 801532e:	2b09      	cmp	r3, #9
 8015330:	d95f      	bls.n	80153f2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8015332:	2309      	movs	r3, #9
 8015334:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8015336:	2300      	movs	r3, #0
 8015338:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801533a:	e051      	b.n	80153e0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801533c:	f107 0316 	add.w	r3, r7, #22
 8015340:	4619      	mov	r1, r3
 8015342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015344:	f000 f8e8 	bl	8015518 <USBH_GetNextDesc>
 8015348:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 801534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534c:	785b      	ldrb	r3, [r3, #1]
 801534e:	2b04      	cmp	r3, #4
 8015350:	d146      	bne.n	80153e0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8015352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015356:	221a      	movs	r2, #26
 8015358:	fb02 f303 	mul.w	r3, r2, r3
 801535c:	3308      	adds	r3, #8
 801535e:	68fa      	ldr	r2, [r7, #12]
 8015360:	4413      	add	r3, r2
 8015362:	3302      	adds	r3, #2
 8015364:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8015366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015368:	69f8      	ldr	r0, [r7, #28]
 801536a:	f000 f846 	bl	80153fa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801536e:	2300      	movs	r3, #0
 8015370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8015374:	2300      	movs	r3, #0
 8015376:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8015378:	e022      	b.n	80153c0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801537a:	f107 0316 	add.w	r3, r7, #22
 801537e:	4619      	mov	r1, r3
 8015380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015382:	f000 f8c9 	bl	8015518 <USBH_GetNextDesc>
 8015386:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8015388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801538a:	785b      	ldrb	r3, [r3, #1]
 801538c:	2b05      	cmp	r3, #5
 801538e:	d117      	bne.n	80153c0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8015390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015394:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015398:	3201      	adds	r2, #1
 801539a:	00d2      	lsls	r2, r2, #3
 801539c:	211a      	movs	r1, #26
 801539e:	fb01 f303 	mul.w	r3, r1, r3
 80153a2:	4413      	add	r3, r2
 80153a4:	3308      	adds	r3, #8
 80153a6:	68fa      	ldr	r2, [r7, #12]
 80153a8:	4413      	add	r3, r2
 80153aa:	3304      	adds	r3, #4
 80153ac:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80153ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80153b0:	69b8      	ldr	r0, [r7, #24]
 80153b2:	f000 f851 	bl	8015458 <USBH_ParseEPDesc>
            ep_ix++;
 80153b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80153ba:	3301      	adds	r3, #1
 80153bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80153c0:	69fb      	ldr	r3, [r7, #28]
 80153c2:	791b      	ldrb	r3, [r3, #4]
 80153c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d204      	bcs.n	80153d6 <USBH_ParseCfgDesc+0x120>
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	885a      	ldrh	r2, [r3, #2]
 80153d0:	8afb      	ldrh	r3, [r7, #22]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d8d1      	bhi.n	801537a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80153d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80153da:	3301      	adds	r3, #1
 80153dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80153e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80153e4:	2b01      	cmp	r3, #1
 80153e6:	d804      	bhi.n	80153f2 <USBH_ParseCfgDesc+0x13c>
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	885a      	ldrh	r2, [r3, #2]
 80153ec:	8afb      	ldrh	r3, [r7, #22]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d8a4      	bhi.n	801533c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80153f2:	bf00      	nop
 80153f4:	3728      	adds	r7, #40	; 0x28
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}

080153fa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80153fa:	b480      	push	{r7}
 80153fc:	b083      	sub	sp, #12
 80153fe:	af00      	add	r7, sp, #0
 8015400:	6078      	str	r0, [r7, #4]
 8015402:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8015404:	683b      	ldr	r3, [r7, #0]
 8015406:	781a      	ldrb	r2, [r3, #0]
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	785a      	ldrb	r2, [r3, #1]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	789a      	ldrb	r2, [r3, #2]
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	78da      	ldrb	r2, [r3, #3]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	791a      	ldrb	r2, [r3, #4]
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	795a      	ldrb	r2, [r3, #5]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	799a      	ldrb	r2, [r3, #6]
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	79da      	ldrb	r2, [r3, #7]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	7a1a      	ldrb	r2, [r3, #8]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	721a      	strb	r2, [r3, #8]
}
 801544c:	bf00      	nop
 801544e:	370c      	adds	r7, #12
 8015450:	46bd      	mov	sp, r7
 8015452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015456:	4770      	bx	lr

08015458 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8015458:	b480      	push	{r7}
 801545a:	b083      	sub	sp, #12
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	781a      	ldrb	r2, [r3, #0]
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	785a      	ldrb	r2, [r3, #1]
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8015472:	683b      	ldr	r3, [r7, #0]
 8015474:	789a      	ldrb	r2, [r3, #2]
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	78da      	ldrb	r2, [r3, #3]
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	3304      	adds	r3, #4
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	b29a      	uxth	r2, r3
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	3305      	adds	r3, #5
 801548e:	781b      	ldrb	r3, [r3, #0]
 8015490:	b29b      	uxth	r3, r3
 8015492:	021b      	lsls	r3, r3, #8
 8015494:	b29b      	uxth	r3, r3
 8015496:	4313      	orrs	r3, r2
 8015498:	b29a      	uxth	r2, r3
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	799a      	ldrb	r2, [r3, #6]
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	719a      	strb	r2, [r3, #6]
}
 80154a6:	bf00      	nop
 80154a8:	370c      	adds	r7, #12
 80154aa:	46bd      	mov	sp, r7
 80154ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b0:	4770      	bx	lr

080154b2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80154b2:	b480      	push	{r7}
 80154b4:	b087      	sub	sp, #28
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	60f8      	str	r0, [r7, #12]
 80154ba:	60b9      	str	r1, [r7, #8]
 80154bc:	4613      	mov	r3, r2
 80154be:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	3301      	adds	r3, #1
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	2b03      	cmp	r3, #3
 80154c8:	d120      	bne.n	801550c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	781b      	ldrb	r3, [r3, #0]
 80154ce:	1e9a      	subs	r2, r3, #2
 80154d0:	88fb      	ldrh	r3, [r7, #6]
 80154d2:	4293      	cmp	r3, r2
 80154d4:	bf28      	it	cs
 80154d6:	4613      	movcs	r3, r2
 80154d8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	3302      	adds	r3, #2
 80154de:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80154e0:	2300      	movs	r3, #0
 80154e2:	82fb      	strh	r3, [r7, #22]
 80154e4:	e00b      	b.n	80154fe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80154e6:	8afb      	ldrh	r3, [r7, #22]
 80154e8:	68fa      	ldr	r2, [r7, #12]
 80154ea:	4413      	add	r3, r2
 80154ec:	781a      	ldrb	r2, [r3, #0]
 80154ee:	68bb      	ldr	r3, [r7, #8]
 80154f0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	3301      	adds	r3, #1
 80154f6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80154f8:	8afb      	ldrh	r3, [r7, #22]
 80154fa:	3302      	adds	r3, #2
 80154fc:	82fb      	strh	r3, [r7, #22]
 80154fe:	8afa      	ldrh	r2, [r7, #22]
 8015500:	8abb      	ldrh	r3, [r7, #20]
 8015502:	429a      	cmp	r2, r3
 8015504:	d3ef      	bcc.n	80154e6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	2200      	movs	r2, #0
 801550a:	701a      	strb	r2, [r3, #0]
  }
}
 801550c:	bf00      	nop
 801550e:	371c      	adds	r7, #28
 8015510:	46bd      	mov	sp, r7
 8015512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015516:	4770      	bx	lr

08015518 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8015518:	b480      	push	{r7}
 801551a:	b085      	sub	sp, #20
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
 8015520:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	881a      	ldrh	r2, [r3, #0]
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	781b      	ldrb	r3, [r3, #0]
 801552a:	b29b      	uxth	r3, r3
 801552c:	4413      	add	r3, r2
 801552e:	b29a      	uxth	r2, r3
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	781b      	ldrb	r3, [r3, #0]
 8015538:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	4413      	add	r3, r2
 801553e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015540:	68fb      	ldr	r3, [r7, #12]
}
 8015542:	4618      	mov	r0, r3
 8015544:	3714      	adds	r7, #20
 8015546:	46bd      	mov	sp, r7
 8015548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554c:	4770      	bx	lr

0801554e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801554e:	b580      	push	{r7, lr}
 8015550:	b086      	sub	sp, #24
 8015552:	af00      	add	r7, sp, #0
 8015554:	60f8      	str	r0, [r7, #12]
 8015556:	60b9      	str	r1, [r7, #8]
 8015558:	4613      	mov	r3, r2
 801555a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801555c:	2301      	movs	r3, #1
 801555e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	789b      	ldrb	r3, [r3, #2]
 8015564:	2b01      	cmp	r3, #1
 8015566:	d002      	beq.n	801556e <USBH_CtlReq+0x20>
 8015568:	2b02      	cmp	r3, #2
 801556a:	d01d      	beq.n	80155a8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 801556c:	e043      	b.n	80155f6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	68ba      	ldr	r2, [r7, #8]
 8015572:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	88fa      	ldrh	r2, [r7, #6]
 8015578:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	2201      	movs	r2, #1
 801557e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2202      	movs	r2, #2
 8015584:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8015586:	2301      	movs	r3, #1
 8015588:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2203      	movs	r2, #3
 801558e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801559e:	2200      	movs	r2, #0
 80155a0:	4619      	mov	r1, r3
 80155a2:	f000 fd63 	bl	801606c <osMessagePut>
      break;
 80155a6:	e026      	b.n	80155f6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80155a8:	68f8      	ldr	r0, [r7, #12]
 80155aa:	f000 f829 	bl	8015600 <USBH_HandleControl>
 80155ae:	4603      	mov	r3, r0
 80155b0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80155b2:	7dfb      	ldrb	r3, [r7, #23]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d002      	beq.n	80155be <USBH_CtlReq+0x70>
 80155b8:	7dfb      	ldrb	r3, [r7, #23]
 80155ba:	2b03      	cmp	r3, #3
 80155bc:	d106      	bne.n	80155cc <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2201      	movs	r2, #1
 80155c2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	2200      	movs	r2, #0
 80155c8:	761a      	strb	r2, [r3, #24]
 80155ca:	e005      	b.n	80155d8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80155cc:	7dfb      	ldrb	r3, [r7, #23]
 80155ce:	2b02      	cmp	r3, #2
 80155d0:	d102      	bne.n	80155d8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	2201      	movs	r2, #1
 80155d6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	2203      	movs	r2, #3
 80155dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80155ec:	2200      	movs	r2, #0
 80155ee:	4619      	mov	r1, r3
 80155f0:	f000 fd3c 	bl	801606c <osMessagePut>
      break;
 80155f4:	bf00      	nop
  }
  return status;
 80155f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3718      	adds	r7, #24
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}

08015600 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b086      	sub	sp, #24
 8015604:	af02      	add	r7, sp, #8
 8015606:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8015608:	2301      	movs	r3, #1
 801560a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801560c:	2300      	movs	r3, #0
 801560e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	7e1b      	ldrb	r3, [r3, #24]
 8015614:	3b01      	subs	r3, #1
 8015616:	2b0a      	cmp	r3, #10
 8015618:	f200 8229 	bhi.w	8015a6e <USBH_HandleControl+0x46e>
 801561c:	a201      	add	r2, pc, #4	; (adr r2, 8015624 <USBH_HandleControl+0x24>)
 801561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015622:	bf00      	nop
 8015624:	08015651 	.word	0x08015651
 8015628:	0801566b 	.word	0x0801566b
 801562c:	0801570d 	.word	0x0801570d
 8015630:	08015733 	.word	0x08015733
 8015634:	080157bf 	.word	0x080157bf
 8015638:	080157e9 	.word	0x080157e9
 801563c:	080158ab 	.word	0x080158ab
 8015640:	080158cd 	.word	0x080158cd
 8015644:	0801595f 	.word	0x0801595f
 8015648:	08015985 	.word	0x08015985
 801564c:	08015a17 	.word	0x08015a17
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	f103 0110 	add.w	r1, r3, #16
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	795b      	ldrb	r3, [r3, #5]
 801565a:	461a      	mov	r2, r3
 801565c:	6878      	ldr	r0, [r7, #4]
 801565e:	f000 fa17 	bl	8015a90 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2202      	movs	r2, #2
 8015666:	761a      	strb	r2, [r3, #24]
      break;
 8015668:	e20c      	b.n	8015a84 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	795b      	ldrb	r3, [r3, #5]
 801566e:	4619      	mov	r1, r3
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f003 fb79 	bl	8018d68 <USBH_LL_GetURBState>
 8015676:	4603      	mov	r3, r0
 8015678:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801567a:	7bbb      	ldrb	r3, [r7, #14]
 801567c:	2b01      	cmp	r3, #1
 801567e:	d12c      	bne.n	80156da <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	7c1b      	ldrb	r3, [r3, #16]
 8015684:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015688:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	8adb      	ldrh	r3, [r3, #22]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d00a      	beq.n	80156a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8015692:	7b7b      	ldrb	r3, [r7, #13]
 8015694:	2b80      	cmp	r3, #128	; 0x80
 8015696:	d103      	bne.n	80156a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	2203      	movs	r2, #3
 801569c:	761a      	strb	r2, [r3, #24]
 801569e:	e00d      	b.n	80156bc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2205      	movs	r2, #5
 80156a4:	761a      	strb	r2, [r3, #24]
 80156a6:	e009      	b.n	80156bc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80156a8:	7b7b      	ldrb	r3, [r7, #13]
 80156aa:	2b80      	cmp	r3, #128	; 0x80
 80156ac:	d103      	bne.n	80156b6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2209      	movs	r2, #9
 80156b2:	761a      	strb	r2, [r3, #24]
 80156b4:	e002      	b.n	80156bc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2207      	movs	r2, #7
 80156ba:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	2203      	movs	r2, #3
 80156c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80156d0:	2200      	movs	r2, #0
 80156d2:	4619      	mov	r1, r3
 80156d4:	f000 fcca 	bl	801606c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80156d8:	e1cb      	b.n	8015a72 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80156da:	7bbb      	ldrb	r3, [r7, #14]
 80156dc:	2b04      	cmp	r3, #4
 80156de:	d003      	beq.n	80156e8 <USBH_HandleControl+0xe8>
 80156e0:	7bbb      	ldrb	r3, [r7, #14]
 80156e2:	2b02      	cmp	r3, #2
 80156e4:	f040 81c5 	bne.w	8015a72 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	220b      	movs	r2, #11
 80156ec:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2203      	movs	r2, #3
 80156f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015702:	2200      	movs	r2, #0
 8015704:	4619      	mov	r1, r3
 8015706:	f000 fcb1 	bl	801606c <osMessagePut>
      break;
 801570a:	e1b2      	b.n	8015a72 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015712:	b29a      	uxth	r2, r3
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6899      	ldr	r1, [r3, #8]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	899a      	ldrh	r2, [r3, #12]
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	791b      	ldrb	r3, [r3, #4]
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f000 f9f2 	bl	8015b0e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2204      	movs	r2, #4
 801572e:	761a      	strb	r2, [r3, #24]
      break;
 8015730:	e1a8      	b.n	8015a84 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	791b      	ldrb	r3, [r3, #4]
 8015736:	4619      	mov	r1, r3
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f003 fb15 	bl	8018d68 <USBH_LL_GetURBState>
 801573e:	4603      	mov	r3, r0
 8015740:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8015742:	7bbb      	ldrb	r3, [r7, #14]
 8015744:	2b01      	cmp	r3, #1
 8015746:	d110      	bne.n	801576a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2209      	movs	r2, #9
 801574c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2203      	movs	r2, #3
 8015752:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015762:	2200      	movs	r2, #0
 8015764:	4619      	mov	r1, r3
 8015766:	f000 fc81 	bl	801606c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801576a:	7bbb      	ldrb	r3, [r7, #14]
 801576c:	2b05      	cmp	r3, #5
 801576e:	d110      	bne.n	8015792 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8015770:	2303      	movs	r3, #3
 8015772:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2203      	movs	r2, #3
 8015778:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015788:	2200      	movs	r2, #0
 801578a:	4619      	mov	r1, r3
 801578c:	f000 fc6e 	bl	801606c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015790:	e171      	b.n	8015a76 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8015792:	7bbb      	ldrb	r3, [r7, #14]
 8015794:	2b04      	cmp	r3, #4
 8015796:	f040 816e 	bne.w	8015a76 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	220b      	movs	r2, #11
 801579e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2203      	movs	r2, #3
 80157a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80157b4:	2200      	movs	r2, #0
 80157b6:	4619      	mov	r1, r3
 80157b8:	f000 fc58 	bl	801606c <osMessagePut>
      break;
 80157bc:	e15b      	b.n	8015a76 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6899      	ldr	r1, [r3, #8]
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	899a      	ldrh	r2, [r3, #12]
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	795b      	ldrb	r3, [r3, #5]
 80157ca:	2001      	movs	r0, #1
 80157cc:	9000      	str	r0, [sp, #0]
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f000 f978 	bl	8015ac4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80157da:	b29a      	uxth	r2, r3
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2206      	movs	r2, #6
 80157e4:	761a      	strb	r2, [r3, #24]
      break;
 80157e6:	e14d      	b.n	8015a84 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	795b      	ldrb	r3, [r3, #5]
 80157ec:	4619      	mov	r1, r3
 80157ee:	6878      	ldr	r0, [r7, #4]
 80157f0:	f003 faba 	bl	8018d68 <USBH_LL_GetURBState>
 80157f4:	4603      	mov	r3, r0
 80157f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80157f8:	7bbb      	ldrb	r3, [r7, #14]
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	d111      	bne.n	8015822 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	2207      	movs	r2, #7
 8015802:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	2203      	movs	r2, #3
 8015808:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015818:	2200      	movs	r2, #0
 801581a:	4619      	mov	r1, r3
 801581c:	f000 fc26 	bl	801606c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015820:	e12b      	b.n	8015a7a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8015822:	7bbb      	ldrb	r3, [r7, #14]
 8015824:	2b05      	cmp	r3, #5
 8015826:	d113      	bne.n	8015850 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	220c      	movs	r2, #12
 801582c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801582e:	2303      	movs	r3, #3
 8015830:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2203      	movs	r2, #3
 8015836:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015846:	2200      	movs	r2, #0
 8015848:	4619      	mov	r1, r3
 801584a:	f000 fc0f 	bl	801606c <osMessagePut>
      break;
 801584e:	e114      	b.n	8015a7a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015850:	7bbb      	ldrb	r3, [r7, #14]
 8015852:	2b02      	cmp	r3, #2
 8015854:	d111      	bne.n	801587a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2205      	movs	r2, #5
 801585a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2203      	movs	r2, #3
 8015860:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015870:	2200      	movs	r2, #0
 8015872:	4619      	mov	r1, r3
 8015874:	f000 fbfa 	bl	801606c <osMessagePut>
      break;
 8015878:	e0ff      	b.n	8015a7a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801587a:	7bbb      	ldrb	r3, [r7, #14]
 801587c:	2b04      	cmp	r3, #4
 801587e:	f040 80fc 	bne.w	8015a7a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	220b      	movs	r2, #11
 8015886:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8015888:	2302      	movs	r3, #2
 801588a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2203      	movs	r2, #3
 8015890:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80158a0:	2200      	movs	r2, #0
 80158a2:	4619      	mov	r1, r3
 80158a4:	f000 fbe2 	bl	801606c <osMessagePut>
      break;
 80158a8:	e0e7      	b.n	8015a7a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	791b      	ldrb	r3, [r3, #4]
 80158ae:	2200      	movs	r2, #0
 80158b0:	2100      	movs	r1, #0
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f000 f92b 	bl	8015b0e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80158be:	b29a      	uxth	r2, r3
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2208      	movs	r2, #8
 80158c8:	761a      	strb	r2, [r3, #24]

      break;
 80158ca:	e0db      	b.n	8015a84 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	791b      	ldrb	r3, [r3, #4]
 80158d0:	4619      	mov	r1, r3
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f003 fa48 	bl	8018d68 <USBH_LL_GetURBState>
 80158d8:	4603      	mov	r3, r0
 80158da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80158dc:	7bbb      	ldrb	r3, [r7, #14]
 80158de:	2b01      	cmp	r3, #1
 80158e0:	d113      	bne.n	801590a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	220d      	movs	r2, #13
 80158e6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80158e8:	2300      	movs	r3, #0
 80158ea:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2203      	movs	r2, #3
 80158f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015900:	2200      	movs	r2, #0
 8015902:	4619      	mov	r1, r3
 8015904:	f000 fbb2 	bl	801606c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015908:	e0b9      	b.n	8015a7e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 801590a:	7bbb      	ldrb	r3, [r7, #14]
 801590c:	2b04      	cmp	r3, #4
 801590e:	d111      	bne.n	8015934 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	220b      	movs	r2, #11
 8015914:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	2203      	movs	r2, #3
 801591a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801592a:	2200      	movs	r2, #0
 801592c:	4619      	mov	r1, r3
 801592e:	f000 fb9d 	bl	801606c <osMessagePut>
      break;
 8015932:	e0a4      	b.n	8015a7e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8015934:	7bbb      	ldrb	r3, [r7, #14]
 8015936:	2b05      	cmp	r3, #5
 8015938:	f040 80a1 	bne.w	8015a7e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 801593c:	2303      	movs	r3, #3
 801593e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2203      	movs	r2, #3
 8015944:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015954:	2200      	movs	r2, #0
 8015956:	4619      	mov	r1, r3
 8015958:	f000 fb88 	bl	801606c <osMessagePut>
      break;
 801595c:	e08f      	b.n	8015a7e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	795b      	ldrb	r3, [r3, #5]
 8015962:	2201      	movs	r2, #1
 8015964:	9200      	str	r2, [sp, #0]
 8015966:	2200      	movs	r2, #0
 8015968:	2100      	movs	r1, #0
 801596a:	6878      	ldr	r0, [r7, #4]
 801596c:	f000 f8aa 	bl	8015ac4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015976:	b29a      	uxth	r2, r3
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	220a      	movs	r2, #10
 8015980:	761a      	strb	r2, [r3, #24]
      break;
 8015982:	e07f      	b.n	8015a84 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	795b      	ldrb	r3, [r3, #5]
 8015988:	4619      	mov	r1, r3
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f003 f9ec 	bl	8018d68 <USBH_LL_GetURBState>
 8015990:	4603      	mov	r3, r0
 8015992:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8015994:	7bbb      	ldrb	r3, [r7, #14]
 8015996:	2b01      	cmp	r3, #1
 8015998:	d113      	bne.n	80159c2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 801599a:	2300      	movs	r3, #0
 801599c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	220d      	movs	r2, #13
 80159a2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2203      	movs	r2, #3
 80159a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80159b8:	2200      	movs	r2, #0
 80159ba:	4619      	mov	r1, r3
 80159bc:	f000 fb56 	bl	801606c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80159c0:	e05f      	b.n	8015a82 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80159c2:	7bbb      	ldrb	r3, [r7, #14]
 80159c4:	2b02      	cmp	r3, #2
 80159c6:	d111      	bne.n	80159ec <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	2209      	movs	r2, #9
 80159cc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	2203      	movs	r2, #3
 80159d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80159e2:	2200      	movs	r2, #0
 80159e4:	4619      	mov	r1, r3
 80159e6:	f000 fb41 	bl	801606c <osMessagePut>
      break;
 80159ea:	e04a      	b.n	8015a82 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80159ec:	7bbb      	ldrb	r3, [r7, #14]
 80159ee:	2b04      	cmp	r3, #4
 80159f0:	d147      	bne.n	8015a82 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	220b      	movs	r2, #11
 80159f6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2203      	movs	r2, #3
 80159fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	4619      	mov	r1, r3
 8015a10:	f000 fb2c 	bl	801606c <osMessagePut>
      break;
 8015a14:	e035      	b.n	8015a82 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	7e5b      	ldrb	r3, [r3, #25]
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	b2da      	uxtb	r2, r3
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	765a      	strb	r2, [r3, #25]
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	7e5b      	ldrb	r3, [r3, #25]
 8015a26:	2b02      	cmp	r3, #2
 8015a28:	d806      	bhi.n	8015a38 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	2201      	movs	r2, #1
 8015a2e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2201      	movs	r2, #1
 8015a34:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8015a36:	e025      	b.n	8015a84 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015a3e:	2106      	movs	r1, #6
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	2200      	movs	r2, #0
 8015a48:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	795b      	ldrb	r3, [r3, #5]
 8015a4e:	4619      	mov	r1, r3
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f000 f90d 	bl	8015c70 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	791b      	ldrb	r3, [r3, #4]
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	f000 f907 	bl	8015c70 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2200      	movs	r2, #0
 8015a66:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8015a68:	2302      	movs	r3, #2
 8015a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8015a6c:	e00a      	b.n	8015a84 <USBH_HandleControl+0x484>

    default:
      break;
 8015a6e:	bf00      	nop
 8015a70:	e008      	b.n	8015a84 <USBH_HandleControl+0x484>
      break;
 8015a72:	bf00      	nop
 8015a74:	e006      	b.n	8015a84 <USBH_HandleControl+0x484>
      break;
 8015a76:	bf00      	nop
 8015a78:	e004      	b.n	8015a84 <USBH_HandleControl+0x484>
      break;
 8015a7a:	bf00      	nop
 8015a7c:	e002      	b.n	8015a84 <USBH_HandleControl+0x484>
      break;
 8015a7e:	bf00      	nop
 8015a80:	e000      	b.n	8015a84 <USBH_HandleControl+0x484>
      break;
 8015a82:	bf00      	nop
  }

  return status;
 8015a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3710      	adds	r7, #16
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
 8015a8e:	bf00      	nop

08015a90 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b088      	sub	sp, #32
 8015a94:	af04      	add	r7, sp, #16
 8015a96:	60f8      	str	r0, [r7, #12]
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	4613      	mov	r3, r2
 8015a9c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015a9e:	79f9      	ldrb	r1, [r7, #7]
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	9303      	str	r3, [sp, #12]
 8015aa4:	2308      	movs	r3, #8
 8015aa6:	9302      	str	r3, [sp, #8]
 8015aa8:	68bb      	ldr	r3, [r7, #8]
 8015aaa:	9301      	str	r3, [sp, #4]
 8015aac:	2300      	movs	r3, #0
 8015aae:	9300      	str	r3, [sp, #0]
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	f003 f926 	bl	8018d06 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8015aba:	2300      	movs	r3, #0
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3710      	adds	r7, #16
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}

08015ac4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b088      	sub	sp, #32
 8015ac8:	af04      	add	r7, sp, #16
 8015aca:	60f8      	str	r0, [r7, #12]
 8015acc:	60b9      	str	r1, [r7, #8]
 8015ace:	4611      	mov	r1, r2
 8015ad0:	461a      	mov	r2, r3
 8015ad2:	460b      	mov	r3, r1
 8015ad4:	80fb      	strh	r3, [r7, #6]
 8015ad6:	4613      	mov	r3, r2
 8015ad8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d001      	beq.n	8015ae8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015ae8:	7979      	ldrb	r1, [r7, #5]
 8015aea:	7e3b      	ldrb	r3, [r7, #24]
 8015aec:	9303      	str	r3, [sp, #12]
 8015aee:	88fb      	ldrh	r3, [r7, #6]
 8015af0:	9302      	str	r3, [sp, #8]
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	9301      	str	r3, [sp, #4]
 8015af6:	2301      	movs	r3, #1
 8015af8:	9300      	str	r3, [sp, #0]
 8015afa:	2300      	movs	r3, #0
 8015afc:	2200      	movs	r2, #0
 8015afe:	68f8      	ldr	r0, [r7, #12]
 8015b00:	f003 f901 	bl	8018d06 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8015b04:	2300      	movs	r3, #0
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3710      	adds	r7, #16
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}

08015b0e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8015b0e:	b580      	push	{r7, lr}
 8015b10:	b088      	sub	sp, #32
 8015b12:	af04      	add	r7, sp, #16
 8015b14:	60f8      	str	r0, [r7, #12]
 8015b16:	60b9      	str	r1, [r7, #8]
 8015b18:	4611      	mov	r1, r2
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	460b      	mov	r3, r1
 8015b1e:	80fb      	strh	r3, [r7, #6]
 8015b20:	4613      	mov	r3, r2
 8015b22:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015b24:	7979      	ldrb	r1, [r7, #5]
 8015b26:	2300      	movs	r3, #0
 8015b28:	9303      	str	r3, [sp, #12]
 8015b2a:	88fb      	ldrh	r3, [r7, #6]
 8015b2c:	9302      	str	r3, [sp, #8]
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	9301      	str	r3, [sp, #4]
 8015b32:	2301      	movs	r3, #1
 8015b34:	9300      	str	r3, [sp, #0]
 8015b36:	2300      	movs	r3, #0
 8015b38:	2201      	movs	r2, #1
 8015b3a:	68f8      	ldr	r0, [r7, #12]
 8015b3c:	f003 f8e3 	bl	8018d06 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8015b40:	2300      	movs	r3, #0

}
 8015b42:	4618      	mov	r0, r3
 8015b44:	3710      	adds	r7, #16
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}

08015b4a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8015b4a:	b580      	push	{r7, lr}
 8015b4c:	b088      	sub	sp, #32
 8015b4e:	af04      	add	r7, sp, #16
 8015b50:	60f8      	str	r0, [r7, #12]
 8015b52:	60b9      	str	r1, [r7, #8]
 8015b54:	4611      	mov	r1, r2
 8015b56:	461a      	mov	r2, r3
 8015b58:	460b      	mov	r3, r1
 8015b5a:	80fb      	strh	r3, [r7, #6]
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d001      	beq.n	8015b6e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015b6e:	7979      	ldrb	r1, [r7, #5]
 8015b70:	7e3b      	ldrb	r3, [r7, #24]
 8015b72:	9303      	str	r3, [sp, #12]
 8015b74:	88fb      	ldrh	r3, [r7, #6]
 8015b76:	9302      	str	r3, [sp, #8]
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	9301      	str	r3, [sp, #4]
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	9300      	str	r3, [sp, #0]
 8015b80:	2302      	movs	r3, #2
 8015b82:	2200      	movs	r2, #0
 8015b84:	68f8      	ldr	r0, [r7, #12]
 8015b86:	f003 f8be 	bl	8018d06 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8015b8a:	2300      	movs	r3, #0
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3710      	adds	r7, #16
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}

08015b94 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b088      	sub	sp, #32
 8015b98:	af04      	add	r7, sp, #16
 8015b9a:	60f8      	str	r0, [r7, #12]
 8015b9c:	60b9      	str	r1, [r7, #8]
 8015b9e:	4611      	mov	r1, r2
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	460b      	mov	r3, r1
 8015ba4:	80fb      	strh	r3, [r7, #6]
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015baa:	7979      	ldrb	r1, [r7, #5]
 8015bac:	2300      	movs	r3, #0
 8015bae:	9303      	str	r3, [sp, #12]
 8015bb0:	88fb      	ldrh	r3, [r7, #6]
 8015bb2:	9302      	str	r3, [sp, #8]
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	9301      	str	r3, [sp, #4]
 8015bb8:	2301      	movs	r3, #1
 8015bba:	9300      	str	r3, [sp, #0]
 8015bbc:	2302      	movs	r3, #2
 8015bbe:	2201      	movs	r2, #1
 8015bc0:	68f8      	ldr	r0, [r7, #12]
 8015bc2:	f003 f8a0 	bl	8018d06 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8015bc6:	2300      	movs	r3, #0
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3710      	adds	r7, #16
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b086      	sub	sp, #24
 8015bd4:	af04      	add	r7, sp, #16
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	4608      	mov	r0, r1
 8015bda:	4611      	mov	r1, r2
 8015bdc:	461a      	mov	r2, r3
 8015bde:	4603      	mov	r3, r0
 8015be0:	70fb      	strb	r3, [r7, #3]
 8015be2:	460b      	mov	r3, r1
 8015be4:	70bb      	strb	r3, [r7, #2]
 8015be6:	4613      	mov	r3, r2
 8015be8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8015bea:	7878      	ldrb	r0, [r7, #1]
 8015bec:	78ba      	ldrb	r2, [r7, #2]
 8015bee:	78f9      	ldrb	r1, [r7, #3]
 8015bf0:	8b3b      	ldrh	r3, [r7, #24]
 8015bf2:	9302      	str	r3, [sp, #8]
 8015bf4:	7d3b      	ldrb	r3, [r7, #20]
 8015bf6:	9301      	str	r3, [sp, #4]
 8015bf8:	7c3b      	ldrb	r3, [r7, #16]
 8015bfa:	9300      	str	r3, [sp, #0]
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f003 f833 	bl	8018c6a <USBH_LL_OpenPipe>

  return USBH_OK;
 8015c04:	2300      	movs	r3, #0
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	3708      	adds	r7, #8
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}

08015c0e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8015c0e:	b580      	push	{r7, lr}
 8015c10:	b082      	sub	sp, #8
 8015c12:	af00      	add	r7, sp, #0
 8015c14:	6078      	str	r0, [r7, #4]
 8015c16:	460b      	mov	r3, r1
 8015c18:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8015c1a:	78fb      	ldrb	r3, [r7, #3]
 8015c1c:	4619      	mov	r1, r3
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	f003 f852 	bl	8018cc8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8015c24:	2300      	movs	r3, #0
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3708      	adds	r7, #8
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}

08015c2e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8015c2e:	b580      	push	{r7, lr}
 8015c30:	b084      	sub	sp, #16
 8015c32:	af00      	add	r7, sp, #0
 8015c34:	6078      	str	r0, [r7, #4]
 8015c36:	460b      	mov	r3, r1
 8015c38:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8015c3a:	6878      	ldr	r0, [r7, #4]
 8015c3c:	f000 f836 	bl	8015cac <USBH_GetFreePipe>
 8015c40:	4603      	mov	r3, r0
 8015c42:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8015c44:	89fb      	ldrh	r3, [r7, #14]
 8015c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015c4a:	4293      	cmp	r3, r2
 8015c4c:	d00a      	beq.n	8015c64 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8015c4e:	78fa      	ldrb	r2, [r7, #3]
 8015c50:	89fb      	ldrh	r3, [r7, #14]
 8015c52:	f003 030f 	and.w	r3, r3, #15
 8015c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015c5a:	6879      	ldr	r1, [r7, #4]
 8015c5c:	33e0      	adds	r3, #224	; 0xe0
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	440b      	add	r3, r1
 8015c62:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8015c64:	89fb      	ldrh	r3, [r7, #14]
 8015c66:	b2db      	uxtb	r3, r3
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3710      	adds	r7, #16
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8015c70:	b480      	push	{r7}
 8015c72:	b083      	sub	sp, #12
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
 8015c78:	460b      	mov	r3, r1
 8015c7a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8015c7c:	78fb      	ldrb	r3, [r7, #3]
 8015c7e:	2b0a      	cmp	r3, #10
 8015c80:	d80d      	bhi.n	8015c9e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8015c82:	78fb      	ldrb	r3, [r7, #3]
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	33e0      	adds	r3, #224	; 0xe0
 8015c88:	009b      	lsls	r3, r3, #2
 8015c8a:	4413      	add	r3, r2
 8015c8c:	685a      	ldr	r2, [r3, #4]
 8015c8e:	78fb      	ldrb	r3, [r7, #3]
 8015c90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8015c94:	6879      	ldr	r1, [r7, #4]
 8015c96:	33e0      	adds	r3, #224	; 0xe0
 8015c98:	009b      	lsls	r3, r3, #2
 8015c9a:	440b      	add	r3, r1
 8015c9c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8015c9e:	2300      	movs	r3, #0
}
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	370c      	adds	r7, #12
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015caa:	4770      	bx	lr

08015cac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8015cac:	b480      	push	{r7}
 8015cae:	b085      	sub	sp, #20
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8015cb8:	2300      	movs	r3, #0
 8015cba:	73fb      	strb	r3, [r7, #15]
 8015cbc:	e00f      	b.n	8015cde <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8015cbe:	7bfb      	ldrb	r3, [r7, #15]
 8015cc0:	687a      	ldr	r2, [r7, #4]
 8015cc2:	33e0      	adds	r3, #224	; 0xe0
 8015cc4:	009b      	lsls	r3, r3, #2
 8015cc6:	4413      	add	r3, r2
 8015cc8:	685b      	ldr	r3, [r3, #4]
 8015cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d102      	bne.n	8015cd8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8015cd2:	7bfb      	ldrb	r3, [r7, #15]
 8015cd4:	b29b      	uxth	r3, r3
 8015cd6:	e007      	b.n	8015ce8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8015cd8:	7bfb      	ldrb	r3, [r7, #15]
 8015cda:	3301      	adds	r3, #1
 8015cdc:	73fb      	strb	r3, [r7, #15]
 8015cde:	7bfb      	ldrb	r3, [r7, #15]
 8015ce0:	2b0a      	cmp	r3, #10
 8015ce2:	d9ec      	bls.n	8015cbe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8015ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3714      	adds	r7, #20
 8015cec:	46bd      	mov	sp, r7
 8015cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf2:	4770      	bx	lr

08015cf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015cf4:	b480      	push	{r7}
 8015cf6:	b087      	sub	sp, #28
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	60f8      	str	r0, [r7, #12]
 8015cfc:	60b9      	str	r1, [r7, #8]
 8015cfe:	4613      	mov	r3, r2
 8015d00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015d02:	2301      	movs	r3, #1
 8015d04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015d06:	2300      	movs	r3, #0
 8015d08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015d0a:	4b1f      	ldr	r3, [pc, #124]	; (8015d88 <FATFS_LinkDriverEx+0x94>)
 8015d0c:	7a5b      	ldrb	r3, [r3, #9]
 8015d0e:	b2db      	uxtb	r3, r3
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d131      	bne.n	8015d78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015d14:	4b1c      	ldr	r3, [pc, #112]	; (8015d88 <FATFS_LinkDriverEx+0x94>)
 8015d16:	7a5b      	ldrb	r3, [r3, #9]
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	461a      	mov	r2, r3
 8015d1c:	4b1a      	ldr	r3, [pc, #104]	; (8015d88 <FATFS_LinkDriverEx+0x94>)
 8015d1e:	2100      	movs	r1, #0
 8015d20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015d22:	4b19      	ldr	r3, [pc, #100]	; (8015d88 <FATFS_LinkDriverEx+0x94>)
 8015d24:	7a5b      	ldrb	r3, [r3, #9]
 8015d26:	b2db      	uxtb	r3, r3
 8015d28:	4a17      	ldr	r2, [pc, #92]	; (8015d88 <FATFS_LinkDriverEx+0x94>)
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	4413      	add	r3, r2
 8015d2e:	68fa      	ldr	r2, [r7, #12]
 8015d30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015d32:	4b15      	ldr	r3, [pc, #84]	; (8015d88 <FATFS_LinkDriverEx+0x94>)
 8015d34:	7a5b      	ldrb	r3, [r3, #9]
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	461a      	mov	r2, r3
 8015d3a:	4b13      	ldr	r3, [pc, #76]	; (8015d88 <FATFS_LinkDriverEx+0x94>)
 8015d3c:	4413      	add	r3, r2
 8015d3e:	79fa      	ldrb	r2, [r7, #7]
 8015d40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015d42:	4b11      	ldr	r3, [pc, #68]	; (8015d88 <FATFS_LinkDriverEx+0x94>)
 8015d44:	7a5b      	ldrb	r3, [r3, #9]
 8015d46:	b2db      	uxtb	r3, r3
 8015d48:	1c5a      	adds	r2, r3, #1
 8015d4a:	b2d1      	uxtb	r1, r2
 8015d4c:	4a0e      	ldr	r2, [pc, #56]	; (8015d88 <FATFS_LinkDriverEx+0x94>)
 8015d4e:	7251      	strb	r1, [r2, #9]
 8015d50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015d52:	7dbb      	ldrb	r3, [r7, #22]
 8015d54:	3330      	adds	r3, #48	; 0x30
 8015d56:	b2da      	uxtb	r2, r3
 8015d58:	68bb      	ldr	r3, [r7, #8]
 8015d5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	3301      	adds	r3, #1
 8015d60:	223a      	movs	r2, #58	; 0x3a
 8015d62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	3302      	adds	r3, #2
 8015d68:	222f      	movs	r2, #47	; 0x2f
 8015d6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015d6c:	68bb      	ldr	r3, [r7, #8]
 8015d6e:	3303      	adds	r3, #3
 8015d70:	2200      	movs	r2, #0
 8015d72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015d74:	2300      	movs	r3, #0
 8015d76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	371c      	adds	r7, #28
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d84:	4770      	bx	lr
 8015d86:	bf00      	nop
 8015d88:	200003d8 	.word	0x200003d8

08015d8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b082      	sub	sp, #8
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015d96:	2200      	movs	r2, #0
 8015d98:	6839      	ldr	r1, [r7, #0]
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f7ff ffaa 	bl	8015cf4 <FATFS_LinkDriverEx>
 8015da0:	4603      	mov	r3, r0
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	3708      	adds	r7, #8
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}

08015daa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8015daa:	b480      	push	{r7}
 8015dac:	b085      	sub	sp, #20
 8015dae:	af00      	add	r7, sp, #0
 8015db0:	4603      	mov	r3, r0
 8015db2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015db4:	2300      	movs	r3, #0
 8015db6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8015db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015dbc:	2b84      	cmp	r3, #132	; 0x84
 8015dbe:	d005      	beq.n	8015dcc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8015dc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	4413      	add	r3, r2
 8015dc8:	3303      	adds	r3, #3
 8015dca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015dcc:	68fb      	ldr	r3, [r7, #12]
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3714      	adds	r7, #20
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd8:	4770      	bx	lr

08015dda <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8015dda:	b480      	push	{r7}
 8015ddc:	b083      	sub	sp, #12
 8015dde:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015de0:	f3ef 8305 	mrs	r3, IPSR
 8015de4:	607b      	str	r3, [r7, #4]
  return(result);
 8015de6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	bf14      	ite	ne
 8015dec:	2301      	movne	r3, #1
 8015dee:	2300      	moveq	r3, #0
 8015df0:	b2db      	uxtb	r3, r3
}
 8015df2:	4618      	mov	r0, r3
 8015df4:	370c      	adds	r7, #12
 8015df6:	46bd      	mov	sp, r7
 8015df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfc:	4770      	bx	lr

08015dfe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8015dfe:	b580      	push	{r7, lr}
 8015e00:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8015e02:	f001 f9e7 	bl	80171d4 <vTaskStartScheduler>
  
  return osOK;
 8015e06:	2300      	movs	r3, #0
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	bd80      	pop	{r7, pc}

08015e0c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8015e10:	f001 fe3a 	bl	8017a88 <xTaskGetSchedulerState>
 8015e14:	4603      	mov	r3, r0
 8015e16:	2b01      	cmp	r3, #1
 8015e18:	d101      	bne.n	8015e1e <osKernelRunning+0x12>
    return 0;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	e000      	b.n	8015e20 <osKernelRunning+0x14>
  else
    return 1;
 8015e1e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8015e20:	4618      	mov	r0, r3
 8015e22:	bd80      	pop	{r7, pc}

08015e24 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8015e28:	f7ff ffd7 	bl	8015dda <inHandlerMode>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d003      	beq.n	8015e3a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8015e32:	f001 faef 	bl	8017414 <xTaskGetTickCountFromISR>
 8015e36:	4603      	mov	r3, r0
 8015e38:	e002      	b.n	8015e40 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8015e3a:	f001 fadb 	bl	80173f4 <xTaskGetTickCount>
 8015e3e:	4603      	mov	r3, r0
  }
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	bd80      	pop	{r7, pc}

08015e44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8015e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e46:	b089      	sub	sp, #36	; 0x24
 8015e48:	af04      	add	r7, sp, #16
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	695b      	ldr	r3, [r3, #20]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d020      	beq.n	8015e98 <osThreadCreate+0x54>
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	699b      	ldr	r3, [r3, #24]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d01c      	beq.n	8015e98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	685c      	ldr	r4, [r3, #4]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681d      	ldr	r5, [r3, #0]
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	691e      	ldr	r6, [r3, #16]
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7ff ff9a 	bl	8015daa <makeFreeRtosPriority>
 8015e76:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	695b      	ldr	r3, [r3, #20]
 8015e7c:	687a      	ldr	r2, [r7, #4]
 8015e7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015e80:	9202      	str	r2, [sp, #8]
 8015e82:	9301      	str	r3, [sp, #4]
 8015e84:	9100      	str	r1, [sp, #0]
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	4632      	mov	r2, r6
 8015e8a:	4629      	mov	r1, r5
 8015e8c:	4620      	mov	r0, r4
 8015e8e:	f000 ffc5 	bl	8016e1c <xTaskCreateStatic>
 8015e92:	4603      	mov	r3, r0
 8015e94:	60fb      	str	r3, [r7, #12]
 8015e96:	e01c      	b.n	8015ed2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	685c      	ldr	r4, [r3, #4]
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015ea4:	b29e      	uxth	r6, r3
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015eac:	4618      	mov	r0, r3
 8015eae:	f7ff ff7c 	bl	8015daa <makeFreeRtosPriority>
 8015eb2:	4602      	mov	r2, r0
 8015eb4:	f107 030c 	add.w	r3, r7, #12
 8015eb8:	9301      	str	r3, [sp, #4]
 8015eba:	9200      	str	r2, [sp, #0]
 8015ebc:	683b      	ldr	r3, [r7, #0]
 8015ebe:	4632      	mov	r2, r6
 8015ec0:	4629      	mov	r1, r5
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	f001 f80d 	bl	8016ee2 <xTaskCreate>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	2b01      	cmp	r3, #1
 8015ecc:	d001      	beq.n	8015ed2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	e000      	b.n	8015ed4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3714      	adds	r7, #20
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015edc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d001      	beq.n	8015ef2 <osDelay+0x16>
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	e000      	b.n	8015ef4 <osDelay+0x18>
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f001 f937 	bl	8017168 <vTaskDelay>
  
  return osOK;
 8015efa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3710      	adds	r7, #16
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}

08015f04 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b086      	sub	sp, #24
 8015f08:	af02      	add	r7, sp, #8
 8015f0a:	6078      	str	r0, [r7, #4]
 8015f0c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015f0e:	2300      	movs	r3, #0
 8015f10:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8015f12:	2300      	movs	r3, #0
 8015f14:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8015f16:	f7ff ff60 	bl	8015dda <inHandlerMode>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d01c      	beq.n	8015f5a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8015f20:	6839      	ldr	r1, [r7, #0]
 8015f22:	f107 0208 	add.w	r2, r7, #8
 8015f26:	f107 030c 	add.w	r3, r7, #12
 8015f2a:	9300      	str	r3, [sp, #0]
 8015f2c:	4613      	mov	r3, r2
 8015f2e:	2201      	movs	r2, #1
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f001 ff67 	bl	8017e04 <xTaskGenericNotifyFromISR>
 8015f36:	4603      	mov	r3, r0
 8015f38:	2b01      	cmp	r3, #1
 8015f3a:	d002      	beq.n	8015f42 <osSignalSet+0x3e>
      return 0x80000000;
 8015f3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015f40:	e019      	b.n	8015f76 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d015      	beq.n	8015f74 <osSignalSet+0x70>
 8015f48:	4b0d      	ldr	r3, [pc, #52]	; (8015f80 <osSignalSet+0x7c>)
 8015f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f4e:	601a      	str	r2, [r3, #0]
 8015f50:	f3bf 8f4f 	dsb	sy
 8015f54:	f3bf 8f6f 	isb	sy
 8015f58:	e00c      	b.n	8015f74 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8015f5a:	6839      	ldr	r1, [r7, #0]
 8015f5c:	f107 0308 	add.w	r3, r7, #8
 8015f60:	2201      	movs	r2, #1
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f001 fe92 	bl	8017c8c <xTaskGenericNotify>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	2b01      	cmp	r3, #1
 8015f6c:	d002      	beq.n	8015f74 <osSignalSet+0x70>
    return 0x80000000;
 8015f6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015f72:	e000      	b.n	8015f76 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8015f74:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8015f76:	4618      	mov	r0, r3
 8015f78:	3710      	adds	r7, #16
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop
 8015f80:	e000ed04 	.word	0xe000ed04

08015f84 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8015f84:	b590      	push	{r4, r7, lr}
 8015f86:	b089      	sub	sp, #36	; 0x24
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	60f8      	str	r0, [r7, #12]
 8015f8c:	60b9      	str	r1, [r7, #8]
 8015f8e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8015f90:	2300      	movs	r3, #0
 8015f92:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8015f94:	2300      	movs	r3, #0
 8015f96:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f9e:	d103      	bne.n	8015fa8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8015fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015fa4:	61fb      	str	r3, [r7, #28]
 8015fa6:	e009      	b.n	8015fbc <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d006      	beq.n	8015fbc <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8015fb2:	69fb      	ldr	r3, [r7, #28]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d101      	bne.n	8015fbc <osSignalWait+0x38>
      ticks = 1;
 8015fb8:	2301      	movs	r3, #1
 8015fba:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8015fbc:	f7ff ff0d 	bl	8015dda <inHandlerMode>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d002      	beq.n	8015fcc <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8015fc6:	2382      	movs	r3, #130	; 0x82
 8015fc8:	613b      	str	r3, [r7, #16]
 8015fca:	e01b      	b.n	8016004 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8015fcc:	68b9      	ldr	r1, [r7, #8]
 8015fce:	f107 0310 	add.w	r3, r7, #16
 8015fd2:	1d1a      	adds	r2, r3, #4
 8015fd4:	69fb      	ldr	r3, [r7, #28]
 8015fd6:	2000      	movs	r0, #0
 8015fd8:	f001 fdfe 	bl	8017bd8 <xTaskNotifyWait>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	2b01      	cmp	r3, #1
 8015fe0:	d008      	beq.n	8015ff4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8015fe2:	69fb      	ldr	r3, [r7, #28]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d102      	bne.n	8015fee <osSignalWait+0x6a>
 8015fe8:	2300      	movs	r3, #0
 8015fea:	613b      	str	r3, [r7, #16]
 8015fec:	e00a      	b.n	8016004 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8015fee:	2340      	movs	r3, #64	; 0x40
 8015ff0:	613b      	str	r3, [r7, #16]
 8015ff2:	e007      	b.n	8016004 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8015ff4:	697b      	ldr	r3, [r7, #20]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	da02      	bge.n	8016000 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8015ffa:	2386      	movs	r3, #134	; 0x86
 8015ffc:	613b      	str	r3, [r7, #16]
 8015ffe:	e001      	b.n	8016004 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8016000:	2308      	movs	r3, #8
 8016002:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	461c      	mov	r4, r3
 8016008:	f107 0310 	add.w	r3, r7, #16
 801600c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016014:	68f8      	ldr	r0, [r7, #12]
 8016016:	3724      	adds	r7, #36	; 0x24
 8016018:	46bd      	mov	sp, r7
 801601a:	bd90      	pop	{r4, r7, pc}

0801601c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801601c:	b590      	push	{r4, r7, lr}
 801601e:	b085      	sub	sp, #20
 8016020:	af02      	add	r7, sp, #8
 8016022:	6078      	str	r0, [r7, #4]
 8016024:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	689b      	ldr	r3, [r3, #8]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d011      	beq.n	8016052 <osMessageCreate+0x36>
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	68db      	ldr	r3, [r3, #12]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d00d      	beq.n	8016052 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6818      	ldr	r0, [r3, #0]
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	6859      	ldr	r1, [r3, #4]
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	689a      	ldr	r2, [r3, #8]
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	68db      	ldr	r3, [r3, #12]
 8016046:	2400      	movs	r4, #0
 8016048:	9400      	str	r4, [sp, #0]
 801604a:	f000 f9e1 	bl	8016410 <xQueueGenericCreateStatic>
 801604e:	4603      	mov	r3, r0
 8016050:	e008      	b.n	8016064 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6818      	ldr	r0, [r3, #0]
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	2200      	movs	r2, #0
 801605c:	4619      	mov	r1, r3
 801605e:	f000 fa59 	bl	8016514 <xQueueGenericCreate>
 8016062:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8016064:	4618      	mov	r0, r3
 8016066:	370c      	adds	r7, #12
 8016068:	46bd      	mov	sp, r7
 801606a:	bd90      	pop	{r4, r7, pc}

0801606c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b086      	sub	sp, #24
 8016070:	af00      	add	r7, sp, #0
 8016072:	60f8      	str	r0, [r7, #12]
 8016074:	60b9      	str	r1, [r7, #8]
 8016076:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8016078:	2300      	movs	r3, #0
 801607a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d101      	bne.n	801608a <osMessagePut+0x1e>
    ticks = 1;
 8016086:	2301      	movs	r3, #1
 8016088:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801608a:	f7ff fea6 	bl	8015dda <inHandlerMode>
 801608e:	4603      	mov	r3, r0
 8016090:	2b00      	cmp	r3, #0
 8016092:	d018      	beq.n	80160c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8016094:	f107 0210 	add.w	r2, r7, #16
 8016098:	f107 0108 	add.w	r1, r7, #8
 801609c:	2300      	movs	r3, #0
 801609e:	68f8      	ldr	r0, [r7, #12]
 80160a0:	f000 fba0 	bl	80167e4 <xQueueGenericSendFromISR>
 80160a4:	4603      	mov	r3, r0
 80160a6:	2b01      	cmp	r3, #1
 80160a8:	d001      	beq.n	80160ae <osMessagePut+0x42>
      return osErrorOS;
 80160aa:	23ff      	movs	r3, #255	; 0xff
 80160ac:	e018      	b.n	80160e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80160ae:	693b      	ldr	r3, [r7, #16]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d014      	beq.n	80160de <osMessagePut+0x72>
 80160b4:	4b0c      	ldr	r3, [pc, #48]	; (80160e8 <osMessagePut+0x7c>)
 80160b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160ba:	601a      	str	r2, [r3, #0]
 80160bc:	f3bf 8f4f 	dsb	sy
 80160c0:	f3bf 8f6f 	isb	sy
 80160c4:	e00b      	b.n	80160de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80160c6:	f107 0108 	add.w	r1, r7, #8
 80160ca:	2300      	movs	r3, #0
 80160cc:	697a      	ldr	r2, [r7, #20]
 80160ce:	68f8      	ldr	r0, [r7, #12]
 80160d0:	f000 fa82 	bl	80165d8 <xQueueGenericSend>
 80160d4:	4603      	mov	r3, r0
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	d001      	beq.n	80160de <osMessagePut+0x72>
      return osErrorOS;
 80160da:	23ff      	movs	r3, #255	; 0xff
 80160dc:	e000      	b.n	80160e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80160de:	2300      	movs	r3, #0
}
 80160e0:	4618      	mov	r0, r3
 80160e2:	3718      	adds	r7, #24
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}
 80160e8:	e000ed04 	.word	0xe000ed04

080160ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80160ec:	b590      	push	{r4, r7, lr}
 80160ee:	b08b      	sub	sp, #44	; 0x2c
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	60f8      	str	r0, [r7, #12]
 80160f4:	60b9      	str	r1, [r7, #8]
 80160f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80160f8:	68bb      	ldr	r3, [r7, #8]
 80160fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80160fc:	2300      	movs	r3, #0
 80160fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8016100:	68bb      	ldr	r3, [r7, #8]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d10a      	bne.n	801611c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8016106:	2380      	movs	r3, #128	; 0x80
 8016108:	617b      	str	r3, [r7, #20]
    return event;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	461c      	mov	r4, r3
 801610e:	f107 0314 	add.w	r3, r7, #20
 8016112:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801611a:	e054      	b.n	80161c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801611c:	2300      	movs	r3, #0
 801611e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8016120:	2300      	movs	r3, #0
 8016122:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801612a:	d103      	bne.n	8016134 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801612c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016130:	627b      	str	r3, [r7, #36]	; 0x24
 8016132:	e009      	b.n	8016148 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d006      	beq.n	8016148 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016140:	2b00      	cmp	r3, #0
 8016142:	d101      	bne.n	8016148 <osMessageGet+0x5c>
      ticks = 1;
 8016144:	2301      	movs	r3, #1
 8016146:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8016148:	f7ff fe47 	bl	8015dda <inHandlerMode>
 801614c:	4603      	mov	r3, r0
 801614e:	2b00      	cmp	r3, #0
 8016150:	d01c      	beq.n	801618c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8016152:	f107 0220 	add.w	r2, r7, #32
 8016156:	f107 0314 	add.w	r3, r7, #20
 801615a:	3304      	adds	r3, #4
 801615c:	4619      	mov	r1, r3
 801615e:	68b8      	ldr	r0, [r7, #8]
 8016160:	f000 fcc6 	bl	8016af0 <xQueueReceiveFromISR>
 8016164:	4603      	mov	r3, r0
 8016166:	2b01      	cmp	r3, #1
 8016168:	d102      	bne.n	8016170 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801616a:	2310      	movs	r3, #16
 801616c:	617b      	str	r3, [r7, #20]
 801616e:	e001      	b.n	8016174 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8016170:	2300      	movs	r3, #0
 8016172:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016174:	6a3b      	ldr	r3, [r7, #32]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d01d      	beq.n	80161b6 <osMessageGet+0xca>
 801617a:	4b15      	ldr	r3, [pc, #84]	; (80161d0 <osMessageGet+0xe4>)
 801617c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016180:	601a      	str	r2, [r3, #0]
 8016182:	f3bf 8f4f 	dsb	sy
 8016186:	f3bf 8f6f 	isb	sy
 801618a:	e014      	b.n	80161b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801618c:	f107 0314 	add.w	r3, r7, #20
 8016190:	3304      	adds	r3, #4
 8016192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016194:	4619      	mov	r1, r3
 8016196:	68b8      	ldr	r0, [r7, #8]
 8016198:	f000 fbc4 	bl	8016924 <xQueueReceive>
 801619c:	4603      	mov	r3, r0
 801619e:	2b01      	cmp	r3, #1
 80161a0:	d102      	bne.n	80161a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80161a2:	2310      	movs	r3, #16
 80161a4:	617b      	str	r3, [r7, #20]
 80161a6:	e006      	b.n	80161b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80161a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d101      	bne.n	80161b2 <osMessageGet+0xc6>
 80161ae:	2300      	movs	r3, #0
 80161b0:	e000      	b.n	80161b4 <osMessageGet+0xc8>
 80161b2:	2340      	movs	r3, #64	; 0x40
 80161b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	461c      	mov	r4, r3
 80161ba:	f107 0314 	add.w	r3, r7, #20
 80161be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80161c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80161c6:	68f8      	ldr	r0, [r7, #12]
 80161c8:	372c      	adds	r7, #44	; 0x2c
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd90      	pop	{r4, r7, pc}
 80161ce:	bf00      	nop
 80161d0:	e000ed04 	.word	0xe000ed04

080161d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80161d4:	b480      	push	{r7}
 80161d6:	b083      	sub	sp, #12
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f103 0208 	add.w	r2, r3, #8
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80161ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	f103 0208 	add.w	r2, r3, #8
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f103 0208 	add.w	r2, r3, #8
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	2200      	movs	r2, #0
 8016206:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016208:	bf00      	nop
 801620a:	370c      	adds	r7, #12
 801620c:	46bd      	mov	sp, r7
 801620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016212:	4770      	bx	lr

08016214 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016214:	b480      	push	{r7}
 8016216:	b083      	sub	sp, #12
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	2200      	movs	r2, #0
 8016220:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016222:	bf00      	nop
 8016224:	370c      	adds	r7, #12
 8016226:	46bd      	mov	sp, r7
 8016228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622c:	4770      	bx	lr

0801622e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801622e:	b480      	push	{r7}
 8016230:	b085      	sub	sp, #20
 8016232:	af00      	add	r7, sp, #0
 8016234:	6078      	str	r0, [r7, #4]
 8016236:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	685b      	ldr	r3, [r3, #4]
 801623c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801623e:	683b      	ldr	r3, [r7, #0]
 8016240:	68fa      	ldr	r2, [r7, #12]
 8016242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	689a      	ldr	r2, [r3, #8]
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	689b      	ldr	r3, [r3, #8]
 8016250:	683a      	ldr	r2, [r7, #0]
 8016252:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	683a      	ldr	r2, [r7, #0]
 8016258:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801625a:	683b      	ldr	r3, [r7, #0]
 801625c:	687a      	ldr	r2, [r7, #4]
 801625e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	1c5a      	adds	r2, r3, #1
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	601a      	str	r2, [r3, #0]
}
 801626a:	bf00      	nop
 801626c:	3714      	adds	r7, #20
 801626e:	46bd      	mov	sp, r7
 8016270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016274:	4770      	bx	lr

08016276 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016276:	b480      	push	{r7}
 8016278:	b085      	sub	sp, #20
 801627a:	af00      	add	r7, sp, #0
 801627c:	6078      	str	r0, [r7, #4]
 801627e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801628c:	d103      	bne.n	8016296 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	691b      	ldr	r3, [r3, #16]
 8016292:	60fb      	str	r3, [r7, #12]
 8016294:	e00c      	b.n	80162b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	3308      	adds	r3, #8
 801629a:	60fb      	str	r3, [r7, #12]
 801629c:	e002      	b.n	80162a4 <vListInsert+0x2e>
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	685b      	ldr	r3, [r3, #4]
 80162a2:	60fb      	str	r3, [r7, #12]
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	685b      	ldr	r3, [r3, #4]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	68ba      	ldr	r2, [r7, #8]
 80162ac:	429a      	cmp	r2, r3
 80162ae:	d2f6      	bcs.n	801629e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	685a      	ldr	r2, [r3, #4]
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80162b8:	683b      	ldr	r3, [r7, #0]
 80162ba:	685b      	ldr	r3, [r3, #4]
 80162bc:	683a      	ldr	r2, [r7, #0]
 80162be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	68fa      	ldr	r2, [r7, #12]
 80162c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	683a      	ldr	r2, [r7, #0]
 80162ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	687a      	ldr	r2, [r7, #4]
 80162d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	1c5a      	adds	r2, r3, #1
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	601a      	str	r2, [r3, #0]
}
 80162dc:	bf00      	nop
 80162de:	3714      	adds	r7, #20
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr

080162e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80162e8:	b480      	push	{r7}
 80162ea:	b085      	sub	sp, #20
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	691b      	ldr	r3, [r3, #16]
 80162f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	687a      	ldr	r2, [r7, #4]
 80162fc:	6892      	ldr	r2, [r2, #8]
 80162fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	689b      	ldr	r3, [r3, #8]
 8016304:	687a      	ldr	r2, [r7, #4]
 8016306:	6852      	ldr	r2, [r2, #4]
 8016308:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	687a      	ldr	r2, [r7, #4]
 8016310:	429a      	cmp	r2, r3
 8016312:	d103      	bne.n	801631c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	689a      	ldr	r2, [r3, #8]
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2200      	movs	r2, #0
 8016320:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	1e5a      	subs	r2, r3, #1
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	681b      	ldr	r3, [r3, #0]
}
 8016330:	4618      	mov	r0, r3
 8016332:	3714      	adds	r7, #20
 8016334:	46bd      	mov	sp, r7
 8016336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633a:	4770      	bx	lr

0801633c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b084      	sub	sp, #16
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d10c      	bne.n	801636a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016354:	b672      	cpsid	i
 8016356:	f383 8811 	msr	BASEPRI, r3
 801635a:	f3bf 8f6f 	isb	sy
 801635e:	f3bf 8f4f 	dsb	sy
 8016362:	b662      	cpsie	i
 8016364:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016366:	bf00      	nop
 8016368:	e7fe      	b.n	8016368 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801636a:	f001 ff9f 	bl	80182ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	681a      	ldr	r2, [r3, #0]
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016376:	68f9      	ldr	r1, [r7, #12]
 8016378:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801637a:	fb01 f303 	mul.w	r3, r1, r3
 801637e:	441a      	add	r2, r3
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2200      	movs	r2, #0
 8016388:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	681a      	ldr	r2, [r3, #0]
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	681a      	ldr	r2, [r3, #0]
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801639a:	3b01      	subs	r3, #1
 801639c:	68f9      	ldr	r1, [r7, #12]
 801639e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80163a0:	fb01 f303 	mul.w	r3, r1, r3
 80163a4:	441a      	add	r2, r3
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	22ff      	movs	r2, #255	; 0xff
 80163ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	22ff      	movs	r2, #255	; 0xff
 80163b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80163ba:	683b      	ldr	r3, [r7, #0]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d114      	bne.n	80163ea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	691b      	ldr	r3, [r3, #16]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d01a      	beq.n	80163fe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	3310      	adds	r3, #16
 80163cc:	4618      	mov	r0, r3
 80163ce:	f001 f995 	bl	80176fc <xTaskRemoveFromEventList>
 80163d2:	4603      	mov	r3, r0
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d012      	beq.n	80163fe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80163d8:	4b0c      	ldr	r3, [pc, #48]	; (801640c <xQueueGenericReset+0xd0>)
 80163da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163de:	601a      	str	r2, [r3, #0]
 80163e0:	f3bf 8f4f 	dsb	sy
 80163e4:	f3bf 8f6f 	isb	sy
 80163e8:	e009      	b.n	80163fe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	3310      	adds	r3, #16
 80163ee:	4618      	mov	r0, r3
 80163f0:	f7ff fef0 	bl	80161d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	3324      	adds	r3, #36	; 0x24
 80163f8:	4618      	mov	r0, r3
 80163fa:	f7ff feeb 	bl	80161d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80163fe:	f001 ff89 	bl	8018314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016402:	2301      	movs	r3, #1
}
 8016404:	4618      	mov	r0, r3
 8016406:	3710      	adds	r7, #16
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}
 801640c:	e000ed04 	.word	0xe000ed04

08016410 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016410:	b580      	push	{r7, lr}
 8016412:	b08e      	sub	sp, #56	; 0x38
 8016414:	af02      	add	r7, sp, #8
 8016416:	60f8      	str	r0, [r7, #12]
 8016418:	60b9      	str	r1, [r7, #8]
 801641a:	607a      	str	r2, [r7, #4]
 801641c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d10c      	bne.n	801643e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8016424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016428:	b672      	cpsid	i
 801642a:	f383 8811 	msr	BASEPRI, r3
 801642e:	f3bf 8f6f 	isb	sy
 8016432:	f3bf 8f4f 	dsb	sy
 8016436:	b662      	cpsie	i
 8016438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801643a:	bf00      	nop
 801643c:	e7fe      	b.n	801643c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d10c      	bne.n	801645e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8016444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016448:	b672      	cpsid	i
 801644a:	f383 8811 	msr	BASEPRI, r3
 801644e:	f3bf 8f6f 	isb	sy
 8016452:	f3bf 8f4f 	dsb	sy
 8016456:	b662      	cpsie	i
 8016458:	627b      	str	r3, [r7, #36]	; 0x24
}
 801645a:	bf00      	nop
 801645c:	e7fe      	b.n	801645c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d002      	beq.n	801646a <xQueueGenericCreateStatic+0x5a>
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d001      	beq.n	801646e <xQueueGenericCreateStatic+0x5e>
 801646a:	2301      	movs	r3, #1
 801646c:	e000      	b.n	8016470 <xQueueGenericCreateStatic+0x60>
 801646e:	2300      	movs	r3, #0
 8016470:	2b00      	cmp	r3, #0
 8016472:	d10c      	bne.n	801648e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8016474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016478:	b672      	cpsid	i
 801647a:	f383 8811 	msr	BASEPRI, r3
 801647e:	f3bf 8f6f 	isb	sy
 8016482:	f3bf 8f4f 	dsb	sy
 8016486:	b662      	cpsie	i
 8016488:	623b      	str	r3, [r7, #32]
}
 801648a:	bf00      	nop
 801648c:	e7fe      	b.n	801648c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d102      	bne.n	801649a <xQueueGenericCreateStatic+0x8a>
 8016494:	68bb      	ldr	r3, [r7, #8]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d101      	bne.n	801649e <xQueueGenericCreateStatic+0x8e>
 801649a:	2301      	movs	r3, #1
 801649c:	e000      	b.n	80164a0 <xQueueGenericCreateStatic+0x90>
 801649e:	2300      	movs	r3, #0
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d10c      	bne.n	80164be <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80164a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164a8:	b672      	cpsid	i
 80164aa:	f383 8811 	msr	BASEPRI, r3
 80164ae:	f3bf 8f6f 	isb	sy
 80164b2:	f3bf 8f4f 	dsb	sy
 80164b6:	b662      	cpsie	i
 80164b8:	61fb      	str	r3, [r7, #28]
}
 80164ba:	bf00      	nop
 80164bc:	e7fe      	b.n	80164bc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80164be:	2348      	movs	r3, #72	; 0x48
 80164c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	2b48      	cmp	r3, #72	; 0x48
 80164c6:	d00c      	beq.n	80164e2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80164c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164cc:	b672      	cpsid	i
 80164ce:	f383 8811 	msr	BASEPRI, r3
 80164d2:	f3bf 8f6f 	isb	sy
 80164d6:	f3bf 8f4f 	dsb	sy
 80164da:	b662      	cpsie	i
 80164dc:	61bb      	str	r3, [r7, #24]
}
 80164de:	bf00      	nop
 80164e0:	e7fe      	b.n	80164e0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80164e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80164e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d00d      	beq.n	801650a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80164ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f0:	2201      	movs	r2, #1
 80164f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80164f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80164fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fc:	9300      	str	r3, [sp, #0]
 80164fe:	4613      	mov	r3, r2
 8016500:	687a      	ldr	r2, [r7, #4]
 8016502:	68b9      	ldr	r1, [r7, #8]
 8016504:	68f8      	ldr	r0, [r7, #12]
 8016506:	f000 f847 	bl	8016598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801650c:	4618      	mov	r0, r3
 801650e:	3730      	adds	r7, #48	; 0x30
 8016510:	46bd      	mov	sp, r7
 8016512:	bd80      	pop	{r7, pc}

08016514 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016514:	b580      	push	{r7, lr}
 8016516:	b08a      	sub	sp, #40	; 0x28
 8016518:	af02      	add	r7, sp, #8
 801651a:	60f8      	str	r0, [r7, #12]
 801651c:	60b9      	str	r1, [r7, #8]
 801651e:	4613      	mov	r3, r2
 8016520:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d10c      	bne.n	8016542 <xQueueGenericCreate+0x2e>
	__asm volatile
 8016528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801652c:	b672      	cpsid	i
 801652e:	f383 8811 	msr	BASEPRI, r3
 8016532:	f3bf 8f6f 	isb	sy
 8016536:	f3bf 8f4f 	dsb	sy
 801653a:	b662      	cpsie	i
 801653c:	613b      	str	r3, [r7, #16]
}
 801653e:	bf00      	nop
 8016540:	e7fe      	b.n	8016540 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016542:	68bb      	ldr	r3, [r7, #8]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d102      	bne.n	801654e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016548:	2300      	movs	r3, #0
 801654a:	61fb      	str	r3, [r7, #28]
 801654c:	e004      	b.n	8016558 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	68ba      	ldr	r2, [r7, #8]
 8016552:	fb02 f303 	mul.w	r3, r2, r3
 8016556:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016558:	69fb      	ldr	r3, [r7, #28]
 801655a:	3348      	adds	r3, #72	; 0x48
 801655c:	4618      	mov	r0, r3
 801655e:	f001 ffd1 	bl	8018504 <pvPortMalloc>
 8016562:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d011      	beq.n	801658e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801656a:	69bb      	ldr	r3, [r7, #24]
 801656c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801656e:	697b      	ldr	r3, [r7, #20]
 8016570:	3348      	adds	r3, #72	; 0x48
 8016572:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016574:	69bb      	ldr	r3, [r7, #24]
 8016576:	2200      	movs	r2, #0
 8016578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801657c:	79fa      	ldrb	r2, [r7, #7]
 801657e:	69bb      	ldr	r3, [r7, #24]
 8016580:	9300      	str	r3, [sp, #0]
 8016582:	4613      	mov	r3, r2
 8016584:	697a      	ldr	r2, [r7, #20]
 8016586:	68b9      	ldr	r1, [r7, #8]
 8016588:	68f8      	ldr	r0, [r7, #12]
 801658a:	f000 f805 	bl	8016598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801658e:	69bb      	ldr	r3, [r7, #24]
	}
 8016590:	4618      	mov	r0, r3
 8016592:	3720      	adds	r7, #32
 8016594:	46bd      	mov	sp, r7
 8016596:	bd80      	pop	{r7, pc}

08016598 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b084      	sub	sp, #16
 801659c:	af00      	add	r7, sp, #0
 801659e:	60f8      	str	r0, [r7, #12]
 80165a0:	60b9      	str	r1, [r7, #8]
 80165a2:	607a      	str	r2, [r7, #4]
 80165a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d103      	bne.n	80165b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80165ac:	69bb      	ldr	r3, [r7, #24]
 80165ae:	69ba      	ldr	r2, [r7, #24]
 80165b0:	601a      	str	r2, [r3, #0]
 80165b2:	e002      	b.n	80165ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80165b4:	69bb      	ldr	r3, [r7, #24]
 80165b6:	687a      	ldr	r2, [r7, #4]
 80165b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80165ba:	69bb      	ldr	r3, [r7, #24]
 80165bc:	68fa      	ldr	r2, [r7, #12]
 80165be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80165c0:	69bb      	ldr	r3, [r7, #24]
 80165c2:	68ba      	ldr	r2, [r7, #8]
 80165c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80165c6:	2101      	movs	r1, #1
 80165c8:	69b8      	ldr	r0, [r7, #24]
 80165ca:	f7ff feb7 	bl	801633c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80165ce:	bf00      	nop
 80165d0:	3710      	adds	r7, #16
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd80      	pop	{r7, pc}
	...

080165d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b08e      	sub	sp, #56	; 0x38
 80165dc:	af00      	add	r7, sp, #0
 80165de:	60f8      	str	r0, [r7, #12]
 80165e0:	60b9      	str	r1, [r7, #8]
 80165e2:	607a      	str	r2, [r7, #4]
 80165e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80165e6:	2300      	movs	r3, #0
 80165e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80165ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d10c      	bne.n	801660e <xQueueGenericSend+0x36>
	__asm volatile
 80165f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165f8:	b672      	cpsid	i
 80165fa:	f383 8811 	msr	BASEPRI, r3
 80165fe:	f3bf 8f6f 	isb	sy
 8016602:	f3bf 8f4f 	dsb	sy
 8016606:	b662      	cpsie	i
 8016608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801660a:	bf00      	nop
 801660c:	e7fe      	b.n	801660c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801660e:	68bb      	ldr	r3, [r7, #8]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d103      	bne.n	801661c <xQueueGenericSend+0x44>
 8016614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016618:	2b00      	cmp	r3, #0
 801661a:	d101      	bne.n	8016620 <xQueueGenericSend+0x48>
 801661c:	2301      	movs	r3, #1
 801661e:	e000      	b.n	8016622 <xQueueGenericSend+0x4a>
 8016620:	2300      	movs	r3, #0
 8016622:	2b00      	cmp	r3, #0
 8016624:	d10c      	bne.n	8016640 <xQueueGenericSend+0x68>
	__asm volatile
 8016626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801662a:	b672      	cpsid	i
 801662c:	f383 8811 	msr	BASEPRI, r3
 8016630:	f3bf 8f6f 	isb	sy
 8016634:	f3bf 8f4f 	dsb	sy
 8016638:	b662      	cpsie	i
 801663a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801663c:	bf00      	nop
 801663e:	e7fe      	b.n	801663e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	2b02      	cmp	r3, #2
 8016644:	d103      	bne.n	801664e <xQueueGenericSend+0x76>
 8016646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801664a:	2b01      	cmp	r3, #1
 801664c:	d101      	bne.n	8016652 <xQueueGenericSend+0x7a>
 801664e:	2301      	movs	r3, #1
 8016650:	e000      	b.n	8016654 <xQueueGenericSend+0x7c>
 8016652:	2300      	movs	r3, #0
 8016654:	2b00      	cmp	r3, #0
 8016656:	d10c      	bne.n	8016672 <xQueueGenericSend+0x9a>
	__asm volatile
 8016658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801665c:	b672      	cpsid	i
 801665e:	f383 8811 	msr	BASEPRI, r3
 8016662:	f3bf 8f6f 	isb	sy
 8016666:	f3bf 8f4f 	dsb	sy
 801666a:	b662      	cpsie	i
 801666c:	623b      	str	r3, [r7, #32]
}
 801666e:	bf00      	nop
 8016670:	e7fe      	b.n	8016670 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016672:	f001 fa09 	bl	8017a88 <xTaskGetSchedulerState>
 8016676:	4603      	mov	r3, r0
 8016678:	2b00      	cmp	r3, #0
 801667a:	d102      	bne.n	8016682 <xQueueGenericSend+0xaa>
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d101      	bne.n	8016686 <xQueueGenericSend+0xae>
 8016682:	2301      	movs	r3, #1
 8016684:	e000      	b.n	8016688 <xQueueGenericSend+0xb0>
 8016686:	2300      	movs	r3, #0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d10c      	bne.n	80166a6 <xQueueGenericSend+0xce>
	__asm volatile
 801668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016690:	b672      	cpsid	i
 8016692:	f383 8811 	msr	BASEPRI, r3
 8016696:	f3bf 8f6f 	isb	sy
 801669a:	f3bf 8f4f 	dsb	sy
 801669e:	b662      	cpsie	i
 80166a0:	61fb      	str	r3, [r7, #28]
}
 80166a2:	bf00      	nop
 80166a4:	e7fe      	b.n	80166a4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80166a6:	f001 fe01 	bl	80182ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80166aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80166ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166b2:	429a      	cmp	r2, r3
 80166b4:	d302      	bcc.n	80166bc <xQueueGenericSend+0xe4>
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	2b02      	cmp	r3, #2
 80166ba:	d129      	bne.n	8016710 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80166bc:	683a      	ldr	r2, [r7, #0]
 80166be:	68b9      	ldr	r1, [r7, #8]
 80166c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166c2:	f000 fa9b 	bl	8016bfc <prvCopyDataToQueue>
 80166c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80166c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d010      	beq.n	80166f2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80166d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166d2:	3324      	adds	r3, #36	; 0x24
 80166d4:	4618      	mov	r0, r3
 80166d6:	f001 f811 	bl	80176fc <xTaskRemoveFromEventList>
 80166da:	4603      	mov	r3, r0
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d013      	beq.n	8016708 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80166e0:	4b3f      	ldr	r3, [pc, #252]	; (80167e0 <xQueueGenericSend+0x208>)
 80166e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166e6:	601a      	str	r2, [r3, #0]
 80166e8:	f3bf 8f4f 	dsb	sy
 80166ec:	f3bf 8f6f 	isb	sy
 80166f0:	e00a      	b.n	8016708 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80166f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d007      	beq.n	8016708 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80166f8:	4b39      	ldr	r3, [pc, #228]	; (80167e0 <xQueueGenericSend+0x208>)
 80166fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166fe:	601a      	str	r2, [r3, #0]
 8016700:	f3bf 8f4f 	dsb	sy
 8016704:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016708:	f001 fe04 	bl	8018314 <vPortExitCritical>
				return pdPASS;
 801670c:	2301      	movs	r3, #1
 801670e:	e063      	b.n	80167d8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d103      	bne.n	801671e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016716:	f001 fdfd 	bl	8018314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801671a:	2300      	movs	r3, #0
 801671c:	e05c      	b.n	80167d8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 801671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016720:	2b00      	cmp	r3, #0
 8016722:	d106      	bne.n	8016732 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016724:	f107 0314 	add.w	r3, r7, #20
 8016728:	4618      	mov	r0, r3
 801672a:	f001 f84b 	bl	80177c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801672e:	2301      	movs	r3, #1
 8016730:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016732:	f001 fdef 	bl	8018314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016736:	f000 fdb1 	bl	801729c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801673a:	f001 fdb7 	bl	80182ac <vPortEnterCritical>
 801673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016744:	b25b      	sxtb	r3, r3
 8016746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801674a:	d103      	bne.n	8016754 <xQueueGenericSend+0x17c>
 801674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801674e:	2200      	movs	r2, #0
 8016750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801675a:	b25b      	sxtb	r3, r3
 801675c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016760:	d103      	bne.n	801676a <xQueueGenericSend+0x192>
 8016762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016764:	2200      	movs	r2, #0
 8016766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801676a:	f001 fdd3 	bl	8018314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801676e:	1d3a      	adds	r2, r7, #4
 8016770:	f107 0314 	add.w	r3, r7, #20
 8016774:	4611      	mov	r1, r2
 8016776:	4618      	mov	r0, r3
 8016778:	f001 f83a 	bl	80177f0 <xTaskCheckForTimeOut>
 801677c:	4603      	mov	r3, r0
 801677e:	2b00      	cmp	r3, #0
 8016780:	d124      	bne.n	80167cc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016784:	f000 fb32 	bl	8016dec <prvIsQueueFull>
 8016788:	4603      	mov	r3, r0
 801678a:	2b00      	cmp	r3, #0
 801678c:	d018      	beq.n	80167c0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016790:	3310      	adds	r3, #16
 8016792:	687a      	ldr	r2, [r7, #4]
 8016794:	4611      	mov	r1, r2
 8016796:	4618      	mov	r0, r3
 8016798:	f000 ff8a 	bl	80176b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801679c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801679e:	f000 fabd 	bl	8016d1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80167a2:	f000 fd89 	bl	80172b8 <xTaskResumeAll>
 80167a6:	4603      	mov	r3, r0
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	f47f af7c 	bne.w	80166a6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80167ae:	4b0c      	ldr	r3, [pc, #48]	; (80167e0 <xQueueGenericSend+0x208>)
 80167b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167b4:	601a      	str	r2, [r3, #0]
 80167b6:	f3bf 8f4f 	dsb	sy
 80167ba:	f3bf 8f6f 	isb	sy
 80167be:	e772      	b.n	80166a6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80167c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167c2:	f000 faab 	bl	8016d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80167c6:	f000 fd77 	bl	80172b8 <xTaskResumeAll>
 80167ca:	e76c      	b.n	80166a6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80167cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167ce:	f000 faa5 	bl	8016d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80167d2:	f000 fd71 	bl	80172b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80167d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80167d8:	4618      	mov	r0, r3
 80167da:	3738      	adds	r7, #56	; 0x38
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}
 80167e0:	e000ed04 	.word	0xe000ed04

080167e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b08e      	sub	sp, #56	; 0x38
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	60f8      	str	r0, [r7, #12]
 80167ec:	60b9      	str	r1, [r7, #8]
 80167ee:	607a      	str	r2, [r7, #4]
 80167f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80167f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d10c      	bne.n	8016816 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80167fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016800:	b672      	cpsid	i
 8016802:	f383 8811 	msr	BASEPRI, r3
 8016806:	f3bf 8f6f 	isb	sy
 801680a:	f3bf 8f4f 	dsb	sy
 801680e:	b662      	cpsie	i
 8016810:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016812:	bf00      	nop
 8016814:	e7fe      	b.n	8016814 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016816:	68bb      	ldr	r3, [r7, #8]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d103      	bne.n	8016824 <xQueueGenericSendFromISR+0x40>
 801681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016820:	2b00      	cmp	r3, #0
 8016822:	d101      	bne.n	8016828 <xQueueGenericSendFromISR+0x44>
 8016824:	2301      	movs	r3, #1
 8016826:	e000      	b.n	801682a <xQueueGenericSendFromISR+0x46>
 8016828:	2300      	movs	r3, #0
 801682a:	2b00      	cmp	r3, #0
 801682c:	d10c      	bne.n	8016848 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 801682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016832:	b672      	cpsid	i
 8016834:	f383 8811 	msr	BASEPRI, r3
 8016838:	f3bf 8f6f 	isb	sy
 801683c:	f3bf 8f4f 	dsb	sy
 8016840:	b662      	cpsie	i
 8016842:	623b      	str	r3, [r7, #32]
}
 8016844:	bf00      	nop
 8016846:	e7fe      	b.n	8016846 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	2b02      	cmp	r3, #2
 801684c:	d103      	bne.n	8016856 <xQueueGenericSendFromISR+0x72>
 801684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016852:	2b01      	cmp	r3, #1
 8016854:	d101      	bne.n	801685a <xQueueGenericSendFromISR+0x76>
 8016856:	2301      	movs	r3, #1
 8016858:	e000      	b.n	801685c <xQueueGenericSendFromISR+0x78>
 801685a:	2300      	movs	r3, #0
 801685c:	2b00      	cmp	r3, #0
 801685e:	d10c      	bne.n	801687a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8016860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016864:	b672      	cpsid	i
 8016866:	f383 8811 	msr	BASEPRI, r3
 801686a:	f3bf 8f6f 	isb	sy
 801686e:	f3bf 8f4f 	dsb	sy
 8016872:	b662      	cpsie	i
 8016874:	61fb      	str	r3, [r7, #28]
}
 8016876:	bf00      	nop
 8016878:	e7fe      	b.n	8016878 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801687a:	f001 fdff 	bl	801847c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801687e:	f3ef 8211 	mrs	r2, BASEPRI
 8016882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016886:	b672      	cpsid	i
 8016888:	f383 8811 	msr	BASEPRI, r3
 801688c:	f3bf 8f6f 	isb	sy
 8016890:	f3bf 8f4f 	dsb	sy
 8016894:	b662      	cpsie	i
 8016896:	61ba      	str	r2, [r7, #24]
 8016898:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801689a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801689c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80168a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d302      	bcc.n	80168b0 <xQueueGenericSendFromISR+0xcc>
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	2b02      	cmp	r3, #2
 80168ae:	d12c      	bne.n	801690a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80168b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80168b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80168ba:	683a      	ldr	r2, [r7, #0]
 80168bc:	68b9      	ldr	r1, [r7, #8]
 80168be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168c0:	f000 f99c 	bl	8016bfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80168c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80168c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80168cc:	d112      	bne.n	80168f4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80168ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d016      	beq.n	8016904 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80168d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d8:	3324      	adds	r3, #36	; 0x24
 80168da:	4618      	mov	r0, r3
 80168dc:	f000 ff0e 	bl	80176fc <xTaskRemoveFromEventList>
 80168e0:	4603      	mov	r3, r0
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d00e      	beq.n	8016904 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d00b      	beq.n	8016904 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	2201      	movs	r2, #1
 80168f0:	601a      	str	r2, [r3, #0]
 80168f2:	e007      	b.n	8016904 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80168f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80168f8:	3301      	adds	r3, #1
 80168fa:	b2db      	uxtb	r3, r3
 80168fc:	b25a      	sxtb	r2, r3
 80168fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016904:	2301      	movs	r3, #1
 8016906:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8016908:	e001      	b.n	801690e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801690a:	2300      	movs	r3, #0
 801690c:	637b      	str	r3, [r7, #52]	; 0x34
 801690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016910:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016912:	693b      	ldr	r3, [r7, #16]
 8016914:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016918:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801691c:	4618      	mov	r0, r3
 801691e:	3738      	adds	r7, #56	; 0x38
 8016920:	46bd      	mov	sp, r7
 8016922:	bd80      	pop	{r7, pc}

08016924 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b08c      	sub	sp, #48	; 0x30
 8016928:	af00      	add	r7, sp, #0
 801692a:	60f8      	str	r0, [r7, #12]
 801692c:	60b9      	str	r1, [r7, #8]
 801692e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016930:	2300      	movs	r3, #0
 8016932:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801693a:	2b00      	cmp	r3, #0
 801693c:	d10c      	bne.n	8016958 <xQueueReceive+0x34>
	__asm volatile
 801693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016942:	b672      	cpsid	i
 8016944:	f383 8811 	msr	BASEPRI, r3
 8016948:	f3bf 8f6f 	isb	sy
 801694c:	f3bf 8f4f 	dsb	sy
 8016950:	b662      	cpsie	i
 8016952:	623b      	str	r3, [r7, #32]
}
 8016954:	bf00      	nop
 8016956:	e7fe      	b.n	8016956 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d103      	bne.n	8016966 <xQueueReceive+0x42>
 801695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016962:	2b00      	cmp	r3, #0
 8016964:	d101      	bne.n	801696a <xQueueReceive+0x46>
 8016966:	2301      	movs	r3, #1
 8016968:	e000      	b.n	801696c <xQueueReceive+0x48>
 801696a:	2300      	movs	r3, #0
 801696c:	2b00      	cmp	r3, #0
 801696e:	d10c      	bne.n	801698a <xQueueReceive+0x66>
	__asm volatile
 8016970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016974:	b672      	cpsid	i
 8016976:	f383 8811 	msr	BASEPRI, r3
 801697a:	f3bf 8f6f 	isb	sy
 801697e:	f3bf 8f4f 	dsb	sy
 8016982:	b662      	cpsie	i
 8016984:	61fb      	str	r3, [r7, #28]
}
 8016986:	bf00      	nop
 8016988:	e7fe      	b.n	8016988 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801698a:	f001 f87d 	bl	8017a88 <xTaskGetSchedulerState>
 801698e:	4603      	mov	r3, r0
 8016990:	2b00      	cmp	r3, #0
 8016992:	d102      	bne.n	801699a <xQueueReceive+0x76>
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d101      	bne.n	801699e <xQueueReceive+0x7a>
 801699a:	2301      	movs	r3, #1
 801699c:	e000      	b.n	80169a0 <xQueueReceive+0x7c>
 801699e:	2300      	movs	r3, #0
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d10c      	bne.n	80169be <xQueueReceive+0x9a>
	__asm volatile
 80169a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169a8:	b672      	cpsid	i
 80169aa:	f383 8811 	msr	BASEPRI, r3
 80169ae:	f3bf 8f6f 	isb	sy
 80169b2:	f3bf 8f4f 	dsb	sy
 80169b6:	b662      	cpsie	i
 80169b8:	61bb      	str	r3, [r7, #24]
}
 80169ba:	bf00      	nop
 80169bc:	e7fe      	b.n	80169bc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80169be:	f001 fc75 	bl	80182ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80169c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80169c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d01f      	beq.n	8016a0e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80169ce:	68b9      	ldr	r1, [r7, #8]
 80169d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169d2:	f000 f97d 	bl	8016cd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80169d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d8:	1e5a      	subs	r2, r3, #1
 80169da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80169de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e0:	691b      	ldr	r3, [r3, #16]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d00f      	beq.n	8016a06 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80169e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e8:	3310      	adds	r3, #16
 80169ea:	4618      	mov	r0, r3
 80169ec:	f000 fe86 	bl	80176fc <xTaskRemoveFromEventList>
 80169f0:	4603      	mov	r3, r0
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d007      	beq.n	8016a06 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80169f6:	4b3d      	ldr	r3, [pc, #244]	; (8016aec <xQueueReceive+0x1c8>)
 80169f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169fc:	601a      	str	r2, [r3, #0]
 80169fe:	f3bf 8f4f 	dsb	sy
 8016a02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016a06:	f001 fc85 	bl	8018314 <vPortExitCritical>
				return pdPASS;
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	e069      	b.n	8016ae2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d103      	bne.n	8016a1c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016a14:	f001 fc7e 	bl	8018314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016a18:	2300      	movs	r3, #0
 8016a1a:	e062      	b.n	8016ae2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d106      	bne.n	8016a30 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016a22:	f107 0310 	add.w	r3, r7, #16
 8016a26:	4618      	mov	r0, r3
 8016a28:	f000 fecc 	bl	80177c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016a2c:	2301      	movs	r3, #1
 8016a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016a30:	f001 fc70 	bl	8018314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016a34:	f000 fc32 	bl	801729c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016a38:	f001 fc38 	bl	80182ac <vPortEnterCritical>
 8016a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016a42:	b25b      	sxtb	r3, r3
 8016a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016a48:	d103      	bne.n	8016a52 <xQueueReceive+0x12e>
 8016a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016a58:	b25b      	sxtb	r3, r3
 8016a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016a5e:	d103      	bne.n	8016a68 <xQueueReceive+0x144>
 8016a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a62:	2200      	movs	r2, #0
 8016a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a68:	f001 fc54 	bl	8018314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016a6c:	1d3a      	adds	r2, r7, #4
 8016a6e:	f107 0310 	add.w	r3, r7, #16
 8016a72:	4611      	mov	r1, r2
 8016a74:	4618      	mov	r0, r3
 8016a76:	f000 febb 	bl	80177f0 <xTaskCheckForTimeOut>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d123      	bne.n	8016ac8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a82:	f000 f99d 	bl	8016dc0 <prvIsQueueEmpty>
 8016a86:	4603      	mov	r3, r0
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d017      	beq.n	8016abc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a8e:	3324      	adds	r3, #36	; 0x24
 8016a90:	687a      	ldr	r2, [r7, #4]
 8016a92:	4611      	mov	r1, r2
 8016a94:	4618      	mov	r0, r3
 8016a96:	f000 fe0b 	bl	80176b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a9c:	f000 f93e 	bl	8016d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016aa0:	f000 fc0a 	bl	80172b8 <xTaskResumeAll>
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d189      	bne.n	80169be <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8016aaa:	4b10      	ldr	r3, [pc, #64]	; (8016aec <xQueueReceive+0x1c8>)
 8016aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ab0:	601a      	str	r2, [r3, #0]
 8016ab2:	f3bf 8f4f 	dsb	sy
 8016ab6:	f3bf 8f6f 	isb	sy
 8016aba:	e780      	b.n	80169be <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016abe:	f000 f92d 	bl	8016d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016ac2:	f000 fbf9 	bl	80172b8 <xTaskResumeAll>
 8016ac6:	e77a      	b.n	80169be <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016aca:	f000 f927 	bl	8016d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016ace:	f000 fbf3 	bl	80172b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ad4:	f000 f974 	bl	8016dc0 <prvIsQueueEmpty>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	f43f af6f 	beq.w	80169be <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016ae0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	3730      	adds	r7, #48	; 0x30
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd80      	pop	{r7, pc}
 8016aea:	bf00      	nop
 8016aec:	e000ed04 	.word	0xe000ed04

08016af0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b08e      	sub	sp, #56	; 0x38
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	60f8      	str	r0, [r7, #12]
 8016af8:	60b9      	str	r1, [r7, #8]
 8016afa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d10c      	bne.n	8016b20 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8016b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b0a:	b672      	cpsid	i
 8016b0c:	f383 8811 	msr	BASEPRI, r3
 8016b10:	f3bf 8f6f 	isb	sy
 8016b14:	f3bf 8f4f 	dsb	sy
 8016b18:	b662      	cpsie	i
 8016b1a:	623b      	str	r3, [r7, #32]
}
 8016b1c:	bf00      	nop
 8016b1e:	e7fe      	b.n	8016b1e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016b20:	68bb      	ldr	r3, [r7, #8]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d103      	bne.n	8016b2e <xQueueReceiveFromISR+0x3e>
 8016b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d101      	bne.n	8016b32 <xQueueReceiveFromISR+0x42>
 8016b2e:	2301      	movs	r3, #1
 8016b30:	e000      	b.n	8016b34 <xQueueReceiveFromISR+0x44>
 8016b32:	2300      	movs	r3, #0
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d10c      	bne.n	8016b52 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8016b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b3c:	b672      	cpsid	i
 8016b3e:	f383 8811 	msr	BASEPRI, r3
 8016b42:	f3bf 8f6f 	isb	sy
 8016b46:	f3bf 8f4f 	dsb	sy
 8016b4a:	b662      	cpsie	i
 8016b4c:	61fb      	str	r3, [r7, #28]
}
 8016b4e:	bf00      	nop
 8016b50:	e7fe      	b.n	8016b50 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016b52:	f001 fc93 	bl	801847c <vPortValidateInterruptPriority>
	__asm volatile
 8016b56:	f3ef 8211 	mrs	r2, BASEPRI
 8016b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b5e:	b672      	cpsid	i
 8016b60:	f383 8811 	msr	BASEPRI, r3
 8016b64:	f3bf 8f6f 	isb	sy
 8016b68:	f3bf 8f4f 	dsb	sy
 8016b6c:	b662      	cpsie	i
 8016b6e:	61ba      	str	r2, [r7, #24]
 8016b70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016b72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d02f      	beq.n	8016be2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016b8c:	68b9      	ldr	r1, [r7, #8]
 8016b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b90:	f000 f89e 	bl	8016cd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b96:	1e5a      	subs	r2, r3, #1
 8016b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016b9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016ba4:	d112      	bne.n	8016bcc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba8:	691b      	ldr	r3, [r3, #16]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d016      	beq.n	8016bdc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb0:	3310      	adds	r3, #16
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f000 fda2 	bl	80176fc <xTaskRemoveFromEventList>
 8016bb8:	4603      	mov	r3, r0
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d00e      	beq.n	8016bdc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d00b      	beq.n	8016bdc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	2201      	movs	r2, #1
 8016bc8:	601a      	str	r2, [r3, #0]
 8016bca:	e007      	b.n	8016bdc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	b25a      	sxtb	r2, r3
 8016bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016bdc:	2301      	movs	r3, #1
 8016bde:	637b      	str	r3, [r7, #52]	; 0x34
 8016be0:	e001      	b.n	8016be6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8016be2:	2300      	movs	r3, #0
 8016be4:	637b      	str	r3, [r7, #52]	; 0x34
 8016be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016be8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016bea:	693b      	ldr	r3, [r7, #16]
 8016bec:	f383 8811 	msr	BASEPRI, r3
}
 8016bf0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3738      	adds	r7, #56	; 0x38
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b086      	sub	sp, #24
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	60f8      	str	r0, [r7, #12]
 8016c04:	60b9      	str	r1, [r7, #8]
 8016c06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d10d      	bne.n	8016c36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d14d      	bne.n	8016cbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	689b      	ldr	r3, [r3, #8]
 8016c26:	4618      	mov	r0, r3
 8016c28:	f000 ff4c 	bl	8017ac4 <xTaskPriorityDisinherit>
 8016c2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	2200      	movs	r2, #0
 8016c32:	609a      	str	r2, [r3, #8]
 8016c34:	e043      	b.n	8016cbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d119      	bne.n	8016c70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	6858      	ldr	r0, [r3, #4]
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c44:	461a      	mov	r2, r3
 8016c46:	68b9      	ldr	r1, [r7, #8]
 8016c48:	f003 fa68 	bl	801a11c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	685a      	ldr	r2, [r3, #4]
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c54:	441a      	add	r2, r3
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	685a      	ldr	r2, [r3, #4]
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	689b      	ldr	r3, [r3, #8]
 8016c62:	429a      	cmp	r2, r3
 8016c64:	d32b      	bcc.n	8016cbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	681a      	ldr	r2, [r3, #0]
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	605a      	str	r2, [r3, #4]
 8016c6e:	e026      	b.n	8016cbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	68d8      	ldr	r0, [r3, #12]
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c78:	461a      	mov	r2, r3
 8016c7a:	68b9      	ldr	r1, [r7, #8]
 8016c7c:	f003 fa4e 	bl	801a11c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	68da      	ldr	r2, [r3, #12]
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c88:	425b      	negs	r3, r3
 8016c8a:	441a      	add	r2, r3
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	68da      	ldr	r2, [r3, #12]
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d207      	bcs.n	8016cac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	689a      	ldr	r2, [r3, #8]
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ca4:	425b      	negs	r3, r3
 8016ca6:	441a      	add	r2, r3
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2b02      	cmp	r3, #2
 8016cb0:	d105      	bne.n	8016cbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d002      	beq.n	8016cbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	3b01      	subs	r3, #1
 8016cbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	1c5a      	adds	r2, r3, #1
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016cc6:	697b      	ldr	r3, [r7, #20]
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	3718      	adds	r7, #24
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
 8016cd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d018      	beq.n	8016d14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	68da      	ldr	r2, [r3, #12]
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cea:	441a      	add	r2, r3
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	68da      	ldr	r2, [r3, #12]
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	689b      	ldr	r3, [r3, #8]
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d303      	bcc.n	8016d04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	681a      	ldr	r2, [r3, #0]
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	68d9      	ldr	r1, [r3, #12]
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	6838      	ldr	r0, [r7, #0]
 8016d10:	f003 fa04 	bl	801a11c <memcpy>
	}
}
 8016d14:	bf00      	nop
 8016d16:	3708      	adds	r7, #8
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd80      	pop	{r7, pc}

08016d1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b084      	sub	sp, #16
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016d24:	f001 fac2 	bl	80182ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016d2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016d30:	e011      	b.n	8016d56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d012      	beq.n	8016d60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	3324      	adds	r3, #36	; 0x24
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f000 fcdc 	bl	80176fc <xTaskRemoveFromEventList>
 8016d44:	4603      	mov	r3, r0
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d001      	beq.n	8016d4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016d4a:	f000 fdb7 	bl	80178bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016d4e:	7bfb      	ldrb	r3, [r7, #15]
 8016d50:	3b01      	subs	r3, #1
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	dce9      	bgt.n	8016d32 <prvUnlockQueue+0x16>
 8016d5e:	e000      	b.n	8016d62 <prvUnlockQueue+0x46>
					break;
 8016d60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	22ff      	movs	r2, #255	; 0xff
 8016d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016d6a:	f001 fad3 	bl	8018314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016d6e:	f001 fa9d 	bl	80182ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016d7a:	e011      	b.n	8016da0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	691b      	ldr	r3, [r3, #16]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d012      	beq.n	8016daa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	3310      	adds	r3, #16
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f000 fcb7 	bl	80176fc <xTaskRemoveFromEventList>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d001      	beq.n	8016d98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016d94:	f000 fd92 	bl	80178bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016d98:	7bbb      	ldrb	r3, [r7, #14]
 8016d9a:	3b01      	subs	r3, #1
 8016d9c:	b2db      	uxtb	r3, r3
 8016d9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016da0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	dce9      	bgt.n	8016d7c <prvUnlockQueue+0x60>
 8016da8:	e000      	b.n	8016dac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016daa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	22ff      	movs	r2, #255	; 0xff
 8016db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016db4:	f001 faae 	bl	8018314 <vPortExitCritical>
}
 8016db8:	bf00      	nop
 8016dba:	3710      	adds	r7, #16
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}

08016dc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016dc8:	f001 fa70 	bl	80182ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d102      	bne.n	8016dda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	60fb      	str	r3, [r7, #12]
 8016dd8:	e001      	b.n	8016dde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016dda:	2300      	movs	r3, #0
 8016ddc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016dde:	f001 fa99 	bl	8018314 <vPortExitCritical>

	return xReturn;
 8016de2:	68fb      	ldr	r3, [r7, #12]
}
 8016de4:	4618      	mov	r0, r3
 8016de6:	3710      	adds	r7, #16
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bd80      	pop	{r7, pc}

08016dec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b084      	sub	sp, #16
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016df4:	f001 fa5a 	bl	80182ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e00:	429a      	cmp	r2, r3
 8016e02:	d102      	bne.n	8016e0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016e04:	2301      	movs	r3, #1
 8016e06:	60fb      	str	r3, [r7, #12]
 8016e08:	e001      	b.n	8016e0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016e0e:	f001 fa81 	bl	8018314 <vPortExitCritical>

	return xReturn;
 8016e12:	68fb      	ldr	r3, [r7, #12]
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	3710      	adds	r7, #16
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	bd80      	pop	{r7, pc}

08016e1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b08e      	sub	sp, #56	; 0x38
 8016e20:	af04      	add	r7, sp, #16
 8016e22:	60f8      	str	r0, [r7, #12]
 8016e24:	60b9      	str	r1, [r7, #8]
 8016e26:	607a      	str	r2, [r7, #4]
 8016e28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d10c      	bne.n	8016e4a <xTaskCreateStatic+0x2e>
	__asm volatile
 8016e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e34:	b672      	cpsid	i
 8016e36:	f383 8811 	msr	BASEPRI, r3
 8016e3a:	f3bf 8f6f 	isb	sy
 8016e3e:	f3bf 8f4f 	dsb	sy
 8016e42:	b662      	cpsie	i
 8016e44:	623b      	str	r3, [r7, #32]
}
 8016e46:	bf00      	nop
 8016e48:	e7fe      	b.n	8016e48 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8016e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d10c      	bne.n	8016e6a <xTaskCreateStatic+0x4e>
	__asm volatile
 8016e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e54:	b672      	cpsid	i
 8016e56:	f383 8811 	msr	BASEPRI, r3
 8016e5a:	f3bf 8f6f 	isb	sy
 8016e5e:	f3bf 8f4f 	dsb	sy
 8016e62:	b662      	cpsie	i
 8016e64:	61fb      	str	r3, [r7, #28]
}
 8016e66:	bf00      	nop
 8016e68:	e7fe      	b.n	8016e68 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016e6a:	2358      	movs	r3, #88	; 0x58
 8016e6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016e6e:	693b      	ldr	r3, [r7, #16]
 8016e70:	2b58      	cmp	r3, #88	; 0x58
 8016e72:	d00c      	beq.n	8016e8e <xTaskCreateStatic+0x72>
	__asm volatile
 8016e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e78:	b672      	cpsid	i
 8016e7a:	f383 8811 	msr	BASEPRI, r3
 8016e7e:	f3bf 8f6f 	isb	sy
 8016e82:	f3bf 8f4f 	dsb	sy
 8016e86:	b662      	cpsie	i
 8016e88:	61bb      	str	r3, [r7, #24]
}
 8016e8a:	bf00      	nop
 8016e8c:	e7fe      	b.n	8016e8c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016e8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d01e      	beq.n	8016ed4 <xTaskCreateStatic+0xb8>
 8016e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d01b      	beq.n	8016ed4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ea4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea8:	2202      	movs	r2, #2
 8016eaa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016eae:	2300      	movs	r3, #0
 8016eb0:	9303      	str	r3, [sp, #12]
 8016eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb4:	9302      	str	r3, [sp, #8]
 8016eb6:	f107 0314 	add.w	r3, r7, #20
 8016eba:	9301      	str	r3, [sp, #4]
 8016ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ebe:	9300      	str	r3, [sp, #0]
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	687a      	ldr	r2, [r7, #4]
 8016ec4:	68b9      	ldr	r1, [r7, #8]
 8016ec6:	68f8      	ldr	r0, [r7, #12]
 8016ec8:	f000 f850 	bl	8016f6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ece:	f000 f8e1 	bl	8017094 <prvAddNewTaskToReadyList>
 8016ed2:	e001      	b.n	8016ed8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016ed8:	697b      	ldr	r3, [r7, #20]
	}
 8016eda:	4618      	mov	r0, r3
 8016edc:	3728      	adds	r7, #40	; 0x28
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}

08016ee2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016ee2:	b580      	push	{r7, lr}
 8016ee4:	b08c      	sub	sp, #48	; 0x30
 8016ee6:	af04      	add	r7, sp, #16
 8016ee8:	60f8      	str	r0, [r7, #12]
 8016eea:	60b9      	str	r1, [r7, #8]
 8016eec:	603b      	str	r3, [r7, #0]
 8016eee:	4613      	mov	r3, r2
 8016ef0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016ef2:	88fb      	ldrh	r3, [r7, #6]
 8016ef4:	009b      	lsls	r3, r3, #2
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f001 fb04 	bl	8018504 <pvPortMalloc>
 8016efc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016efe:	697b      	ldr	r3, [r7, #20]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d00e      	beq.n	8016f22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016f04:	2058      	movs	r0, #88	; 0x58
 8016f06:	f001 fafd 	bl	8018504 <pvPortMalloc>
 8016f0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016f0c:	69fb      	ldr	r3, [r7, #28]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d003      	beq.n	8016f1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016f12:	69fb      	ldr	r3, [r7, #28]
 8016f14:	697a      	ldr	r2, [r7, #20]
 8016f16:	631a      	str	r2, [r3, #48]	; 0x30
 8016f18:	e005      	b.n	8016f26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016f1a:	6978      	ldr	r0, [r7, #20]
 8016f1c:	f001 fbc2 	bl	80186a4 <vPortFree>
 8016f20:	e001      	b.n	8016f26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016f22:	2300      	movs	r3, #0
 8016f24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016f26:	69fb      	ldr	r3, [r7, #28]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d017      	beq.n	8016f5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016f2c:	69fb      	ldr	r3, [r7, #28]
 8016f2e:	2200      	movs	r2, #0
 8016f30:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016f34:	88fa      	ldrh	r2, [r7, #6]
 8016f36:	2300      	movs	r3, #0
 8016f38:	9303      	str	r3, [sp, #12]
 8016f3a:	69fb      	ldr	r3, [r7, #28]
 8016f3c:	9302      	str	r3, [sp, #8]
 8016f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f40:	9301      	str	r3, [sp, #4]
 8016f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f44:	9300      	str	r3, [sp, #0]
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	68b9      	ldr	r1, [r7, #8]
 8016f4a:	68f8      	ldr	r0, [r7, #12]
 8016f4c:	f000 f80e 	bl	8016f6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016f50:	69f8      	ldr	r0, [r7, #28]
 8016f52:	f000 f89f 	bl	8017094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016f56:	2301      	movs	r3, #1
 8016f58:	61bb      	str	r3, [r7, #24]
 8016f5a:	e002      	b.n	8016f62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016f62:	69bb      	ldr	r3, [r7, #24]
	}
 8016f64:	4618      	mov	r0, r3
 8016f66:	3720      	adds	r7, #32
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}

08016f6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b088      	sub	sp, #32
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	60f8      	str	r0, [r7, #12]
 8016f74:	60b9      	str	r1, [r7, #8]
 8016f76:	607a      	str	r2, [r7, #4]
 8016f78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	009b      	lsls	r3, r3, #2
 8016f82:	461a      	mov	r2, r3
 8016f84:	21a5      	movs	r1, #165	; 0xa5
 8016f86:	f003 f8d7 	bl	801a138 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016f8e:	6879      	ldr	r1, [r7, #4]
 8016f90:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8016f94:	440b      	add	r3, r1
 8016f96:	009b      	lsls	r3, r3, #2
 8016f98:	4413      	add	r3, r2
 8016f9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016f9c:	69bb      	ldr	r3, [r7, #24]
 8016f9e:	f023 0307 	bic.w	r3, r3, #7
 8016fa2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016fa4:	69bb      	ldr	r3, [r7, #24]
 8016fa6:	f003 0307 	and.w	r3, r3, #7
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d00c      	beq.n	8016fc8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8016fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fb2:	b672      	cpsid	i
 8016fb4:	f383 8811 	msr	BASEPRI, r3
 8016fb8:	f3bf 8f6f 	isb	sy
 8016fbc:	f3bf 8f4f 	dsb	sy
 8016fc0:	b662      	cpsie	i
 8016fc2:	617b      	str	r3, [r7, #20]
}
 8016fc4:	bf00      	nop
 8016fc6:	e7fe      	b.n	8016fc6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d01f      	beq.n	801700e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016fce:	2300      	movs	r3, #0
 8016fd0:	61fb      	str	r3, [r7, #28]
 8016fd2:	e012      	b.n	8016ffa <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016fd4:	68ba      	ldr	r2, [r7, #8]
 8016fd6:	69fb      	ldr	r3, [r7, #28]
 8016fd8:	4413      	add	r3, r2
 8016fda:	7819      	ldrb	r1, [r3, #0]
 8016fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fde:	69fb      	ldr	r3, [r7, #28]
 8016fe0:	4413      	add	r3, r2
 8016fe2:	3334      	adds	r3, #52	; 0x34
 8016fe4:	460a      	mov	r2, r1
 8016fe6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016fe8:	68ba      	ldr	r2, [r7, #8]
 8016fea:	69fb      	ldr	r3, [r7, #28]
 8016fec:	4413      	add	r3, r2
 8016fee:	781b      	ldrb	r3, [r3, #0]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d006      	beq.n	8017002 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016ff4:	69fb      	ldr	r3, [r7, #28]
 8016ff6:	3301      	adds	r3, #1
 8016ff8:	61fb      	str	r3, [r7, #28]
 8016ffa:	69fb      	ldr	r3, [r7, #28]
 8016ffc:	2b0f      	cmp	r3, #15
 8016ffe:	d9e9      	bls.n	8016fd4 <prvInitialiseNewTask+0x68>
 8017000:	e000      	b.n	8017004 <prvInitialiseNewTask+0x98>
			{
				break;
 8017002:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017006:	2200      	movs	r2, #0
 8017008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801700c:	e003      	b.n	8017016 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017010:	2200      	movs	r2, #0
 8017012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017018:	2b06      	cmp	r3, #6
 801701a:	d901      	bls.n	8017020 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801701c:	2306      	movs	r3, #6
 801701e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017024:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801702a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801702c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801702e:	2200      	movs	r2, #0
 8017030:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017034:	3304      	adds	r3, #4
 8017036:	4618      	mov	r0, r3
 8017038:	f7ff f8ec 	bl	8016214 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801703e:	3318      	adds	r3, #24
 8017040:	4618      	mov	r0, r3
 8017042:	f7ff f8e7 	bl	8016214 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801704a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801704e:	f1c3 0207 	rsb	r2, r3, #7
 8017052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017054:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801705a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705e:	2200      	movs	r2, #0
 8017060:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017064:	2200      	movs	r2, #0
 8017066:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801706a:	2200      	movs	r2, #0
 801706c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017070:	683a      	ldr	r2, [r7, #0]
 8017072:	68f9      	ldr	r1, [r7, #12]
 8017074:	69b8      	ldr	r0, [r7, #24]
 8017076:	f001 f80d 	bl	8018094 <pxPortInitialiseStack>
 801707a:	4602      	mov	r2, r0
 801707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801707e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017082:	2b00      	cmp	r3, #0
 8017084:	d002      	beq.n	801708c <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801708a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801708c:	bf00      	nop
 801708e:	3720      	adds	r7, #32
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}

08017094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b082      	sub	sp, #8
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801709c:	f001 f906 	bl	80182ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80170a0:	4b2a      	ldr	r3, [pc, #168]	; (801714c <prvAddNewTaskToReadyList+0xb8>)
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	3301      	adds	r3, #1
 80170a6:	4a29      	ldr	r2, [pc, #164]	; (801714c <prvAddNewTaskToReadyList+0xb8>)
 80170a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80170aa:	4b29      	ldr	r3, [pc, #164]	; (8017150 <prvAddNewTaskToReadyList+0xbc>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d109      	bne.n	80170c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80170b2:	4a27      	ldr	r2, [pc, #156]	; (8017150 <prvAddNewTaskToReadyList+0xbc>)
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80170b8:	4b24      	ldr	r3, [pc, #144]	; (801714c <prvAddNewTaskToReadyList+0xb8>)
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	2b01      	cmp	r3, #1
 80170be:	d110      	bne.n	80170e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80170c0:	f000 fc22 	bl	8017908 <prvInitialiseTaskLists>
 80170c4:	e00d      	b.n	80170e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80170c6:	4b23      	ldr	r3, [pc, #140]	; (8017154 <prvAddNewTaskToReadyList+0xc0>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d109      	bne.n	80170e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80170ce:	4b20      	ldr	r3, [pc, #128]	; (8017150 <prvAddNewTaskToReadyList+0xbc>)
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d8:	429a      	cmp	r2, r3
 80170da:	d802      	bhi.n	80170e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80170dc:	4a1c      	ldr	r2, [pc, #112]	; (8017150 <prvAddNewTaskToReadyList+0xbc>)
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80170e2:	4b1d      	ldr	r3, [pc, #116]	; (8017158 <prvAddNewTaskToReadyList+0xc4>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	3301      	adds	r3, #1
 80170e8:	4a1b      	ldr	r2, [pc, #108]	; (8017158 <prvAddNewTaskToReadyList+0xc4>)
 80170ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170f0:	2201      	movs	r2, #1
 80170f2:	409a      	lsls	r2, r3
 80170f4:	4b19      	ldr	r3, [pc, #100]	; (801715c <prvAddNewTaskToReadyList+0xc8>)
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	4313      	orrs	r3, r2
 80170fa:	4a18      	ldr	r2, [pc, #96]	; (801715c <prvAddNewTaskToReadyList+0xc8>)
 80170fc:	6013      	str	r3, [r2, #0]
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017102:	4613      	mov	r3, r2
 8017104:	009b      	lsls	r3, r3, #2
 8017106:	4413      	add	r3, r2
 8017108:	009b      	lsls	r3, r3, #2
 801710a:	4a15      	ldr	r2, [pc, #84]	; (8017160 <prvAddNewTaskToReadyList+0xcc>)
 801710c:	441a      	add	r2, r3
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	3304      	adds	r3, #4
 8017112:	4619      	mov	r1, r3
 8017114:	4610      	mov	r0, r2
 8017116:	f7ff f88a 	bl	801622e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801711a:	f001 f8fb 	bl	8018314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801711e:	4b0d      	ldr	r3, [pc, #52]	; (8017154 <prvAddNewTaskToReadyList+0xc0>)
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d00e      	beq.n	8017144 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017126:	4b0a      	ldr	r3, [pc, #40]	; (8017150 <prvAddNewTaskToReadyList+0xbc>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017130:	429a      	cmp	r2, r3
 8017132:	d207      	bcs.n	8017144 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017134:	4b0b      	ldr	r3, [pc, #44]	; (8017164 <prvAddNewTaskToReadyList+0xd0>)
 8017136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801713a:	601a      	str	r2, [r3, #0]
 801713c:	f3bf 8f4f 	dsb	sy
 8017140:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017144:	bf00      	nop
 8017146:	3708      	adds	r7, #8
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}
 801714c:	200004e4 	.word	0x200004e4
 8017150:	200003e4 	.word	0x200003e4
 8017154:	200004f0 	.word	0x200004f0
 8017158:	20000500 	.word	0x20000500
 801715c:	200004ec 	.word	0x200004ec
 8017160:	200003e8 	.word	0x200003e8
 8017164:	e000ed04 	.word	0xe000ed04

08017168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017168:	b580      	push	{r7, lr}
 801716a:	b084      	sub	sp, #16
 801716c:	af00      	add	r7, sp, #0
 801716e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017170:	2300      	movs	r3, #0
 8017172:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d019      	beq.n	80171ae <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801717a:	4b14      	ldr	r3, [pc, #80]	; (80171cc <vTaskDelay+0x64>)
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d00c      	beq.n	801719c <vTaskDelay+0x34>
	__asm volatile
 8017182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017186:	b672      	cpsid	i
 8017188:	f383 8811 	msr	BASEPRI, r3
 801718c:	f3bf 8f6f 	isb	sy
 8017190:	f3bf 8f4f 	dsb	sy
 8017194:	b662      	cpsie	i
 8017196:	60bb      	str	r3, [r7, #8]
}
 8017198:	bf00      	nop
 801719a:	e7fe      	b.n	801719a <vTaskDelay+0x32>
			vTaskSuspendAll();
 801719c:	f000 f87e 	bl	801729c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80171a0:	2100      	movs	r1, #0
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f000 ff10 	bl	8017fc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80171a8:	f000 f886 	bl	80172b8 <xTaskResumeAll>
 80171ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d107      	bne.n	80171c4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80171b4:	4b06      	ldr	r3, [pc, #24]	; (80171d0 <vTaskDelay+0x68>)
 80171b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171ba:	601a      	str	r2, [r3, #0]
 80171bc:	f3bf 8f4f 	dsb	sy
 80171c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80171c4:	bf00      	nop
 80171c6:	3710      	adds	r7, #16
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bd80      	pop	{r7, pc}
 80171cc:	2000050c 	.word	0x2000050c
 80171d0:	e000ed04 	.word	0xe000ed04

080171d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b08a      	sub	sp, #40	; 0x28
 80171d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80171da:	2300      	movs	r3, #0
 80171dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80171de:	2300      	movs	r3, #0
 80171e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80171e2:	463a      	mov	r2, r7
 80171e4:	1d39      	adds	r1, r7, #4
 80171e6:	f107 0308 	add.w	r3, r7, #8
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7ea f934 	bl	8001458 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80171f0:	6839      	ldr	r1, [r7, #0]
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	68ba      	ldr	r2, [r7, #8]
 80171f6:	9202      	str	r2, [sp, #8]
 80171f8:	9301      	str	r3, [sp, #4]
 80171fa:	2300      	movs	r3, #0
 80171fc:	9300      	str	r3, [sp, #0]
 80171fe:	2300      	movs	r3, #0
 8017200:	460a      	mov	r2, r1
 8017202:	4920      	ldr	r1, [pc, #128]	; (8017284 <vTaskStartScheduler+0xb0>)
 8017204:	4820      	ldr	r0, [pc, #128]	; (8017288 <vTaskStartScheduler+0xb4>)
 8017206:	f7ff fe09 	bl	8016e1c <xTaskCreateStatic>
 801720a:	4603      	mov	r3, r0
 801720c:	4a1f      	ldr	r2, [pc, #124]	; (801728c <vTaskStartScheduler+0xb8>)
 801720e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017210:	4b1e      	ldr	r3, [pc, #120]	; (801728c <vTaskStartScheduler+0xb8>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d002      	beq.n	801721e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017218:	2301      	movs	r3, #1
 801721a:	617b      	str	r3, [r7, #20]
 801721c:	e001      	b.n	8017222 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801721e:	2300      	movs	r3, #0
 8017220:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017222:	697b      	ldr	r3, [r7, #20]
 8017224:	2b01      	cmp	r3, #1
 8017226:	d118      	bne.n	801725a <vTaskStartScheduler+0x86>
	__asm volatile
 8017228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801722c:	b672      	cpsid	i
 801722e:	f383 8811 	msr	BASEPRI, r3
 8017232:	f3bf 8f6f 	isb	sy
 8017236:	f3bf 8f4f 	dsb	sy
 801723a:	b662      	cpsie	i
 801723c:	613b      	str	r3, [r7, #16]
}
 801723e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017240:	4b13      	ldr	r3, [pc, #76]	; (8017290 <vTaskStartScheduler+0xbc>)
 8017242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017246:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017248:	4b12      	ldr	r3, [pc, #72]	; (8017294 <vTaskStartScheduler+0xc0>)
 801724a:	2201      	movs	r2, #1
 801724c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801724e:	4b12      	ldr	r3, [pc, #72]	; (8017298 <vTaskStartScheduler+0xc4>)
 8017250:	2200      	movs	r2, #0
 8017252:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017254:	f000 ffac 	bl	80181b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017258:	e010      	b.n	801727c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801725a:	697b      	ldr	r3, [r7, #20]
 801725c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017260:	d10c      	bne.n	801727c <vTaskStartScheduler+0xa8>
	__asm volatile
 8017262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017266:	b672      	cpsid	i
 8017268:	f383 8811 	msr	BASEPRI, r3
 801726c:	f3bf 8f6f 	isb	sy
 8017270:	f3bf 8f4f 	dsb	sy
 8017274:	b662      	cpsie	i
 8017276:	60fb      	str	r3, [r7, #12]
}
 8017278:	bf00      	nop
 801727a:	e7fe      	b.n	801727a <vTaskStartScheduler+0xa6>
}
 801727c:	bf00      	nop
 801727e:	3718      	adds	r7, #24
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}
 8017284:	0801b720 	.word	0x0801b720
 8017288:	080178d5 	.word	0x080178d5
 801728c:	20000508 	.word	0x20000508
 8017290:	20000504 	.word	0x20000504
 8017294:	200004f0 	.word	0x200004f0
 8017298:	200004e8 	.word	0x200004e8

0801729c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801729c:	b480      	push	{r7}
 801729e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80172a0:	4b04      	ldr	r3, [pc, #16]	; (80172b4 <vTaskSuspendAll+0x18>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	3301      	adds	r3, #1
 80172a6:	4a03      	ldr	r2, [pc, #12]	; (80172b4 <vTaskSuspendAll+0x18>)
 80172a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80172aa:	bf00      	nop
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr
 80172b4:	2000050c 	.word	0x2000050c

080172b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b084      	sub	sp, #16
 80172bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80172be:	2300      	movs	r3, #0
 80172c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80172c2:	2300      	movs	r3, #0
 80172c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80172c6:	4b42      	ldr	r3, [pc, #264]	; (80173d0 <xTaskResumeAll+0x118>)
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d10c      	bne.n	80172e8 <xTaskResumeAll+0x30>
	__asm volatile
 80172ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172d2:	b672      	cpsid	i
 80172d4:	f383 8811 	msr	BASEPRI, r3
 80172d8:	f3bf 8f6f 	isb	sy
 80172dc:	f3bf 8f4f 	dsb	sy
 80172e0:	b662      	cpsie	i
 80172e2:	603b      	str	r3, [r7, #0]
}
 80172e4:	bf00      	nop
 80172e6:	e7fe      	b.n	80172e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80172e8:	f000 ffe0 	bl	80182ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80172ec:	4b38      	ldr	r3, [pc, #224]	; (80173d0 <xTaskResumeAll+0x118>)
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	3b01      	subs	r3, #1
 80172f2:	4a37      	ldr	r2, [pc, #220]	; (80173d0 <xTaskResumeAll+0x118>)
 80172f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80172f6:	4b36      	ldr	r3, [pc, #216]	; (80173d0 <xTaskResumeAll+0x118>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d161      	bne.n	80173c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80172fe:	4b35      	ldr	r3, [pc, #212]	; (80173d4 <xTaskResumeAll+0x11c>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d05d      	beq.n	80173c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017306:	e02e      	b.n	8017366 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017308:	4b33      	ldr	r3, [pc, #204]	; (80173d8 <xTaskResumeAll+0x120>)
 801730a:	68db      	ldr	r3, [r3, #12]
 801730c:	68db      	ldr	r3, [r3, #12]
 801730e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	3318      	adds	r3, #24
 8017314:	4618      	mov	r0, r3
 8017316:	f7fe ffe7 	bl	80162e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	3304      	adds	r3, #4
 801731e:	4618      	mov	r0, r3
 8017320:	f7fe ffe2 	bl	80162e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017328:	2201      	movs	r2, #1
 801732a:	409a      	lsls	r2, r3
 801732c:	4b2b      	ldr	r3, [pc, #172]	; (80173dc <xTaskResumeAll+0x124>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	4313      	orrs	r3, r2
 8017332:	4a2a      	ldr	r2, [pc, #168]	; (80173dc <xTaskResumeAll+0x124>)
 8017334:	6013      	str	r3, [r2, #0]
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801733a:	4613      	mov	r3, r2
 801733c:	009b      	lsls	r3, r3, #2
 801733e:	4413      	add	r3, r2
 8017340:	009b      	lsls	r3, r3, #2
 8017342:	4a27      	ldr	r2, [pc, #156]	; (80173e0 <xTaskResumeAll+0x128>)
 8017344:	441a      	add	r2, r3
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	3304      	adds	r3, #4
 801734a:	4619      	mov	r1, r3
 801734c:	4610      	mov	r0, r2
 801734e:	f7fe ff6e 	bl	801622e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017356:	4b23      	ldr	r3, [pc, #140]	; (80173e4 <xTaskResumeAll+0x12c>)
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801735c:	429a      	cmp	r2, r3
 801735e:	d302      	bcc.n	8017366 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8017360:	4b21      	ldr	r3, [pc, #132]	; (80173e8 <xTaskResumeAll+0x130>)
 8017362:	2201      	movs	r2, #1
 8017364:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017366:	4b1c      	ldr	r3, [pc, #112]	; (80173d8 <xTaskResumeAll+0x120>)
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d1cc      	bne.n	8017308 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d001      	beq.n	8017378 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017374:	f000 fb68 	bl	8017a48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8017378:	4b1c      	ldr	r3, [pc, #112]	; (80173ec <xTaskResumeAll+0x134>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d010      	beq.n	80173a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017384:	f000 f858 	bl	8017438 <xTaskIncrementTick>
 8017388:	4603      	mov	r3, r0
 801738a:	2b00      	cmp	r3, #0
 801738c:	d002      	beq.n	8017394 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801738e:	4b16      	ldr	r3, [pc, #88]	; (80173e8 <xTaskResumeAll+0x130>)
 8017390:	2201      	movs	r2, #1
 8017392:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	3b01      	subs	r3, #1
 8017398:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d1f1      	bne.n	8017384 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80173a0:	4b12      	ldr	r3, [pc, #72]	; (80173ec <xTaskResumeAll+0x134>)
 80173a2:	2200      	movs	r2, #0
 80173a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80173a6:	4b10      	ldr	r3, [pc, #64]	; (80173e8 <xTaskResumeAll+0x130>)
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d009      	beq.n	80173c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80173ae:	2301      	movs	r3, #1
 80173b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80173b2:	4b0f      	ldr	r3, [pc, #60]	; (80173f0 <xTaskResumeAll+0x138>)
 80173b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173b8:	601a      	str	r2, [r3, #0]
 80173ba:	f3bf 8f4f 	dsb	sy
 80173be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80173c2:	f000 ffa7 	bl	8018314 <vPortExitCritical>

	return xAlreadyYielded;
 80173c6:	68bb      	ldr	r3, [r7, #8]
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3710      	adds	r7, #16
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}
 80173d0:	2000050c 	.word	0x2000050c
 80173d4:	200004e4 	.word	0x200004e4
 80173d8:	200004a4 	.word	0x200004a4
 80173dc:	200004ec 	.word	0x200004ec
 80173e0:	200003e8 	.word	0x200003e8
 80173e4:	200003e4 	.word	0x200003e4
 80173e8:	200004f8 	.word	0x200004f8
 80173ec:	200004f4 	.word	0x200004f4
 80173f0:	e000ed04 	.word	0xe000ed04

080173f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80173f4:	b480      	push	{r7}
 80173f6:	b083      	sub	sp, #12
 80173f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80173fa:	4b05      	ldr	r3, [pc, #20]	; (8017410 <xTaskGetTickCount+0x1c>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017400:	687b      	ldr	r3, [r7, #4]
}
 8017402:	4618      	mov	r0, r3
 8017404:	370c      	adds	r7, #12
 8017406:	46bd      	mov	sp, r7
 8017408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740c:	4770      	bx	lr
 801740e:	bf00      	nop
 8017410:	200004e8 	.word	0x200004e8

08017414 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b082      	sub	sp, #8
 8017418:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801741a:	f001 f82f 	bl	801847c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801741e:	2300      	movs	r3, #0
 8017420:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8017422:	4b04      	ldr	r3, [pc, #16]	; (8017434 <xTaskGetTickCountFromISR+0x20>)
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017428:	683b      	ldr	r3, [r7, #0]
}
 801742a:	4618      	mov	r0, r3
 801742c:	3708      	adds	r7, #8
 801742e:	46bd      	mov	sp, r7
 8017430:	bd80      	pop	{r7, pc}
 8017432:	bf00      	nop
 8017434:	200004e8 	.word	0x200004e8

08017438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b086      	sub	sp, #24
 801743c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801743e:	2300      	movs	r3, #0
 8017440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017442:	4b4f      	ldr	r3, [pc, #316]	; (8017580 <xTaskIncrementTick+0x148>)
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	2b00      	cmp	r3, #0
 8017448:	f040 808a 	bne.w	8017560 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801744c:	4b4d      	ldr	r3, [pc, #308]	; (8017584 <xTaskIncrementTick+0x14c>)
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	3301      	adds	r3, #1
 8017452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017454:	4a4b      	ldr	r2, [pc, #300]	; (8017584 <xTaskIncrementTick+0x14c>)
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801745a:	693b      	ldr	r3, [r7, #16]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d122      	bne.n	80174a6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8017460:	4b49      	ldr	r3, [pc, #292]	; (8017588 <xTaskIncrementTick+0x150>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d00c      	beq.n	8017484 <xTaskIncrementTick+0x4c>
	__asm volatile
 801746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801746e:	b672      	cpsid	i
 8017470:	f383 8811 	msr	BASEPRI, r3
 8017474:	f3bf 8f6f 	isb	sy
 8017478:	f3bf 8f4f 	dsb	sy
 801747c:	b662      	cpsie	i
 801747e:	603b      	str	r3, [r7, #0]
}
 8017480:	bf00      	nop
 8017482:	e7fe      	b.n	8017482 <xTaskIncrementTick+0x4a>
 8017484:	4b40      	ldr	r3, [pc, #256]	; (8017588 <xTaskIncrementTick+0x150>)
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	60fb      	str	r3, [r7, #12]
 801748a:	4b40      	ldr	r3, [pc, #256]	; (801758c <xTaskIncrementTick+0x154>)
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	4a3e      	ldr	r2, [pc, #248]	; (8017588 <xTaskIncrementTick+0x150>)
 8017490:	6013      	str	r3, [r2, #0]
 8017492:	4a3e      	ldr	r2, [pc, #248]	; (801758c <xTaskIncrementTick+0x154>)
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	6013      	str	r3, [r2, #0]
 8017498:	4b3d      	ldr	r3, [pc, #244]	; (8017590 <xTaskIncrementTick+0x158>)
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	3301      	adds	r3, #1
 801749e:	4a3c      	ldr	r2, [pc, #240]	; (8017590 <xTaskIncrementTick+0x158>)
 80174a0:	6013      	str	r3, [r2, #0]
 80174a2:	f000 fad1 	bl	8017a48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80174a6:	4b3b      	ldr	r3, [pc, #236]	; (8017594 <xTaskIncrementTick+0x15c>)
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	693a      	ldr	r2, [r7, #16]
 80174ac:	429a      	cmp	r2, r3
 80174ae:	d348      	bcc.n	8017542 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80174b0:	4b35      	ldr	r3, [pc, #212]	; (8017588 <xTaskIncrementTick+0x150>)
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d104      	bne.n	80174c4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80174ba:	4b36      	ldr	r3, [pc, #216]	; (8017594 <xTaskIncrementTick+0x15c>)
 80174bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80174c0:	601a      	str	r2, [r3, #0]
					break;
 80174c2:	e03e      	b.n	8017542 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80174c4:	4b30      	ldr	r3, [pc, #192]	; (8017588 <xTaskIncrementTick+0x150>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	68db      	ldr	r3, [r3, #12]
 80174ca:	68db      	ldr	r3, [r3, #12]
 80174cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80174ce:	68bb      	ldr	r3, [r7, #8]
 80174d0:	685b      	ldr	r3, [r3, #4]
 80174d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80174d4:	693a      	ldr	r2, [r7, #16]
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	429a      	cmp	r2, r3
 80174da:	d203      	bcs.n	80174e4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80174dc:	4a2d      	ldr	r2, [pc, #180]	; (8017594 <xTaskIncrementTick+0x15c>)
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80174e2:	e02e      	b.n	8017542 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80174e4:	68bb      	ldr	r3, [r7, #8]
 80174e6:	3304      	adds	r3, #4
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7fe fefd 	bl	80162e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d004      	beq.n	8017500 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80174f6:	68bb      	ldr	r3, [r7, #8]
 80174f8:	3318      	adds	r3, #24
 80174fa:	4618      	mov	r0, r3
 80174fc:	f7fe fef4 	bl	80162e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017504:	2201      	movs	r2, #1
 8017506:	409a      	lsls	r2, r3
 8017508:	4b23      	ldr	r3, [pc, #140]	; (8017598 <xTaskIncrementTick+0x160>)
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	4313      	orrs	r3, r2
 801750e:	4a22      	ldr	r2, [pc, #136]	; (8017598 <xTaskIncrementTick+0x160>)
 8017510:	6013      	str	r3, [r2, #0]
 8017512:	68bb      	ldr	r3, [r7, #8]
 8017514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017516:	4613      	mov	r3, r2
 8017518:	009b      	lsls	r3, r3, #2
 801751a:	4413      	add	r3, r2
 801751c:	009b      	lsls	r3, r3, #2
 801751e:	4a1f      	ldr	r2, [pc, #124]	; (801759c <xTaskIncrementTick+0x164>)
 8017520:	441a      	add	r2, r3
 8017522:	68bb      	ldr	r3, [r7, #8]
 8017524:	3304      	adds	r3, #4
 8017526:	4619      	mov	r1, r3
 8017528:	4610      	mov	r0, r2
 801752a:	f7fe fe80 	bl	801622e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801752e:	68bb      	ldr	r3, [r7, #8]
 8017530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017532:	4b1b      	ldr	r3, [pc, #108]	; (80175a0 <xTaskIncrementTick+0x168>)
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017538:	429a      	cmp	r2, r3
 801753a:	d3b9      	bcc.n	80174b0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801753c:	2301      	movs	r3, #1
 801753e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017540:	e7b6      	b.n	80174b0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017542:	4b17      	ldr	r3, [pc, #92]	; (80175a0 <xTaskIncrementTick+0x168>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017548:	4914      	ldr	r1, [pc, #80]	; (801759c <xTaskIncrementTick+0x164>)
 801754a:	4613      	mov	r3, r2
 801754c:	009b      	lsls	r3, r3, #2
 801754e:	4413      	add	r3, r2
 8017550:	009b      	lsls	r3, r3, #2
 8017552:	440b      	add	r3, r1
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	2b01      	cmp	r3, #1
 8017558:	d907      	bls.n	801756a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801755a:	2301      	movs	r3, #1
 801755c:	617b      	str	r3, [r7, #20]
 801755e:	e004      	b.n	801756a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8017560:	4b10      	ldr	r3, [pc, #64]	; (80175a4 <xTaskIncrementTick+0x16c>)
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	3301      	adds	r3, #1
 8017566:	4a0f      	ldr	r2, [pc, #60]	; (80175a4 <xTaskIncrementTick+0x16c>)
 8017568:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801756a:	4b0f      	ldr	r3, [pc, #60]	; (80175a8 <xTaskIncrementTick+0x170>)
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d001      	beq.n	8017576 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8017572:	2301      	movs	r3, #1
 8017574:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8017576:	697b      	ldr	r3, [r7, #20]
}
 8017578:	4618      	mov	r0, r3
 801757a:	3718      	adds	r7, #24
 801757c:	46bd      	mov	sp, r7
 801757e:	bd80      	pop	{r7, pc}
 8017580:	2000050c 	.word	0x2000050c
 8017584:	200004e8 	.word	0x200004e8
 8017588:	2000049c 	.word	0x2000049c
 801758c:	200004a0 	.word	0x200004a0
 8017590:	200004fc 	.word	0x200004fc
 8017594:	20000504 	.word	0x20000504
 8017598:	200004ec 	.word	0x200004ec
 801759c:	200003e8 	.word	0x200003e8
 80175a0:	200003e4 	.word	0x200003e4
 80175a4:	200004f4 	.word	0x200004f4
 80175a8:	200004f8 	.word	0x200004f8

080175ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b088      	sub	sp, #32
 80175b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80175b2:	4b3a      	ldr	r3, [pc, #232]	; (801769c <vTaskSwitchContext+0xf0>)
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d003      	beq.n	80175c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80175ba:	4b39      	ldr	r3, [pc, #228]	; (80176a0 <vTaskSwitchContext+0xf4>)
 80175bc:	2201      	movs	r2, #1
 80175be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80175c0:	e068      	b.n	8017694 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 80175c2:	4b37      	ldr	r3, [pc, #220]	; (80176a0 <vTaskSwitchContext+0xf4>)
 80175c4:	2200      	movs	r2, #0
 80175c6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80175c8:	4b36      	ldr	r3, [pc, #216]	; (80176a4 <vTaskSwitchContext+0xf8>)
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175ce:	61fb      	str	r3, [r7, #28]
 80175d0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80175d4:	61bb      	str	r3, [r7, #24]
 80175d6:	69fb      	ldr	r3, [r7, #28]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	69ba      	ldr	r2, [r7, #24]
 80175dc:	429a      	cmp	r2, r3
 80175de:	d111      	bne.n	8017604 <vTaskSwitchContext+0x58>
 80175e0:	69fb      	ldr	r3, [r7, #28]
 80175e2:	3304      	adds	r3, #4
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	69ba      	ldr	r2, [r7, #24]
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d10b      	bne.n	8017604 <vTaskSwitchContext+0x58>
 80175ec:	69fb      	ldr	r3, [r7, #28]
 80175ee:	3308      	adds	r3, #8
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	69ba      	ldr	r2, [r7, #24]
 80175f4:	429a      	cmp	r2, r3
 80175f6:	d105      	bne.n	8017604 <vTaskSwitchContext+0x58>
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	330c      	adds	r3, #12
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	69ba      	ldr	r2, [r7, #24]
 8017600:	429a      	cmp	r2, r3
 8017602:	d008      	beq.n	8017616 <vTaskSwitchContext+0x6a>
 8017604:	4b27      	ldr	r3, [pc, #156]	; (80176a4 <vTaskSwitchContext+0xf8>)
 8017606:	681a      	ldr	r2, [r3, #0]
 8017608:	4b26      	ldr	r3, [pc, #152]	; (80176a4 <vTaskSwitchContext+0xf8>)
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	3334      	adds	r3, #52	; 0x34
 801760e:	4619      	mov	r1, r3
 8017610:	4610      	mov	r0, r2
 8017612:	f7e9 ff0e 	bl	8001432 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017616:	4b24      	ldr	r3, [pc, #144]	; (80176a8 <vTaskSwitchContext+0xfc>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	fab3 f383 	clz	r3, r3
 8017622:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8017624:	7afb      	ldrb	r3, [r7, #11]
 8017626:	f1c3 031f 	rsb	r3, r3, #31
 801762a:	617b      	str	r3, [r7, #20]
 801762c:	491f      	ldr	r1, [pc, #124]	; (80176ac <vTaskSwitchContext+0x100>)
 801762e:	697a      	ldr	r2, [r7, #20]
 8017630:	4613      	mov	r3, r2
 8017632:	009b      	lsls	r3, r3, #2
 8017634:	4413      	add	r3, r2
 8017636:	009b      	lsls	r3, r3, #2
 8017638:	440b      	add	r3, r1
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d10c      	bne.n	801765a <vTaskSwitchContext+0xae>
	__asm volatile
 8017640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017644:	b672      	cpsid	i
 8017646:	f383 8811 	msr	BASEPRI, r3
 801764a:	f3bf 8f6f 	isb	sy
 801764e:	f3bf 8f4f 	dsb	sy
 8017652:	b662      	cpsie	i
 8017654:	607b      	str	r3, [r7, #4]
}
 8017656:	bf00      	nop
 8017658:	e7fe      	b.n	8017658 <vTaskSwitchContext+0xac>
 801765a:	697a      	ldr	r2, [r7, #20]
 801765c:	4613      	mov	r3, r2
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	4413      	add	r3, r2
 8017662:	009b      	lsls	r3, r3, #2
 8017664:	4a11      	ldr	r2, [pc, #68]	; (80176ac <vTaskSwitchContext+0x100>)
 8017666:	4413      	add	r3, r2
 8017668:	613b      	str	r3, [r7, #16]
 801766a:	693b      	ldr	r3, [r7, #16]
 801766c:	685b      	ldr	r3, [r3, #4]
 801766e:	685a      	ldr	r2, [r3, #4]
 8017670:	693b      	ldr	r3, [r7, #16]
 8017672:	605a      	str	r2, [r3, #4]
 8017674:	693b      	ldr	r3, [r7, #16]
 8017676:	685a      	ldr	r2, [r3, #4]
 8017678:	693b      	ldr	r3, [r7, #16]
 801767a:	3308      	adds	r3, #8
 801767c:	429a      	cmp	r2, r3
 801767e:	d104      	bne.n	801768a <vTaskSwitchContext+0xde>
 8017680:	693b      	ldr	r3, [r7, #16]
 8017682:	685b      	ldr	r3, [r3, #4]
 8017684:	685a      	ldr	r2, [r3, #4]
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	605a      	str	r2, [r3, #4]
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	685b      	ldr	r3, [r3, #4]
 801768e:	68db      	ldr	r3, [r3, #12]
 8017690:	4a04      	ldr	r2, [pc, #16]	; (80176a4 <vTaskSwitchContext+0xf8>)
 8017692:	6013      	str	r3, [r2, #0]
}
 8017694:	bf00      	nop
 8017696:	3720      	adds	r7, #32
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}
 801769c:	2000050c 	.word	0x2000050c
 80176a0:	200004f8 	.word	0x200004f8
 80176a4:	200003e4 	.word	0x200003e4
 80176a8:	200004ec 	.word	0x200004ec
 80176ac:	200003e8 	.word	0x200003e8

080176b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b084      	sub	sp, #16
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
 80176b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d10c      	bne.n	80176da <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80176c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176c4:	b672      	cpsid	i
 80176c6:	f383 8811 	msr	BASEPRI, r3
 80176ca:	f3bf 8f6f 	isb	sy
 80176ce:	f3bf 8f4f 	dsb	sy
 80176d2:	b662      	cpsie	i
 80176d4:	60fb      	str	r3, [r7, #12]
}
 80176d6:	bf00      	nop
 80176d8:	e7fe      	b.n	80176d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80176da:	4b07      	ldr	r3, [pc, #28]	; (80176f8 <vTaskPlaceOnEventList+0x48>)
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	3318      	adds	r3, #24
 80176e0:	4619      	mov	r1, r3
 80176e2:	6878      	ldr	r0, [r7, #4]
 80176e4:	f7fe fdc7 	bl	8016276 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80176e8:	2101      	movs	r1, #1
 80176ea:	6838      	ldr	r0, [r7, #0]
 80176ec:	f000 fc6c 	bl	8017fc8 <prvAddCurrentTaskToDelayedList>
}
 80176f0:	bf00      	nop
 80176f2:	3710      	adds	r7, #16
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}
 80176f8:	200003e4 	.word	0x200003e4

080176fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b086      	sub	sp, #24
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	68db      	ldr	r3, [r3, #12]
 8017708:	68db      	ldr	r3, [r3, #12]
 801770a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801770c:	693b      	ldr	r3, [r7, #16]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d10c      	bne.n	801772c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8017712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017716:	b672      	cpsid	i
 8017718:	f383 8811 	msr	BASEPRI, r3
 801771c:	f3bf 8f6f 	isb	sy
 8017720:	f3bf 8f4f 	dsb	sy
 8017724:	b662      	cpsie	i
 8017726:	60fb      	str	r3, [r7, #12]
}
 8017728:	bf00      	nop
 801772a:	e7fe      	b.n	801772a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801772c:	693b      	ldr	r3, [r7, #16]
 801772e:	3318      	adds	r3, #24
 8017730:	4618      	mov	r0, r3
 8017732:	f7fe fdd9 	bl	80162e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017736:	4b1d      	ldr	r3, [pc, #116]	; (80177ac <xTaskRemoveFromEventList+0xb0>)
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d11c      	bne.n	8017778 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801773e:	693b      	ldr	r3, [r7, #16]
 8017740:	3304      	adds	r3, #4
 8017742:	4618      	mov	r0, r3
 8017744:	f7fe fdd0 	bl	80162e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801774c:	2201      	movs	r2, #1
 801774e:	409a      	lsls	r2, r3
 8017750:	4b17      	ldr	r3, [pc, #92]	; (80177b0 <xTaskRemoveFromEventList+0xb4>)
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	4313      	orrs	r3, r2
 8017756:	4a16      	ldr	r2, [pc, #88]	; (80177b0 <xTaskRemoveFromEventList+0xb4>)
 8017758:	6013      	str	r3, [r2, #0]
 801775a:	693b      	ldr	r3, [r7, #16]
 801775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801775e:	4613      	mov	r3, r2
 8017760:	009b      	lsls	r3, r3, #2
 8017762:	4413      	add	r3, r2
 8017764:	009b      	lsls	r3, r3, #2
 8017766:	4a13      	ldr	r2, [pc, #76]	; (80177b4 <xTaskRemoveFromEventList+0xb8>)
 8017768:	441a      	add	r2, r3
 801776a:	693b      	ldr	r3, [r7, #16]
 801776c:	3304      	adds	r3, #4
 801776e:	4619      	mov	r1, r3
 8017770:	4610      	mov	r0, r2
 8017772:	f7fe fd5c 	bl	801622e <vListInsertEnd>
 8017776:	e005      	b.n	8017784 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017778:	693b      	ldr	r3, [r7, #16]
 801777a:	3318      	adds	r3, #24
 801777c:	4619      	mov	r1, r3
 801777e:	480e      	ldr	r0, [pc, #56]	; (80177b8 <xTaskRemoveFromEventList+0xbc>)
 8017780:	f7fe fd55 	bl	801622e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017784:	693b      	ldr	r3, [r7, #16]
 8017786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017788:	4b0c      	ldr	r3, [pc, #48]	; (80177bc <xTaskRemoveFromEventList+0xc0>)
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801778e:	429a      	cmp	r2, r3
 8017790:	d905      	bls.n	801779e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017792:	2301      	movs	r3, #1
 8017794:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017796:	4b0a      	ldr	r3, [pc, #40]	; (80177c0 <xTaskRemoveFromEventList+0xc4>)
 8017798:	2201      	movs	r2, #1
 801779a:	601a      	str	r2, [r3, #0]
 801779c:	e001      	b.n	80177a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801779e:	2300      	movs	r3, #0
 80177a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80177a2:	697b      	ldr	r3, [r7, #20]
}
 80177a4:	4618      	mov	r0, r3
 80177a6:	3718      	adds	r7, #24
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd80      	pop	{r7, pc}
 80177ac:	2000050c 	.word	0x2000050c
 80177b0:	200004ec 	.word	0x200004ec
 80177b4:	200003e8 	.word	0x200003e8
 80177b8:	200004a4 	.word	0x200004a4
 80177bc:	200003e4 	.word	0x200003e4
 80177c0:	200004f8 	.word	0x200004f8

080177c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80177c4:	b480      	push	{r7}
 80177c6:	b083      	sub	sp, #12
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80177cc:	4b06      	ldr	r3, [pc, #24]	; (80177e8 <vTaskInternalSetTimeOutState+0x24>)
 80177ce:	681a      	ldr	r2, [r3, #0]
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80177d4:	4b05      	ldr	r3, [pc, #20]	; (80177ec <vTaskInternalSetTimeOutState+0x28>)
 80177d6:	681a      	ldr	r2, [r3, #0]
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	605a      	str	r2, [r3, #4]
}
 80177dc:	bf00      	nop
 80177de:	370c      	adds	r7, #12
 80177e0:	46bd      	mov	sp, r7
 80177e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e6:	4770      	bx	lr
 80177e8:	200004fc 	.word	0x200004fc
 80177ec:	200004e8 	.word	0x200004e8

080177f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b088      	sub	sp, #32
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	6078      	str	r0, [r7, #4]
 80177f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d10c      	bne.n	801781a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8017800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017804:	b672      	cpsid	i
 8017806:	f383 8811 	msr	BASEPRI, r3
 801780a:	f3bf 8f6f 	isb	sy
 801780e:	f3bf 8f4f 	dsb	sy
 8017812:	b662      	cpsie	i
 8017814:	613b      	str	r3, [r7, #16]
}
 8017816:	bf00      	nop
 8017818:	e7fe      	b.n	8017818 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d10c      	bne.n	801783a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8017820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017824:	b672      	cpsid	i
 8017826:	f383 8811 	msr	BASEPRI, r3
 801782a:	f3bf 8f6f 	isb	sy
 801782e:	f3bf 8f4f 	dsb	sy
 8017832:	b662      	cpsie	i
 8017834:	60fb      	str	r3, [r7, #12]
}
 8017836:	bf00      	nop
 8017838:	e7fe      	b.n	8017838 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801783a:	f000 fd37 	bl	80182ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801783e:	4b1d      	ldr	r3, [pc, #116]	; (80178b4 <xTaskCheckForTimeOut+0xc4>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	685b      	ldr	r3, [r3, #4]
 8017848:	69ba      	ldr	r2, [r7, #24]
 801784a:	1ad3      	subs	r3, r2, r3
 801784c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017856:	d102      	bne.n	801785e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017858:	2300      	movs	r3, #0
 801785a:	61fb      	str	r3, [r7, #28]
 801785c:	e023      	b.n	80178a6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	681a      	ldr	r2, [r3, #0]
 8017862:	4b15      	ldr	r3, [pc, #84]	; (80178b8 <xTaskCheckForTimeOut+0xc8>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	429a      	cmp	r2, r3
 8017868:	d007      	beq.n	801787a <xTaskCheckForTimeOut+0x8a>
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	685b      	ldr	r3, [r3, #4]
 801786e:	69ba      	ldr	r2, [r7, #24]
 8017870:	429a      	cmp	r2, r3
 8017872:	d302      	bcc.n	801787a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017874:	2301      	movs	r3, #1
 8017876:	61fb      	str	r3, [r7, #28]
 8017878:	e015      	b.n	80178a6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	697a      	ldr	r2, [r7, #20]
 8017880:	429a      	cmp	r2, r3
 8017882:	d20b      	bcs.n	801789c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017884:	683b      	ldr	r3, [r7, #0]
 8017886:	681a      	ldr	r2, [r3, #0]
 8017888:	697b      	ldr	r3, [r7, #20]
 801788a:	1ad2      	subs	r2, r2, r3
 801788c:	683b      	ldr	r3, [r7, #0]
 801788e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017890:	6878      	ldr	r0, [r7, #4]
 8017892:	f7ff ff97 	bl	80177c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017896:	2300      	movs	r3, #0
 8017898:	61fb      	str	r3, [r7, #28]
 801789a:	e004      	b.n	80178a6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801789c:	683b      	ldr	r3, [r7, #0]
 801789e:	2200      	movs	r2, #0
 80178a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80178a2:	2301      	movs	r3, #1
 80178a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80178a6:	f000 fd35 	bl	8018314 <vPortExitCritical>

	return xReturn;
 80178aa:	69fb      	ldr	r3, [r7, #28]
}
 80178ac:	4618      	mov	r0, r3
 80178ae:	3720      	adds	r7, #32
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}
 80178b4:	200004e8 	.word	0x200004e8
 80178b8:	200004fc 	.word	0x200004fc

080178bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80178bc:	b480      	push	{r7}
 80178be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80178c0:	4b03      	ldr	r3, [pc, #12]	; (80178d0 <vTaskMissedYield+0x14>)
 80178c2:	2201      	movs	r2, #1
 80178c4:	601a      	str	r2, [r3, #0]
}
 80178c6:	bf00      	nop
 80178c8:	46bd      	mov	sp, r7
 80178ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ce:	4770      	bx	lr
 80178d0:	200004f8 	.word	0x200004f8

080178d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b082      	sub	sp, #8
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80178dc:	f000 f854 	bl	8017988 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80178e0:	4b07      	ldr	r3, [pc, #28]	; (8017900 <prvIdleTask+0x2c>)
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	2b01      	cmp	r3, #1
 80178e6:	d907      	bls.n	80178f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80178e8:	4b06      	ldr	r3, [pc, #24]	; (8017904 <prvIdleTask+0x30>)
 80178ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178ee:	601a      	str	r2, [r3, #0]
 80178f0:	f3bf 8f4f 	dsb	sy
 80178f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80178f8:	f7e9 fd94 	bl	8001424 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80178fc:	e7ee      	b.n	80178dc <prvIdleTask+0x8>
 80178fe:	bf00      	nop
 8017900:	200003e8 	.word	0x200003e8
 8017904:	e000ed04 	.word	0xe000ed04

08017908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b082      	sub	sp, #8
 801790c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801790e:	2300      	movs	r3, #0
 8017910:	607b      	str	r3, [r7, #4]
 8017912:	e00c      	b.n	801792e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017914:	687a      	ldr	r2, [r7, #4]
 8017916:	4613      	mov	r3, r2
 8017918:	009b      	lsls	r3, r3, #2
 801791a:	4413      	add	r3, r2
 801791c:	009b      	lsls	r3, r3, #2
 801791e:	4a12      	ldr	r2, [pc, #72]	; (8017968 <prvInitialiseTaskLists+0x60>)
 8017920:	4413      	add	r3, r2
 8017922:	4618      	mov	r0, r3
 8017924:	f7fe fc56 	bl	80161d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	3301      	adds	r3, #1
 801792c:	607b      	str	r3, [r7, #4]
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	2b06      	cmp	r3, #6
 8017932:	d9ef      	bls.n	8017914 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017934:	480d      	ldr	r0, [pc, #52]	; (801796c <prvInitialiseTaskLists+0x64>)
 8017936:	f7fe fc4d 	bl	80161d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801793a:	480d      	ldr	r0, [pc, #52]	; (8017970 <prvInitialiseTaskLists+0x68>)
 801793c:	f7fe fc4a 	bl	80161d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017940:	480c      	ldr	r0, [pc, #48]	; (8017974 <prvInitialiseTaskLists+0x6c>)
 8017942:	f7fe fc47 	bl	80161d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017946:	480c      	ldr	r0, [pc, #48]	; (8017978 <prvInitialiseTaskLists+0x70>)
 8017948:	f7fe fc44 	bl	80161d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801794c:	480b      	ldr	r0, [pc, #44]	; (801797c <prvInitialiseTaskLists+0x74>)
 801794e:	f7fe fc41 	bl	80161d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017952:	4b0b      	ldr	r3, [pc, #44]	; (8017980 <prvInitialiseTaskLists+0x78>)
 8017954:	4a05      	ldr	r2, [pc, #20]	; (801796c <prvInitialiseTaskLists+0x64>)
 8017956:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017958:	4b0a      	ldr	r3, [pc, #40]	; (8017984 <prvInitialiseTaskLists+0x7c>)
 801795a:	4a05      	ldr	r2, [pc, #20]	; (8017970 <prvInitialiseTaskLists+0x68>)
 801795c:	601a      	str	r2, [r3, #0]
}
 801795e:	bf00      	nop
 8017960:	3708      	adds	r7, #8
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}
 8017966:	bf00      	nop
 8017968:	200003e8 	.word	0x200003e8
 801796c:	20000474 	.word	0x20000474
 8017970:	20000488 	.word	0x20000488
 8017974:	200004a4 	.word	0x200004a4
 8017978:	200004b8 	.word	0x200004b8
 801797c:	200004d0 	.word	0x200004d0
 8017980:	2000049c 	.word	0x2000049c
 8017984:	200004a0 	.word	0x200004a0

08017988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b082      	sub	sp, #8
 801798c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801798e:	e019      	b.n	80179c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017990:	f000 fc8c 	bl	80182ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017994:	4b10      	ldr	r3, [pc, #64]	; (80179d8 <prvCheckTasksWaitingTermination+0x50>)
 8017996:	68db      	ldr	r3, [r3, #12]
 8017998:	68db      	ldr	r3, [r3, #12]
 801799a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	3304      	adds	r3, #4
 80179a0:	4618      	mov	r0, r3
 80179a2:	f7fe fca1 	bl	80162e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80179a6:	4b0d      	ldr	r3, [pc, #52]	; (80179dc <prvCheckTasksWaitingTermination+0x54>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	3b01      	subs	r3, #1
 80179ac:	4a0b      	ldr	r2, [pc, #44]	; (80179dc <prvCheckTasksWaitingTermination+0x54>)
 80179ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80179b0:	4b0b      	ldr	r3, [pc, #44]	; (80179e0 <prvCheckTasksWaitingTermination+0x58>)
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	3b01      	subs	r3, #1
 80179b6:	4a0a      	ldr	r2, [pc, #40]	; (80179e0 <prvCheckTasksWaitingTermination+0x58>)
 80179b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80179ba:	f000 fcab 	bl	8018314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80179be:	6878      	ldr	r0, [r7, #4]
 80179c0:	f000 f810 	bl	80179e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80179c4:	4b06      	ldr	r3, [pc, #24]	; (80179e0 <prvCheckTasksWaitingTermination+0x58>)
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d1e1      	bne.n	8017990 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80179cc:	bf00      	nop
 80179ce:	bf00      	nop
 80179d0:	3708      	adds	r7, #8
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}
 80179d6:	bf00      	nop
 80179d8:	200004b8 	.word	0x200004b8
 80179dc:	200004e4 	.word	0x200004e4
 80179e0:	200004cc 	.word	0x200004cc

080179e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b084      	sub	sp, #16
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d108      	bne.n	8017a08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179fa:	4618      	mov	r0, r3
 80179fc:	f000 fe52 	bl	80186a4 <vPortFree>
				vPortFree( pxTCB );
 8017a00:	6878      	ldr	r0, [r7, #4]
 8017a02:	f000 fe4f 	bl	80186a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017a06:	e01a      	b.n	8017a3e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017a0e:	2b01      	cmp	r3, #1
 8017a10:	d103      	bne.n	8017a1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017a12:	6878      	ldr	r0, [r7, #4]
 8017a14:	f000 fe46 	bl	80186a4 <vPortFree>
	}
 8017a18:	e011      	b.n	8017a3e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017a20:	2b02      	cmp	r3, #2
 8017a22:	d00c      	beq.n	8017a3e <prvDeleteTCB+0x5a>
	__asm volatile
 8017a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a28:	b672      	cpsid	i
 8017a2a:	f383 8811 	msr	BASEPRI, r3
 8017a2e:	f3bf 8f6f 	isb	sy
 8017a32:	f3bf 8f4f 	dsb	sy
 8017a36:	b662      	cpsie	i
 8017a38:	60fb      	str	r3, [r7, #12]
}
 8017a3a:	bf00      	nop
 8017a3c:	e7fe      	b.n	8017a3c <prvDeleteTCB+0x58>
	}
 8017a3e:	bf00      	nop
 8017a40:	3710      	adds	r7, #16
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bd80      	pop	{r7, pc}
	...

08017a48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017a48:	b480      	push	{r7}
 8017a4a:	b083      	sub	sp, #12
 8017a4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017a4e:	4b0c      	ldr	r3, [pc, #48]	; (8017a80 <prvResetNextTaskUnblockTime+0x38>)
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d104      	bne.n	8017a62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017a58:	4b0a      	ldr	r3, [pc, #40]	; (8017a84 <prvResetNextTaskUnblockTime+0x3c>)
 8017a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017a60:	e008      	b.n	8017a74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a62:	4b07      	ldr	r3, [pc, #28]	; (8017a80 <prvResetNextTaskUnblockTime+0x38>)
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	68db      	ldr	r3, [r3, #12]
 8017a68:	68db      	ldr	r3, [r3, #12]
 8017a6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	685b      	ldr	r3, [r3, #4]
 8017a70:	4a04      	ldr	r2, [pc, #16]	; (8017a84 <prvResetNextTaskUnblockTime+0x3c>)
 8017a72:	6013      	str	r3, [r2, #0]
}
 8017a74:	bf00      	nop
 8017a76:	370c      	adds	r7, #12
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7e:	4770      	bx	lr
 8017a80:	2000049c 	.word	0x2000049c
 8017a84:	20000504 	.word	0x20000504

08017a88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017a88:	b480      	push	{r7}
 8017a8a:	b083      	sub	sp, #12
 8017a8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017a8e:	4b0b      	ldr	r3, [pc, #44]	; (8017abc <xTaskGetSchedulerState+0x34>)
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d102      	bne.n	8017a9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017a96:	2301      	movs	r3, #1
 8017a98:	607b      	str	r3, [r7, #4]
 8017a9a:	e008      	b.n	8017aae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017a9c:	4b08      	ldr	r3, [pc, #32]	; (8017ac0 <xTaskGetSchedulerState+0x38>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d102      	bne.n	8017aaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017aa4:	2302      	movs	r3, #2
 8017aa6:	607b      	str	r3, [r7, #4]
 8017aa8:	e001      	b.n	8017aae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017aaa:	2300      	movs	r3, #0
 8017aac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017aae:	687b      	ldr	r3, [r7, #4]
	}
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	370c      	adds	r7, #12
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aba:	4770      	bx	lr
 8017abc:	200004f0 	.word	0x200004f0
 8017ac0:	2000050c 	.word	0x2000050c

08017ac4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b086      	sub	sp, #24
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d072      	beq.n	8017bc0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017ada:	4b3c      	ldr	r3, [pc, #240]	; (8017bcc <xTaskPriorityDisinherit+0x108>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	693a      	ldr	r2, [r7, #16]
 8017ae0:	429a      	cmp	r2, r3
 8017ae2:	d00c      	beq.n	8017afe <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8017ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ae8:	b672      	cpsid	i
 8017aea:	f383 8811 	msr	BASEPRI, r3
 8017aee:	f3bf 8f6f 	isb	sy
 8017af2:	f3bf 8f4f 	dsb	sy
 8017af6:	b662      	cpsie	i
 8017af8:	60fb      	str	r3, [r7, #12]
}
 8017afa:	bf00      	nop
 8017afc:	e7fe      	b.n	8017afc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8017afe:	693b      	ldr	r3, [r7, #16]
 8017b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d10c      	bne.n	8017b20 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8017b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b0a:	b672      	cpsid	i
 8017b0c:	f383 8811 	msr	BASEPRI, r3
 8017b10:	f3bf 8f6f 	isb	sy
 8017b14:	f3bf 8f4f 	dsb	sy
 8017b18:	b662      	cpsie	i
 8017b1a:	60bb      	str	r3, [r7, #8]
}
 8017b1c:	bf00      	nop
 8017b1e:	e7fe      	b.n	8017b1e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8017b20:	693b      	ldr	r3, [r7, #16]
 8017b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b24:	1e5a      	subs	r2, r3, #1
 8017b26:	693b      	ldr	r3, [r7, #16]
 8017b28:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017b2a:	693b      	ldr	r3, [r7, #16]
 8017b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b2e:	693b      	ldr	r3, [r7, #16]
 8017b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b32:	429a      	cmp	r2, r3
 8017b34:	d044      	beq.n	8017bc0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017b36:	693b      	ldr	r3, [r7, #16]
 8017b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d140      	bne.n	8017bc0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017b3e:	693b      	ldr	r3, [r7, #16]
 8017b40:	3304      	adds	r3, #4
 8017b42:	4618      	mov	r0, r3
 8017b44:	f7fe fbd0 	bl	80162e8 <uxListRemove>
 8017b48:	4603      	mov	r3, r0
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d115      	bne.n	8017b7a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017b4e:	693b      	ldr	r3, [r7, #16]
 8017b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b52:	491f      	ldr	r1, [pc, #124]	; (8017bd0 <xTaskPriorityDisinherit+0x10c>)
 8017b54:	4613      	mov	r3, r2
 8017b56:	009b      	lsls	r3, r3, #2
 8017b58:	4413      	add	r3, r2
 8017b5a:	009b      	lsls	r3, r3, #2
 8017b5c:	440b      	add	r3, r1
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d10a      	bne.n	8017b7a <xTaskPriorityDisinherit+0xb6>
 8017b64:	693b      	ldr	r3, [r7, #16]
 8017b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b68:	2201      	movs	r2, #1
 8017b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8017b6e:	43da      	mvns	r2, r3
 8017b70:	4b18      	ldr	r3, [pc, #96]	; (8017bd4 <xTaskPriorityDisinherit+0x110>)
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	4013      	ands	r3, r2
 8017b76:	4a17      	ldr	r2, [pc, #92]	; (8017bd4 <xTaskPriorityDisinherit+0x110>)
 8017b78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017b7a:	693b      	ldr	r3, [r7, #16]
 8017b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017b7e:	693b      	ldr	r3, [r7, #16]
 8017b80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b82:	693b      	ldr	r3, [r7, #16]
 8017b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b86:	f1c3 0207 	rsb	r2, r3, #7
 8017b8a:	693b      	ldr	r3, [r7, #16]
 8017b8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017b8e:	693b      	ldr	r3, [r7, #16]
 8017b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b92:	2201      	movs	r2, #1
 8017b94:	409a      	lsls	r2, r3
 8017b96:	4b0f      	ldr	r3, [pc, #60]	; (8017bd4 <xTaskPriorityDisinherit+0x110>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	4313      	orrs	r3, r2
 8017b9c:	4a0d      	ldr	r2, [pc, #52]	; (8017bd4 <xTaskPriorityDisinherit+0x110>)
 8017b9e:	6013      	str	r3, [r2, #0]
 8017ba0:	693b      	ldr	r3, [r7, #16]
 8017ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ba4:	4613      	mov	r3, r2
 8017ba6:	009b      	lsls	r3, r3, #2
 8017ba8:	4413      	add	r3, r2
 8017baa:	009b      	lsls	r3, r3, #2
 8017bac:	4a08      	ldr	r2, [pc, #32]	; (8017bd0 <xTaskPriorityDisinherit+0x10c>)
 8017bae:	441a      	add	r2, r3
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	3304      	adds	r3, #4
 8017bb4:	4619      	mov	r1, r3
 8017bb6:	4610      	mov	r0, r2
 8017bb8:	f7fe fb39 	bl	801622e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017bc0:	697b      	ldr	r3, [r7, #20]
	}
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	3718      	adds	r7, #24
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	bd80      	pop	{r7, pc}
 8017bca:	bf00      	nop
 8017bcc:	200003e4 	.word	0x200003e4
 8017bd0:	200003e8 	.word	0x200003e8
 8017bd4:	200004ec 	.word	0x200004ec

08017bd8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	b086      	sub	sp, #24
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	60f8      	str	r0, [r7, #12]
 8017be0:	60b9      	str	r1, [r7, #8]
 8017be2:	607a      	str	r2, [r7, #4]
 8017be4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8017be6:	f000 fb61 	bl	80182ac <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017bea:	4b26      	ldr	r3, [pc, #152]	; (8017c84 <xTaskNotifyWait+0xac>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8017bf2:	b2db      	uxtb	r3, r3
 8017bf4:	2b02      	cmp	r3, #2
 8017bf6:	d01a      	beq.n	8017c2e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8017bf8:	4b22      	ldr	r3, [pc, #136]	; (8017c84 <xTaskNotifyWait+0xac>)
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8017bfe:	68fa      	ldr	r2, [r7, #12]
 8017c00:	43d2      	mvns	r2, r2
 8017c02:	400a      	ands	r2, r1
 8017c04:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8017c06:	4b1f      	ldr	r3, [pc, #124]	; (8017c84 <xTaskNotifyWait+0xac>)
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	2201      	movs	r2, #1
 8017c0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8017c10:	683b      	ldr	r3, [r7, #0]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d00b      	beq.n	8017c2e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017c16:	2101      	movs	r1, #1
 8017c18:	6838      	ldr	r0, [r7, #0]
 8017c1a:	f000 f9d5 	bl	8017fc8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8017c1e:	4b1a      	ldr	r3, [pc, #104]	; (8017c88 <xTaskNotifyWait+0xb0>)
 8017c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c24:	601a      	str	r2, [r3, #0]
 8017c26:	f3bf 8f4f 	dsb	sy
 8017c2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017c2e:	f000 fb71 	bl	8018314 <vPortExitCritical>

		taskENTER_CRITICAL();
 8017c32:	f000 fb3b 	bl	80182ac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d004      	beq.n	8017c46 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8017c3c:	4b11      	ldr	r3, [pc, #68]	; (8017c84 <xTaskNotifyWait+0xac>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017c46:	4b0f      	ldr	r3, [pc, #60]	; (8017c84 <xTaskNotifyWait+0xac>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8017c4e:	b2db      	uxtb	r3, r3
 8017c50:	2b02      	cmp	r3, #2
 8017c52:	d002      	beq.n	8017c5a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8017c54:	2300      	movs	r3, #0
 8017c56:	617b      	str	r3, [r7, #20]
 8017c58:	e008      	b.n	8017c6c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8017c5a:	4b0a      	ldr	r3, [pc, #40]	; (8017c84 <xTaskNotifyWait+0xac>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8017c60:	68ba      	ldr	r2, [r7, #8]
 8017c62:	43d2      	mvns	r2, r2
 8017c64:	400a      	ands	r2, r1
 8017c66:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 8017c68:	2301      	movs	r3, #1
 8017c6a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017c6c:	4b05      	ldr	r3, [pc, #20]	; (8017c84 <xTaskNotifyWait+0xac>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	2200      	movs	r2, #0
 8017c72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8017c76:	f000 fb4d 	bl	8018314 <vPortExitCritical>

		return xReturn;
 8017c7a:	697b      	ldr	r3, [r7, #20]
	}
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	3718      	adds	r7, #24
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bd80      	pop	{r7, pc}
 8017c84:	200003e4 	.word	0x200003e4
 8017c88:	e000ed04 	.word	0xe000ed04

08017c8c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b08a      	sub	sp, #40	; 0x28
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	60f8      	str	r0, [r7, #12]
 8017c94:	60b9      	str	r1, [r7, #8]
 8017c96:	603b      	str	r3, [r7, #0]
 8017c98:	4613      	mov	r3, r2
 8017c9a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8017c9c:	2301      	movs	r3, #1
 8017c9e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d10c      	bne.n	8017cc0 <xTaskGenericNotify+0x34>
	__asm volatile
 8017ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017caa:	b672      	cpsid	i
 8017cac:	f383 8811 	msr	BASEPRI, r3
 8017cb0:	f3bf 8f6f 	isb	sy
 8017cb4:	f3bf 8f4f 	dsb	sy
 8017cb8:	b662      	cpsie	i
 8017cba:	61bb      	str	r3, [r7, #24]
}
 8017cbc:	bf00      	nop
 8017cbe:	e7fe      	b.n	8017cbe <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8017cc4:	f000 faf2 	bl	80182ac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8017cc8:	683b      	ldr	r3, [r7, #0]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d003      	beq.n	8017cd6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017cce:	6a3b      	ldr	r3, [r7, #32]
 8017cd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017cd2:	683b      	ldr	r3, [r7, #0]
 8017cd4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017cd6:	6a3b      	ldr	r3, [r7, #32]
 8017cd8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8017cdc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017cde:	6a3b      	ldr	r3, [r7, #32]
 8017ce0:	2202      	movs	r2, #2
 8017ce2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8017ce6:	79fb      	ldrb	r3, [r7, #7]
 8017ce8:	2b04      	cmp	r3, #4
 8017cea:	d828      	bhi.n	8017d3e <xTaskGenericNotify+0xb2>
 8017cec:	a201      	add	r2, pc, #4	; (adr r2, 8017cf4 <xTaskGenericNotify+0x68>)
 8017cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cf2:	bf00      	nop
 8017cf4:	08017d63 	.word	0x08017d63
 8017cf8:	08017d09 	.word	0x08017d09
 8017cfc:	08017d17 	.word	0x08017d17
 8017d00:	08017d23 	.word	0x08017d23
 8017d04:	08017d2b 	.word	0x08017d2b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8017d08:	6a3b      	ldr	r3, [r7, #32]
 8017d0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017d0c:	68bb      	ldr	r3, [r7, #8]
 8017d0e:	431a      	orrs	r2, r3
 8017d10:	6a3b      	ldr	r3, [r7, #32]
 8017d12:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017d14:	e028      	b.n	8017d68 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017d16:	6a3b      	ldr	r3, [r7, #32]
 8017d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d1a:	1c5a      	adds	r2, r3, #1
 8017d1c:	6a3b      	ldr	r3, [r7, #32]
 8017d1e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017d20:	e022      	b.n	8017d68 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017d22:	6a3b      	ldr	r3, [r7, #32]
 8017d24:	68ba      	ldr	r2, [r7, #8]
 8017d26:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017d28:	e01e      	b.n	8017d68 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017d2a:	7ffb      	ldrb	r3, [r7, #31]
 8017d2c:	2b02      	cmp	r3, #2
 8017d2e:	d003      	beq.n	8017d38 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017d30:	6a3b      	ldr	r3, [r7, #32]
 8017d32:	68ba      	ldr	r2, [r7, #8]
 8017d34:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017d36:	e017      	b.n	8017d68 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8017d38:	2300      	movs	r3, #0
 8017d3a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8017d3c:	e014      	b.n	8017d68 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017d3e:	6a3b      	ldr	r3, [r7, #32]
 8017d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d46:	d00e      	beq.n	8017d66 <xTaskGenericNotify+0xda>
	__asm volatile
 8017d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d4c:	b672      	cpsid	i
 8017d4e:	f383 8811 	msr	BASEPRI, r3
 8017d52:	f3bf 8f6f 	isb	sy
 8017d56:	f3bf 8f4f 	dsb	sy
 8017d5a:	b662      	cpsie	i
 8017d5c:	617b      	str	r3, [r7, #20]
}
 8017d5e:	bf00      	nop
 8017d60:	e7fe      	b.n	8017d60 <xTaskGenericNotify+0xd4>
					break;
 8017d62:	bf00      	nop
 8017d64:	e000      	b.n	8017d68 <xTaskGenericNotify+0xdc>

					break;
 8017d66:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017d68:	7ffb      	ldrb	r3, [r7, #31]
 8017d6a:	2b01      	cmp	r3, #1
 8017d6c:	d13b      	bne.n	8017de6 <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017d6e:	6a3b      	ldr	r3, [r7, #32]
 8017d70:	3304      	adds	r3, #4
 8017d72:	4618      	mov	r0, r3
 8017d74:	f7fe fab8 	bl	80162e8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8017d78:	6a3b      	ldr	r3, [r7, #32]
 8017d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d7c:	2201      	movs	r2, #1
 8017d7e:	409a      	lsls	r2, r3
 8017d80:	4b1c      	ldr	r3, [pc, #112]	; (8017df4 <xTaskGenericNotify+0x168>)
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	4313      	orrs	r3, r2
 8017d86:	4a1b      	ldr	r2, [pc, #108]	; (8017df4 <xTaskGenericNotify+0x168>)
 8017d88:	6013      	str	r3, [r2, #0]
 8017d8a:	6a3b      	ldr	r3, [r7, #32]
 8017d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d8e:	4613      	mov	r3, r2
 8017d90:	009b      	lsls	r3, r3, #2
 8017d92:	4413      	add	r3, r2
 8017d94:	009b      	lsls	r3, r3, #2
 8017d96:	4a18      	ldr	r2, [pc, #96]	; (8017df8 <xTaskGenericNotify+0x16c>)
 8017d98:	441a      	add	r2, r3
 8017d9a:	6a3b      	ldr	r3, [r7, #32]
 8017d9c:	3304      	adds	r3, #4
 8017d9e:	4619      	mov	r1, r3
 8017da0:	4610      	mov	r0, r2
 8017da2:	f7fe fa44 	bl	801622e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017da6:	6a3b      	ldr	r3, [r7, #32]
 8017da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d00c      	beq.n	8017dc8 <xTaskGenericNotify+0x13c>
	__asm volatile
 8017dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017db2:	b672      	cpsid	i
 8017db4:	f383 8811 	msr	BASEPRI, r3
 8017db8:	f3bf 8f6f 	isb	sy
 8017dbc:	f3bf 8f4f 	dsb	sy
 8017dc0:	b662      	cpsie	i
 8017dc2:	613b      	str	r3, [r7, #16]
}
 8017dc4:	bf00      	nop
 8017dc6:	e7fe      	b.n	8017dc6 <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017dc8:	6a3b      	ldr	r3, [r7, #32]
 8017dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dcc:	4b0b      	ldr	r3, [pc, #44]	; (8017dfc <xTaskGenericNotify+0x170>)
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d907      	bls.n	8017de6 <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8017dd6:	4b0a      	ldr	r3, [pc, #40]	; (8017e00 <xTaskGenericNotify+0x174>)
 8017dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ddc:	601a      	str	r2, [r3, #0]
 8017dde:	f3bf 8f4f 	dsb	sy
 8017de2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017de6:	f000 fa95 	bl	8018314 <vPortExitCritical>

		return xReturn;
 8017dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8017dec:	4618      	mov	r0, r3
 8017dee:	3728      	adds	r7, #40	; 0x28
 8017df0:	46bd      	mov	sp, r7
 8017df2:	bd80      	pop	{r7, pc}
 8017df4:	200004ec 	.word	0x200004ec
 8017df8:	200003e8 	.word	0x200003e8
 8017dfc:	200003e4 	.word	0x200003e4
 8017e00:	e000ed04 	.word	0xe000ed04

08017e04 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b08e      	sub	sp, #56	; 0x38
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	60f8      	str	r0, [r7, #12]
 8017e0c:	60b9      	str	r1, [r7, #8]
 8017e0e:	603b      	str	r3, [r7, #0]
 8017e10:	4613      	mov	r3, r2
 8017e12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8017e14:	2301      	movs	r3, #1
 8017e16:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d10c      	bne.n	8017e38 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8017e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e22:	b672      	cpsid	i
 8017e24:	f383 8811 	msr	BASEPRI, r3
 8017e28:	f3bf 8f6f 	isb	sy
 8017e2c:	f3bf 8f4f 	dsb	sy
 8017e30:	b662      	cpsie	i
 8017e32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017e34:	bf00      	nop
 8017e36:	e7fe      	b.n	8017e36 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017e38:	f000 fb20 	bl	801847c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8017e40:	f3ef 8211 	mrs	r2, BASEPRI
 8017e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e48:	b672      	cpsid	i
 8017e4a:	f383 8811 	msr	BASEPRI, r3
 8017e4e:	f3bf 8f6f 	isb	sy
 8017e52:	f3bf 8f4f 	dsb	sy
 8017e56:	b662      	cpsie	i
 8017e58:	623a      	str	r2, [r7, #32]
 8017e5a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8017e5c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d003      	beq.n	8017e6e <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017e6a:	683b      	ldr	r3, [r7, #0]
 8017e6c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8017e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e7a:	2202      	movs	r2, #2
 8017e7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8017e80:	79fb      	ldrb	r3, [r7, #7]
 8017e82:	2b04      	cmp	r3, #4
 8017e84:	d828      	bhi.n	8017ed8 <xTaskGenericNotifyFromISR+0xd4>
 8017e86:	a201      	add	r2, pc, #4	; (adr r2, 8017e8c <xTaskGenericNotifyFromISR+0x88>)
 8017e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e8c:	08017efd 	.word	0x08017efd
 8017e90:	08017ea1 	.word	0x08017ea1
 8017e94:	08017eaf 	.word	0x08017eaf
 8017e98:	08017ebb 	.word	0x08017ebb
 8017e9c:	08017ec3 	.word	0x08017ec3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8017ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017ea4:	68bb      	ldr	r3, [r7, #8]
 8017ea6:	431a      	orrs	r2, r3
 8017ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eaa:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017eac:	e029      	b.n	8017f02 <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017eb2:	1c5a      	adds	r2, r3, #1
 8017eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017eb8:	e023      	b.n	8017f02 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ebc:	68ba      	ldr	r2, [r7, #8]
 8017ebe:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017ec0:	e01f      	b.n	8017f02 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017ec6:	2b02      	cmp	r3, #2
 8017ec8:	d003      	beq.n	8017ed2 <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ecc:	68ba      	ldr	r2, [r7, #8]
 8017ece:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017ed0:	e017      	b.n	8017f02 <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8017ed6:	e014      	b.n	8017f02 <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017ee0:	d00e      	beq.n	8017f00 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 8017ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ee6:	b672      	cpsid	i
 8017ee8:	f383 8811 	msr	BASEPRI, r3
 8017eec:	f3bf 8f6f 	isb	sy
 8017ef0:	f3bf 8f4f 	dsb	sy
 8017ef4:	b662      	cpsie	i
 8017ef6:	61bb      	str	r3, [r7, #24]
}
 8017ef8:	bf00      	nop
 8017efa:	e7fe      	b.n	8017efa <xTaskGenericNotifyFromISR+0xf6>
					break;
 8017efc:	bf00      	nop
 8017efe:	e000      	b.n	8017f02 <xTaskGenericNotifyFromISR+0xfe>
					break;
 8017f00:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017f02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017f06:	2b01      	cmp	r3, #1
 8017f08:	d147      	bne.n	8017f9a <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d00c      	beq.n	8017f2c <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 8017f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f16:	b672      	cpsid	i
 8017f18:	f383 8811 	msr	BASEPRI, r3
 8017f1c:	f3bf 8f6f 	isb	sy
 8017f20:	f3bf 8f4f 	dsb	sy
 8017f24:	b662      	cpsie	i
 8017f26:	617b      	str	r3, [r7, #20]
}
 8017f28:	bf00      	nop
 8017f2a:	e7fe      	b.n	8017f2a <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017f2c:	4b20      	ldr	r3, [pc, #128]	; (8017fb0 <xTaskGenericNotifyFromISR+0x1ac>)
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d11c      	bne.n	8017f6e <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f36:	3304      	adds	r3, #4
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f7fe f9d5 	bl	80162e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f42:	2201      	movs	r2, #1
 8017f44:	409a      	lsls	r2, r3
 8017f46:	4b1b      	ldr	r3, [pc, #108]	; (8017fb4 <xTaskGenericNotifyFromISR+0x1b0>)
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	4313      	orrs	r3, r2
 8017f4c:	4a19      	ldr	r2, [pc, #100]	; (8017fb4 <xTaskGenericNotifyFromISR+0x1b0>)
 8017f4e:	6013      	str	r3, [r2, #0]
 8017f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f54:	4613      	mov	r3, r2
 8017f56:	009b      	lsls	r3, r3, #2
 8017f58:	4413      	add	r3, r2
 8017f5a:	009b      	lsls	r3, r3, #2
 8017f5c:	4a16      	ldr	r2, [pc, #88]	; (8017fb8 <xTaskGenericNotifyFromISR+0x1b4>)
 8017f5e:	441a      	add	r2, r3
 8017f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f62:	3304      	adds	r3, #4
 8017f64:	4619      	mov	r1, r3
 8017f66:	4610      	mov	r0, r2
 8017f68:	f7fe f961 	bl	801622e <vListInsertEnd>
 8017f6c:	e005      	b.n	8017f7a <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8017f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f70:	3318      	adds	r3, #24
 8017f72:	4619      	mov	r1, r3
 8017f74:	4811      	ldr	r0, [pc, #68]	; (8017fbc <xTaskGenericNotifyFromISR+0x1b8>)
 8017f76:	f7fe f95a 	bl	801622e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f7e:	4b10      	ldr	r3, [pc, #64]	; (8017fc0 <xTaskGenericNotifyFromISR+0x1bc>)
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f84:	429a      	cmp	r2, r3
 8017f86:	d908      	bls.n	8017f9a <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8017f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d002      	beq.n	8017f94 <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8017f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f90:	2201      	movs	r2, #1
 8017f92:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8017f94:	4b0b      	ldr	r3, [pc, #44]	; (8017fc4 <xTaskGenericNotifyFromISR+0x1c0>)
 8017f96:	2201      	movs	r2, #1
 8017f98:	601a      	str	r2, [r3, #0]
 8017f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017f9e:	693b      	ldr	r3, [r7, #16]
 8017fa0:	f383 8811 	msr	BASEPRI, r3
}
 8017fa4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8017fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	3738      	adds	r7, #56	; 0x38
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}
 8017fb0:	2000050c 	.word	0x2000050c
 8017fb4:	200004ec 	.word	0x200004ec
 8017fb8:	200003e8 	.word	0x200003e8
 8017fbc:	200004a4 	.word	0x200004a4
 8017fc0:	200003e4 	.word	0x200003e4
 8017fc4:	200004f8 	.word	0x200004f8

08017fc8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	b084      	sub	sp, #16
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017fd2:	4b29      	ldr	r3, [pc, #164]	; (8018078 <prvAddCurrentTaskToDelayedList+0xb0>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017fd8:	4b28      	ldr	r3, [pc, #160]	; (801807c <prvAddCurrentTaskToDelayedList+0xb4>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	3304      	adds	r3, #4
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f7fe f982 	bl	80162e8 <uxListRemove>
 8017fe4:	4603      	mov	r3, r0
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d10b      	bne.n	8018002 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8017fea:	4b24      	ldr	r3, [pc, #144]	; (801807c <prvAddCurrentTaskToDelayedList+0xb4>)
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ff0:	2201      	movs	r2, #1
 8017ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8017ff6:	43da      	mvns	r2, r3
 8017ff8:	4b21      	ldr	r3, [pc, #132]	; (8018080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	4013      	ands	r3, r2
 8017ffe:	4a20      	ldr	r2, [pc, #128]	; (8018080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018000:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018008:	d10a      	bne.n	8018020 <prvAddCurrentTaskToDelayedList+0x58>
 801800a:	683b      	ldr	r3, [r7, #0]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d007      	beq.n	8018020 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018010:	4b1a      	ldr	r3, [pc, #104]	; (801807c <prvAddCurrentTaskToDelayedList+0xb4>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	3304      	adds	r3, #4
 8018016:	4619      	mov	r1, r3
 8018018:	481a      	ldr	r0, [pc, #104]	; (8018084 <prvAddCurrentTaskToDelayedList+0xbc>)
 801801a:	f7fe f908 	bl	801622e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801801e:	e026      	b.n	801806e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018020:	68fa      	ldr	r2, [r7, #12]
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	4413      	add	r3, r2
 8018026:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018028:	4b14      	ldr	r3, [pc, #80]	; (801807c <prvAddCurrentTaskToDelayedList+0xb4>)
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	68ba      	ldr	r2, [r7, #8]
 801802e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018030:	68ba      	ldr	r2, [r7, #8]
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	429a      	cmp	r2, r3
 8018036:	d209      	bcs.n	801804c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018038:	4b13      	ldr	r3, [pc, #76]	; (8018088 <prvAddCurrentTaskToDelayedList+0xc0>)
 801803a:	681a      	ldr	r2, [r3, #0]
 801803c:	4b0f      	ldr	r3, [pc, #60]	; (801807c <prvAddCurrentTaskToDelayedList+0xb4>)
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	3304      	adds	r3, #4
 8018042:	4619      	mov	r1, r3
 8018044:	4610      	mov	r0, r2
 8018046:	f7fe f916 	bl	8016276 <vListInsert>
}
 801804a:	e010      	b.n	801806e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801804c:	4b0f      	ldr	r3, [pc, #60]	; (801808c <prvAddCurrentTaskToDelayedList+0xc4>)
 801804e:	681a      	ldr	r2, [r3, #0]
 8018050:	4b0a      	ldr	r3, [pc, #40]	; (801807c <prvAddCurrentTaskToDelayedList+0xb4>)
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	3304      	adds	r3, #4
 8018056:	4619      	mov	r1, r3
 8018058:	4610      	mov	r0, r2
 801805a:	f7fe f90c 	bl	8016276 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801805e:	4b0c      	ldr	r3, [pc, #48]	; (8018090 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	68ba      	ldr	r2, [r7, #8]
 8018064:	429a      	cmp	r2, r3
 8018066:	d202      	bcs.n	801806e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018068:	4a09      	ldr	r2, [pc, #36]	; (8018090 <prvAddCurrentTaskToDelayedList+0xc8>)
 801806a:	68bb      	ldr	r3, [r7, #8]
 801806c:	6013      	str	r3, [r2, #0]
}
 801806e:	bf00      	nop
 8018070:	3710      	adds	r7, #16
 8018072:	46bd      	mov	sp, r7
 8018074:	bd80      	pop	{r7, pc}
 8018076:	bf00      	nop
 8018078:	200004e8 	.word	0x200004e8
 801807c:	200003e4 	.word	0x200003e4
 8018080:	200004ec 	.word	0x200004ec
 8018084:	200004d0 	.word	0x200004d0
 8018088:	200004a0 	.word	0x200004a0
 801808c:	2000049c 	.word	0x2000049c
 8018090:	20000504 	.word	0x20000504

08018094 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018094:	b480      	push	{r7}
 8018096:	b085      	sub	sp, #20
 8018098:	af00      	add	r7, sp, #0
 801809a:	60f8      	str	r0, [r7, #12]
 801809c:	60b9      	str	r1, [r7, #8]
 801809e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	3b04      	subs	r3, #4
 80180a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80180ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	3b04      	subs	r3, #4
 80180b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	f023 0201 	bic.w	r2, r3, #1
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	3b04      	subs	r3, #4
 80180c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80180c4:	4a0c      	ldr	r2, [pc, #48]	; (80180f8 <pxPortInitialiseStack+0x64>)
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	3b14      	subs	r3, #20
 80180ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80180d0:	687a      	ldr	r2, [r7, #4]
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	3b04      	subs	r3, #4
 80180da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	f06f 0202 	mvn.w	r2, #2
 80180e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	3b20      	subs	r3, #32
 80180e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80180ea:	68fb      	ldr	r3, [r7, #12]
}
 80180ec:	4618      	mov	r0, r3
 80180ee:	3714      	adds	r7, #20
 80180f0:	46bd      	mov	sp, r7
 80180f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f6:	4770      	bx	lr
 80180f8:	080180fd 	.word	0x080180fd

080180fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80180fc:	b480      	push	{r7}
 80180fe:	b085      	sub	sp, #20
 8018100:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018102:	2300      	movs	r3, #0
 8018104:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018106:	4b14      	ldr	r3, [pc, #80]	; (8018158 <prvTaskExitError+0x5c>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801810e:	d00c      	beq.n	801812a <prvTaskExitError+0x2e>
	__asm volatile
 8018110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018114:	b672      	cpsid	i
 8018116:	f383 8811 	msr	BASEPRI, r3
 801811a:	f3bf 8f6f 	isb	sy
 801811e:	f3bf 8f4f 	dsb	sy
 8018122:	b662      	cpsie	i
 8018124:	60fb      	str	r3, [r7, #12]
}
 8018126:	bf00      	nop
 8018128:	e7fe      	b.n	8018128 <prvTaskExitError+0x2c>
	__asm volatile
 801812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801812e:	b672      	cpsid	i
 8018130:	f383 8811 	msr	BASEPRI, r3
 8018134:	f3bf 8f6f 	isb	sy
 8018138:	f3bf 8f4f 	dsb	sy
 801813c:	b662      	cpsie	i
 801813e:	60bb      	str	r3, [r7, #8]
}
 8018140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018142:	bf00      	nop
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d0fc      	beq.n	8018144 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801814a:	bf00      	nop
 801814c:	bf00      	nop
 801814e:	3714      	adds	r7, #20
 8018150:	46bd      	mov	sp, r7
 8018152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018156:	4770      	bx	lr
 8018158:	20000058 	.word	0x20000058
 801815c:	00000000 	.word	0x00000000

08018160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018160:	4b07      	ldr	r3, [pc, #28]	; (8018180 <pxCurrentTCBConst2>)
 8018162:	6819      	ldr	r1, [r3, #0]
 8018164:	6808      	ldr	r0, [r1, #0]
 8018166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801816a:	f380 8809 	msr	PSP, r0
 801816e:	f3bf 8f6f 	isb	sy
 8018172:	f04f 0000 	mov.w	r0, #0
 8018176:	f380 8811 	msr	BASEPRI, r0
 801817a:	4770      	bx	lr
 801817c:	f3af 8000 	nop.w

08018180 <pxCurrentTCBConst2>:
 8018180:	200003e4 	.word	0x200003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018184:	bf00      	nop
 8018186:	bf00      	nop

08018188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018188:	4808      	ldr	r0, [pc, #32]	; (80181ac <prvPortStartFirstTask+0x24>)
 801818a:	6800      	ldr	r0, [r0, #0]
 801818c:	6800      	ldr	r0, [r0, #0]
 801818e:	f380 8808 	msr	MSP, r0
 8018192:	f04f 0000 	mov.w	r0, #0
 8018196:	f380 8814 	msr	CONTROL, r0
 801819a:	b662      	cpsie	i
 801819c:	b661      	cpsie	f
 801819e:	f3bf 8f4f 	dsb	sy
 80181a2:	f3bf 8f6f 	isb	sy
 80181a6:	df00      	svc	0
 80181a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80181aa:	bf00      	nop
 80181ac:	e000ed08 	.word	0xe000ed08

080181b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b084      	sub	sp, #16
 80181b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80181b6:	4b37      	ldr	r3, [pc, #220]	; (8018294 <xPortStartScheduler+0xe4>)
 80181b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	781b      	ldrb	r3, [r3, #0]
 80181be:	b2db      	uxtb	r3, r3
 80181c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	22ff      	movs	r2, #255	; 0xff
 80181c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	781b      	ldrb	r3, [r3, #0]
 80181cc:	b2db      	uxtb	r3, r3
 80181ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80181d0:	78fb      	ldrb	r3, [r7, #3]
 80181d2:	b2db      	uxtb	r3, r3
 80181d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80181d8:	b2da      	uxtb	r2, r3
 80181da:	4b2f      	ldr	r3, [pc, #188]	; (8018298 <xPortStartScheduler+0xe8>)
 80181dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80181de:	4b2f      	ldr	r3, [pc, #188]	; (801829c <xPortStartScheduler+0xec>)
 80181e0:	2207      	movs	r2, #7
 80181e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80181e4:	e009      	b.n	80181fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80181e6:	4b2d      	ldr	r3, [pc, #180]	; (801829c <xPortStartScheduler+0xec>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	3b01      	subs	r3, #1
 80181ec:	4a2b      	ldr	r2, [pc, #172]	; (801829c <xPortStartScheduler+0xec>)
 80181ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80181f0:	78fb      	ldrb	r3, [r7, #3]
 80181f2:	b2db      	uxtb	r3, r3
 80181f4:	005b      	lsls	r3, r3, #1
 80181f6:	b2db      	uxtb	r3, r3
 80181f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80181fa:	78fb      	ldrb	r3, [r7, #3]
 80181fc:	b2db      	uxtb	r3, r3
 80181fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018202:	2b80      	cmp	r3, #128	; 0x80
 8018204:	d0ef      	beq.n	80181e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018206:	4b25      	ldr	r3, [pc, #148]	; (801829c <xPortStartScheduler+0xec>)
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	f1c3 0307 	rsb	r3, r3, #7
 801820e:	2b04      	cmp	r3, #4
 8018210:	d00c      	beq.n	801822c <xPortStartScheduler+0x7c>
	__asm volatile
 8018212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018216:	b672      	cpsid	i
 8018218:	f383 8811 	msr	BASEPRI, r3
 801821c:	f3bf 8f6f 	isb	sy
 8018220:	f3bf 8f4f 	dsb	sy
 8018224:	b662      	cpsie	i
 8018226:	60bb      	str	r3, [r7, #8]
}
 8018228:	bf00      	nop
 801822a:	e7fe      	b.n	801822a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801822c:	4b1b      	ldr	r3, [pc, #108]	; (801829c <xPortStartScheduler+0xec>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	021b      	lsls	r3, r3, #8
 8018232:	4a1a      	ldr	r2, [pc, #104]	; (801829c <xPortStartScheduler+0xec>)
 8018234:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018236:	4b19      	ldr	r3, [pc, #100]	; (801829c <xPortStartScheduler+0xec>)
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801823e:	4a17      	ldr	r2, [pc, #92]	; (801829c <xPortStartScheduler+0xec>)
 8018240:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	b2da      	uxtb	r2, r3
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801824a:	4b15      	ldr	r3, [pc, #84]	; (80182a0 <xPortStartScheduler+0xf0>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	4a14      	ldr	r2, [pc, #80]	; (80182a0 <xPortStartScheduler+0xf0>)
 8018250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018254:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018256:	4b12      	ldr	r3, [pc, #72]	; (80182a0 <xPortStartScheduler+0xf0>)
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	4a11      	ldr	r2, [pc, #68]	; (80182a0 <xPortStartScheduler+0xf0>)
 801825c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018260:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018262:	f000 f8dd 	bl	8018420 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018266:	4b0f      	ldr	r3, [pc, #60]	; (80182a4 <xPortStartScheduler+0xf4>)
 8018268:	2200      	movs	r2, #0
 801826a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801826c:	f000 f8fc 	bl	8018468 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018270:	4b0d      	ldr	r3, [pc, #52]	; (80182a8 <xPortStartScheduler+0xf8>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	4a0c      	ldr	r2, [pc, #48]	; (80182a8 <xPortStartScheduler+0xf8>)
 8018276:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801827a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801827c:	f7ff ff84 	bl	8018188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018280:	f7ff f994 	bl	80175ac <vTaskSwitchContext>
	prvTaskExitError();
 8018284:	f7ff ff3a 	bl	80180fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018288:	2300      	movs	r3, #0
}
 801828a:	4618      	mov	r0, r3
 801828c:	3710      	adds	r7, #16
 801828e:	46bd      	mov	sp, r7
 8018290:	bd80      	pop	{r7, pc}
 8018292:	bf00      	nop
 8018294:	e000e400 	.word	0xe000e400
 8018298:	20000510 	.word	0x20000510
 801829c:	20000514 	.word	0x20000514
 80182a0:	e000ed20 	.word	0xe000ed20
 80182a4:	20000058 	.word	0x20000058
 80182a8:	e000ef34 	.word	0xe000ef34

080182ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80182ac:	b480      	push	{r7}
 80182ae:	b083      	sub	sp, #12
 80182b0:	af00      	add	r7, sp, #0
	__asm volatile
 80182b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182b6:	b672      	cpsid	i
 80182b8:	f383 8811 	msr	BASEPRI, r3
 80182bc:	f3bf 8f6f 	isb	sy
 80182c0:	f3bf 8f4f 	dsb	sy
 80182c4:	b662      	cpsie	i
 80182c6:	607b      	str	r3, [r7, #4]
}
 80182c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80182ca:	4b10      	ldr	r3, [pc, #64]	; (801830c <vPortEnterCritical+0x60>)
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	3301      	adds	r3, #1
 80182d0:	4a0e      	ldr	r2, [pc, #56]	; (801830c <vPortEnterCritical+0x60>)
 80182d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80182d4:	4b0d      	ldr	r3, [pc, #52]	; (801830c <vPortEnterCritical+0x60>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	2b01      	cmp	r3, #1
 80182da:	d111      	bne.n	8018300 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80182dc:	4b0c      	ldr	r3, [pc, #48]	; (8018310 <vPortEnterCritical+0x64>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	b2db      	uxtb	r3, r3
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d00c      	beq.n	8018300 <vPortEnterCritical+0x54>
	__asm volatile
 80182e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ea:	b672      	cpsid	i
 80182ec:	f383 8811 	msr	BASEPRI, r3
 80182f0:	f3bf 8f6f 	isb	sy
 80182f4:	f3bf 8f4f 	dsb	sy
 80182f8:	b662      	cpsie	i
 80182fa:	603b      	str	r3, [r7, #0]
}
 80182fc:	bf00      	nop
 80182fe:	e7fe      	b.n	80182fe <vPortEnterCritical+0x52>
	}
}
 8018300:	bf00      	nop
 8018302:	370c      	adds	r7, #12
 8018304:	46bd      	mov	sp, r7
 8018306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801830a:	4770      	bx	lr
 801830c:	20000058 	.word	0x20000058
 8018310:	e000ed04 	.word	0xe000ed04

08018314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018314:	b480      	push	{r7}
 8018316:	b083      	sub	sp, #12
 8018318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801831a:	4b13      	ldr	r3, [pc, #76]	; (8018368 <vPortExitCritical+0x54>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d10c      	bne.n	801833c <vPortExitCritical+0x28>
	__asm volatile
 8018322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018326:	b672      	cpsid	i
 8018328:	f383 8811 	msr	BASEPRI, r3
 801832c:	f3bf 8f6f 	isb	sy
 8018330:	f3bf 8f4f 	dsb	sy
 8018334:	b662      	cpsie	i
 8018336:	607b      	str	r3, [r7, #4]
}
 8018338:	bf00      	nop
 801833a:	e7fe      	b.n	801833a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801833c:	4b0a      	ldr	r3, [pc, #40]	; (8018368 <vPortExitCritical+0x54>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	3b01      	subs	r3, #1
 8018342:	4a09      	ldr	r2, [pc, #36]	; (8018368 <vPortExitCritical+0x54>)
 8018344:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018346:	4b08      	ldr	r3, [pc, #32]	; (8018368 <vPortExitCritical+0x54>)
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d105      	bne.n	801835a <vPortExitCritical+0x46>
 801834e:	2300      	movs	r3, #0
 8018350:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	f383 8811 	msr	BASEPRI, r3
}
 8018358:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801835a:	bf00      	nop
 801835c:	370c      	adds	r7, #12
 801835e:	46bd      	mov	sp, r7
 8018360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018364:	4770      	bx	lr
 8018366:	bf00      	nop
 8018368:	20000058 	.word	0x20000058
 801836c:	00000000 	.word	0x00000000

08018370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018370:	f3ef 8009 	mrs	r0, PSP
 8018374:	f3bf 8f6f 	isb	sy
 8018378:	4b15      	ldr	r3, [pc, #84]	; (80183d0 <pxCurrentTCBConst>)
 801837a:	681a      	ldr	r2, [r3, #0]
 801837c:	f01e 0f10 	tst.w	lr, #16
 8018380:	bf08      	it	eq
 8018382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801838a:	6010      	str	r0, [r2, #0]
 801838c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018394:	b672      	cpsid	i
 8018396:	f380 8811 	msr	BASEPRI, r0
 801839a:	f3bf 8f4f 	dsb	sy
 801839e:	f3bf 8f6f 	isb	sy
 80183a2:	b662      	cpsie	i
 80183a4:	f7ff f902 	bl	80175ac <vTaskSwitchContext>
 80183a8:	f04f 0000 	mov.w	r0, #0
 80183ac:	f380 8811 	msr	BASEPRI, r0
 80183b0:	bc09      	pop	{r0, r3}
 80183b2:	6819      	ldr	r1, [r3, #0]
 80183b4:	6808      	ldr	r0, [r1, #0]
 80183b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183ba:	f01e 0f10 	tst.w	lr, #16
 80183be:	bf08      	it	eq
 80183c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80183c4:	f380 8809 	msr	PSP, r0
 80183c8:	f3bf 8f6f 	isb	sy
 80183cc:	4770      	bx	lr
 80183ce:	bf00      	nop

080183d0 <pxCurrentTCBConst>:
 80183d0:	200003e4 	.word	0x200003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80183d4:	bf00      	nop
 80183d6:	bf00      	nop

080183d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b082      	sub	sp, #8
 80183dc:	af00      	add	r7, sp, #0
	__asm volatile
 80183de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183e2:	b672      	cpsid	i
 80183e4:	f383 8811 	msr	BASEPRI, r3
 80183e8:	f3bf 8f6f 	isb	sy
 80183ec:	f3bf 8f4f 	dsb	sy
 80183f0:	b662      	cpsie	i
 80183f2:	607b      	str	r3, [r7, #4]
}
 80183f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80183f6:	f7ff f81f 	bl	8017438 <xTaskIncrementTick>
 80183fa:	4603      	mov	r3, r0
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d003      	beq.n	8018408 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018400:	4b06      	ldr	r3, [pc, #24]	; (801841c <SysTick_Handler+0x44>)
 8018402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018406:	601a      	str	r2, [r3, #0]
 8018408:	2300      	movs	r3, #0
 801840a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801840c:	683b      	ldr	r3, [r7, #0]
 801840e:	f383 8811 	msr	BASEPRI, r3
}
 8018412:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018414:	bf00      	nop
 8018416:	3708      	adds	r7, #8
 8018418:	46bd      	mov	sp, r7
 801841a:	bd80      	pop	{r7, pc}
 801841c:	e000ed04 	.word	0xe000ed04

08018420 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018420:	b480      	push	{r7}
 8018422:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018424:	4b0b      	ldr	r3, [pc, #44]	; (8018454 <vPortSetupTimerInterrupt+0x34>)
 8018426:	2200      	movs	r2, #0
 8018428:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801842a:	4b0b      	ldr	r3, [pc, #44]	; (8018458 <vPortSetupTimerInterrupt+0x38>)
 801842c:	2200      	movs	r2, #0
 801842e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018430:	4b0a      	ldr	r3, [pc, #40]	; (801845c <vPortSetupTimerInterrupt+0x3c>)
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	4a0a      	ldr	r2, [pc, #40]	; (8018460 <vPortSetupTimerInterrupt+0x40>)
 8018436:	fba2 2303 	umull	r2, r3, r2, r3
 801843a:	099b      	lsrs	r3, r3, #6
 801843c:	4a09      	ldr	r2, [pc, #36]	; (8018464 <vPortSetupTimerInterrupt+0x44>)
 801843e:	3b01      	subs	r3, #1
 8018440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018442:	4b04      	ldr	r3, [pc, #16]	; (8018454 <vPortSetupTimerInterrupt+0x34>)
 8018444:	2207      	movs	r2, #7
 8018446:	601a      	str	r2, [r3, #0]
}
 8018448:	bf00      	nop
 801844a:	46bd      	mov	sp, r7
 801844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018450:	4770      	bx	lr
 8018452:	bf00      	nop
 8018454:	e000e010 	.word	0xe000e010
 8018458:	e000e018 	.word	0xe000e018
 801845c:	20000008 	.word	0x20000008
 8018460:	10624dd3 	.word	0x10624dd3
 8018464:	e000e014 	.word	0xe000e014

08018468 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018468:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018478 <vPortEnableVFP+0x10>
 801846c:	6801      	ldr	r1, [r0, #0]
 801846e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018472:	6001      	str	r1, [r0, #0]
 8018474:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018476:	bf00      	nop
 8018478:	e000ed88 	.word	0xe000ed88

0801847c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801847c:	b480      	push	{r7}
 801847e:	b085      	sub	sp, #20
 8018480:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018482:	f3ef 8305 	mrs	r3, IPSR
 8018486:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	2b0f      	cmp	r3, #15
 801848c:	d916      	bls.n	80184bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801848e:	4a19      	ldr	r2, [pc, #100]	; (80184f4 <vPortValidateInterruptPriority+0x78>)
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	4413      	add	r3, r2
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018498:	4b17      	ldr	r3, [pc, #92]	; (80184f8 <vPortValidateInterruptPriority+0x7c>)
 801849a:	781b      	ldrb	r3, [r3, #0]
 801849c:	7afa      	ldrb	r2, [r7, #11]
 801849e:	429a      	cmp	r2, r3
 80184a0:	d20c      	bcs.n	80184bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80184a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184a6:	b672      	cpsid	i
 80184a8:	f383 8811 	msr	BASEPRI, r3
 80184ac:	f3bf 8f6f 	isb	sy
 80184b0:	f3bf 8f4f 	dsb	sy
 80184b4:	b662      	cpsie	i
 80184b6:	607b      	str	r3, [r7, #4]
}
 80184b8:	bf00      	nop
 80184ba:	e7fe      	b.n	80184ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80184bc:	4b0f      	ldr	r3, [pc, #60]	; (80184fc <vPortValidateInterruptPriority+0x80>)
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80184c4:	4b0e      	ldr	r3, [pc, #56]	; (8018500 <vPortValidateInterruptPriority+0x84>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	429a      	cmp	r2, r3
 80184ca:	d90c      	bls.n	80184e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80184cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184d0:	b672      	cpsid	i
 80184d2:	f383 8811 	msr	BASEPRI, r3
 80184d6:	f3bf 8f6f 	isb	sy
 80184da:	f3bf 8f4f 	dsb	sy
 80184de:	b662      	cpsie	i
 80184e0:	603b      	str	r3, [r7, #0]
}
 80184e2:	bf00      	nop
 80184e4:	e7fe      	b.n	80184e4 <vPortValidateInterruptPriority+0x68>
	}
 80184e6:	bf00      	nop
 80184e8:	3714      	adds	r7, #20
 80184ea:	46bd      	mov	sp, r7
 80184ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f0:	4770      	bx	lr
 80184f2:	bf00      	nop
 80184f4:	e000e3f0 	.word	0xe000e3f0
 80184f8:	20000510 	.word	0x20000510
 80184fc:	e000ed0c 	.word	0xe000ed0c
 8018500:	20000514 	.word	0x20000514

08018504 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b08a      	sub	sp, #40	; 0x28
 8018508:	af00      	add	r7, sp, #0
 801850a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801850c:	2300      	movs	r3, #0
 801850e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018510:	f7fe fec4 	bl	801729c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018514:	4b5e      	ldr	r3, [pc, #376]	; (8018690 <pvPortMalloc+0x18c>)
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d101      	bne.n	8018520 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801851c:	f000 f920 	bl	8018760 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018520:	4b5c      	ldr	r3, [pc, #368]	; (8018694 <pvPortMalloc+0x190>)
 8018522:	681a      	ldr	r2, [r3, #0]
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	4013      	ands	r3, r2
 8018528:	2b00      	cmp	r3, #0
 801852a:	f040 8092 	bne.w	8018652 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d01f      	beq.n	8018574 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8018534:	2208      	movs	r2, #8
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	4413      	add	r3, r2
 801853a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	f003 0307 	and.w	r3, r3, #7
 8018542:	2b00      	cmp	r3, #0
 8018544:	d016      	beq.n	8018574 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	f023 0307 	bic.w	r3, r3, #7
 801854c:	3308      	adds	r3, #8
 801854e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f003 0307 	and.w	r3, r3, #7
 8018556:	2b00      	cmp	r3, #0
 8018558:	d00c      	beq.n	8018574 <pvPortMalloc+0x70>
	__asm volatile
 801855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801855e:	b672      	cpsid	i
 8018560:	f383 8811 	msr	BASEPRI, r3
 8018564:	f3bf 8f6f 	isb	sy
 8018568:	f3bf 8f4f 	dsb	sy
 801856c:	b662      	cpsie	i
 801856e:	617b      	str	r3, [r7, #20]
}
 8018570:	bf00      	nop
 8018572:	e7fe      	b.n	8018572 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d06b      	beq.n	8018652 <pvPortMalloc+0x14e>
 801857a:	4b47      	ldr	r3, [pc, #284]	; (8018698 <pvPortMalloc+0x194>)
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	687a      	ldr	r2, [r7, #4]
 8018580:	429a      	cmp	r2, r3
 8018582:	d866      	bhi.n	8018652 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018584:	4b45      	ldr	r3, [pc, #276]	; (801869c <pvPortMalloc+0x198>)
 8018586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018588:	4b44      	ldr	r3, [pc, #272]	; (801869c <pvPortMalloc+0x198>)
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801858e:	e004      	b.n	801859a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8018590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801859c:	685b      	ldr	r3, [r3, #4]
 801859e:	687a      	ldr	r2, [r7, #4]
 80185a0:	429a      	cmp	r2, r3
 80185a2:	d903      	bls.n	80185ac <pvPortMalloc+0xa8>
 80185a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d1f1      	bne.n	8018590 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80185ac:	4b38      	ldr	r3, [pc, #224]	; (8018690 <pvPortMalloc+0x18c>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d04d      	beq.n	8018652 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80185b6:	6a3b      	ldr	r3, [r7, #32]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	2208      	movs	r2, #8
 80185bc:	4413      	add	r3, r2
 80185be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80185c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c2:	681a      	ldr	r2, [r3, #0]
 80185c4:	6a3b      	ldr	r3, [r7, #32]
 80185c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80185c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ca:	685a      	ldr	r2, [r3, #4]
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	1ad2      	subs	r2, r2, r3
 80185d0:	2308      	movs	r3, #8
 80185d2:	005b      	lsls	r3, r3, #1
 80185d4:	429a      	cmp	r2, r3
 80185d6:	d921      	bls.n	801861c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80185d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	4413      	add	r3, r2
 80185de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80185e0:	69bb      	ldr	r3, [r7, #24]
 80185e2:	f003 0307 	and.w	r3, r3, #7
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d00c      	beq.n	8018604 <pvPortMalloc+0x100>
	__asm volatile
 80185ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185ee:	b672      	cpsid	i
 80185f0:	f383 8811 	msr	BASEPRI, r3
 80185f4:	f3bf 8f6f 	isb	sy
 80185f8:	f3bf 8f4f 	dsb	sy
 80185fc:	b662      	cpsie	i
 80185fe:	613b      	str	r3, [r7, #16]
}
 8018600:	bf00      	nop
 8018602:	e7fe      	b.n	8018602 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018606:	685a      	ldr	r2, [r3, #4]
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	1ad2      	subs	r2, r2, r3
 801860c:	69bb      	ldr	r3, [r7, #24]
 801860e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018612:	687a      	ldr	r2, [r7, #4]
 8018614:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018616:	69b8      	ldr	r0, [r7, #24]
 8018618:	f000 f904 	bl	8018824 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801861c:	4b1e      	ldr	r3, [pc, #120]	; (8018698 <pvPortMalloc+0x194>)
 801861e:	681a      	ldr	r2, [r3, #0]
 8018620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018622:	685b      	ldr	r3, [r3, #4]
 8018624:	1ad3      	subs	r3, r2, r3
 8018626:	4a1c      	ldr	r2, [pc, #112]	; (8018698 <pvPortMalloc+0x194>)
 8018628:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801862a:	4b1b      	ldr	r3, [pc, #108]	; (8018698 <pvPortMalloc+0x194>)
 801862c:	681a      	ldr	r2, [r3, #0]
 801862e:	4b1c      	ldr	r3, [pc, #112]	; (80186a0 <pvPortMalloc+0x19c>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	429a      	cmp	r2, r3
 8018634:	d203      	bcs.n	801863e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018636:	4b18      	ldr	r3, [pc, #96]	; (8018698 <pvPortMalloc+0x194>)
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	4a19      	ldr	r2, [pc, #100]	; (80186a0 <pvPortMalloc+0x19c>)
 801863c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018640:	685a      	ldr	r2, [r3, #4]
 8018642:	4b14      	ldr	r3, [pc, #80]	; (8018694 <pvPortMalloc+0x190>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	431a      	orrs	r2, r3
 8018648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801864a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801864e:	2200      	movs	r2, #0
 8018650:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018652:	f7fe fe31 	bl	80172b8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8018656:	69fb      	ldr	r3, [r7, #28]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d101      	bne.n	8018660 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801865c:	f7e8 fef4 	bl	8001448 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018660:	69fb      	ldr	r3, [r7, #28]
 8018662:	f003 0307 	and.w	r3, r3, #7
 8018666:	2b00      	cmp	r3, #0
 8018668:	d00c      	beq.n	8018684 <pvPortMalloc+0x180>
	__asm volatile
 801866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801866e:	b672      	cpsid	i
 8018670:	f383 8811 	msr	BASEPRI, r3
 8018674:	f3bf 8f6f 	isb	sy
 8018678:	f3bf 8f4f 	dsb	sy
 801867c:	b662      	cpsie	i
 801867e:	60fb      	str	r3, [r7, #12]
}
 8018680:	bf00      	nop
 8018682:	e7fe      	b.n	8018682 <pvPortMalloc+0x17e>
	return pvReturn;
 8018684:	69fb      	ldr	r3, [r7, #28]
}
 8018686:	4618      	mov	r0, r3
 8018688:	3728      	adds	r7, #40	; 0x28
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	20008520 	.word	0x20008520
 8018694:	2000852c 	.word	0x2000852c
 8018698:	20008524 	.word	0x20008524
 801869c:	20008518 	.word	0x20008518
 80186a0:	20008528 	.word	0x20008528

080186a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b086      	sub	sp, #24
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d04c      	beq.n	8018750 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80186b6:	2308      	movs	r3, #8
 80186b8:	425b      	negs	r3, r3
 80186ba:	697a      	ldr	r2, [r7, #20]
 80186bc:	4413      	add	r3, r2
 80186be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80186c0:	697b      	ldr	r3, [r7, #20]
 80186c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80186c4:	693b      	ldr	r3, [r7, #16]
 80186c6:	685a      	ldr	r2, [r3, #4]
 80186c8:	4b23      	ldr	r3, [pc, #140]	; (8018758 <vPortFree+0xb4>)
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	4013      	ands	r3, r2
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d10c      	bne.n	80186ec <vPortFree+0x48>
	__asm volatile
 80186d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186d6:	b672      	cpsid	i
 80186d8:	f383 8811 	msr	BASEPRI, r3
 80186dc:	f3bf 8f6f 	isb	sy
 80186e0:	f3bf 8f4f 	dsb	sy
 80186e4:	b662      	cpsie	i
 80186e6:	60fb      	str	r3, [r7, #12]
}
 80186e8:	bf00      	nop
 80186ea:	e7fe      	b.n	80186ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d00c      	beq.n	801870e <vPortFree+0x6a>
	__asm volatile
 80186f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186f8:	b672      	cpsid	i
 80186fa:	f383 8811 	msr	BASEPRI, r3
 80186fe:	f3bf 8f6f 	isb	sy
 8018702:	f3bf 8f4f 	dsb	sy
 8018706:	b662      	cpsie	i
 8018708:	60bb      	str	r3, [r7, #8]
}
 801870a:	bf00      	nop
 801870c:	e7fe      	b.n	801870c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801870e:	693b      	ldr	r3, [r7, #16]
 8018710:	685a      	ldr	r2, [r3, #4]
 8018712:	4b11      	ldr	r3, [pc, #68]	; (8018758 <vPortFree+0xb4>)
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	4013      	ands	r3, r2
 8018718:	2b00      	cmp	r3, #0
 801871a:	d019      	beq.n	8018750 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801871c:	693b      	ldr	r3, [r7, #16]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d115      	bne.n	8018750 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018724:	693b      	ldr	r3, [r7, #16]
 8018726:	685a      	ldr	r2, [r3, #4]
 8018728:	4b0b      	ldr	r3, [pc, #44]	; (8018758 <vPortFree+0xb4>)
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	43db      	mvns	r3, r3
 801872e:	401a      	ands	r2, r3
 8018730:	693b      	ldr	r3, [r7, #16]
 8018732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018734:	f7fe fdb2 	bl	801729c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018738:	693b      	ldr	r3, [r7, #16]
 801873a:	685a      	ldr	r2, [r3, #4]
 801873c:	4b07      	ldr	r3, [pc, #28]	; (801875c <vPortFree+0xb8>)
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	4413      	add	r3, r2
 8018742:	4a06      	ldr	r2, [pc, #24]	; (801875c <vPortFree+0xb8>)
 8018744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018746:	6938      	ldr	r0, [r7, #16]
 8018748:	f000 f86c 	bl	8018824 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801874c:	f7fe fdb4 	bl	80172b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018750:	bf00      	nop
 8018752:	3718      	adds	r7, #24
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}
 8018758:	2000852c 	.word	0x2000852c
 801875c:	20008524 	.word	0x20008524

08018760 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018760:	b480      	push	{r7}
 8018762:	b085      	sub	sp, #20
 8018764:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801876a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801876c:	4b27      	ldr	r3, [pc, #156]	; (801880c <prvHeapInit+0xac>)
 801876e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	f003 0307 	and.w	r3, r3, #7
 8018776:	2b00      	cmp	r3, #0
 8018778:	d00c      	beq.n	8018794 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	3307      	adds	r3, #7
 801877e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	f023 0307 	bic.w	r3, r3, #7
 8018786:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018788:	68ba      	ldr	r2, [r7, #8]
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	1ad3      	subs	r3, r2, r3
 801878e:	4a1f      	ldr	r2, [pc, #124]	; (801880c <prvHeapInit+0xac>)
 8018790:	4413      	add	r3, r2
 8018792:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018798:	4a1d      	ldr	r2, [pc, #116]	; (8018810 <prvHeapInit+0xb0>)
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801879e:	4b1c      	ldr	r3, [pc, #112]	; (8018810 <prvHeapInit+0xb0>)
 80187a0:	2200      	movs	r2, #0
 80187a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	68ba      	ldr	r2, [r7, #8]
 80187a8:	4413      	add	r3, r2
 80187aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80187ac:	2208      	movs	r2, #8
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	1a9b      	subs	r3, r3, r2
 80187b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	f023 0307 	bic.w	r3, r3, #7
 80187ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	4a15      	ldr	r2, [pc, #84]	; (8018814 <prvHeapInit+0xb4>)
 80187c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80187c2:	4b14      	ldr	r3, [pc, #80]	; (8018814 <prvHeapInit+0xb4>)
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	2200      	movs	r2, #0
 80187c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80187ca:	4b12      	ldr	r3, [pc, #72]	; (8018814 <prvHeapInit+0xb4>)
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	2200      	movs	r2, #0
 80187d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80187d6:	683b      	ldr	r3, [r7, #0]
 80187d8:	68fa      	ldr	r2, [r7, #12]
 80187da:	1ad2      	subs	r2, r2, r3
 80187dc:	683b      	ldr	r3, [r7, #0]
 80187de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80187e0:	4b0c      	ldr	r3, [pc, #48]	; (8018814 <prvHeapInit+0xb4>)
 80187e2:	681a      	ldr	r2, [r3, #0]
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80187e8:	683b      	ldr	r3, [r7, #0]
 80187ea:	685b      	ldr	r3, [r3, #4]
 80187ec:	4a0a      	ldr	r2, [pc, #40]	; (8018818 <prvHeapInit+0xb8>)
 80187ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80187f0:	683b      	ldr	r3, [r7, #0]
 80187f2:	685b      	ldr	r3, [r3, #4]
 80187f4:	4a09      	ldr	r2, [pc, #36]	; (801881c <prvHeapInit+0xbc>)
 80187f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80187f8:	4b09      	ldr	r3, [pc, #36]	; (8018820 <prvHeapInit+0xc0>)
 80187fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80187fe:	601a      	str	r2, [r3, #0]
}
 8018800:	bf00      	nop
 8018802:	3714      	adds	r7, #20
 8018804:	46bd      	mov	sp, r7
 8018806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880a:	4770      	bx	lr
 801880c:	20000518 	.word	0x20000518
 8018810:	20008518 	.word	0x20008518
 8018814:	20008520 	.word	0x20008520
 8018818:	20008528 	.word	0x20008528
 801881c:	20008524 	.word	0x20008524
 8018820:	2000852c 	.word	0x2000852c

08018824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018824:	b480      	push	{r7}
 8018826:	b085      	sub	sp, #20
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801882c:	4b28      	ldr	r3, [pc, #160]	; (80188d0 <prvInsertBlockIntoFreeList+0xac>)
 801882e:	60fb      	str	r3, [r7, #12]
 8018830:	e002      	b.n	8018838 <prvInsertBlockIntoFreeList+0x14>
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	60fb      	str	r3, [r7, #12]
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	687a      	ldr	r2, [r7, #4]
 801883e:	429a      	cmp	r2, r3
 8018840:	d8f7      	bhi.n	8018832 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	685b      	ldr	r3, [r3, #4]
 801884a:	68ba      	ldr	r2, [r7, #8]
 801884c:	4413      	add	r3, r2
 801884e:	687a      	ldr	r2, [r7, #4]
 8018850:	429a      	cmp	r2, r3
 8018852:	d108      	bne.n	8018866 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	685a      	ldr	r2, [r3, #4]
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	685b      	ldr	r3, [r3, #4]
 801885c:	441a      	add	r2, r3
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	685b      	ldr	r3, [r3, #4]
 801886e:	68ba      	ldr	r2, [r7, #8]
 8018870:	441a      	add	r2, r3
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	429a      	cmp	r2, r3
 8018878:	d118      	bne.n	80188ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	681a      	ldr	r2, [r3, #0]
 801887e:	4b15      	ldr	r3, [pc, #84]	; (80188d4 <prvInsertBlockIntoFreeList+0xb0>)
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	429a      	cmp	r2, r3
 8018884:	d00d      	beq.n	80188a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	685a      	ldr	r2, [r3, #4]
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	685b      	ldr	r3, [r3, #4]
 8018890:	441a      	add	r2, r3
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	681a      	ldr	r2, [r3, #0]
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	601a      	str	r2, [r3, #0]
 80188a0:	e008      	b.n	80188b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80188a2:	4b0c      	ldr	r3, [pc, #48]	; (80188d4 <prvInsertBlockIntoFreeList+0xb0>)
 80188a4:	681a      	ldr	r2, [r3, #0]
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	601a      	str	r2, [r3, #0]
 80188aa:	e003      	b.n	80188b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	681a      	ldr	r2, [r3, #0]
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80188b4:	68fa      	ldr	r2, [r7, #12]
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	429a      	cmp	r2, r3
 80188ba:	d002      	beq.n	80188c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	687a      	ldr	r2, [r7, #4]
 80188c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80188c2:	bf00      	nop
 80188c4:	3714      	adds	r7, #20
 80188c6:	46bd      	mov	sp, r7
 80188c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188cc:	4770      	bx	lr
 80188ce:	bf00      	nop
 80188d0:	20008518 	.word	0x20008518
 80188d4:	20008520 	.word	0x20008520

080188d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80188dc:	2201      	movs	r2, #1
 80188de:	490e      	ldr	r1, [pc, #56]	; (8018918 <MX_USB_HOST_Init+0x40>)
 80188e0:	480e      	ldr	r0, [pc, #56]	; (801891c <MX_USB_HOST_Init+0x44>)
 80188e2:	f7fb fc7b 	bl	80141dc <USBH_Init>
 80188e6:	4603      	mov	r3, r0
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d001      	beq.n	80188f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80188ec:	f7ea f9d4 	bl	8002c98 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80188f0:	490b      	ldr	r1, [pc, #44]	; (8018920 <MX_USB_HOST_Init+0x48>)
 80188f2:	480a      	ldr	r0, [pc, #40]	; (801891c <MX_USB_HOST_Init+0x44>)
 80188f4:	f7fb fd28 	bl	8014348 <USBH_RegisterClass>
 80188f8:	4603      	mov	r3, r0
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d001      	beq.n	8018902 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80188fe:	f7ea f9cb 	bl	8002c98 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8018902:	4806      	ldr	r0, [pc, #24]	; (801891c <MX_USB_HOST_Init+0x44>)
 8018904:	f7fb fdac 	bl	8014460 <USBH_Start>
 8018908:	4603      	mov	r3, r0
 801890a:	2b00      	cmp	r3, #0
 801890c:	d001      	beq.n	8018912 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801890e:	f7ea f9c3 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8018912:	bf00      	nop
 8018914:	bd80      	pop	{r7, pc}
 8018916:	bf00      	nop
 8018918:	08018925 	.word	0x08018925
 801891c:	2004d738 	.word	0x2004d738
 8018920:	20000038 	.word	0x20000038

08018924 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8018924:	b480      	push	{r7}
 8018926:	b083      	sub	sp, #12
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
 801892c:	460b      	mov	r3, r1
 801892e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8018930:	78fb      	ldrb	r3, [r7, #3]
 8018932:	3b01      	subs	r3, #1
 8018934:	2b04      	cmp	r3, #4
 8018936:	d819      	bhi.n	801896c <USBH_UserProcess+0x48>
 8018938:	a201      	add	r2, pc, #4	; (adr r2, 8018940 <USBH_UserProcess+0x1c>)
 801893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801893e:	bf00      	nop
 8018940:	0801896d 	.word	0x0801896d
 8018944:	0801895d 	.word	0x0801895d
 8018948:	0801896d 	.word	0x0801896d
 801894c:	08018965 	.word	0x08018965
 8018950:	08018955 	.word	0x08018955
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018954:	4b09      	ldr	r3, [pc, #36]	; (801897c <USBH_UserProcess+0x58>)
 8018956:	2203      	movs	r2, #3
 8018958:	701a      	strb	r2, [r3, #0]
  break;
 801895a:	e008      	b.n	801896e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801895c:	4b07      	ldr	r3, [pc, #28]	; (801897c <USBH_UserProcess+0x58>)
 801895e:	2202      	movs	r2, #2
 8018960:	701a      	strb	r2, [r3, #0]
  break;
 8018962:	e004      	b.n	801896e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018964:	4b05      	ldr	r3, [pc, #20]	; (801897c <USBH_UserProcess+0x58>)
 8018966:	2201      	movs	r2, #1
 8018968:	701a      	strb	r2, [r3, #0]
  break;
 801896a:	e000      	b.n	801896e <USBH_UserProcess+0x4a>

  default:
  break;
 801896c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801896e:	bf00      	nop
 8018970:	370c      	adds	r7, #12
 8018972:	46bd      	mov	sp, r7
 8018974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018978:	4770      	bx	lr
 801897a:	bf00      	nop
 801897c:	20008530 	.word	0x20008530

08018980 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b08a      	sub	sp, #40	; 0x28
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018988:	f107 0314 	add.w	r3, r7, #20
 801898c:	2200      	movs	r2, #0
 801898e:	601a      	str	r2, [r3, #0]
 8018990:	605a      	str	r2, [r3, #4]
 8018992:	609a      	str	r2, [r3, #8]
 8018994:	60da      	str	r2, [r3, #12]
 8018996:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80189a0:	d13c      	bne.n	8018a1c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80189a2:	4b20      	ldr	r3, [pc, #128]	; (8018a24 <HAL_HCD_MspInit+0xa4>)
 80189a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189a6:	4a1f      	ldr	r2, [pc, #124]	; (8018a24 <HAL_HCD_MspInit+0xa4>)
 80189a8:	f043 0301 	orr.w	r3, r3, #1
 80189ac:	6313      	str	r3, [r2, #48]	; 0x30
 80189ae:	4b1d      	ldr	r3, [pc, #116]	; (8018a24 <HAL_HCD_MspInit+0xa4>)
 80189b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189b2:	f003 0301 	and.w	r3, r3, #1
 80189b6:	613b      	str	r3, [r7, #16]
 80189b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80189ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80189be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80189c0:	2302      	movs	r3, #2
 80189c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80189c4:	2300      	movs	r3, #0
 80189c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80189c8:	2303      	movs	r3, #3
 80189ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80189cc:	230a      	movs	r3, #10
 80189ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80189d0:	f107 0314 	add.w	r3, r7, #20
 80189d4:	4619      	mov	r1, r3
 80189d6:	4814      	ldr	r0, [pc, #80]	; (8018a28 <HAL_HCD_MspInit+0xa8>)
 80189d8:	f7ef fe26 	bl	8008628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80189dc:	4b11      	ldr	r3, [pc, #68]	; (8018a24 <HAL_HCD_MspInit+0xa4>)
 80189de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189e0:	4a10      	ldr	r2, [pc, #64]	; (8018a24 <HAL_HCD_MspInit+0xa4>)
 80189e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189e6:	6353      	str	r3, [r2, #52]	; 0x34
 80189e8:	4b0e      	ldr	r3, [pc, #56]	; (8018a24 <HAL_HCD_MspInit+0xa4>)
 80189ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80189f0:	60fb      	str	r3, [r7, #12]
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	4b0b      	ldr	r3, [pc, #44]	; (8018a24 <HAL_HCD_MspInit+0xa4>)
 80189f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189f8:	4a0a      	ldr	r2, [pc, #40]	; (8018a24 <HAL_HCD_MspInit+0xa4>)
 80189fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80189fe:	6453      	str	r3, [r2, #68]	; 0x44
 8018a00:	4b08      	ldr	r3, [pc, #32]	; (8018a24 <HAL_HCD_MspInit+0xa4>)
 8018a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018a08:	60bb      	str	r3, [r7, #8]
 8018a0a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018a0c:	2200      	movs	r2, #0
 8018a0e:	2105      	movs	r1, #5
 8018a10:	2043      	movs	r0, #67	; 0x43
 8018a12:	f7ee fb6f 	bl	80070f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018a16:	2043      	movs	r0, #67	; 0x43
 8018a18:	f7ee fb88 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018a1c:	bf00      	nop
 8018a1e:	3728      	adds	r7, #40	; 0x28
 8018a20:	46bd      	mov	sp, r7
 8018a22:	bd80      	pop	{r7, pc}
 8018a24:	40023800 	.word	0x40023800
 8018a28:	40020000 	.word	0x40020000

08018a2c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b082      	sub	sp, #8
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	f7fc f9bd 	bl	8014dba <USBH_LL_IncTimer>
}
 8018a40:	bf00      	nop
 8018a42:	3708      	adds	r7, #8
 8018a44:	46bd      	mov	sp, r7
 8018a46:	bd80      	pop	{r7, pc}

08018a48 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b082      	sub	sp, #8
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7fc fa01 	bl	8014e5e <USBH_LL_Connect>
}
 8018a5c:	bf00      	nop
 8018a5e:	3708      	adds	r7, #8
 8018a60:	46bd      	mov	sp, r7
 8018a62:	bd80      	pop	{r7, pc}

08018a64 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b082      	sub	sp, #8
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018a72:	4618      	mov	r0, r3
 8018a74:	f7fc fa16 	bl	8014ea4 <USBH_LL_Disconnect>
}
 8018a78:	bf00      	nop
 8018a7a:	3708      	adds	r7, #8
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}

08018a80 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b082      	sub	sp, #8
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
 8018a88:	460b      	mov	r3, r1
 8018a8a:	70fb      	strb	r3, [r7, #3]
 8018a8c:	4613      	mov	r3, r2
 8018a8e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018a96:	4618      	mov	r0, r3
 8018a98:	f7fc fa4b 	bl	8014f32 <USBH_LL_NotifyURBChange>
#endif
}
 8018a9c:	bf00      	nop
 8018a9e:	3708      	adds	r7, #8
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}

08018aa4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b082      	sub	sp, #8
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	f7fc f9ab 	bl	8014e0e <USBH_LL_PortEnabled>
}
 8018ab8:	bf00      	nop
 8018aba:	3708      	adds	r7, #8
 8018abc:	46bd      	mov	sp, r7
 8018abe:	bd80      	pop	{r7, pc}

08018ac0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b082      	sub	sp, #8
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f7fc f9b7 	bl	8014e42 <USBH_LL_PortDisabled>
}
 8018ad4:	bf00      	nop
 8018ad6:	3708      	adds	r7, #8
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	bd80      	pop	{r7, pc}

08018adc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b082      	sub	sp, #8
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8018aea:	2b01      	cmp	r3, #1
 8018aec:	d12a      	bne.n	8018b44 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8018aee:	4a18      	ldr	r2, [pc, #96]	; (8018b50 <USBH_LL_Init+0x74>)
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	4a15      	ldr	r2, [pc, #84]	; (8018b50 <USBH_LL_Init+0x74>)
 8018afa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018afe:	4b14      	ldr	r3, [pc, #80]	; (8018b50 <USBH_LL_Init+0x74>)
 8018b00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018b04:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8018b06:	4b12      	ldr	r3, [pc, #72]	; (8018b50 <USBH_LL_Init+0x74>)
 8018b08:	2208      	movs	r2, #8
 8018b0a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8018b0c:	4b10      	ldr	r3, [pc, #64]	; (8018b50 <USBH_LL_Init+0x74>)
 8018b0e:	2201      	movs	r2, #1
 8018b10:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018b12:	4b0f      	ldr	r3, [pc, #60]	; (8018b50 <USBH_LL_Init+0x74>)
 8018b14:	2200      	movs	r2, #0
 8018b16:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8018b18:	4b0d      	ldr	r3, [pc, #52]	; (8018b50 <USBH_LL_Init+0x74>)
 8018b1a:	2202      	movs	r2, #2
 8018b1c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018b1e:	4b0c      	ldr	r3, [pc, #48]	; (8018b50 <USBH_LL_Init+0x74>)
 8018b20:	2200      	movs	r2, #0
 8018b22:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8018b24:	480a      	ldr	r0, [pc, #40]	; (8018b50 <USBH_LL_Init+0x74>)
 8018b26:	f7f0 f8a6 	bl	8008c76 <HAL_HCD_Init>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d001      	beq.n	8018b34 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8018b30:	f7ea f8b2 	bl	8002c98 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8018b34:	4806      	ldr	r0, [pc, #24]	; (8018b50 <USBH_LL_Init+0x74>)
 8018b36:	f7f0 fc83 	bl	8009440 <HAL_HCD_GetCurrentFrame>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	4619      	mov	r1, r3
 8018b3e:	6878      	ldr	r0, [r7, #4]
 8018b40:	f7fc f92c 	bl	8014d9c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8018b44:	2300      	movs	r3, #0
}
 8018b46:	4618      	mov	r0, r3
 8018b48:	3708      	adds	r7, #8
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	bd80      	pop	{r7, pc}
 8018b4e:	bf00      	nop
 8018b50:	2004db1c 	.word	0x2004db1c

08018b54 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b084      	sub	sp, #16
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018b60:	2300      	movs	r3, #0
 8018b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f7f0 fbf2 	bl	8009354 <HAL_HCD_Start>
 8018b70:	4603      	mov	r3, r0
 8018b72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018b74:	7bfb      	ldrb	r3, [r7, #15]
 8018b76:	4618      	mov	r0, r3
 8018b78:	f000 f95c 	bl	8018e34 <USBH_Get_USB_Status>
 8018b7c:	4603      	mov	r3, r0
 8018b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b82:	4618      	mov	r0, r3
 8018b84:	3710      	adds	r7, #16
 8018b86:	46bd      	mov	sp, r7
 8018b88:	bd80      	pop	{r7, pc}

08018b8a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8018b8a:	b580      	push	{r7, lr}
 8018b8c:	b084      	sub	sp, #16
 8018b8e:	af00      	add	r7, sp, #0
 8018b90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b92:	2300      	movs	r3, #0
 8018b94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018b96:	2300      	movs	r3, #0
 8018b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f7f0 fbfa 	bl	800939a <HAL_HCD_Stop>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018baa:	7bfb      	ldrb	r3, [r7, #15]
 8018bac:	4618      	mov	r0, r3
 8018bae:	f000 f941 	bl	8018e34 <USBH_Get_USB_Status>
 8018bb2:	4603      	mov	r3, r0
 8018bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8018bb8:	4618      	mov	r0, r3
 8018bba:	3710      	adds	r7, #16
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	bd80      	pop	{r7, pc}

08018bc0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b084      	sub	sp, #16
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8018bc8:	2301      	movs	r3, #1
 8018bca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f7f0 fc42 	bl	800945c <HAL_HCD_GetCurrentSpeed>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	2b02      	cmp	r3, #2
 8018bdc:	d00c      	beq.n	8018bf8 <USBH_LL_GetSpeed+0x38>
 8018bde:	2b02      	cmp	r3, #2
 8018be0:	d80d      	bhi.n	8018bfe <USBH_LL_GetSpeed+0x3e>
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d002      	beq.n	8018bec <USBH_LL_GetSpeed+0x2c>
 8018be6:	2b01      	cmp	r3, #1
 8018be8:	d003      	beq.n	8018bf2 <USBH_LL_GetSpeed+0x32>
 8018bea:	e008      	b.n	8018bfe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8018bec:	2300      	movs	r3, #0
 8018bee:	73fb      	strb	r3, [r7, #15]
    break;
 8018bf0:	e008      	b.n	8018c04 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8018bf2:	2301      	movs	r3, #1
 8018bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8018bf6:	e005      	b.n	8018c04 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8018bf8:	2302      	movs	r3, #2
 8018bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8018bfc:	e002      	b.n	8018c04 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8018bfe:	2301      	movs	r3, #1
 8018c00:	73fb      	strb	r3, [r7, #15]
    break;
 8018c02:	bf00      	nop
  }
  return  speed;
 8018c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c06:	4618      	mov	r0, r3
 8018c08:	3710      	adds	r7, #16
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}

08018c0e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8018c0e:	b580      	push	{r7, lr}
 8018c10:	b084      	sub	sp, #16
 8018c12:	af00      	add	r7, sp, #0
 8018c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c16:	2300      	movs	r3, #0
 8018c18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018c1a:	2300      	movs	r3, #0
 8018c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018c24:	4618      	mov	r0, r3
 8018c26:	f7f0 fbd5 	bl	80093d4 <HAL_HCD_ResetPort>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018c2e:	7bfb      	ldrb	r3, [r7, #15]
 8018c30:	4618      	mov	r0, r3
 8018c32:	f000 f8ff 	bl	8018e34 <USBH_Get_USB_Status>
 8018c36:	4603      	mov	r3, r0
 8018c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	3710      	adds	r7, #16
 8018c40:	46bd      	mov	sp, r7
 8018c42:	bd80      	pop	{r7, pc}

08018c44 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b082      	sub	sp, #8
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
 8018c4c:	460b      	mov	r3, r1
 8018c4e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018c56:	78fa      	ldrb	r2, [r7, #3]
 8018c58:	4611      	mov	r1, r2
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	f7f0 fbdc 	bl	8009418 <HAL_HCD_HC_GetXferCount>
 8018c60:	4603      	mov	r3, r0
}
 8018c62:	4618      	mov	r0, r3
 8018c64:	3708      	adds	r7, #8
 8018c66:	46bd      	mov	sp, r7
 8018c68:	bd80      	pop	{r7, pc}

08018c6a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8018c6a:	b590      	push	{r4, r7, lr}
 8018c6c:	b089      	sub	sp, #36	; 0x24
 8018c6e:	af04      	add	r7, sp, #16
 8018c70:	6078      	str	r0, [r7, #4]
 8018c72:	4608      	mov	r0, r1
 8018c74:	4611      	mov	r1, r2
 8018c76:	461a      	mov	r2, r3
 8018c78:	4603      	mov	r3, r0
 8018c7a:	70fb      	strb	r3, [r7, #3]
 8018c7c:	460b      	mov	r3, r1
 8018c7e:	70bb      	strb	r3, [r7, #2]
 8018c80:	4613      	mov	r3, r2
 8018c82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c84:	2300      	movs	r3, #0
 8018c86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018c88:	2300      	movs	r3, #0
 8018c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8018c92:	787c      	ldrb	r4, [r7, #1]
 8018c94:	78ba      	ldrb	r2, [r7, #2]
 8018c96:	78f9      	ldrb	r1, [r7, #3]
 8018c98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018c9a:	9302      	str	r3, [sp, #8]
 8018c9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018ca0:	9301      	str	r3, [sp, #4]
 8018ca2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018ca6:	9300      	str	r3, [sp, #0]
 8018ca8:	4623      	mov	r3, r4
 8018caa:	f7f0 f846 	bl	8008d3a <HAL_HCD_HC_Init>
 8018cae:	4603      	mov	r3, r0
 8018cb0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8018cb2:	7bfb      	ldrb	r3, [r7, #15]
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	f000 f8bd 	bl	8018e34 <USBH_Get_USB_Status>
 8018cba:	4603      	mov	r3, r0
 8018cbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018cbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	3714      	adds	r7, #20
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	bd90      	pop	{r4, r7, pc}

08018cc8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b084      	sub	sp, #16
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]
 8018cd0:	460b      	mov	r3, r1
 8018cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018cd8:	2300      	movs	r3, #0
 8018cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018ce2:	78fa      	ldrb	r2, [r7, #3]
 8018ce4:	4611      	mov	r1, r2
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	f7f0 f8b6 	bl	8008e58 <HAL_HCD_HC_Halt>
 8018cec:	4603      	mov	r3, r0
 8018cee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018cf0:	7bfb      	ldrb	r3, [r7, #15]
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f000 f89e 	bl	8018e34 <USBH_Get_USB_Status>
 8018cf8:	4603      	mov	r3, r0
 8018cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8018cfe:	4618      	mov	r0, r3
 8018d00:	3710      	adds	r7, #16
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bd80      	pop	{r7, pc}

08018d06 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8018d06:	b590      	push	{r4, r7, lr}
 8018d08:	b089      	sub	sp, #36	; 0x24
 8018d0a:	af04      	add	r7, sp, #16
 8018d0c:	6078      	str	r0, [r7, #4]
 8018d0e:	4608      	mov	r0, r1
 8018d10:	4611      	mov	r1, r2
 8018d12:	461a      	mov	r2, r3
 8018d14:	4603      	mov	r3, r0
 8018d16:	70fb      	strb	r3, [r7, #3]
 8018d18:	460b      	mov	r3, r1
 8018d1a:	70bb      	strb	r3, [r7, #2]
 8018d1c:	4613      	mov	r3, r2
 8018d1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d20:	2300      	movs	r3, #0
 8018d22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018d24:	2300      	movs	r3, #0
 8018d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8018d2e:	787c      	ldrb	r4, [r7, #1]
 8018d30:	78ba      	ldrb	r2, [r7, #2]
 8018d32:	78f9      	ldrb	r1, [r7, #3]
 8018d34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018d38:	9303      	str	r3, [sp, #12]
 8018d3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018d3c:	9302      	str	r3, [sp, #8]
 8018d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d40:	9301      	str	r3, [sp, #4]
 8018d42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018d46:	9300      	str	r3, [sp, #0]
 8018d48:	4623      	mov	r3, r4
 8018d4a:	f7f0 f8a9 	bl	8008ea0 <HAL_HCD_HC_SubmitRequest>
 8018d4e:	4603      	mov	r3, r0
 8018d50:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8018d52:	7bfb      	ldrb	r3, [r7, #15]
 8018d54:	4618      	mov	r0, r3
 8018d56:	f000 f86d 	bl	8018e34 <USBH_Get_USB_Status>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d60:	4618      	mov	r0, r3
 8018d62:	3714      	adds	r7, #20
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bd90      	pop	{r4, r7, pc}

08018d68 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b082      	sub	sp, #8
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
 8018d70:	460b      	mov	r3, r1
 8018d72:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018d7a:	78fa      	ldrb	r2, [r7, #3]
 8018d7c:	4611      	mov	r1, r2
 8018d7e:	4618      	mov	r0, r3
 8018d80:	f7f0 fb36 	bl	80093f0 <HAL_HCD_HC_GetURBState>
 8018d84:	4603      	mov	r3, r0
}
 8018d86:	4618      	mov	r0, r3
 8018d88:	3708      	adds	r7, #8
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}

08018d8e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8018d8e:	b580      	push	{r7, lr}
 8018d90:	b082      	sub	sp, #8
 8018d92:	af00      	add	r7, sp, #0
 8018d94:	6078      	str	r0, [r7, #4]
 8018d96:	460b      	mov	r3, r1
 8018d98:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8018da0:	2b01      	cmp	r3, #1
 8018da2:	d103      	bne.n	8018dac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8018da4:	78fb      	ldrb	r3, [r7, #3]
 8018da6:	4618      	mov	r0, r3
 8018da8:	f000 f870 	bl	8018e8c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8018dac:	20c8      	movs	r0, #200	; 0xc8
 8018dae:	f7ed fe19 	bl	80069e4 <HAL_Delay>
  return USBH_OK;
 8018db2:	2300      	movs	r3, #0
}
 8018db4:	4618      	mov	r0, r3
 8018db6:	3708      	adds	r7, #8
 8018db8:	46bd      	mov	sp, r7
 8018dba:	bd80      	pop	{r7, pc}

08018dbc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8018dbc:	b480      	push	{r7}
 8018dbe:	b085      	sub	sp, #20
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
 8018dc4:	460b      	mov	r3, r1
 8018dc6:	70fb      	strb	r3, [r7, #3]
 8018dc8:	4613      	mov	r3, r2
 8018dca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018dd2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018dd4:	78fb      	ldrb	r3, [r7, #3]
 8018dd6:	68fa      	ldr	r2, [r7, #12]
 8018dd8:	212c      	movs	r1, #44	; 0x2c
 8018dda:	fb01 f303 	mul.w	r3, r1, r3
 8018dde:	4413      	add	r3, r2
 8018de0:	333b      	adds	r3, #59	; 0x3b
 8018de2:	781b      	ldrb	r3, [r3, #0]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d009      	beq.n	8018dfc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018de8:	78fb      	ldrb	r3, [r7, #3]
 8018dea:	68fa      	ldr	r2, [r7, #12]
 8018dec:	212c      	movs	r1, #44	; 0x2c
 8018dee:	fb01 f303 	mul.w	r3, r1, r3
 8018df2:	4413      	add	r3, r2
 8018df4:	3354      	adds	r3, #84	; 0x54
 8018df6:	78ba      	ldrb	r2, [r7, #2]
 8018df8:	701a      	strb	r2, [r3, #0]
 8018dfa:	e008      	b.n	8018e0e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8018dfc:	78fb      	ldrb	r3, [r7, #3]
 8018dfe:	68fa      	ldr	r2, [r7, #12]
 8018e00:	212c      	movs	r1, #44	; 0x2c
 8018e02:	fb01 f303 	mul.w	r3, r1, r3
 8018e06:	4413      	add	r3, r2
 8018e08:	3355      	adds	r3, #85	; 0x55
 8018e0a:	78ba      	ldrb	r2, [r7, #2]
 8018e0c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8018e0e:	2300      	movs	r3, #0
}
 8018e10:	4618      	mov	r0, r3
 8018e12:	3714      	adds	r7, #20
 8018e14:	46bd      	mov	sp, r7
 8018e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1a:	4770      	bx	lr

08018e1c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b082      	sub	sp, #8
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8018e24:	6878      	ldr	r0, [r7, #4]
 8018e26:	f7ed fddd 	bl	80069e4 <HAL_Delay>
}
 8018e2a:	bf00      	nop
 8018e2c:	3708      	adds	r7, #8
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}
	...

08018e34 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018e34:	b480      	push	{r7}
 8018e36:	b085      	sub	sp, #20
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018e3e:	2300      	movs	r3, #0
 8018e40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018e42:	79fb      	ldrb	r3, [r7, #7]
 8018e44:	2b03      	cmp	r3, #3
 8018e46:	d817      	bhi.n	8018e78 <USBH_Get_USB_Status+0x44>
 8018e48:	a201      	add	r2, pc, #4	; (adr r2, 8018e50 <USBH_Get_USB_Status+0x1c>)
 8018e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e4e:	bf00      	nop
 8018e50:	08018e61 	.word	0x08018e61
 8018e54:	08018e67 	.word	0x08018e67
 8018e58:	08018e6d 	.word	0x08018e6d
 8018e5c:	08018e73 	.word	0x08018e73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8018e60:	2300      	movs	r3, #0
 8018e62:	73fb      	strb	r3, [r7, #15]
    break;
 8018e64:	e00b      	b.n	8018e7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8018e66:	2302      	movs	r3, #2
 8018e68:	73fb      	strb	r3, [r7, #15]
    break;
 8018e6a:	e008      	b.n	8018e7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8018e6c:	2301      	movs	r3, #1
 8018e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8018e70:	e005      	b.n	8018e7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8018e72:	2302      	movs	r3, #2
 8018e74:	73fb      	strb	r3, [r7, #15]
    break;
 8018e76:	e002      	b.n	8018e7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8018e78:	2302      	movs	r3, #2
 8018e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8018e7c:	bf00      	nop
  }
  return usb_status;
 8018e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e80:	4618      	mov	r0, r3
 8018e82:	3714      	adds	r7, #20
 8018e84:	46bd      	mov	sp, r7
 8018e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8a:	4770      	bx	lr

08018e8c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b084      	sub	sp, #16
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	4603      	mov	r3, r0
 8018e94:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8018e96:	79fb      	ldrb	r3, [r7, #7]
 8018e98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8018e9a:	79fb      	ldrb	r3, [r7, #7]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d102      	bne.n	8018ea6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8018ea0:	2301      	movs	r3, #1
 8018ea2:	73fb      	strb	r3, [r7, #15]
 8018ea4:	e001      	b.n	8018eaa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8018eaa:	7bfb      	ldrb	r3, [r7, #15]
 8018eac:	461a      	mov	r2, r3
 8018eae:	2120      	movs	r1, #32
 8018eb0:	4803      	ldr	r0, [pc, #12]	; (8018ec0 <MX_DriverVbusFS+0x34>)
 8018eb2:	f7ef fe89 	bl	8008bc8 <HAL_GPIO_WritePin>
}
 8018eb6:	bf00      	nop
 8018eb8:	3710      	adds	r7, #16
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bd80      	pop	{r7, pc}
 8018ebe:	bf00      	nop
 8018ec0:	40020c00 	.word	0x40020c00

08018ec4 <arm_rfft_fast_init_f32>:
 8018ec4:	084b      	lsrs	r3, r1, #1
 8018ec6:	2b80      	cmp	r3, #128	; 0x80
 8018ec8:	b430      	push	{r4, r5}
 8018eca:	8201      	strh	r1, [r0, #16]
 8018ecc:	8003      	strh	r3, [r0, #0]
 8018ece:	d070      	beq.n	8018fb2 <arm_rfft_fast_init_f32+0xee>
 8018ed0:	d916      	bls.n	8018f00 <arm_rfft_fast_init_f32+0x3c>
 8018ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ed6:	d05f      	beq.n	8018f98 <arm_rfft_fast_init_f32+0xd4>
 8018ed8:	d936      	bls.n	8018f48 <arm_rfft_fast_init_f32+0x84>
 8018eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018ede:	d026      	beq.n	8018f2e <arm_rfft_fast_init_f32+0x6a>
 8018ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018ee4:	d112      	bne.n	8018f0c <arm_rfft_fast_init_f32+0x48>
 8018ee6:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8018eea:	4c38      	ldr	r4, [pc, #224]	; (8018fcc <arm_rfft_fast_init_f32+0x108>)
 8018eec:	4938      	ldr	r1, [pc, #224]	; (8018fd0 <arm_rfft_fast_init_f32+0x10c>)
 8018eee:	2300      	movs	r3, #0
 8018ef0:	4a38      	ldr	r2, [pc, #224]	; (8018fd4 <arm_rfft_fast_init_f32+0x110>)
 8018ef2:	8185      	strh	r5, [r0, #12]
 8018ef4:	6084      	str	r4, [r0, #8]
 8018ef6:	6041      	str	r1, [r0, #4]
 8018ef8:	6142      	str	r2, [r0, #20]
 8018efa:	4618      	mov	r0, r3
 8018efc:	bc30      	pop	{r4, r5}
 8018efe:	4770      	bx	lr
 8018f00:	2b20      	cmp	r3, #32
 8018f02:	d031      	beq.n	8018f68 <arm_rfft_fast_init_f32+0xa4>
 8018f04:	2b40      	cmp	r3, #64	; 0x40
 8018f06:	d006      	beq.n	8018f16 <arm_rfft_fast_init_f32+0x52>
 8018f08:	2b10      	cmp	r3, #16
 8018f0a:	d039      	beq.n	8018f80 <arm_rfft_fast_init_f32+0xbc>
 8018f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f10:	bc30      	pop	{r4, r5}
 8018f12:	4618      	mov	r0, r3
 8018f14:	4770      	bx	lr
 8018f16:	2538      	movs	r5, #56	; 0x38
 8018f18:	4c2f      	ldr	r4, [pc, #188]	; (8018fd8 <arm_rfft_fast_init_f32+0x114>)
 8018f1a:	4930      	ldr	r1, [pc, #192]	; (8018fdc <arm_rfft_fast_init_f32+0x118>)
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	4a30      	ldr	r2, [pc, #192]	; (8018fe0 <arm_rfft_fast_init_f32+0x11c>)
 8018f20:	8185      	strh	r5, [r0, #12]
 8018f22:	6084      	str	r4, [r0, #8]
 8018f24:	6041      	str	r1, [r0, #4]
 8018f26:	6142      	str	r2, [r0, #20]
 8018f28:	4618      	mov	r0, r3
 8018f2a:	bc30      	pop	{r4, r5}
 8018f2c:	4770      	bx	lr
 8018f2e:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8018f32:	4c2c      	ldr	r4, [pc, #176]	; (8018fe4 <arm_rfft_fast_init_f32+0x120>)
 8018f34:	492c      	ldr	r1, [pc, #176]	; (8018fe8 <arm_rfft_fast_init_f32+0x124>)
 8018f36:	2300      	movs	r3, #0
 8018f38:	4a2c      	ldr	r2, [pc, #176]	; (8018fec <arm_rfft_fast_init_f32+0x128>)
 8018f3a:	8185      	strh	r5, [r0, #12]
 8018f3c:	6084      	str	r4, [r0, #8]
 8018f3e:	6041      	str	r1, [r0, #4]
 8018f40:	6142      	str	r2, [r0, #20]
 8018f42:	4618      	mov	r0, r3
 8018f44:	bc30      	pop	{r4, r5}
 8018f46:	4770      	bx	lr
 8018f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018f4c:	d1de      	bne.n	8018f0c <arm_rfft_fast_init_f32+0x48>
 8018f4e:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8018f52:	4c27      	ldr	r4, [pc, #156]	; (8018ff0 <arm_rfft_fast_init_f32+0x12c>)
 8018f54:	4927      	ldr	r1, [pc, #156]	; (8018ff4 <arm_rfft_fast_init_f32+0x130>)
 8018f56:	2300      	movs	r3, #0
 8018f58:	4a27      	ldr	r2, [pc, #156]	; (8018ff8 <arm_rfft_fast_init_f32+0x134>)
 8018f5a:	8185      	strh	r5, [r0, #12]
 8018f5c:	6084      	str	r4, [r0, #8]
 8018f5e:	6041      	str	r1, [r0, #4]
 8018f60:	6142      	str	r2, [r0, #20]
 8018f62:	4618      	mov	r0, r3
 8018f64:	bc30      	pop	{r4, r5}
 8018f66:	4770      	bx	lr
 8018f68:	2530      	movs	r5, #48	; 0x30
 8018f6a:	4c24      	ldr	r4, [pc, #144]	; (8018ffc <arm_rfft_fast_init_f32+0x138>)
 8018f6c:	4924      	ldr	r1, [pc, #144]	; (8019000 <arm_rfft_fast_init_f32+0x13c>)
 8018f6e:	2300      	movs	r3, #0
 8018f70:	4a24      	ldr	r2, [pc, #144]	; (8019004 <arm_rfft_fast_init_f32+0x140>)
 8018f72:	8185      	strh	r5, [r0, #12]
 8018f74:	6084      	str	r4, [r0, #8]
 8018f76:	6041      	str	r1, [r0, #4]
 8018f78:	6142      	str	r2, [r0, #20]
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	bc30      	pop	{r4, r5}
 8018f7e:	4770      	bx	lr
 8018f80:	2514      	movs	r5, #20
 8018f82:	4c21      	ldr	r4, [pc, #132]	; (8019008 <arm_rfft_fast_init_f32+0x144>)
 8018f84:	4921      	ldr	r1, [pc, #132]	; (801900c <arm_rfft_fast_init_f32+0x148>)
 8018f86:	2300      	movs	r3, #0
 8018f88:	4a21      	ldr	r2, [pc, #132]	; (8019010 <arm_rfft_fast_init_f32+0x14c>)
 8018f8a:	8185      	strh	r5, [r0, #12]
 8018f8c:	6084      	str	r4, [r0, #8]
 8018f8e:	6041      	str	r1, [r0, #4]
 8018f90:	6142      	str	r2, [r0, #20]
 8018f92:	4618      	mov	r0, r3
 8018f94:	bc30      	pop	{r4, r5}
 8018f96:	4770      	bx	lr
 8018f98:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8018f9c:	4c1d      	ldr	r4, [pc, #116]	; (8019014 <arm_rfft_fast_init_f32+0x150>)
 8018f9e:	491e      	ldr	r1, [pc, #120]	; (8019018 <arm_rfft_fast_init_f32+0x154>)
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	4a1e      	ldr	r2, [pc, #120]	; (801901c <arm_rfft_fast_init_f32+0x158>)
 8018fa4:	8185      	strh	r5, [r0, #12]
 8018fa6:	6084      	str	r4, [r0, #8]
 8018fa8:	6041      	str	r1, [r0, #4]
 8018faa:	6142      	str	r2, [r0, #20]
 8018fac:	4618      	mov	r0, r3
 8018fae:	bc30      	pop	{r4, r5}
 8018fb0:	4770      	bx	lr
 8018fb2:	25d0      	movs	r5, #208	; 0xd0
 8018fb4:	4c1a      	ldr	r4, [pc, #104]	; (8019020 <arm_rfft_fast_init_f32+0x15c>)
 8018fb6:	491b      	ldr	r1, [pc, #108]	; (8019024 <arm_rfft_fast_init_f32+0x160>)
 8018fb8:	2300      	movs	r3, #0
 8018fba:	4a1b      	ldr	r2, [pc, #108]	; (8019028 <arm_rfft_fast_init_f32+0x164>)
 8018fbc:	8185      	strh	r5, [r0, #12]
 8018fbe:	6084      	str	r4, [r0, #8]
 8018fc0:	6041      	str	r1, [r0, #4]
 8018fc2:	6142      	str	r2, [r0, #20]
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	bc30      	pop	{r4, r5}
 8018fc8:	4770      	bx	lr
 8018fca:	bf00      	nop
 8018fcc:	0802d070 	.word	0x0802d070
 8018fd0:	0801e268 	.word	0x0801e268
 8018fd4:	080243d8 	.word	0x080243d8
 8018fd8:	08022368 	.word	0x08022368
 8018fdc:	0802ee30 	.word	0x0802ee30
 8018fe0:	08031320 	.word	0x08031320
 8018fe4:	0802ad58 	.word	0x0802ad58
 8018fe8:	08028c58 	.word	0x08028c58
 8018fec:	080223d8 	.word	0x080223d8
 8018ff0:	08030fb0 	.word	0x08030fb0
 8018ff4:	080283d8 	.word	0x080283d8
 8018ff8:	0802f030 	.word	0x0802f030
 8018ffc:	0802bc10 	.word	0x0802bc10
 8019000:	0802ac58 	.word	0x0802ac58
 8019004:	08022268 	.word	0x08022268
 8019008:	0802bb68 	.word	0x0802bb68
 801900c:	08028bd8 	.word	0x08028bd8
 8019010:	0802bb90 	.word	0x0802bb90
 8019014:	0802f830 	.word	0x0802f830
 8019018:	0802c070 	.word	0x0802c070
 801901c:	0802fbb0 	.word	0x0802fbb0
 8019020:	08031520 	.word	0x08031520
 8019024:	0802bc70 	.word	0x0802bc70
 8019028:	08030bb0 	.word	0x08030bb0

0801902c <arm_rfft_fast_f32>:
 801902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019030:	8a05      	ldrh	r5, [r0, #16]
 8019032:	4606      	mov	r6, r0
 8019034:	4617      	mov	r7, r2
 8019036:	460c      	mov	r4, r1
 8019038:	086d      	lsrs	r5, r5, #1
 801903a:	8005      	strh	r5, [r0, #0]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d15e      	bne.n	80190fe <arm_rfft_fast_f32+0xd2>
 8019040:	461a      	mov	r2, r3
 8019042:	2301      	movs	r3, #1
 8019044:	f000 fbde 	bl	8019804 <arm_cfft_f32>
 8019048:	edd4 7a00 	vldr	s15, [r4]
 801904c:	ed94 7a01 	vldr	s14, [r4, #4]
 8019050:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019054:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019058:	8832      	ldrh	r2, [r6, #0]
 801905a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801905e:	6975      	ldr	r5, [r6, #20]
 8019060:	3a01      	subs	r2, #1
 8019062:	eeb0 3a46 	vmov.f32	s6, s12
 8019066:	3510      	adds	r5, #16
 8019068:	f107 0610 	add.w	r6, r7, #16
 801906c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019070:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8019074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019078:	f104 0310 	add.w	r3, r4, #16
 801907c:	3808      	subs	r0, #8
 801907e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8019082:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019086:	ed87 7a00 	vstr	s14, [r7]
 801908a:	edc7 7a01 	vstr	s15, [r7, #4]
 801908e:	ed90 7a02 	vldr	s14, [r0, #8]
 8019092:	3a01      	subs	r2, #1
 8019094:	ed53 6a02 	vldr	s13, [r3, #-8]
 8019098:	f1a0 0008 	sub.w	r0, r0, #8
 801909c:	ed15 6a02 	vldr	s12, [r5, #-8]
 80190a0:	f103 0308 	add.w	r3, r3, #8
 80190a4:	ee77 7a66 	vsub.f32	s15, s14, s13
 80190a8:	edd0 3a05 	vldr	s7, [r0, #20]
 80190ac:	ed13 5a03 	vldr	s10, [r3, #-12]
 80190b0:	ee77 4a26 	vadd.f32	s9, s14, s13
 80190b4:	ed55 5a01 	vldr	s11, [r5, #-4]
 80190b8:	f106 0608 	add.w	r6, r6, #8
 80190bc:	ee66 6a27 	vmul.f32	s13, s12, s15
 80190c0:	f105 0508 	add.w	r5, r5, #8
 80190c4:	ee33 4a85 	vadd.f32	s8, s7, s10
 80190c8:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80190cc:	ee35 5a63 	vsub.f32	s10, s10, s7
 80190d0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80190d4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80190d8:	ee77 7a05 	vadd.f32	s15, s14, s10
 80190dc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80190e0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80190e4:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80190e8:	ee67 7a83 	vmul.f32	s15, s15, s6
 80190ec:	ee27 7a03 	vmul.f32	s14, s14, s6
 80190f0:	ed46 7a03 	vstr	s15, [r6, #-12]
 80190f4:	ed06 7a04 	vstr	s14, [r6, #-16]
 80190f8:	d1c9      	bne.n	801908e <arm_rfft_fast_f32+0x62>
 80190fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190fe:	edd1 7a00 	vldr	s15, [r1]
 8019102:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8019106:	edd1 6a01 	vldr	s13, [r1, #4]
 801910a:	1e68      	subs	r0, r5, #1
 801910c:	6975      	ldr	r5, [r6, #20]
 801910e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019112:	00c1      	lsls	r1, r0, #3
 8019114:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019118:	ee27 7a23 	vmul.f32	s14, s14, s7
 801911c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8019120:	ed82 7a00 	vstr	s14, [r2]
 8019124:	edc2 7a01 	vstr	s15, [r2, #4]
 8019128:	b3e0      	cbz	r0, 80191a4 <arm_rfft_fast_f32+0x178>
 801912a:	3908      	subs	r1, #8
 801912c:	f104 0210 	add.w	r2, r4, #16
 8019130:	3510      	adds	r5, #16
 8019132:	440c      	add	r4, r1
 8019134:	f107 0110 	add.w	r1, r7, #16
 8019138:	ed94 7a02 	vldr	s14, [r4, #8]
 801913c:	3801      	subs	r0, #1
 801913e:	ed52 6a02 	vldr	s13, [r2, #-8]
 8019142:	f1a4 0408 	sub.w	r4, r4, #8
 8019146:	ed15 6a02 	vldr	s12, [r5, #-8]
 801914a:	f102 0208 	add.w	r2, r2, #8
 801914e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8019152:	ed94 4a05 	vldr	s8, [r4, #20]
 8019156:	ed12 5a03 	vldr	s10, [r2, #-12]
 801915a:	ee77 6a26 	vadd.f32	s13, s14, s13
 801915e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8019162:	f101 0108 	add.w	r1, r1, #8
 8019166:	ee26 3a27 	vmul.f32	s6, s12, s15
 801916a:	f105 0508 	add.w	r5, r5, #8
 801916e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8019172:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8019176:	ee35 5a44 	vsub.f32	s10, s10, s8
 801917a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801917e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019182:	ee77 7a05 	vadd.f32	s15, s14, s10
 8019186:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801918a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801918e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8019192:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8019196:	ee27 7a23 	vmul.f32	s14, s14, s7
 801919a:	ed41 7a03 	vstr	s15, [r1, #-12]
 801919e:	ed01 7a04 	vstr	s14, [r1, #-16]
 80191a2:	d1c9      	bne.n	8019138 <arm_rfft_fast_f32+0x10c>
 80191a4:	461a      	mov	r2, r3
 80191a6:	4639      	mov	r1, r7
 80191a8:	4630      	mov	r0, r6
 80191aa:	2301      	movs	r3, #1
 80191ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191b0:	f000 bb28 	b.w	8019804 <arm_cfft_f32>

080191b4 <arm_cfft_radix8by2_f32>:
 80191b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b8:	4607      	mov	r7, r0
 80191ba:	4608      	mov	r0, r1
 80191bc:	ed2d 8b06 	vpush	{d8-d10}
 80191c0:	f8b7 e000 	ldrh.w	lr, [r7]
 80191c4:	687a      	ldr	r2, [r7, #4]
 80191c6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80191ca:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80191ce:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80191d2:	f000 80b0 	beq.w	8019336 <arm_cfft_radix8by2_f32+0x182>
 80191d6:	008b      	lsls	r3, r1, #2
 80191d8:	3210      	adds	r2, #16
 80191da:	f100 0610 	add.w	r6, r0, #16
 80191de:	f108 0510 	add.w	r5, r8, #16
 80191e2:	3310      	adds	r3, #16
 80191e4:	18c4      	adds	r4, r0, r3
 80191e6:	4443      	add	r3, r8
 80191e8:	ed55 6a04 	vldr	s13, [r5, #-16]
 80191ec:	f1be 0e01 	subs.w	lr, lr, #1
 80191f0:	ed56 4a04 	vldr	s9, [r6, #-16]
 80191f4:	f104 0410 	add.w	r4, r4, #16
 80191f8:	ed15 7a03 	vldr	s14, [r5, #-12]
 80191fc:	f106 0610 	add.w	r6, r6, #16
 8019200:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8019204:	ed55 7a02 	vldr	s15, [r5, #-8]
 8019208:	ed55 2a01 	vldr	s5, [r5, #-4]
 801920c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8019210:	ed53 0a04 	vldr	s1, [r3, #-16]
 8019214:	f102 0210 	add.w	r2, r2, #16
 8019218:	ed13 5a03 	vldr	s10, [r3, #-12]
 801921c:	f105 0510 	add.w	r5, r5, #16
 8019220:	ed13 3a02 	vldr	s6, [r3, #-8]
 8019224:	f103 0310 	add.w	r3, r3, #16
 8019228:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 801922c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8019230:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8019234:	ee33 8a83 	vadd.f32	s16, s7, s6
 8019238:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 801923c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8019240:	ee34 0a06 	vadd.f32	s0, s8, s12
 8019244:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8019248:	ee76 aa87 	vadd.f32	s21, s13, s14
 801924c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8019250:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8019254:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8019258:	ee35 9aa0 	vadd.f32	s18, s11, s1
 801925c:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8019260:	ee71 8a05 	vadd.f32	s17, s2, s10
 8019264:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8019268:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 801926c:	ee72 9a22 	vadd.f32	s19, s4, s5
 8019270:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8019274:	ee35 5a41 	vsub.f32	s10, s10, s2
 8019278:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 801927c:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8019280:	ee36 6a44 	vsub.f32	s12, s12, s8
 8019284:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8019288:	ee71 1ae7 	vsub.f32	s3, s3, s15
 801928c:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8019290:	ee72 7a62 	vsub.f32	s15, s4, s5
 8019294:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8019298:	ee73 2a63 	vsub.f32	s5, s6, s7
 801929c:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 80192a0:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 80192a4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 80192a8:	ee24 3a84 	vmul.f32	s6, s9, s8
 80192ac:	ee27 2a26 	vmul.f32	s4, s14, s13
 80192b0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80192b4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 80192b8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80192bc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80192c0:	ee65 6a26 	vmul.f32	s13, s10, s13
 80192c4:	ee25 5a04 	vmul.f32	s10, s10, s8
 80192c8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80192cc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80192d0:	ee33 4a02 	vadd.f32	s8, s6, s4
 80192d4:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80192d8:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 80192dc:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 80192e0:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 80192e4:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 80192e8:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 80192ec:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80192f0:	ee61 4aa6 	vmul.f32	s9, s3, s13
 80192f4:	ee27 4a87 	vmul.f32	s8, s15, s14
 80192f8:	ee61 5a87 	vmul.f32	s11, s3, s14
 80192fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019300:	ee22 5a87 	vmul.f32	s10, s5, s14
 8019304:	ee26 7a07 	vmul.f32	s14, s12, s14
 8019308:	ee26 6a26 	vmul.f32	s12, s12, s13
 801930c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8019310:	ee74 4a84 	vadd.f32	s9, s9, s8
 8019314:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019318:	ee35 6a46 	vsub.f32	s12, s10, s12
 801931c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019320:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8019324:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8019328:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 801932c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8019330:	f47f af5a 	bne.w	80191e8 <arm_cfft_radix8by2_f32+0x34>
 8019334:	687a      	ldr	r2, [r7, #4]
 8019336:	b28c      	uxth	r4, r1
 8019338:	2302      	movs	r3, #2
 801933a:	4621      	mov	r1, r4
 801933c:	f000 fbc2 	bl	8019ac4 <arm_radix8_butterfly_f32>
 8019340:	4621      	mov	r1, r4
 8019342:	687a      	ldr	r2, [r7, #4]
 8019344:	4640      	mov	r0, r8
 8019346:	2302      	movs	r3, #2
 8019348:	ecbd 8b06 	vpop	{d8-d10}
 801934c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019350:	f000 bbb8 	b.w	8019ac4 <arm_radix8_butterfly_f32>

08019354 <arm_cfft_radix8by4_f32>:
 8019354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019358:	ed2d 8b06 	vpush	{d8-d10}
 801935c:	8804      	ldrh	r4, [r0, #0]
 801935e:	b08f      	sub	sp, #60	; 0x3c
 8019360:	ed91 6a00 	vldr	s12, [r1]
 8019364:	460a      	mov	r2, r1
 8019366:	0864      	lsrs	r4, r4, #1
 8019368:	ed91 7a01 	vldr	s14, [r1, #4]
 801936c:	9101      	str	r1, [sp, #4]
 801936e:	00a3      	lsls	r3, r4, #2
 8019370:	6841      	ldr	r1, [r0, #4]
 8019372:	0864      	lsrs	r4, r4, #1
 8019374:	900c      	str	r0, [sp, #48]	; 0x30
 8019376:	9205      	str	r2, [sp, #20]
 8019378:	f101 0610 	add.w	r6, r1, #16
 801937c:	4625      	mov	r5, r4
 801937e:	940b      	str	r4, [sp, #44]	; 0x2c
 8019380:	f101 0408 	add.w	r4, r1, #8
 8019384:	9602      	str	r6, [sp, #8]
 8019386:	9407      	str	r4, [sp, #28]
 8019388:	18d4      	adds	r4, r2, r3
 801938a:	1eaa      	subs	r2, r5, #2
 801938c:	f101 0518 	add.w	r5, r1, #24
 8019390:	18e0      	adds	r0, r4, r3
 8019392:	edd4 4a00 	vldr	s9, [r4]
 8019396:	ed94 4a01 	vldr	s8, [r4, #4]
 801939a:	46a6      	mov	lr, r4
 801939c:	edd0 6a00 	vldr	s13, [r0]
 80193a0:	18c7      	adds	r7, r0, r3
 80193a2:	edd0 7a01 	vldr	s15, [r0, #4]
 80193a6:	46a0      	mov	r8, r4
 80193a8:	ee76 5a26 	vadd.f32	s11, s12, s13
 80193ac:	ed97 5a00 	vldr	s10, [r7]
 80193b0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80193b4:	4604      	mov	r4, r0
 80193b6:	9506      	str	r5, [sp, #24]
 80193b8:	4605      	mov	r5, r0
 80193ba:	ee75 2aa4 	vadd.f32	s5, s11, s9
 80193be:	900a      	str	r0, [sp, #40]	; 0x28
 80193c0:	9801      	ldr	r0, [sp, #4]
 80193c2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80193c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80193ca:	ed97 3a01 	vldr	s6, [r7, #4]
 80193ce:	ee72 2a85 	vadd.f32	s5, s5, s10
 80193d2:	46bc      	mov	ip, r7
 80193d4:	ee76 3a84 	vadd.f32	s7, s13, s8
 80193d8:	9704      	str	r7, [sp, #16]
 80193da:	ee36 7a44 	vsub.f32	s14, s12, s8
 80193de:	f8cd e00c 	str.w	lr, [sp, #12]
 80193e2:	ee12 9a90 	vmov	r9, s5
 80193e6:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80193ea:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80193ee:	1f3e      	subs	r6, r7, #4
 80193f0:	f840 9b08 	str.w	r9, [r0], #8
 80193f4:	ee37 4ae4 	vsub.f32	s8, s15, s9
 80193f8:	edde 2a01 	vldr	s5, [lr, #4]
 80193fc:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8019400:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8019404:	eddc 4a01 	vldr	s9, [ip, #4]
 8019408:	ee36 6a22 	vadd.f32	s12, s12, s5
 801940c:	9001      	str	r0, [sp, #4]
 801940e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019412:	9805      	ldr	r0, [sp, #20]
 8019414:	ee13 9a90 	vmov	r9, s7
 8019418:	ee37 7a43 	vsub.f32	s14, s14, s6
 801941c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8019420:	f1ae 0704 	sub.w	r7, lr, #4
 8019424:	ee74 4a05 	vadd.f32	s9, s8, s10
 8019428:	ee76 6a83 	vadd.f32	s13, s13, s6
 801942c:	ed80 6a01 	vstr	s12, [r0, #4]
 8019430:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8019434:	f848 9b08 	str.w	r9, [r8], #8
 8019438:	edce 4a01 	vstr	s9, [lr, #4]
 801943c:	ee15 ea90 	vmov	lr, s11
 8019440:	f844 eb08 	str.w	lr, [r4], #8
 8019444:	ee16 ea90 	vmov	lr, s13
 8019448:	9408      	str	r4, [sp, #32]
 801944a:	462c      	mov	r4, r5
 801944c:	ed85 7a01 	vstr	s14, [r5, #4]
 8019450:	9d04      	ldr	r5, [sp, #16]
 8019452:	f84c eb08 	str.w	lr, [ip], #8
 8019456:	edc5 7a01 	vstr	s15, [r5, #4]
 801945a:	0855      	lsrs	r5, r2, #1
 801945c:	9509      	str	r5, [sp, #36]	; 0x24
 801945e:	f000 8130 	beq.w	80196c2 <arm_cfft_radix8by4_f32+0x36e>
 8019462:	9805      	ldr	r0, [sp, #20]
 8019464:	3b08      	subs	r3, #8
 8019466:	46ab      	mov	fp, r5
 8019468:	f1a4 020c 	sub.w	r2, r4, #12
 801946c:	f100 0510 	add.w	r5, r0, #16
 8019470:	f101 0920 	add.w	r9, r1, #32
 8019474:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8019478:	f8dd a008 	ldr.w	sl, [sp, #8]
 801947c:	4433      	add	r3, r6
 801947e:	3410      	adds	r4, #16
 8019480:	4660      	mov	r0, ip
 8019482:	4641      	mov	r1, r8
 8019484:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8019488:	ed54 6a02 	vldr	s13, [r4, #-8]
 801948c:	f1bb 0b01 	subs.w	fp, fp, #1
 8019490:	ed55 5a02 	vldr	s11, [r5, #-8]
 8019494:	f10a 0a08 	add.w	sl, sl, #8
 8019498:	edd1 7a00 	vldr	s15, [r1]
 801949c:	f105 0508 	add.w	r5, r5, #8
 80194a0:	ee75 3aa6 	vadd.f32	s7, s11, s13
 80194a4:	edd0 2a00 	vldr	s5, [r0]
 80194a8:	ed14 7a01 	vldr	s14, [r4, #-4]
 80194ac:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80194b0:	ed55 6a03 	vldr	s13, [r5, #-12]
 80194b4:	f1a2 0208 	sub.w	r2, r2, #8
 80194b8:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80194bc:	ed90 2a01 	vldr	s4, [r0, #4]
 80194c0:	ee36 5a87 	vadd.f32	s10, s13, s14
 80194c4:	ed91 6a01 	vldr	s12, [r1, #4]
 80194c8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80194cc:	f109 0910 	add.w	r9, r9, #16
 80194d0:	ee74 6aa2 	vadd.f32	s13, s9, s5
 80194d4:	f104 0408 	add.w	r4, r4, #8
 80194d8:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80194dc:	f10e 0e18 	add.w	lr, lr, #24
 80194e0:	ee37 3a67 	vsub.f32	s6, s14, s15
 80194e4:	f1a3 0308 	sub.w	r3, r3, #8
 80194e8:	ed45 6a04 	vstr	s13, [r5, #-16]
 80194ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80194f0:	edd1 6a01 	vldr	s13, [r1, #4]
 80194f4:	ee75 1a86 	vadd.f32	s3, s11, s12
 80194f8:	edd0 4a01 	vldr	s9, [r0, #4]
 80194fc:	ee33 3a22 	vadd.f32	s6, s6, s5
 8019500:	ee75 6a26 	vadd.f32	s13, s10, s13
 8019504:	ee35 5a46 	vsub.f32	s10, s10, s12
 8019508:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801950c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019510:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8019514:	ee35 5a42 	vsub.f32	s10, s10, s4
 8019518:	ed45 6a03 	vstr	s13, [r5, #-12]
 801951c:	ee36 2a02 	vadd.f32	s4, s12, s4
 8019520:	edd6 7a00 	vldr	s15, [r6]
 8019524:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8019528:	ed97 1a00 	vldr	s2, [r7]
 801952c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019530:	ed92 8a04 	vldr	s16, [r2, #16]
 8019534:	ee71 8a27 	vadd.f32	s17, s2, s15
 8019538:	ed93 aa04 	vldr	s20, [r3, #16]
 801953c:	ed16 7a01 	vldr	s14, [r6, #-4]
 8019540:	ee71 7a67 	vsub.f32	s15, s2, s15
 8019544:	ed57 0a01 	vldr	s1, [r7, #-4]
 8019548:	ee38 1a4a 	vsub.f32	s2, s16, s20
 801954c:	ee38 6a88 	vadd.f32	s12, s17, s16
 8019550:	edd3 9a03 	vldr	s19, [r3, #12]
 8019554:	ee30 0a87 	vadd.f32	s0, s1, s14
 8019558:	ed92 9a03 	vldr	s18, [r2, #12]
 801955c:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8019560:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8019564:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8019568:	ee37 4ac9 	vsub.f32	s8, s15, s18
 801956c:	ee16 ca10 	vmov	ip, s12
 8019570:	ee30 6a49 	vsub.f32	s12, s0, s18
 8019574:	ee77 4a01 	vadd.f32	s9, s14, s2
 8019578:	f847 c908 	str.w	ip, [r7], #-8
 801957c:	ee34 4a29 	vadd.f32	s8, s8, s19
 8019580:	edd2 8a03 	vldr	s17, [r2, #12]
 8019584:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8019588:	ed93 8a03 	vldr	s16, [r3, #12]
 801958c:	ee71 0a47 	vsub.f32	s1, s2, s14
 8019590:	ee30 0a28 	vadd.f32	s0, s0, s17
 8019594:	ee39 1a67 	vsub.f32	s2, s18, s15
 8019598:	ee36 6a69 	vsub.f32	s12, s12, s19
 801959c:	ee30 0a08 	vadd.f32	s0, s0, s16
 80195a0:	ee75 5aca 	vsub.f32	s11, s11, s20
 80195a4:	ed87 0a01 	vstr	s0, [r7, #4]
 80195a8:	ed1a 0a04 	vldr	s0, [sl, #-16]
 80195ac:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80195b0:	ee21 8a80 	vmul.f32	s16, s3, s0
 80195b4:	ee23 7a26 	vmul.f32	s14, s6, s13
 80195b8:	ee64 7a26 	vmul.f32	s15, s8, s13
 80195bc:	ee61 1aa6 	vmul.f32	s3, s3, s13
 80195c0:	ee24 4a00 	vmul.f32	s8, s8, s0
 80195c4:	ee23 3a00 	vmul.f32	s6, s6, s0
 80195c8:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80195cc:	ee24 0a80 	vmul.f32	s0, s9, s0
 80195d0:	ee38 7a07 	vadd.f32	s14, s16, s14
 80195d4:	ee76 6a84 	vadd.f32	s13, s13, s8
 80195d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80195dc:	ee33 3a61 	vsub.f32	s6, s6, s3
 80195e0:	ee17 ca10 	vmov	ip, s14
 80195e4:	f841 cb08 	str.w	ip, [r1], #8
 80195e8:	ed01 3a01 	vstr	s6, [r1, #-4]
 80195ec:	ed82 0a04 	vstr	s0, [r2, #16]
 80195f0:	edc2 6a03 	vstr	s13, [r2, #12]
 80195f4:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 80195f8:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 80195fc:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8019600:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8019604:	ee65 4a27 	vmul.f32	s9, s10, s15
 8019608:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801960c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019610:	ee66 7a27 	vmul.f32	s15, s12, s15
 8019614:	ee25 5a26 	vmul.f32	s10, s10, s13
 8019618:	ee66 6a26 	vmul.f32	s13, s12, s13
 801961c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019620:	ee34 6a24 	vadd.f32	s12, s8, s9
 8019624:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8019628:	ee35 5a63 	vsub.f32	s10, s10, s7
 801962c:	ee17 ca90 	vmov	ip, s15
 8019630:	ed04 6a04 	vstr	s12, [r4, #-16]
 8019634:	ed04 5a03 	vstr	s10, [r4, #-12]
 8019638:	f846 c908 	str.w	ip, [r6], #-8
 801963c:	edc6 6a01 	vstr	s13, [r6, #4]
 8019640:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8019644:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8019648:	ee62 5a27 	vmul.f32	s11, s4, s15
 801964c:	ee22 6a87 	vmul.f32	s12, s5, s14
 8019650:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019654:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8019658:	ee61 6a07 	vmul.f32	s13, s2, s14
 801965c:	ee20 7a87 	vmul.f32	s14, s1, s14
 8019660:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8019664:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019668:	ee35 6a86 	vadd.f32	s12, s11, s12
 801966c:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8019670:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8019674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019678:	ee16 ca10 	vmov	ip, s12
 801967c:	f840 cb08 	str.w	ip, [r0], #8
 8019680:	ed40 2a01 	vstr	s5, [r0, #-4]
 8019684:	edc3 0a04 	vstr	s1, [r3, #16]
 8019688:	edc3 7a03 	vstr	s15, [r3, #12]
 801968c:	f47f aefc 	bne.w	8019488 <arm_cfft_radix8by4_f32+0x134>
 8019690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019692:	9802      	ldr	r0, [sp, #8]
 8019694:	00cb      	lsls	r3, r1, #3
 8019696:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 801969a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801969e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80196a2:	4498      	add	r8, r3
 80196a4:	449c      	add	ip, r3
 80196a6:	9102      	str	r1, [sp, #8]
 80196a8:	9901      	ldr	r1, [sp, #4]
 80196aa:	4419      	add	r1, r3
 80196ac:	9101      	str	r1, [sp, #4]
 80196ae:	9907      	ldr	r1, [sp, #28]
 80196b0:	4419      	add	r1, r3
 80196b2:	9107      	str	r1, [sp, #28]
 80196b4:	9908      	ldr	r1, [sp, #32]
 80196b6:	4419      	add	r1, r3
 80196b8:	9b06      	ldr	r3, [sp, #24]
 80196ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80196be:	9108      	str	r1, [sp, #32]
 80196c0:	9306      	str	r3, [sp, #24]
 80196c2:	9a01      	ldr	r2, [sp, #4]
 80196c4:	2304      	movs	r3, #4
 80196c6:	9e08      	ldr	r6, [sp, #32]
 80196c8:	edd2 7a00 	vldr	s15, [r2]
 80196cc:	ed96 7a00 	vldr	s14, [r6]
 80196d0:	edd8 2a00 	vldr	s5, [r8]
 80196d4:	ee77 5a87 	vadd.f32	s11, s15, s14
 80196d8:	ed9c 3a00 	vldr	s6, [ip]
 80196dc:	ed92 6a01 	vldr	s12, [r2, #4]
 80196e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80196e4:	edd6 6a01 	vldr	s13, [r6, #4]
 80196e8:	ee75 4aa2 	vadd.f32	s9, s11, s5
 80196ec:	ed9c 2a01 	vldr	s4, [ip, #4]
 80196f0:	ee36 5a26 	vadd.f32	s10, s12, s13
 80196f4:	edd8 7a01 	vldr	s15, [r8, #4]
 80196f8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80196fc:	9d02      	ldr	r5, [sp, #8]
 80196fe:	ee34 6a83 	vadd.f32	s12, s9, s6
 8019702:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8019706:	ee37 4a27 	vadd.f32	s8, s14, s15
 801970a:	9805      	ldr	r0, [sp, #20]
 801970c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8019710:	4621      	mov	r1, r4
 8019712:	ed82 6a00 	vstr	s12, [r2]
 8019716:	ee35 6ae2 	vsub.f32	s12, s11, s5
 801971a:	edd8 3a01 	vldr	s7, [r8, #4]
 801971e:	ee75 5a67 	vsub.f32	s11, s10, s15
 8019722:	eddc 1a01 	vldr	s3, [ip, #4]
 8019726:	ee34 4a42 	vsub.f32	s8, s8, s4
 801972a:	ee75 3a23 	vadd.f32	s7, s10, s7
 801972e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8019732:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8019736:	ee33 5aa1 	vadd.f32	s10, s7, s3
 801973a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801973e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8019742:	ed82 5a01 	vstr	s10, [r2, #4]
 8019746:	ee75 5ac2 	vsub.f32	s11, s11, s4
 801974a:	9a07      	ldr	r2, [sp, #28]
 801974c:	ee77 7a02 	vadd.f32	s15, s14, s4
 8019750:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8019754:	edd2 2a00 	vldr	s5, [r2]
 8019758:	ed92 5a01 	vldr	s10, [r2, #4]
 801975c:	ee64 3a22 	vmul.f32	s7, s8, s5
 8019760:	ee24 4a05 	vmul.f32	s8, s8, s10
 8019764:	ee24 5a85 	vmul.f32	s10, s9, s10
 8019768:	ee64 4aa2 	vmul.f32	s9, s9, s5
 801976c:	ee33 5a85 	vadd.f32	s10, s7, s10
 8019770:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8019774:	ed88 5a00 	vstr	s10, [r8]
 8019778:	edc8 4a01 	vstr	s9, [r8, #4]
 801977c:	edd5 4a01 	vldr	s9, [r5, #4]
 8019780:	edd5 6a00 	vldr	s13, [r5]
 8019784:	9d06      	ldr	r5, [sp, #24]
 8019786:	ee26 5a26 	vmul.f32	s10, s12, s13
 801978a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801978e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8019792:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8019796:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801979a:	ee75 5a25 	vadd.f32	s11, s10, s11
 801979e:	ed86 6a01 	vstr	s12, [r6, #4]
 80197a2:	edc6 5a00 	vstr	s11, [r6]
 80197a6:	edd5 5a01 	vldr	s11, [r5, #4]
 80197aa:	edd5 6a00 	vldr	s13, [r5]
 80197ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80197b0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80197b4:	ee67 6a26 	vmul.f32	s13, s14, s13
 80197b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80197bc:	ee27 7a25 	vmul.f32	s14, s14, s11
 80197c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80197c4:	ee36 7a07 	vadd.f32	s14, s12, s14
 80197c8:	edcc 7a01 	vstr	s15, [ip, #4]
 80197cc:	ed8c 7a00 	vstr	s14, [ip]
 80197d0:	6872      	ldr	r2, [r6, #4]
 80197d2:	f000 f977 	bl	8019ac4 <arm_radix8_butterfly_f32>
 80197d6:	9803      	ldr	r0, [sp, #12]
 80197d8:	4621      	mov	r1, r4
 80197da:	6872      	ldr	r2, [r6, #4]
 80197dc:	2304      	movs	r3, #4
 80197de:	f000 f971 	bl	8019ac4 <arm_radix8_butterfly_f32>
 80197e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80197e4:	4621      	mov	r1, r4
 80197e6:	6872      	ldr	r2, [r6, #4]
 80197e8:	2304      	movs	r3, #4
 80197ea:	f000 f96b 	bl	8019ac4 <arm_radix8_butterfly_f32>
 80197ee:	4621      	mov	r1, r4
 80197f0:	6872      	ldr	r2, [r6, #4]
 80197f2:	2304      	movs	r3, #4
 80197f4:	9804      	ldr	r0, [sp, #16]
 80197f6:	b00f      	add	sp, #60	; 0x3c
 80197f8:	ecbd 8b06 	vpop	{d8-d10}
 80197fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019800:	f000 b960 	b.w	8019ac4 <arm_radix8_butterfly_f32>

08019804 <arm_cfft_f32>:
 8019804:	2a01      	cmp	r2, #1
 8019806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801980a:	4606      	mov	r6, r0
 801980c:	4617      	mov	r7, r2
 801980e:	460c      	mov	r4, r1
 8019810:	4698      	mov	r8, r3
 8019812:	8805      	ldrh	r5, [r0, #0]
 8019814:	d053      	beq.n	80198be <arm_cfft_f32+0xba>
 8019816:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801981a:	d04b      	beq.n	80198b4 <arm_cfft_f32+0xb0>
 801981c:	d916      	bls.n	801984c <arm_cfft_f32+0x48>
 801981e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8019822:	d01a      	beq.n	801985a <arm_cfft_f32+0x56>
 8019824:	d95a      	bls.n	80198dc <arm_cfft_f32+0xd8>
 8019826:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801982a:	d043      	beq.n	80198b4 <arm_cfft_f32+0xb0>
 801982c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8019830:	d105      	bne.n	801983e <arm_cfft_f32+0x3a>
 8019832:	2301      	movs	r3, #1
 8019834:	6872      	ldr	r2, [r6, #4]
 8019836:	4629      	mov	r1, r5
 8019838:	4620      	mov	r0, r4
 801983a:	f000 f943 	bl	8019ac4 <arm_radix8_butterfly_f32>
 801983e:	f1b8 0f00 	cmp.w	r8, #0
 8019842:	d111      	bne.n	8019868 <arm_cfft_f32+0x64>
 8019844:	2f01      	cmp	r7, #1
 8019846:	d016      	beq.n	8019876 <arm_cfft_f32+0x72>
 8019848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801984c:	2d20      	cmp	r5, #32
 801984e:	d031      	beq.n	80198b4 <arm_cfft_f32+0xb0>
 8019850:	d948      	bls.n	80198e4 <arm_cfft_f32+0xe0>
 8019852:	2d40      	cmp	r5, #64	; 0x40
 8019854:	d0ed      	beq.n	8019832 <arm_cfft_f32+0x2e>
 8019856:	2d80      	cmp	r5, #128	; 0x80
 8019858:	d1f1      	bne.n	801983e <arm_cfft_f32+0x3a>
 801985a:	4621      	mov	r1, r4
 801985c:	4630      	mov	r0, r6
 801985e:	f7ff fca9 	bl	80191b4 <arm_cfft_radix8by2_f32>
 8019862:	f1b8 0f00 	cmp.w	r8, #0
 8019866:	d0ed      	beq.n	8019844 <arm_cfft_f32+0x40>
 8019868:	68b2      	ldr	r2, [r6, #8]
 801986a:	4620      	mov	r0, r4
 801986c:	89b1      	ldrh	r1, [r6, #12]
 801986e:	f7e6 fccf 	bl	8000210 <arm_bitreversal_32>
 8019872:	2f01      	cmp	r7, #1
 8019874:	d1e8      	bne.n	8019848 <arm_cfft_f32+0x44>
 8019876:	ee07 5a90 	vmov	s15, r5
 801987a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801987e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019882:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019886:	2d00      	cmp	r5, #0
 8019888:	d0de      	beq.n	8019848 <arm_cfft_f32+0x44>
 801988a:	f104 0108 	add.w	r1, r4, #8
 801988e:	2300      	movs	r3, #0
 8019890:	ed11 7a02 	vldr	s14, [r1, #-8]
 8019894:	3301      	adds	r3, #1
 8019896:	ed51 7a01 	vldr	s15, [r1, #-4]
 801989a:	3108      	adds	r1, #8
 801989c:	429d      	cmp	r5, r3
 801989e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80198a2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80198a6:	ed01 7a04 	vstr	s14, [r1, #-16]
 80198aa:	ed41 7a03 	vstr	s15, [r1, #-12]
 80198ae:	d1ef      	bne.n	8019890 <arm_cfft_f32+0x8c>
 80198b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198b4:	4621      	mov	r1, r4
 80198b6:	4630      	mov	r0, r6
 80198b8:	f7ff fd4c 	bl	8019354 <arm_cfft_radix8by4_f32>
 80198bc:	e7bf      	b.n	801983e <arm_cfft_f32+0x3a>
 80198be:	b1a5      	cbz	r5, 80198ea <arm_cfft_f32+0xe6>
 80198c0:	f101 030c 	add.w	r3, r1, #12
 80198c4:	2200      	movs	r2, #0
 80198c6:	ed53 7a02 	vldr	s15, [r3, #-8]
 80198ca:	3201      	adds	r2, #1
 80198cc:	3308      	adds	r3, #8
 80198ce:	eef1 7a67 	vneg.f32	s15, s15
 80198d2:	4295      	cmp	r5, r2
 80198d4:	ed43 7a04 	vstr	s15, [r3, #-16]
 80198d8:	d1f5      	bne.n	80198c6 <arm_cfft_f32+0xc2>
 80198da:	e79c      	b.n	8019816 <arm_cfft_f32+0x12>
 80198dc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80198e0:	d0a7      	beq.n	8019832 <arm_cfft_f32+0x2e>
 80198e2:	e7ac      	b.n	801983e <arm_cfft_f32+0x3a>
 80198e4:	2d10      	cmp	r5, #16
 80198e6:	d0b8      	beq.n	801985a <arm_cfft_f32+0x56>
 80198e8:	e7a9      	b.n	801983e <arm_cfft_f32+0x3a>
 80198ea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80198ee:	d896      	bhi.n	801981e <arm_cfft_f32+0x1a>
 80198f0:	e7ac      	b.n	801984c <arm_cfft_f32+0x48>
 80198f2:	bf00      	nop

080198f4 <arm_cmplx_mag_f32>:
 80198f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198f8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80198fc:	b084      	sub	sp, #16
 80198fe:	d07f      	beq.n	8019a00 <arm_cmplx_mag_f32+0x10c>
 8019900:	f100 0420 	add.w	r4, r0, #32
 8019904:	f101 0510 	add.w	r5, r1, #16
 8019908:	4646      	mov	r6, r8
 801990a:	2700      	movs	r7, #0
 801990c:	e05a      	b.n	80199c4 <arm_cmplx_mag_f32+0xd0>
 801990e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019912:	eeb4 0a40 	vcmp.f32	s0, s0
 8019916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801991a:	f040 80a4 	bne.w	8019a66 <arm_cmplx_mag_f32+0x172>
 801991e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8019922:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8019926:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 801992a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801992e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019932:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801993a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801993e:	f2c0 808f 	blt.w	8019a60 <arm_cmplx_mag_f32+0x16c>
 8019942:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019946:	eeb4 0a40 	vcmp.f32	s0, s0
 801994a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801994e:	f040 80af 	bne.w	8019ab0 <arm_cmplx_mag_f32+0x1bc>
 8019952:	ed05 0a03 	vstr	s0, [r5, #-12]
 8019956:	ed54 7a04 	vldr	s15, [r4, #-16]
 801995a:	ed14 0a03 	vldr	s0, [r4, #-12]
 801995e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019962:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019966:	ee77 7a80 	vadd.f32	s15, s15, s0
 801996a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801996e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019972:	db72      	blt.n	8019a5a <arm_cmplx_mag_f32+0x166>
 8019974:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019978:	eeb4 0a40 	vcmp.f32	s0, s0
 801997c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019980:	f040 808c 	bne.w	8019a9c <arm_cmplx_mag_f32+0x1a8>
 8019984:	ed05 0a02 	vstr	s0, [r5, #-8]
 8019988:	ed54 7a02 	vldr	s15, [r4, #-8]
 801998c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8019990:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019994:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019998:	ee77 7a80 	vadd.f32	s15, s15, s0
 801999c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80199a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199a4:	db20      	blt.n	80199e8 <arm_cmplx_mag_f32+0xf4>
 80199a6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80199aa:	eeb4 0a40 	vcmp.f32	s0, s0
 80199ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199b2:	d169      	bne.n	8019a88 <arm_cmplx_mag_f32+0x194>
 80199b4:	3e01      	subs	r6, #1
 80199b6:	ed05 0a01 	vstr	s0, [r5, #-4]
 80199ba:	f104 0420 	add.w	r4, r4, #32
 80199be:	f105 0510 	add.w	r5, r5, #16
 80199c2:	d019      	beq.n	80199f8 <arm_cmplx_mag_f32+0x104>
 80199c4:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80199c8:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80199cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80199d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80199d4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80199d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80199dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199e0:	da95      	bge.n	801990e <arm_cmplx_mag_f32+0x1a>
 80199e2:	f845 7c10 	str.w	r7, [r5, #-16]
 80199e6:	e79c      	b.n	8019922 <arm_cmplx_mag_f32+0x2e>
 80199e8:	3e01      	subs	r6, #1
 80199ea:	f845 7c04 	str.w	r7, [r5, #-4]
 80199ee:	f104 0420 	add.w	r4, r4, #32
 80199f2:	f105 0510 	add.w	r5, r5, #16
 80199f6:	d1e5      	bne.n	80199c4 <arm_cmplx_mag_f32+0xd0>
 80199f8:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80199fc:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8019a00:	f012 0503 	ands.w	r5, r2, #3
 8019a04:	d026      	beq.n	8019a54 <arm_cmplx_mag_f32+0x160>
 8019a06:	f100 0408 	add.w	r4, r0, #8
 8019a0a:	2600      	movs	r6, #0
 8019a0c:	e00c      	b.n	8019a28 <arm_cmplx_mag_f32+0x134>
 8019a0e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019a12:	eeb4 0a40 	vcmp.f32	s0, s0
 8019a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a1a:	d12e      	bne.n	8019a7a <arm_cmplx_mag_f32+0x186>
 8019a1c:	3d01      	subs	r5, #1
 8019a1e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8019a22:	f104 0408 	add.w	r4, r4, #8
 8019a26:	d015      	beq.n	8019a54 <arm_cmplx_mag_f32+0x160>
 8019a28:	ed54 7a02 	vldr	s15, [r4, #-8]
 8019a2c:	3104      	adds	r1, #4
 8019a2e:	ed14 0a01 	vldr	s0, [r4, #-4]
 8019a32:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019a36:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019a3a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a46:	dae2      	bge.n	8019a0e <arm_cmplx_mag_f32+0x11a>
 8019a48:	3d01      	subs	r5, #1
 8019a4a:	f841 6c04 	str.w	r6, [r1, #-4]
 8019a4e:	f104 0408 	add.w	r4, r4, #8
 8019a52:	d1e9      	bne.n	8019a28 <arm_cmplx_mag_f32+0x134>
 8019a54:	b004      	add	sp, #16
 8019a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a5a:	f845 7c08 	str.w	r7, [r5, #-8]
 8019a5e:	e793      	b.n	8019988 <arm_cmplx_mag_f32+0x94>
 8019a60:	f845 7c0c 	str.w	r7, [r5, #-12]
 8019a64:	e777      	b.n	8019956 <arm_cmplx_mag_f32+0x62>
 8019a66:	eeb0 0a67 	vmov.f32	s0, s15
 8019a6a:	9203      	str	r2, [sp, #12]
 8019a6c:	9102      	str	r1, [sp, #8]
 8019a6e:	9001      	str	r0, [sp, #4]
 8019a70:	f001 fd58 	bl	801b524 <sqrtf>
 8019a74:	a801      	add	r0, sp, #4
 8019a76:	c807      	ldmia	r0, {r0, r1, r2}
 8019a78:	e751      	b.n	801991e <arm_cmplx_mag_f32+0x2a>
 8019a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8019a7e:	9101      	str	r1, [sp, #4]
 8019a80:	f001 fd50 	bl	801b524 <sqrtf>
 8019a84:	9901      	ldr	r1, [sp, #4]
 8019a86:	e7c9      	b.n	8019a1c <arm_cmplx_mag_f32+0x128>
 8019a88:	eeb0 0a67 	vmov.f32	s0, s15
 8019a8c:	9203      	str	r2, [sp, #12]
 8019a8e:	9102      	str	r1, [sp, #8]
 8019a90:	9001      	str	r0, [sp, #4]
 8019a92:	f001 fd47 	bl	801b524 <sqrtf>
 8019a96:	a801      	add	r0, sp, #4
 8019a98:	c807      	ldmia	r0, {r0, r1, r2}
 8019a9a:	e78b      	b.n	80199b4 <arm_cmplx_mag_f32+0xc0>
 8019a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8019aa0:	9203      	str	r2, [sp, #12]
 8019aa2:	9102      	str	r1, [sp, #8]
 8019aa4:	9001      	str	r0, [sp, #4]
 8019aa6:	f001 fd3d 	bl	801b524 <sqrtf>
 8019aaa:	a801      	add	r0, sp, #4
 8019aac:	c807      	ldmia	r0, {r0, r1, r2}
 8019aae:	e769      	b.n	8019984 <arm_cmplx_mag_f32+0x90>
 8019ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8019ab4:	9203      	str	r2, [sp, #12]
 8019ab6:	9102      	str	r1, [sp, #8]
 8019ab8:	9001      	str	r0, [sp, #4]
 8019aba:	f001 fd33 	bl	801b524 <sqrtf>
 8019abe:	a801      	add	r0, sp, #4
 8019ac0:	c807      	ldmia	r0, {r0, r1, r2}
 8019ac2:	e746      	b.n	8019952 <arm_cmplx_mag_f32+0x5e>

08019ac4 <arm_radix8_butterfly_f32>:
 8019ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac8:	469e      	mov	lr, r3
 8019aca:	4603      	mov	r3, r0
 8019acc:	468a      	mov	sl, r1
 8019ace:	468b      	mov	fp, r1
 8019ad0:	3304      	adds	r3, #4
 8019ad2:	ed2d 8b10 	vpush	{d8-d15}
 8019ad6:	469c      	mov	ip, r3
 8019ad8:	b09d      	sub	sp, #116	; 0x74
 8019ada:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 8019de8 <arm_radix8_butterfly_f32+0x324>
 8019ade:	9019      	str	r0, [sp, #100]	; 0x64
 8019ae0:	921a      	str	r2, [sp, #104]	; 0x68
 8019ae2:	931b      	str	r3, [sp, #108]	; 0x6c
 8019ae4:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8019ae8:	f04f 0800 	mov.w	r8, #0
 8019aec:	461a      	mov	r2, r3
 8019aee:	9311      	str	r3, [sp, #68]	; 0x44
 8019af0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8019af4:	4611      	mov	r1, r2
 8019af6:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8019afa:	9300      	str	r3, [sp, #0]
 8019afc:	0053      	lsls	r3, r2, #1
 8019afe:	18d5      	adds	r5, r2, r3
 8019b00:	9301      	str	r3, [sp, #4]
 8019b02:	0113      	lsls	r3, r2, #4
 8019b04:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019b06:	194c      	adds	r4, r1, r5
 8019b08:	eb02 0609 	add.w	r6, r2, r9
 8019b0c:	9302      	str	r3, [sp, #8]
 8019b0e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8019b12:	4613      	mov	r3, r2
 8019b14:	190a      	adds	r2, r1, r4
 8019b16:	eb06 0709 	add.w	r7, r6, r9
 8019b1a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8019b1e:	1888      	adds	r0, r1, r2
 8019b20:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019b24:	4401      	add	r1, r0
 8019b26:	3204      	adds	r2, #4
 8019b28:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019b2c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019b30:	9b00      	ldr	r3, [sp, #0]
 8019b32:	3104      	adds	r1, #4
 8019b34:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8019b38:	44d8      	add	r8, fp
 8019b3a:	ed90 7a00 	vldr	s14, [r0]
 8019b3e:	ed94 5a00 	vldr	s10, [r4]
 8019b42:	45c2      	cmp	sl, r8
 8019b44:	edd7 3a00 	vldr	s7, [r7]
 8019b48:	ed96 6a00 	vldr	s12, [r6]
 8019b4c:	ee37 1a85 	vadd.f32	s2, s15, s10
 8019b50:	ed52 6a01 	vldr	s13, [r2, #-4]
 8019b54:	ee73 4a87 	vadd.f32	s9, s7, s14
 8019b58:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8019b5c:	edd5 7a00 	vldr	s15, [r5]
 8019b60:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8019b64:	ed11 7a01 	vldr	s14, [r1, #-4]
 8019b68:	ee36 2a26 	vadd.f32	s4, s12, s13
 8019b6c:	ee37 4a87 	vadd.f32	s8, s15, s14
 8019b70:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019b74:	ee71 5a24 	vadd.f32	s11, s2, s9
 8019b78:	ee32 6a04 	vadd.f32	s12, s4, s8
 8019b7c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019b80:	ee31 1a64 	vsub.f32	s2, s2, s9
 8019b84:	ee75 4a86 	vadd.f32	s9, s11, s12
 8019b88:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8019b8c:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8019b90:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8019b94:	ee32 2a44 	vsub.f32	s4, s4, s8
 8019b98:	ee67 7a89 	vmul.f32	s15, s15, s18
 8019b9c:	ed94 0a01 	vldr	s0, [r4, #4]
 8019ba0:	edc4 5a00 	vstr	s11, [r4]
 8019ba4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019ba8:	edd6 5a01 	vldr	s11, [r6, #4]
 8019bac:	edd5 2a01 	vldr	s5, [r5, #4]
 8019bb0:	ee75 1a27 	vadd.f32	s3, s10, s15
 8019bb4:	ed92 4a00 	vldr	s8, [r2]
 8019bb8:	ee75 7a67 	vsub.f32	s15, s10, s15
 8019bbc:	edd1 4a00 	vldr	s9, [r1]
 8019bc0:	ee27 7a09 	vmul.f32	s14, s14, s18
 8019bc4:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8019bc8:	ed9c 6a00 	vldr	s12, [ip]
 8019bcc:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8019bd0:	edd0 0a01 	vldr	s1, [r0, #4]
 8019bd4:	ed97 5a01 	vldr	s10, [r7, #4]
 8019bd8:	ee35 4a84 	vadd.f32	s8, s11, s8
 8019bdc:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8019be0:	ee73 5a26 	vadd.f32	s11, s6, s13
 8019be4:	ee76 2a00 	vadd.f32	s5, s12, s0
 8019be8:	ee73 6a66 	vsub.f32	s13, s6, s13
 8019bec:	ee36 6a40 	vsub.f32	s12, s12, s0
 8019bf0:	ee35 0a20 	vadd.f32	s0, s10, s1
 8019bf4:	ee65 5a89 	vmul.f32	s11, s11, s18
 8019bf8:	ee35 5a60 	vsub.f32	s10, s10, s1
 8019bfc:	ee32 3a80 	vadd.f32	s6, s5, s0
 8019c00:	ee74 0a24 	vadd.f32	s1, s8, s9
 8019c04:	ee66 6a89 	vmul.f32	s13, s13, s18
 8019c08:	ee74 4a64 	vsub.f32	s9, s8, s9
 8019c0c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8019c10:	ee75 2a25 	vadd.f32	s5, s10, s11
 8019c14:	ee33 0a20 	vadd.f32	s0, s6, s1
 8019c18:	ee75 5a65 	vsub.f32	s11, s10, s11
 8019c1c:	ee33 3a60 	vsub.f32	s6, s6, s1
 8019c20:	ee36 5a26 	vadd.f32	s10, s12, s13
 8019c24:	ed8c 0a00 	vstr	s0, [ip]
 8019c28:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019c2c:	449c      	add	ip, r3
 8019c2e:	ee33 6a87 	vadd.f32	s12, s7, s14
 8019c32:	ed84 3a01 	vstr	s6, [r4, #4]
 8019c36:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8019c3a:	441c      	add	r4, r3
 8019c3c:	ee71 3a24 	vadd.f32	s7, s2, s9
 8019c40:	ee71 4a64 	vsub.f32	s9, s2, s9
 8019c44:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8019c48:	edc7 3a00 	vstr	s7, [r7]
 8019c4c:	ee34 1a42 	vsub.f32	s2, s8, s4
 8019c50:	edc0 4a00 	vstr	s9, [r0]
 8019c54:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8019c58:	ee75 4a46 	vsub.f32	s9, s10, s12
 8019c5c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019c60:	ed87 1a01 	vstr	s2, [r7, #4]
 8019c64:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8019c68:	441f      	add	r7, r3
 8019c6a:	ee32 4a04 	vadd.f32	s8, s4, s8
 8019c6e:	ee71 1ae2 	vsub.f32	s3, s3, s5
 8019c72:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019c76:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019c7a:	ed80 4a01 	vstr	s8, [r0, #4]
 8019c7e:	ed86 3a00 	vstr	s6, [r6]
 8019c82:	4418      	add	r0, r3
 8019c84:	ed41 1a01 	vstr	s3, [r1, #-4]
 8019c88:	ed42 3a01 	vstr	s7, [r2, #-4]
 8019c8c:	edc5 7a00 	vstr	s15, [r5]
 8019c90:	edc6 4a01 	vstr	s9, [r6, #4]
 8019c94:	441e      	add	r6, r3
 8019c96:	ed81 6a00 	vstr	s12, [r1]
 8019c9a:	4419      	add	r1, r3
 8019c9c:	edc2 5a00 	vstr	s11, [r2]
 8019ca0:	441a      	add	r2, r3
 8019ca2:	ed85 7a01 	vstr	s14, [r5, #4]
 8019ca6:	441d      	add	r5, r3
 8019ca8:	f63f af44 	bhi.w	8019b34 <arm_radix8_butterfly_f32+0x70>
 8019cac:	9300      	str	r3, [sp, #0]
 8019cae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019cb0:	2b07      	cmp	r3, #7
 8019cb2:	f240 81f4 	bls.w	801a09e <arm_radix8_butterfly_f32+0x5da>
 8019cb6:	9901      	ldr	r1, [sp, #4]
 8019cb8:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8019cbc:	9d02      	ldr	r5, [sp, #8]
 8019cbe:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8019cc2:	3101      	adds	r1, #1
 8019cc4:	eb04 000e 	add.w	r0, r4, lr
 8019cc8:	00e4      	lsls	r4, r4, #3
 8019cca:	3508      	adds	r5, #8
 8019ccc:	4419      	add	r1, r3
 8019cce:	eb00 0c0e 	add.w	ip, r0, lr
 8019cd2:	9413      	str	r4, [sp, #76]	; 0x4c
 8019cd4:	00c0      	lsls	r0, r0, #3
 8019cd6:	185e      	adds	r6, r3, r1
 8019cd8:	4617      	mov	r7, r2
 8019cda:	9218      	str	r2, [sp, #96]	; 0x60
 8019cdc:	f109 0908 	add.w	r9, r9, #8
 8019ce0:	199c      	adds	r4, r3, r6
 8019ce2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019ce4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019ce6:	9012      	str	r0, [sp, #72]	; 0x48
 8019ce8:	195d      	adds	r5, r3, r5
 8019cea:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019cec:	443a      	add	r2, r7
 8019cee:	950c      	str	r5, [sp, #48]	; 0x30
 8019cf0:	4698      	mov	r8, r3
 8019cf2:	4420      	add	r0, r4
 8019cf4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019cf6:	19d7      	adds	r7, r2, r7
 8019cf8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8019cfc:	4405      	add	r5, r0
 8019cfe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019d02:	9710      	str	r7, [sp, #64]	; 0x40
 8019d04:	eb0c 070e 	add.w	r7, ip, lr
 8019d08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019d0c:	3404      	adds	r4, #4
 8019d0e:	3004      	adds	r0, #4
 8019d10:	44c8      	add	r8, r9
 8019d12:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8019d16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019d18:	940a      	str	r4, [sp, #40]	; 0x28
 8019d1a:	9009      	str	r0, [sp, #36]	; 0x24
 8019d1c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019d20:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019d22:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019d26:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019d28:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8019d2c:	eb07 080e 	add.w	r8, r7, lr
 8019d30:	eb04 0900 	add.w	r9, r4, r0
 8019d34:	00f8      	lsls	r0, r7, #3
 8019d36:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8019d3a:	3504      	adds	r5, #4
 8019d3c:	4607      	mov	r7, r0
 8019d3e:	9017      	str	r0, [sp, #92]	; 0x5c
 8019d40:	910b      	str	r1, [sp, #44]	; 0x2c
 8019d42:	4618      	mov	r0, r3
 8019d44:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8019d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d4a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8019d4e:	18e3      	adds	r3, r4, r3
 8019d50:	9508      	str	r5, [sp, #32]
 8019d52:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019d54:	910e      	str	r1, [sp, #56]	; 0x38
 8019d56:	4621      	mov	r1, r4
 8019d58:	eb04 0805 	add.w	r8, r4, r5
 8019d5c:	9304      	str	r3, [sp, #16]
 8019d5e:	19e5      	adds	r5, r4, r7
 8019d60:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8019d64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019d66:	9316      	str	r3, [sp, #88]	; 0x58
 8019d68:	190b      	adds	r3, r1, r4
 8019d6a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019d6c:	9505      	str	r5, [sp, #20]
 8019d6e:	9303      	str	r3, [sp, #12]
 8019d70:	f100 0308 	add.w	r3, r0, #8
 8019d74:	9707      	str	r7, [sp, #28]
 8019d76:	4638      	mov	r0, r7
 8019d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8019d7a:	2301      	movs	r3, #1
 8019d7c:	9306      	str	r3, [sp, #24]
 8019d7e:	9b00      	ldr	r3, [sp, #0]
 8019d80:	ed90 fa00 	vldr	s30, [r0]
 8019d84:	edd0 ba01 	vldr	s23, [r0, #4]
 8019d88:	9803      	ldr	r0, [sp, #12]
 8019d8a:	9903      	ldr	r1, [sp, #12]
 8019d8c:	ed90 ba01 	vldr	s22, [r0, #4]
 8019d90:	9804      	ldr	r0, [sp, #16]
 8019d92:	edd1 ea00 	vldr	s29, [r1]
 8019d96:	edd0 aa01 	vldr	s21, [r0, #4]
 8019d9a:	9805      	ldr	r0, [sp, #20]
 8019d9c:	9905      	ldr	r1, [sp, #20]
 8019d9e:	edd0 7a01 	vldr	s15, [r0, #4]
 8019da2:	ed91 da00 	vldr	s26, [r1]
 8019da6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019da8:	9c04      	ldr	r4, [sp, #16]
 8019daa:	edcd 7a01 	vstr	s15, [sp, #4]
 8019dae:	edd8 7a01 	vldr	s15, [r8, #4]
 8019db2:	9100      	str	r1, [sp, #0]
 8019db4:	edd2 fa00 	vldr	s31, [r2]
 8019db8:	ed94 ea00 	vldr	s28, [r4]
 8019dbc:	ed92 ca01 	vldr	s24, [r2, #4]
 8019dc0:	f8dd e020 	ldr.w	lr, [sp, #32]
 8019dc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019dc6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019dc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019dca:	edd9 da00 	vldr	s27, [r9]
 8019dce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019dd0:	edd8 ca00 	vldr	s25, [r8]
 8019dd4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019dd8:	f8dd c018 	ldr.w	ip, [sp, #24]
 8019ddc:	ed99 aa01 	vldr	s20, [r9, #4]
 8019de0:	edcd 7a02 	vstr	s15, [sp, #8]
 8019de4:	9800      	ldr	r0, [sp, #0]
 8019de6:	e001      	b.n	8019dec <arm_radix8_butterfly_f32+0x328>
 8019de8:	3f3504f3 	.word	0x3f3504f3
 8019dec:	edd5 3a00 	vldr	s7, [r5]
 8019df0:	44dc      	add	ip, fp
 8019df2:	ed91 7a00 	vldr	s14, [r1]
 8019df6:	edd4 8a00 	vldr	s17, [r4]
 8019dfa:	45e2      	cmp	sl, ip
 8019dfc:	ed57 7a01 	vldr	s15, [r7, #-4]
 8019e00:	ed90 5a00 	vldr	s10, [r0]
 8019e04:	ed56 5a01 	vldr	s11, [r6, #-4]
 8019e08:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8019e0c:	ed92 1a00 	vldr	s2, [r2]
 8019e10:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8019e14:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8019e18:	ee75 9a25 	vadd.f32	s19, s10, s11
 8019e1c:	ee31 3a07 	vadd.f32	s6, s2, s14
 8019e20:	ed92 8a01 	vldr	s16, [r2, #4]
 8019e24:	ee73 6a84 	vadd.f32	s13, s7, s8
 8019e28:	ee75 5a65 	vsub.f32	s11, s10, s11
 8019e2c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8019e30:	ee73 1a06 	vadd.f32	s3, s6, s12
 8019e34:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8019e38:	ee75 7a84 	vadd.f32	s15, s11, s8
 8019e3c:	ee31 1a47 	vsub.f32	s2, s2, s14
 8019e40:	ee31 7a85 	vadd.f32	s14, s3, s10
 8019e44:	ee67 7a89 	vmul.f32	s15, s15, s18
 8019e48:	ee33 3a46 	vsub.f32	s6, s6, s12
 8019e4c:	ed82 7a00 	vstr	s14, [r2]
 8019e50:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8019e54:	ed96 6a00 	vldr	s12, [r6]
 8019e58:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8019e5c:	edd5 3a01 	vldr	s7, [r5, #4]
 8019e60:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8019e64:	ed90 7a01 	vldr	s14, [r0, #4]
 8019e68:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8019e6c:	edde 4a00 	vldr	s9, [lr]
 8019e70:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8019e74:	ee77 2a46 	vsub.f32	s5, s14, s12
 8019e78:	edd1 6a01 	vldr	s13, [r1, #4]
 8019e7c:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8019e80:	edd7 0a00 	vldr	s1, [r7]
 8019e84:	ee77 5a06 	vadd.f32	s11, s14, s12
 8019e88:	ed94 7a01 	vldr	s14, [r4, #4]
 8019e8c:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8019e90:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8019e94:	ee78 4a66 	vsub.f32	s9, s16, s13
 8019e98:	ee78 3a26 	vadd.f32	s7, s16, s13
 8019e9c:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8019ea0:	ee77 6a20 	vadd.f32	s13, s14, s1
 8019ea4:	ee24 4a09 	vmul.f32	s8, s8, s18
 8019ea8:	ee37 7a60 	vsub.f32	s14, s14, s1
 8019eac:	ee20 8a09 	vmul.f32	s16, s0, s18
 8019eb0:	ee75 0a86 	vadd.f32	s1, s11, s12
 8019eb4:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8019eb8:	ee62 2a89 	vmul.f32	s5, s5, s18
 8019ebc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8019ec0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8019ec4:	ee77 7a62 	vsub.f32	s15, s14, s5
 8019ec8:	ee74 5a88 	vadd.f32	s11, s9, s16
 8019ecc:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8019ed0:	ee77 4a22 	vadd.f32	s9, s14, s5
 8019ed4:	ee71 2a04 	vadd.f32	s5, s2, s8
 8019ed8:	ee31 7a44 	vsub.f32	s14, s2, s8
 8019edc:	ee30 1a60 	vsub.f32	s2, s0, s1
 8019ee0:	ee73 1a06 	vadd.f32	s3, s6, s12
 8019ee4:	ee33 6a46 	vsub.f32	s12, s6, s12
 8019ee8:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8019eec:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8019ef0:	ee38 4a68 	vsub.f32	s8, s16, s17
 8019ef4:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8019ef8:	ee72 5a25 	vadd.f32	s11, s4, s11
 8019efc:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8019f00:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8019f04:	ee77 2a27 	vadd.f32	s5, s14, s15
 8019f08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019f0c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8019f10:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8019f14:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8019f18:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8019f1c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8019f20:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8019f24:	ee70 0a20 	vadd.f32	s1, s0, s1
 8019f28:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8019f2c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8019f30:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8019f34:	edc2 0a01 	vstr	s1, [r2, #4]
 8019f38:	ee38 8a88 	vadd.f32	s16, s17, s16
 8019f3c:	441a      	add	r2, r3
 8019f3e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8019f42:	ee31 5a45 	vsub.f32	s10, s2, s10
 8019f46:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8019f4a:	ed81 8a00 	vstr	s16, [r1]
 8019f4e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8019f52:	ee33 3a61 	vsub.f32	s6, s6, s3
 8019f56:	ed81 5a01 	vstr	s10, [r1, #4]
 8019f5a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8019f5e:	edcd 3a00 	vstr	s7, [sp]
 8019f62:	ed9d 5a02 	vldr	s10, [sp, #8]
 8019f66:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8019f6a:	eddd 3a01 	vldr	s7, [sp, #4]
 8019f6e:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8019f72:	ed84 0a00 	vstr	s0, [r4]
 8019f76:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019f7a:	ed84 3a01 	vstr	s6, [r4, #4]
 8019f7e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8019f82:	ee23 6a86 	vmul.f32	s12, s7, s12
 8019f86:	eddd 3a00 	vldr	s7, [sp]
 8019f8a:	ee25 5a25 	vmul.f32	s10, s10, s11
 8019f8e:	4419      	add	r1, r3
 8019f90:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8019f94:	441c      	add	r4, r3
 8019f96:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8019f9a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8019f9e:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8019fa2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8019fa6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8019faa:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8019fae:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8019fb2:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8019fb6:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8019fba:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8019fbe:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8019fc2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8019fc6:	ee38 8a01 	vadd.f32	s16, s16, s2
 8019fca:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8019fce:	ee39 5a85 	vadd.f32	s10, s19, s10
 8019fd2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8019fd6:	ed07 8a01 	vstr	s16, [r7, #-4]
 8019fda:	ee30 0a21 	vadd.f32	s0, s0, s3
 8019fde:	ed87 6a00 	vstr	s12, [r7]
 8019fe2:	ee74 2a62 	vsub.f32	s5, s8, s5
 8019fe6:	edc0 0a00 	vstr	s1, [r0]
 8019fea:	ee33 3a28 	vadd.f32	s6, s6, s17
 8019fee:	edc0 3a01 	vstr	s7, [r0, #4]
 8019ff2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019ff6:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8019ffa:	edce 4a00 	vstr	s9, [lr]
 8019ffe:	4418      	add	r0, r3
 801a000:	ed06 0a01 	vstr	s0, [r6, #-4]
 801a004:	441f      	add	r7, r3
 801a006:	edc6 2a00 	vstr	s5, [r6]
 801a00a:	449e      	add	lr, r3
 801a00c:	ed85 3a00 	vstr	s6, [r5]
 801a010:	441e      	add	r6, r3
 801a012:	ed85 7a01 	vstr	s14, [r5, #4]
 801a016:	441d      	add	r5, r3
 801a018:	f63f aee8 	bhi.w	8019dec <arm_radix8_butterfly_f32+0x328>
 801a01c:	9a06      	ldr	r2, [sp, #24]
 801a01e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a020:	3201      	adds	r2, #1
 801a022:	4611      	mov	r1, r2
 801a024:	9206      	str	r2, [sp, #24]
 801a026:	9a07      	ldr	r2, [sp, #28]
 801a028:	4402      	add	r2, r0
 801a02a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a02c:	9207      	str	r2, [sp, #28]
 801a02e:	9a03      	ldr	r2, [sp, #12]
 801a030:	4402      	add	r2, r0
 801a032:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a034:	9203      	str	r2, [sp, #12]
 801a036:	9a04      	ldr	r2, [sp, #16]
 801a038:	4402      	add	r2, r0
 801a03a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a03c:	9204      	str	r2, [sp, #16]
 801a03e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a040:	4491      	add	r9, r2
 801a042:	9a05      	ldr	r2, [sp, #20]
 801a044:	4402      	add	r2, r0
 801a046:	9205      	str	r2, [sp, #20]
 801a048:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a04a:	4490      	add	r8, r2
 801a04c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a04e:	3208      	adds	r2, #8
 801a050:	920f      	str	r2, [sp, #60]	; 0x3c
 801a052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a054:	3208      	adds	r2, #8
 801a056:	920e      	str	r2, [sp, #56]	; 0x38
 801a058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a05a:	3208      	adds	r2, #8
 801a05c:	920d      	str	r2, [sp, #52]	; 0x34
 801a05e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a060:	3208      	adds	r2, #8
 801a062:	920c      	str	r2, [sp, #48]	; 0x30
 801a064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a066:	3208      	adds	r2, #8
 801a068:	920b      	str	r2, [sp, #44]	; 0x2c
 801a06a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a06c:	3208      	adds	r2, #8
 801a06e:	920a      	str	r2, [sp, #40]	; 0x28
 801a070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a072:	3208      	adds	r2, #8
 801a074:	9209      	str	r2, [sp, #36]	; 0x24
 801a076:	9a08      	ldr	r2, [sp, #32]
 801a078:	3208      	adds	r2, #8
 801a07a:	9208      	str	r2, [sp, #32]
 801a07c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a07e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a080:	4622      	mov	r2, r4
 801a082:	4288      	cmp	r0, r1
 801a084:	d005      	beq.n	801a092 <arm_radix8_butterfly_f32+0x5ce>
 801a086:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a088:	4621      	mov	r1, r4
 801a08a:	4401      	add	r1, r0
 801a08c:	9807      	ldr	r0, [sp, #28]
 801a08e:	9110      	str	r1, [sp, #64]	; 0x40
 801a090:	e676      	b.n	8019d80 <arm_radix8_butterfly_f32+0x2bc>
 801a092:	4683      	mov	fp, r0
 801a094:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 801a098:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 801a09c:	e522      	b.n	8019ae4 <arm_radix8_butterfly_f32+0x20>
 801a09e:	b01d      	add	sp, #116	; 0x74
 801a0a0:	ecbd 8b10 	vpop	{d8-d15}
 801a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a0a8 <__errno>:
 801a0a8:	4b01      	ldr	r3, [pc, #4]	; (801a0b0 <__errno+0x8>)
 801a0aa:	6818      	ldr	r0, [r3, #0]
 801a0ac:	4770      	bx	lr
 801a0ae:	bf00      	nop
 801a0b0:	2000005c 	.word	0x2000005c

0801a0b4 <__libc_init_array>:
 801a0b4:	b570      	push	{r4, r5, r6, lr}
 801a0b6:	4d0d      	ldr	r5, [pc, #52]	; (801a0ec <__libc_init_array+0x38>)
 801a0b8:	4c0d      	ldr	r4, [pc, #52]	; (801a0f0 <__libc_init_array+0x3c>)
 801a0ba:	1b64      	subs	r4, r4, r5
 801a0bc:	10a4      	asrs	r4, r4, #2
 801a0be:	2600      	movs	r6, #0
 801a0c0:	42a6      	cmp	r6, r4
 801a0c2:	d109      	bne.n	801a0d8 <__libc_init_array+0x24>
 801a0c4:	4d0b      	ldr	r5, [pc, #44]	; (801a0f4 <__libc_init_array+0x40>)
 801a0c6:	4c0c      	ldr	r4, [pc, #48]	; (801a0f8 <__libc_init_array+0x44>)
 801a0c8:	f001 fa56 	bl	801b578 <_init>
 801a0cc:	1b64      	subs	r4, r4, r5
 801a0ce:	10a4      	asrs	r4, r4, #2
 801a0d0:	2600      	movs	r6, #0
 801a0d2:	42a6      	cmp	r6, r4
 801a0d4:	d105      	bne.n	801a0e2 <__libc_init_array+0x2e>
 801a0d6:	bd70      	pop	{r4, r5, r6, pc}
 801a0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a0dc:	4798      	blx	r3
 801a0de:	3601      	adds	r6, #1
 801a0e0:	e7ee      	b.n	801a0c0 <__libc_init_array+0xc>
 801a0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a0e6:	4798      	blx	r3
 801a0e8:	3601      	adds	r6, #1
 801a0ea:	e7f2      	b.n	801a0d2 <__libc_init_array+0x1e>
 801a0ec:	08031760 	.word	0x08031760
 801a0f0:	08031760 	.word	0x08031760
 801a0f4:	08031760 	.word	0x08031760
 801a0f8:	08031764 	.word	0x08031764

0801a0fc <malloc>:
 801a0fc:	4b02      	ldr	r3, [pc, #8]	; (801a108 <malloc+0xc>)
 801a0fe:	4601      	mov	r1, r0
 801a100:	6818      	ldr	r0, [r3, #0]
 801a102:	f000 b871 	b.w	801a1e8 <_malloc_r>
 801a106:	bf00      	nop
 801a108:	2000005c 	.word	0x2000005c

0801a10c <free>:
 801a10c:	4b02      	ldr	r3, [pc, #8]	; (801a118 <free+0xc>)
 801a10e:	4601      	mov	r1, r0
 801a110:	6818      	ldr	r0, [r3, #0]
 801a112:	f000 b819 	b.w	801a148 <_free_r>
 801a116:	bf00      	nop
 801a118:	2000005c 	.word	0x2000005c

0801a11c <memcpy>:
 801a11c:	440a      	add	r2, r1
 801a11e:	4291      	cmp	r1, r2
 801a120:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a124:	d100      	bne.n	801a128 <memcpy+0xc>
 801a126:	4770      	bx	lr
 801a128:	b510      	push	{r4, lr}
 801a12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a12e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a132:	4291      	cmp	r1, r2
 801a134:	d1f9      	bne.n	801a12a <memcpy+0xe>
 801a136:	bd10      	pop	{r4, pc}

0801a138 <memset>:
 801a138:	4402      	add	r2, r0
 801a13a:	4603      	mov	r3, r0
 801a13c:	4293      	cmp	r3, r2
 801a13e:	d100      	bne.n	801a142 <memset+0xa>
 801a140:	4770      	bx	lr
 801a142:	f803 1b01 	strb.w	r1, [r3], #1
 801a146:	e7f9      	b.n	801a13c <memset+0x4>

0801a148 <_free_r>:
 801a148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a14a:	2900      	cmp	r1, #0
 801a14c:	d048      	beq.n	801a1e0 <_free_r+0x98>
 801a14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a152:	9001      	str	r0, [sp, #4]
 801a154:	2b00      	cmp	r3, #0
 801a156:	f1a1 0404 	sub.w	r4, r1, #4
 801a15a:	bfb8      	it	lt
 801a15c:	18e4      	addlt	r4, r4, r3
 801a15e:	f000 fc4f 	bl	801aa00 <__malloc_lock>
 801a162:	4a20      	ldr	r2, [pc, #128]	; (801a1e4 <_free_r+0x9c>)
 801a164:	9801      	ldr	r0, [sp, #4]
 801a166:	6813      	ldr	r3, [r2, #0]
 801a168:	4615      	mov	r5, r2
 801a16a:	b933      	cbnz	r3, 801a17a <_free_r+0x32>
 801a16c:	6063      	str	r3, [r4, #4]
 801a16e:	6014      	str	r4, [r2, #0]
 801a170:	b003      	add	sp, #12
 801a172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a176:	f000 bc49 	b.w	801aa0c <__malloc_unlock>
 801a17a:	42a3      	cmp	r3, r4
 801a17c:	d90b      	bls.n	801a196 <_free_r+0x4e>
 801a17e:	6821      	ldr	r1, [r4, #0]
 801a180:	1862      	adds	r2, r4, r1
 801a182:	4293      	cmp	r3, r2
 801a184:	bf04      	itt	eq
 801a186:	681a      	ldreq	r2, [r3, #0]
 801a188:	685b      	ldreq	r3, [r3, #4]
 801a18a:	6063      	str	r3, [r4, #4]
 801a18c:	bf04      	itt	eq
 801a18e:	1852      	addeq	r2, r2, r1
 801a190:	6022      	streq	r2, [r4, #0]
 801a192:	602c      	str	r4, [r5, #0]
 801a194:	e7ec      	b.n	801a170 <_free_r+0x28>
 801a196:	461a      	mov	r2, r3
 801a198:	685b      	ldr	r3, [r3, #4]
 801a19a:	b10b      	cbz	r3, 801a1a0 <_free_r+0x58>
 801a19c:	42a3      	cmp	r3, r4
 801a19e:	d9fa      	bls.n	801a196 <_free_r+0x4e>
 801a1a0:	6811      	ldr	r1, [r2, #0]
 801a1a2:	1855      	adds	r5, r2, r1
 801a1a4:	42a5      	cmp	r5, r4
 801a1a6:	d10b      	bne.n	801a1c0 <_free_r+0x78>
 801a1a8:	6824      	ldr	r4, [r4, #0]
 801a1aa:	4421      	add	r1, r4
 801a1ac:	1854      	adds	r4, r2, r1
 801a1ae:	42a3      	cmp	r3, r4
 801a1b0:	6011      	str	r1, [r2, #0]
 801a1b2:	d1dd      	bne.n	801a170 <_free_r+0x28>
 801a1b4:	681c      	ldr	r4, [r3, #0]
 801a1b6:	685b      	ldr	r3, [r3, #4]
 801a1b8:	6053      	str	r3, [r2, #4]
 801a1ba:	4421      	add	r1, r4
 801a1bc:	6011      	str	r1, [r2, #0]
 801a1be:	e7d7      	b.n	801a170 <_free_r+0x28>
 801a1c0:	d902      	bls.n	801a1c8 <_free_r+0x80>
 801a1c2:	230c      	movs	r3, #12
 801a1c4:	6003      	str	r3, [r0, #0]
 801a1c6:	e7d3      	b.n	801a170 <_free_r+0x28>
 801a1c8:	6825      	ldr	r5, [r4, #0]
 801a1ca:	1961      	adds	r1, r4, r5
 801a1cc:	428b      	cmp	r3, r1
 801a1ce:	bf04      	itt	eq
 801a1d0:	6819      	ldreq	r1, [r3, #0]
 801a1d2:	685b      	ldreq	r3, [r3, #4]
 801a1d4:	6063      	str	r3, [r4, #4]
 801a1d6:	bf04      	itt	eq
 801a1d8:	1949      	addeq	r1, r1, r5
 801a1da:	6021      	streq	r1, [r4, #0]
 801a1dc:	6054      	str	r4, [r2, #4]
 801a1de:	e7c7      	b.n	801a170 <_free_r+0x28>
 801a1e0:	b003      	add	sp, #12
 801a1e2:	bd30      	pop	{r4, r5, pc}
 801a1e4:	20008534 	.word	0x20008534

0801a1e8 <_malloc_r>:
 801a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ea:	1ccd      	adds	r5, r1, #3
 801a1ec:	f025 0503 	bic.w	r5, r5, #3
 801a1f0:	3508      	adds	r5, #8
 801a1f2:	2d0c      	cmp	r5, #12
 801a1f4:	bf38      	it	cc
 801a1f6:	250c      	movcc	r5, #12
 801a1f8:	2d00      	cmp	r5, #0
 801a1fa:	4606      	mov	r6, r0
 801a1fc:	db01      	blt.n	801a202 <_malloc_r+0x1a>
 801a1fe:	42a9      	cmp	r1, r5
 801a200:	d903      	bls.n	801a20a <_malloc_r+0x22>
 801a202:	230c      	movs	r3, #12
 801a204:	6033      	str	r3, [r6, #0]
 801a206:	2000      	movs	r0, #0
 801a208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a20a:	f000 fbf9 	bl	801aa00 <__malloc_lock>
 801a20e:	4921      	ldr	r1, [pc, #132]	; (801a294 <_malloc_r+0xac>)
 801a210:	680a      	ldr	r2, [r1, #0]
 801a212:	4614      	mov	r4, r2
 801a214:	b99c      	cbnz	r4, 801a23e <_malloc_r+0x56>
 801a216:	4f20      	ldr	r7, [pc, #128]	; (801a298 <_malloc_r+0xb0>)
 801a218:	683b      	ldr	r3, [r7, #0]
 801a21a:	b923      	cbnz	r3, 801a226 <_malloc_r+0x3e>
 801a21c:	4621      	mov	r1, r4
 801a21e:	4630      	mov	r0, r6
 801a220:	f000 f8e0 	bl	801a3e4 <_sbrk_r>
 801a224:	6038      	str	r0, [r7, #0]
 801a226:	4629      	mov	r1, r5
 801a228:	4630      	mov	r0, r6
 801a22a:	f000 f8db 	bl	801a3e4 <_sbrk_r>
 801a22e:	1c43      	adds	r3, r0, #1
 801a230:	d123      	bne.n	801a27a <_malloc_r+0x92>
 801a232:	230c      	movs	r3, #12
 801a234:	6033      	str	r3, [r6, #0]
 801a236:	4630      	mov	r0, r6
 801a238:	f000 fbe8 	bl	801aa0c <__malloc_unlock>
 801a23c:	e7e3      	b.n	801a206 <_malloc_r+0x1e>
 801a23e:	6823      	ldr	r3, [r4, #0]
 801a240:	1b5b      	subs	r3, r3, r5
 801a242:	d417      	bmi.n	801a274 <_malloc_r+0x8c>
 801a244:	2b0b      	cmp	r3, #11
 801a246:	d903      	bls.n	801a250 <_malloc_r+0x68>
 801a248:	6023      	str	r3, [r4, #0]
 801a24a:	441c      	add	r4, r3
 801a24c:	6025      	str	r5, [r4, #0]
 801a24e:	e004      	b.n	801a25a <_malloc_r+0x72>
 801a250:	6863      	ldr	r3, [r4, #4]
 801a252:	42a2      	cmp	r2, r4
 801a254:	bf0c      	ite	eq
 801a256:	600b      	streq	r3, [r1, #0]
 801a258:	6053      	strne	r3, [r2, #4]
 801a25a:	4630      	mov	r0, r6
 801a25c:	f000 fbd6 	bl	801aa0c <__malloc_unlock>
 801a260:	f104 000b 	add.w	r0, r4, #11
 801a264:	1d23      	adds	r3, r4, #4
 801a266:	f020 0007 	bic.w	r0, r0, #7
 801a26a:	1ac2      	subs	r2, r0, r3
 801a26c:	d0cc      	beq.n	801a208 <_malloc_r+0x20>
 801a26e:	1a1b      	subs	r3, r3, r0
 801a270:	50a3      	str	r3, [r4, r2]
 801a272:	e7c9      	b.n	801a208 <_malloc_r+0x20>
 801a274:	4622      	mov	r2, r4
 801a276:	6864      	ldr	r4, [r4, #4]
 801a278:	e7cc      	b.n	801a214 <_malloc_r+0x2c>
 801a27a:	1cc4      	adds	r4, r0, #3
 801a27c:	f024 0403 	bic.w	r4, r4, #3
 801a280:	42a0      	cmp	r0, r4
 801a282:	d0e3      	beq.n	801a24c <_malloc_r+0x64>
 801a284:	1a21      	subs	r1, r4, r0
 801a286:	4630      	mov	r0, r6
 801a288:	f000 f8ac 	bl	801a3e4 <_sbrk_r>
 801a28c:	3001      	adds	r0, #1
 801a28e:	d1dd      	bne.n	801a24c <_malloc_r+0x64>
 801a290:	e7cf      	b.n	801a232 <_malloc_r+0x4a>
 801a292:	bf00      	nop
 801a294:	20008534 	.word	0x20008534
 801a298:	20008538 	.word	0x20008538

0801a29c <iprintf>:
 801a29c:	b40f      	push	{r0, r1, r2, r3}
 801a29e:	4b0a      	ldr	r3, [pc, #40]	; (801a2c8 <iprintf+0x2c>)
 801a2a0:	b513      	push	{r0, r1, r4, lr}
 801a2a2:	681c      	ldr	r4, [r3, #0]
 801a2a4:	b124      	cbz	r4, 801a2b0 <iprintf+0x14>
 801a2a6:	69a3      	ldr	r3, [r4, #24]
 801a2a8:	b913      	cbnz	r3, 801a2b0 <iprintf+0x14>
 801a2aa:	4620      	mov	r0, r4
 801a2ac:	f000 faa4 	bl	801a7f8 <__sinit>
 801a2b0:	ab05      	add	r3, sp, #20
 801a2b2:	9a04      	ldr	r2, [sp, #16]
 801a2b4:	68a1      	ldr	r1, [r4, #8]
 801a2b6:	9301      	str	r3, [sp, #4]
 801a2b8:	4620      	mov	r0, r4
 801a2ba:	f000 fd33 	bl	801ad24 <_vfiprintf_r>
 801a2be:	b002      	add	sp, #8
 801a2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2c4:	b004      	add	sp, #16
 801a2c6:	4770      	bx	lr
 801a2c8:	2000005c 	.word	0x2000005c

0801a2cc <putchar>:
 801a2cc:	4b09      	ldr	r3, [pc, #36]	; (801a2f4 <putchar+0x28>)
 801a2ce:	b513      	push	{r0, r1, r4, lr}
 801a2d0:	681c      	ldr	r4, [r3, #0]
 801a2d2:	4601      	mov	r1, r0
 801a2d4:	b134      	cbz	r4, 801a2e4 <putchar+0x18>
 801a2d6:	69a3      	ldr	r3, [r4, #24]
 801a2d8:	b923      	cbnz	r3, 801a2e4 <putchar+0x18>
 801a2da:	9001      	str	r0, [sp, #4]
 801a2dc:	4620      	mov	r0, r4
 801a2de:	f000 fa8b 	bl	801a7f8 <__sinit>
 801a2e2:	9901      	ldr	r1, [sp, #4]
 801a2e4:	68a2      	ldr	r2, [r4, #8]
 801a2e6:	4620      	mov	r0, r4
 801a2e8:	b002      	add	sp, #8
 801a2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2ee:	f000 bfdd 	b.w	801b2ac <_putc_r>
 801a2f2:	bf00      	nop
 801a2f4:	2000005c 	.word	0x2000005c

0801a2f8 <_puts_r>:
 801a2f8:	b570      	push	{r4, r5, r6, lr}
 801a2fa:	460e      	mov	r6, r1
 801a2fc:	4605      	mov	r5, r0
 801a2fe:	b118      	cbz	r0, 801a308 <_puts_r+0x10>
 801a300:	6983      	ldr	r3, [r0, #24]
 801a302:	b90b      	cbnz	r3, 801a308 <_puts_r+0x10>
 801a304:	f000 fa78 	bl	801a7f8 <__sinit>
 801a308:	69ab      	ldr	r3, [r5, #24]
 801a30a:	68ac      	ldr	r4, [r5, #8]
 801a30c:	b913      	cbnz	r3, 801a314 <_puts_r+0x1c>
 801a30e:	4628      	mov	r0, r5
 801a310:	f000 fa72 	bl	801a7f8 <__sinit>
 801a314:	4b2c      	ldr	r3, [pc, #176]	; (801a3c8 <_puts_r+0xd0>)
 801a316:	429c      	cmp	r4, r3
 801a318:	d120      	bne.n	801a35c <_puts_r+0x64>
 801a31a:	686c      	ldr	r4, [r5, #4]
 801a31c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a31e:	07db      	lsls	r3, r3, #31
 801a320:	d405      	bmi.n	801a32e <_puts_r+0x36>
 801a322:	89a3      	ldrh	r3, [r4, #12]
 801a324:	0598      	lsls	r0, r3, #22
 801a326:	d402      	bmi.n	801a32e <_puts_r+0x36>
 801a328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a32a:	f000 fb03 	bl	801a934 <__retarget_lock_acquire_recursive>
 801a32e:	89a3      	ldrh	r3, [r4, #12]
 801a330:	0719      	lsls	r1, r3, #28
 801a332:	d51d      	bpl.n	801a370 <_puts_r+0x78>
 801a334:	6923      	ldr	r3, [r4, #16]
 801a336:	b1db      	cbz	r3, 801a370 <_puts_r+0x78>
 801a338:	3e01      	subs	r6, #1
 801a33a:	68a3      	ldr	r3, [r4, #8]
 801a33c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a340:	3b01      	subs	r3, #1
 801a342:	60a3      	str	r3, [r4, #8]
 801a344:	bb39      	cbnz	r1, 801a396 <_puts_r+0x9e>
 801a346:	2b00      	cmp	r3, #0
 801a348:	da38      	bge.n	801a3bc <_puts_r+0xc4>
 801a34a:	4622      	mov	r2, r4
 801a34c:	210a      	movs	r1, #10
 801a34e:	4628      	mov	r0, r5
 801a350:	f000 f878 	bl	801a444 <__swbuf_r>
 801a354:	3001      	adds	r0, #1
 801a356:	d011      	beq.n	801a37c <_puts_r+0x84>
 801a358:	250a      	movs	r5, #10
 801a35a:	e011      	b.n	801a380 <_puts_r+0x88>
 801a35c:	4b1b      	ldr	r3, [pc, #108]	; (801a3cc <_puts_r+0xd4>)
 801a35e:	429c      	cmp	r4, r3
 801a360:	d101      	bne.n	801a366 <_puts_r+0x6e>
 801a362:	68ac      	ldr	r4, [r5, #8]
 801a364:	e7da      	b.n	801a31c <_puts_r+0x24>
 801a366:	4b1a      	ldr	r3, [pc, #104]	; (801a3d0 <_puts_r+0xd8>)
 801a368:	429c      	cmp	r4, r3
 801a36a:	bf08      	it	eq
 801a36c:	68ec      	ldreq	r4, [r5, #12]
 801a36e:	e7d5      	b.n	801a31c <_puts_r+0x24>
 801a370:	4621      	mov	r1, r4
 801a372:	4628      	mov	r0, r5
 801a374:	f000 f8b8 	bl	801a4e8 <__swsetup_r>
 801a378:	2800      	cmp	r0, #0
 801a37a:	d0dd      	beq.n	801a338 <_puts_r+0x40>
 801a37c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a382:	07da      	lsls	r2, r3, #31
 801a384:	d405      	bmi.n	801a392 <_puts_r+0x9a>
 801a386:	89a3      	ldrh	r3, [r4, #12]
 801a388:	059b      	lsls	r3, r3, #22
 801a38a:	d402      	bmi.n	801a392 <_puts_r+0x9a>
 801a38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a38e:	f000 fad2 	bl	801a936 <__retarget_lock_release_recursive>
 801a392:	4628      	mov	r0, r5
 801a394:	bd70      	pop	{r4, r5, r6, pc}
 801a396:	2b00      	cmp	r3, #0
 801a398:	da04      	bge.n	801a3a4 <_puts_r+0xac>
 801a39a:	69a2      	ldr	r2, [r4, #24]
 801a39c:	429a      	cmp	r2, r3
 801a39e:	dc06      	bgt.n	801a3ae <_puts_r+0xb6>
 801a3a0:	290a      	cmp	r1, #10
 801a3a2:	d004      	beq.n	801a3ae <_puts_r+0xb6>
 801a3a4:	6823      	ldr	r3, [r4, #0]
 801a3a6:	1c5a      	adds	r2, r3, #1
 801a3a8:	6022      	str	r2, [r4, #0]
 801a3aa:	7019      	strb	r1, [r3, #0]
 801a3ac:	e7c5      	b.n	801a33a <_puts_r+0x42>
 801a3ae:	4622      	mov	r2, r4
 801a3b0:	4628      	mov	r0, r5
 801a3b2:	f000 f847 	bl	801a444 <__swbuf_r>
 801a3b6:	3001      	adds	r0, #1
 801a3b8:	d1bf      	bne.n	801a33a <_puts_r+0x42>
 801a3ba:	e7df      	b.n	801a37c <_puts_r+0x84>
 801a3bc:	6823      	ldr	r3, [r4, #0]
 801a3be:	250a      	movs	r5, #10
 801a3c0:	1c5a      	adds	r2, r3, #1
 801a3c2:	6022      	str	r2, [r4, #0]
 801a3c4:	701d      	strb	r5, [r3, #0]
 801a3c6:	e7db      	b.n	801a380 <_puts_r+0x88>
 801a3c8:	080316e4 	.word	0x080316e4
 801a3cc:	08031704 	.word	0x08031704
 801a3d0:	080316c4 	.word	0x080316c4

0801a3d4 <puts>:
 801a3d4:	4b02      	ldr	r3, [pc, #8]	; (801a3e0 <puts+0xc>)
 801a3d6:	4601      	mov	r1, r0
 801a3d8:	6818      	ldr	r0, [r3, #0]
 801a3da:	f7ff bf8d 	b.w	801a2f8 <_puts_r>
 801a3de:	bf00      	nop
 801a3e0:	2000005c 	.word	0x2000005c

0801a3e4 <_sbrk_r>:
 801a3e4:	b538      	push	{r3, r4, r5, lr}
 801a3e6:	4d06      	ldr	r5, [pc, #24]	; (801a400 <_sbrk_r+0x1c>)
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	4604      	mov	r4, r0
 801a3ec:	4608      	mov	r0, r1
 801a3ee:	602b      	str	r3, [r5, #0]
 801a3f0:	f7e9 fdb2 	bl	8003f58 <_sbrk>
 801a3f4:	1c43      	adds	r3, r0, #1
 801a3f6:	d102      	bne.n	801a3fe <_sbrk_r+0x1a>
 801a3f8:	682b      	ldr	r3, [r5, #0]
 801a3fa:	b103      	cbz	r3, 801a3fe <_sbrk_r+0x1a>
 801a3fc:	6023      	str	r3, [r4, #0]
 801a3fe:	bd38      	pop	{r3, r4, r5, pc}
 801a400:	2004de2c 	.word	0x2004de2c

0801a404 <siprintf>:
 801a404:	b40e      	push	{r1, r2, r3}
 801a406:	b500      	push	{lr}
 801a408:	b09c      	sub	sp, #112	; 0x70
 801a40a:	ab1d      	add	r3, sp, #116	; 0x74
 801a40c:	9002      	str	r0, [sp, #8]
 801a40e:	9006      	str	r0, [sp, #24]
 801a410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a414:	4809      	ldr	r0, [pc, #36]	; (801a43c <siprintf+0x38>)
 801a416:	9107      	str	r1, [sp, #28]
 801a418:	9104      	str	r1, [sp, #16]
 801a41a:	4909      	ldr	r1, [pc, #36]	; (801a440 <siprintf+0x3c>)
 801a41c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a420:	9105      	str	r1, [sp, #20]
 801a422:	6800      	ldr	r0, [r0, #0]
 801a424:	9301      	str	r3, [sp, #4]
 801a426:	a902      	add	r1, sp, #8
 801a428:	f000 fb52 	bl	801aad0 <_svfiprintf_r>
 801a42c:	9b02      	ldr	r3, [sp, #8]
 801a42e:	2200      	movs	r2, #0
 801a430:	701a      	strb	r2, [r3, #0]
 801a432:	b01c      	add	sp, #112	; 0x70
 801a434:	f85d eb04 	ldr.w	lr, [sp], #4
 801a438:	b003      	add	sp, #12
 801a43a:	4770      	bx	lr
 801a43c:	2000005c 	.word	0x2000005c
 801a440:	ffff0208 	.word	0xffff0208

0801a444 <__swbuf_r>:
 801a444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a446:	460e      	mov	r6, r1
 801a448:	4614      	mov	r4, r2
 801a44a:	4605      	mov	r5, r0
 801a44c:	b118      	cbz	r0, 801a456 <__swbuf_r+0x12>
 801a44e:	6983      	ldr	r3, [r0, #24]
 801a450:	b90b      	cbnz	r3, 801a456 <__swbuf_r+0x12>
 801a452:	f000 f9d1 	bl	801a7f8 <__sinit>
 801a456:	4b21      	ldr	r3, [pc, #132]	; (801a4dc <__swbuf_r+0x98>)
 801a458:	429c      	cmp	r4, r3
 801a45a:	d12b      	bne.n	801a4b4 <__swbuf_r+0x70>
 801a45c:	686c      	ldr	r4, [r5, #4]
 801a45e:	69a3      	ldr	r3, [r4, #24]
 801a460:	60a3      	str	r3, [r4, #8]
 801a462:	89a3      	ldrh	r3, [r4, #12]
 801a464:	071a      	lsls	r2, r3, #28
 801a466:	d52f      	bpl.n	801a4c8 <__swbuf_r+0x84>
 801a468:	6923      	ldr	r3, [r4, #16]
 801a46a:	b36b      	cbz	r3, 801a4c8 <__swbuf_r+0x84>
 801a46c:	6923      	ldr	r3, [r4, #16]
 801a46e:	6820      	ldr	r0, [r4, #0]
 801a470:	1ac0      	subs	r0, r0, r3
 801a472:	6963      	ldr	r3, [r4, #20]
 801a474:	b2f6      	uxtb	r6, r6
 801a476:	4283      	cmp	r3, r0
 801a478:	4637      	mov	r7, r6
 801a47a:	dc04      	bgt.n	801a486 <__swbuf_r+0x42>
 801a47c:	4621      	mov	r1, r4
 801a47e:	4628      	mov	r0, r5
 801a480:	f000 f926 	bl	801a6d0 <_fflush_r>
 801a484:	bb30      	cbnz	r0, 801a4d4 <__swbuf_r+0x90>
 801a486:	68a3      	ldr	r3, [r4, #8]
 801a488:	3b01      	subs	r3, #1
 801a48a:	60a3      	str	r3, [r4, #8]
 801a48c:	6823      	ldr	r3, [r4, #0]
 801a48e:	1c5a      	adds	r2, r3, #1
 801a490:	6022      	str	r2, [r4, #0]
 801a492:	701e      	strb	r6, [r3, #0]
 801a494:	6963      	ldr	r3, [r4, #20]
 801a496:	3001      	adds	r0, #1
 801a498:	4283      	cmp	r3, r0
 801a49a:	d004      	beq.n	801a4a6 <__swbuf_r+0x62>
 801a49c:	89a3      	ldrh	r3, [r4, #12]
 801a49e:	07db      	lsls	r3, r3, #31
 801a4a0:	d506      	bpl.n	801a4b0 <__swbuf_r+0x6c>
 801a4a2:	2e0a      	cmp	r6, #10
 801a4a4:	d104      	bne.n	801a4b0 <__swbuf_r+0x6c>
 801a4a6:	4621      	mov	r1, r4
 801a4a8:	4628      	mov	r0, r5
 801a4aa:	f000 f911 	bl	801a6d0 <_fflush_r>
 801a4ae:	b988      	cbnz	r0, 801a4d4 <__swbuf_r+0x90>
 801a4b0:	4638      	mov	r0, r7
 801a4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4b4:	4b0a      	ldr	r3, [pc, #40]	; (801a4e0 <__swbuf_r+0x9c>)
 801a4b6:	429c      	cmp	r4, r3
 801a4b8:	d101      	bne.n	801a4be <__swbuf_r+0x7a>
 801a4ba:	68ac      	ldr	r4, [r5, #8]
 801a4bc:	e7cf      	b.n	801a45e <__swbuf_r+0x1a>
 801a4be:	4b09      	ldr	r3, [pc, #36]	; (801a4e4 <__swbuf_r+0xa0>)
 801a4c0:	429c      	cmp	r4, r3
 801a4c2:	bf08      	it	eq
 801a4c4:	68ec      	ldreq	r4, [r5, #12]
 801a4c6:	e7ca      	b.n	801a45e <__swbuf_r+0x1a>
 801a4c8:	4621      	mov	r1, r4
 801a4ca:	4628      	mov	r0, r5
 801a4cc:	f000 f80c 	bl	801a4e8 <__swsetup_r>
 801a4d0:	2800      	cmp	r0, #0
 801a4d2:	d0cb      	beq.n	801a46c <__swbuf_r+0x28>
 801a4d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a4d8:	e7ea      	b.n	801a4b0 <__swbuf_r+0x6c>
 801a4da:	bf00      	nop
 801a4dc:	080316e4 	.word	0x080316e4
 801a4e0:	08031704 	.word	0x08031704
 801a4e4:	080316c4 	.word	0x080316c4

0801a4e8 <__swsetup_r>:
 801a4e8:	4b32      	ldr	r3, [pc, #200]	; (801a5b4 <__swsetup_r+0xcc>)
 801a4ea:	b570      	push	{r4, r5, r6, lr}
 801a4ec:	681d      	ldr	r5, [r3, #0]
 801a4ee:	4606      	mov	r6, r0
 801a4f0:	460c      	mov	r4, r1
 801a4f2:	b125      	cbz	r5, 801a4fe <__swsetup_r+0x16>
 801a4f4:	69ab      	ldr	r3, [r5, #24]
 801a4f6:	b913      	cbnz	r3, 801a4fe <__swsetup_r+0x16>
 801a4f8:	4628      	mov	r0, r5
 801a4fa:	f000 f97d 	bl	801a7f8 <__sinit>
 801a4fe:	4b2e      	ldr	r3, [pc, #184]	; (801a5b8 <__swsetup_r+0xd0>)
 801a500:	429c      	cmp	r4, r3
 801a502:	d10f      	bne.n	801a524 <__swsetup_r+0x3c>
 801a504:	686c      	ldr	r4, [r5, #4]
 801a506:	89a3      	ldrh	r3, [r4, #12]
 801a508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a50c:	0719      	lsls	r1, r3, #28
 801a50e:	d42c      	bmi.n	801a56a <__swsetup_r+0x82>
 801a510:	06dd      	lsls	r5, r3, #27
 801a512:	d411      	bmi.n	801a538 <__swsetup_r+0x50>
 801a514:	2309      	movs	r3, #9
 801a516:	6033      	str	r3, [r6, #0]
 801a518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a51c:	81a3      	strh	r3, [r4, #12]
 801a51e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a522:	e03e      	b.n	801a5a2 <__swsetup_r+0xba>
 801a524:	4b25      	ldr	r3, [pc, #148]	; (801a5bc <__swsetup_r+0xd4>)
 801a526:	429c      	cmp	r4, r3
 801a528:	d101      	bne.n	801a52e <__swsetup_r+0x46>
 801a52a:	68ac      	ldr	r4, [r5, #8]
 801a52c:	e7eb      	b.n	801a506 <__swsetup_r+0x1e>
 801a52e:	4b24      	ldr	r3, [pc, #144]	; (801a5c0 <__swsetup_r+0xd8>)
 801a530:	429c      	cmp	r4, r3
 801a532:	bf08      	it	eq
 801a534:	68ec      	ldreq	r4, [r5, #12]
 801a536:	e7e6      	b.n	801a506 <__swsetup_r+0x1e>
 801a538:	0758      	lsls	r0, r3, #29
 801a53a:	d512      	bpl.n	801a562 <__swsetup_r+0x7a>
 801a53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a53e:	b141      	cbz	r1, 801a552 <__swsetup_r+0x6a>
 801a540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a544:	4299      	cmp	r1, r3
 801a546:	d002      	beq.n	801a54e <__swsetup_r+0x66>
 801a548:	4630      	mov	r0, r6
 801a54a:	f7ff fdfd 	bl	801a148 <_free_r>
 801a54e:	2300      	movs	r3, #0
 801a550:	6363      	str	r3, [r4, #52]	; 0x34
 801a552:	89a3      	ldrh	r3, [r4, #12]
 801a554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a558:	81a3      	strh	r3, [r4, #12]
 801a55a:	2300      	movs	r3, #0
 801a55c:	6063      	str	r3, [r4, #4]
 801a55e:	6923      	ldr	r3, [r4, #16]
 801a560:	6023      	str	r3, [r4, #0]
 801a562:	89a3      	ldrh	r3, [r4, #12]
 801a564:	f043 0308 	orr.w	r3, r3, #8
 801a568:	81a3      	strh	r3, [r4, #12]
 801a56a:	6923      	ldr	r3, [r4, #16]
 801a56c:	b94b      	cbnz	r3, 801a582 <__swsetup_r+0x9a>
 801a56e:	89a3      	ldrh	r3, [r4, #12]
 801a570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a578:	d003      	beq.n	801a582 <__swsetup_r+0x9a>
 801a57a:	4621      	mov	r1, r4
 801a57c:	4630      	mov	r0, r6
 801a57e:	f000 f9ff 	bl	801a980 <__smakebuf_r>
 801a582:	89a0      	ldrh	r0, [r4, #12]
 801a584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a588:	f010 0301 	ands.w	r3, r0, #1
 801a58c:	d00a      	beq.n	801a5a4 <__swsetup_r+0xbc>
 801a58e:	2300      	movs	r3, #0
 801a590:	60a3      	str	r3, [r4, #8]
 801a592:	6963      	ldr	r3, [r4, #20]
 801a594:	425b      	negs	r3, r3
 801a596:	61a3      	str	r3, [r4, #24]
 801a598:	6923      	ldr	r3, [r4, #16]
 801a59a:	b943      	cbnz	r3, 801a5ae <__swsetup_r+0xc6>
 801a59c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a5a0:	d1ba      	bne.n	801a518 <__swsetup_r+0x30>
 801a5a2:	bd70      	pop	{r4, r5, r6, pc}
 801a5a4:	0781      	lsls	r1, r0, #30
 801a5a6:	bf58      	it	pl
 801a5a8:	6963      	ldrpl	r3, [r4, #20]
 801a5aa:	60a3      	str	r3, [r4, #8]
 801a5ac:	e7f4      	b.n	801a598 <__swsetup_r+0xb0>
 801a5ae:	2000      	movs	r0, #0
 801a5b0:	e7f7      	b.n	801a5a2 <__swsetup_r+0xba>
 801a5b2:	bf00      	nop
 801a5b4:	2000005c 	.word	0x2000005c
 801a5b8:	080316e4 	.word	0x080316e4
 801a5bc:	08031704 	.word	0x08031704
 801a5c0:	080316c4 	.word	0x080316c4

0801a5c4 <__sflush_r>:
 801a5c4:	898a      	ldrh	r2, [r1, #12]
 801a5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5ca:	4605      	mov	r5, r0
 801a5cc:	0710      	lsls	r0, r2, #28
 801a5ce:	460c      	mov	r4, r1
 801a5d0:	d458      	bmi.n	801a684 <__sflush_r+0xc0>
 801a5d2:	684b      	ldr	r3, [r1, #4]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	dc05      	bgt.n	801a5e4 <__sflush_r+0x20>
 801a5d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	dc02      	bgt.n	801a5e4 <__sflush_r+0x20>
 801a5de:	2000      	movs	r0, #0
 801a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a5e6:	2e00      	cmp	r6, #0
 801a5e8:	d0f9      	beq.n	801a5de <__sflush_r+0x1a>
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a5f0:	682f      	ldr	r7, [r5, #0]
 801a5f2:	602b      	str	r3, [r5, #0]
 801a5f4:	d032      	beq.n	801a65c <__sflush_r+0x98>
 801a5f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a5f8:	89a3      	ldrh	r3, [r4, #12]
 801a5fa:	075a      	lsls	r2, r3, #29
 801a5fc:	d505      	bpl.n	801a60a <__sflush_r+0x46>
 801a5fe:	6863      	ldr	r3, [r4, #4]
 801a600:	1ac0      	subs	r0, r0, r3
 801a602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a604:	b10b      	cbz	r3, 801a60a <__sflush_r+0x46>
 801a606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a608:	1ac0      	subs	r0, r0, r3
 801a60a:	2300      	movs	r3, #0
 801a60c:	4602      	mov	r2, r0
 801a60e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a610:	6a21      	ldr	r1, [r4, #32]
 801a612:	4628      	mov	r0, r5
 801a614:	47b0      	blx	r6
 801a616:	1c43      	adds	r3, r0, #1
 801a618:	89a3      	ldrh	r3, [r4, #12]
 801a61a:	d106      	bne.n	801a62a <__sflush_r+0x66>
 801a61c:	6829      	ldr	r1, [r5, #0]
 801a61e:	291d      	cmp	r1, #29
 801a620:	d82c      	bhi.n	801a67c <__sflush_r+0xb8>
 801a622:	4a2a      	ldr	r2, [pc, #168]	; (801a6cc <__sflush_r+0x108>)
 801a624:	40ca      	lsrs	r2, r1
 801a626:	07d6      	lsls	r6, r2, #31
 801a628:	d528      	bpl.n	801a67c <__sflush_r+0xb8>
 801a62a:	2200      	movs	r2, #0
 801a62c:	6062      	str	r2, [r4, #4]
 801a62e:	04d9      	lsls	r1, r3, #19
 801a630:	6922      	ldr	r2, [r4, #16]
 801a632:	6022      	str	r2, [r4, #0]
 801a634:	d504      	bpl.n	801a640 <__sflush_r+0x7c>
 801a636:	1c42      	adds	r2, r0, #1
 801a638:	d101      	bne.n	801a63e <__sflush_r+0x7a>
 801a63a:	682b      	ldr	r3, [r5, #0]
 801a63c:	b903      	cbnz	r3, 801a640 <__sflush_r+0x7c>
 801a63e:	6560      	str	r0, [r4, #84]	; 0x54
 801a640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a642:	602f      	str	r7, [r5, #0]
 801a644:	2900      	cmp	r1, #0
 801a646:	d0ca      	beq.n	801a5de <__sflush_r+0x1a>
 801a648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a64c:	4299      	cmp	r1, r3
 801a64e:	d002      	beq.n	801a656 <__sflush_r+0x92>
 801a650:	4628      	mov	r0, r5
 801a652:	f7ff fd79 	bl	801a148 <_free_r>
 801a656:	2000      	movs	r0, #0
 801a658:	6360      	str	r0, [r4, #52]	; 0x34
 801a65a:	e7c1      	b.n	801a5e0 <__sflush_r+0x1c>
 801a65c:	6a21      	ldr	r1, [r4, #32]
 801a65e:	2301      	movs	r3, #1
 801a660:	4628      	mov	r0, r5
 801a662:	47b0      	blx	r6
 801a664:	1c41      	adds	r1, r0, #1
 801a666:	d1c7      	bne.n	801a5f8 <__sflush_r+0x34>
 801a668:	682b      	ldr	r3, [r5, #0]
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d0c4      	beq.n	801a5f8 <__sflush_r+0x34>
 801a66e:	2b1d      	cmp	r3, #29
 801a670:	d001      	beq.n	801a676 <__sflush_r+0xb2>
 801a672:	2b16      	cmp	r3, #22
 801a674:	d101      	bne.n	801a67a <__sflush_r+0xb6>
 801a676:	602f      	str	r7, [r5, #0]
 801a678:	e7b1      	b.n	801a5de <__sflush_r+0x1a>
 801a67a:	89a3      	ldrh	r3, [r4, #12]
 801a67c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a680:	81a3      	strh	r3, [r4, #12]
 801a682:	e7ad      	b.n	801a5e0 <__sflush_r+0x1c>
 801a684:	690f      	ldr	r7, [r1, #16]
 801a686:	2f00      	cmp	r7, #0
 801a688:	d0a9      	beq.n	801a5de <__sflush_r+0x1a>
 801a68a:	0793      	lsls	r3, r2, #30
 801a68c:	680e      	ldr	r6, [r1, #0]
 801a68e:	bf08      	it	eq
 801a690:	694b      	ldreq	r3, [r1, #20]
 801a692:	600f      	str	r7, [r1, #0]
 801a694:	bf18      	it	ne
 801a696:	2300      	movne	r3, #0
 801a698:	eba6 0807 	sub.w	r8, r6, r7
 801a69c:	608b      	str	r3, [r1, #8]
 801a69e:	f1b8 0f00 	cmp.w	r8, #0
 801a6a2:	dd9c      	ble.n	801a5de <__sflush_r+0x1a>
 801a6a4:	6a21      	ldr	r1, [r4, #32]
 801a6a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a6a8:	4643      	mov	r3, r8
 801a6aa:	463a      	mov	r2, r7
 801a6ac:	4628      	mov	r0, r5
 801a6ae:	47b0      	blx	r6
 801a6b0:	2800      	cmp	r0, #0
 801a6b2:	dc06      	bgt.n	801a6c2 <__sflush_r+0xfe>
 801a6b4:	89a3      	ldrh	r3, [r4, #12]
 801a6b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a6ba:	81a3      	strh	r3, [r4, #12]
 801a6bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6c0:	e78e      	b.n	801a5e0 <__sflush_r+0x1c>
 801a6c2:	4407      	add	r7, r0
 801a6c4:	eba8 0800 	sub.w	r8, r8, r0
 801a6c8:	e7e9      	b.n	801a69e <__sflush_r+0xda>
 801a6ca:	bf00      	nop
 801a6cc:	20400001 	.word	0x20400001

0801a6d0 <_fflush_r>:
 801a6d0:	b538      	push	{r3, r4, r5, lr}
 801a6d2:	690b      	ldr	r3, [r1, #16]
 801a6d4:	4605      	mov	r5, r0
 801a6d6:	460c      	mov	r4, r1
 801a6d8:	b913      	cbnz	r3, 801a6e0 <_fflush_r+0x10>
 801a6da:	2500      	movs	r5, #0
 801a6dc:	4628      	mov	r0, r5
 801a6de:	bd38      	pop	{r3, r4, r5, pc}
 801a6e0:	b118      	cbz	r0, 801a6ea <_fflush_r+0x1a>
 801a6e2:	6983      	ldr	r3, [r0, #24]
 801a6e4:	b90b      	cbnz	r3, 801a6ea <_fflush_r+0x1a>
 801a6e6:	f000 f887 	bl	801a7f8 <__sinit>
 801a6ea:	4b14      	ldr	r3, [pc, #80]	; (801a73c <_fflush_r+0x6c>)
 801a6ec:	429c      	cmp	r4, r3
 801a6ee:	d11b      	bne.n	801a728 <_fflush_r+0x58>
 801a6f0:	686c      	ldr	r4, [r5, #4]
 801a6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d0ef      	beq.n	801a6da <_fflush_r+0xa>
 801a6fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a6fc:	07d0      	lsls	r0, r2, #31
 801a6fe:	d404      	bmi.n	801a70a <_fflush_r+0x3a>
 801a700:	0599      	lsls	r1, r3, #22
 801a702:	d402      	bmi.n	801a70a <_fflush_r+0x3a>
 801a704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a706:	f000 f915 	bl	801a934 <__retarget_lock_acquire_recursive>
 801a70a:	4628      	mov	r0, r5
 801a70c:	4621      	mov	r1, r4
 801a70e:	f7ff ff59 	bl	801a5c4 <__sflush_r>
 801a712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a714:	07da      	lsls	r2, r3, #31
 801a716:	4605      	mov	r5, r0
 801a718:	d4e0      	bmi.n	801a6dc <_fflush_r+0xc>
 801a71a:	89a3      	ldrh	r3, [r4, #12]
 801a71c:	059b      	lsls	r3, r3, #22
 801a71e:	d4dd      	bmi.n	801a6dc <_fflush_r+0xc>
 801a720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a722:	f000 f908 	bl	801a936 <__retarget_lock_release_recursive>
 801a726:	e7d9      	b.n	801a6dc <_fflush_r+0xc>
 801a728:	4b05      	ldr	r3, [pc, #20]	; (801a740 <_fflush_r+0x70>)
 801a72a:	429c      	cmp	r4, r3
 801a72c:	d101      	bne.n	801a732 <_fflush_r+0x62>
 801a72e:	68ac      	ldr	r4, [r5, #8]
 801a730:	e7df      	b.n	801a6f2 <_fflush_r+0x22>
 801a732:	4b04      	ldr	r3, [pc, #16]	; (801a744 <_fflush_r+0x74>)
 801a734:	429c      	cmp	r4, r3
 801a736:	bf08      	it	eq
 801a738:	68ec      	ldreq	r4, [r5, #12]
 801a73a:	e7da      	b.n	801a6f2 <_fflush_r+0x22>
 801a73c:	080316e4 	.word	0x080316e4
 801a740:	08031704 	.word	0x08031704
 801a744:	080316c4 	.word	0x080316c4

0801a748 <std>:
 801a748:	2300      	movs	r3, #0
 801a74a:	b510      	push	{r4, lr}
 801a74c:	4604      	mov	r4, r0
 801a74e:	e9c0 3300 	strd	r3, r3, [r0]
 801a752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a756:	6083      	str	r3, [r0, #8]
 801a758:	8181      	strh	r1, [r0, #12]
 801a75a:	6643      	str	r3, [r0, #100]	; 0x64
 801a75c:	81c2      	strh	r2, [r0, #14]
 801a75e:	6183      	str	r3, [r0, #24]
 801a760:	4619      	mov	r1, r3
 801a762:	2208      	movs	r2, #8
 801a764:	305c      	adds	r0, #92	; 0x5c
 801a766:	f7ff fce7 	bl	801a138 <memset>
 801a76a:	4b05      	ldr	r3, [pc, #20]	; (801a780 <std+0x38>)
 801a76c:	6263      	str	r3, [r4, #36]	; 0x24
 801a76e:	4b05      	ldr	r3, [pc, #20]	; (801a784 <std+0x3c>)
 801a770:	62a3      	str	r3, [r4, #40]	; 0x28
 801a772:	4b05      	ldr	r3, [pc, #20]	; (801a788 <std+0x40>)
 801a774:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a776:	4b05      	ldr	r3, [pc, #20]	; (801a78c <std+0x44>)
 801a778:	6224      	str	r4, [r4, #32]
 801a77a:	6323      	str	r3, [r4, #48]	; 0x30
 801a77c:	bd10      	pop	{r4, pc}
 801a77e:	bf00      	nop
 801a780:	0801b33d 	.word	0x0801b33d
 801a784:	0801b35f 	.word	0x0801b35f
 801a788:	0801b397 	.word	0x0801b397
 801a78c:	0801b3bb 	.word	0x0801b3bb

0801a790 <_cleanup_r>:
 801a790:	4901      	ldr	r1, [pc, #4]	; (801a798 <_cleanup_r+0x8>)
 801a792:	f000 b8af 	b.w	801a8f4 <_fwalk_reent>
 801a796:	bf00      	nop
 801a798:	0801a6d1 	.word	0x0801a6d1

0801a79c <__sfmoreglue>:
 801a79c:	b570      	push	{r4, r5, r6, lr}
 801a79e:	1e4a      	subs	r2, r1, #1
 801a7a0:	2568      	movs	r5, #104	; 0x68
 801a7a2:	4355      	muls	r5, r2
 801a7a4:	460e      	mov	r6, r1
 801a7a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a7aa:	f7ff fd1d 	bl	801a1e8 <_malloc_r>
 801a7ae:	4604      	mov	r4, r0
 801a7b0:	b140      	cbz	r0, 801a7c4 <__sfmoreglue+0x28>
 801a7b2:	2100      	movs	r1, #0
 801a7b4:	e9c0 1600 	strd	r1, r6, [r0]
 801a7b8:	300c      	adds	r0, #12
 801a7ba:	60a0      	str	r0, [r4, #8]
 801a7bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a7c0:	f7ff fcba 	bl	801a138 <memset>
 801a7c4:	4620      	mov	r0, r4
 801a7c6:	bd70      	pop	{r4, r5, r6, pc}

0801a7c8 <__sfp_lock_acquire>:
 801a7c8:	4801      	ldr	r0, [pc, #4]	; (801a7d0 <__sfp_lock_acquire+0x8>)
 801a7ca:	f000 b8b3 	b.w	801a934 <__retarget_lock_acquire_recursive>
 801a7ce:	bf00      	nop
 801a7d0:	2004de28 	.word	0x2004de28

0801a7d4 <__sfp_lock_release>:
 801a7d4:	4801      	ldr	r0, [pc, #4]	; (801a7dc <__sfp_lock_release+0x8>)
 801a7d6:	f000 b8ae 	b.w	801a936 <__retarget_lock_release_recursive>
 801a7da:	bf00      	nop
 801a7dc:	2004de28 	.word	0x2004de28

0801a7e0 <__sinit_lock_acquire>:
 801a7e0:	4801      	ldr	r0, [pc, #4]	; (801a7e8 <__sinit_lock_acquire+0x8>)
 801a7e2:	f000 b8a7 	b.w	801a934 <__retarget_lock_acquire_recursive>
 801a7e6:	bf00      	nop
 801a7e8:	2004de23 	.word	0x2004de23

0801a7ec <__sinit_lock_release>:
 801a7ec:	4801      	ldr	r0, [pc, #4]	; (801a7f4 <__sinit_lock_release+0x8>)
 801a7ee:	f000 b8a2 	b.w	801a936 <__retarget_lock_release_recursive>
 801a7f2:	bf00      	nop
 801a7f4:	2004de23 	.word	0x2004de23

0801a7f8 <__sinit>:
 801a7f8:	b510      	push	{r4, lr}
 801a7fa:	4604      	mov	r4, r0
 801a7fc:	f7ff fff0 	bl	801a7e0 <__sinit_lock_acquire>
 801a800:	69a3      	ldr	r3, [r4, #24]
 801a802:	b11b      	cbz	r3, 801a80c <__sinit+0x14>
 801a804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a808:	f7ff bff0 	b.w	801a7ec <__sinit_lock_release>
 801a80c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a810:	6523      	str	r3, [r4, #80]	; 0x50
 801a812:	4b13      	ldr	r3, [pc, #76]	; (801a860 <__sinit+0x68>)
 801a814:	4a13      	ldr	r2, [pc, #76]	; (801a864 <__sinit+0x6c>)
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	62a2      	str	r2, [r4, #40]	; 0x28
 801a81a:	42a3      	cmp	r3, r4
 801a81c:	bf04      	itt	eq
 801a81e:	2301      	moveq	r3, #1
 801a820:	61a3      	streq	r3, [r4, #24]
 801a822:	4620      	mov	r0, r4
 801a824:	f000 f820 	bl	801a868 <__sfp>
 801a828:	6060      	str	r0, [r4, #4]
 801a82a:	4620      	mov	r0, r4
 801a82c:	f000 f81c 	bl	801a868 <__sfp>
 801a830:	60a0      	str	r0, [r4, #8]
 801a832:	4620      	mov	r0, r4
 801a834:	f000 f818 	bl	801a868 <__sfp>
 801a838:	2200      	movs	r2, #0
 801a83a:	60e0      	str	r0, [r4, #12]
 801a83c:	2104      	movs	r1, #4
 801a83e:	6860      	ldr	r0, [r4, #4]
 801a840:	f7ff ff82 	bl	801a748 <std>
 801a844:	68a0      	ldr	r0, [r4, #8]
 801a846:	2201      	movs	r2, #1
 801a848:	2109      	movs	r1, #9
 801a84a:	f7ff ff7d 	bl	801a748 <std>
 801a84e:	68e0      	ldr	r0, [r4, #12]
 801a850:	2202      	movs	r2, #2
 801a852:	2112      	movs	r1, #18
 801a854:	f7ff ff78 	bl	801a748 <std>
 801a858:	2301      	movs	r3, #1
 801a85a:	61a3      	str	r3, [r4, #24]
 801a85c:	e7d2      	b.n	801a804 <__sinit+0xc>
 801a85e:	bf00      	nop
 801a860:	080316c0 	.word	0x080316c0
 801a864:	0801a791 	.word	0x0801a791

0801a868 <__sfp>:
 801a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a86a:	4607      	mov	r7, r0
 801a86c:	f7ff ffac 	bl	801a7c8 <__sfp_lock_acquire>
 801a870:	4b1e      	ldr	r3, [pc, #120]	; (801a8ec <__sfp+0x84>)
 801a872:	681e      	ldr	r6, [r3, #0]
 801a874:	69b3      	ldr	r3, [r6, #24]
 801a876:	b913      	cbnz	r3, 801a87e <__sfp+0x16>
 801a878:	4630      	mov	r0, r6
 801a87a:	f7ff ffbd 	bl	801a7f8 <__sinit>
 801a87e:	3648      	adds	r6, #72	; 0x48
 801a880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a884:	3b01      	subs	r3, #1
 801a886:	d503      	bpl.n	801a890 <__sfp+0x28>
 801a888:	6833      	ldr	r3, [r6, #0]
 801a88a:	b30b      	cbz	r3, 801a8d0 <__sfp+0x68>
 801a88c:	6836      	ldr	r6, [r6, #0]
 801a88e:	e7f7      	b.n	801a880 <__sfp+0x18>
 801a890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a894:	b9d5      	cbnz	r5, 801a8cc <__sfp+0x64>
 801a896:	4b16      	ldr	r3, [pc, #88]	; (801a8f0 <__sfp+0x88>)
 801a898:	60e3      	str	r3, [r4, #12]
 801a89a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a89e:	6665      	str	r5, [r4, #100]	; 0x64
 801a8a0:	f000 f847 	bl	801a932 <__retarget_lock_init_recursive>
 801a8a4:	f7ff ff96 	bl	801a7d4 <__sfp_lock_release>
 801a8a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a8ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a8b0:	6025      	str	r5, [r4, #0]
 801a8b2:	61a5      	str	r5, [r4, #24]
 801a8b4:	2208      	movs	r2, #8
 801a8b6:	4629      	mov	r1, r5
 801a8b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a8bc:	f7ff fc3c 	bl	801a138 <memset>
 801a8c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a8c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a8c8:	4620      	mov	r0, r4
 801a8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8cc:	3468      	adds	r4, #104	; 0x68
 801a8ce:	e7d9      	b.n	801a884 <__sfp+0x1c>
 801a8d0:	2104      	movs	r1, #4
 801a8d2:	4638      	mov	r0, r7
 801a8d4:	f7ff ff62 	bl	801a79c <__sfmoreglue>
 801a8d8:	4604      	mov	r4, r0
 801a8da:	6030      	str	r0, [r6, #0]
 801a8dc:	2800      	cmp	r0, #0
 801a8de:	d1d5      	bne.n	801a88c <__sfp+0x24>
 801a8e0:	f7ff ff78 	bl	801a7d4 <__sfp_lock_release>
 801a8e4:	230c      	movs	r3, #12
 801a8e6:	603b      	str	r3, [r7, #0]
 801a8e8:	e7ee      	b.n	801a8c8 <__sfp+0x60>
 801a8ea:	bf00      	nop
 801a8ec:	080316c0 	.word	0x080316c0
 801a8f0:	ffff0001 	.word	0xffff0001

0801a8f4 <_fwalk_reent>:
 801a8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8f8:	4606      	mov	r6, r0
 801a8fa:	4688      	mov	r8, r1
 801a8fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a900:	2700      	movs	r7, #0
 801a902:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a906:	f1b9 0901 	subs.w	r9, r9, #1
 801a90a:	d505      	bpl.n	801a918 <_fwalk_reent+0x24>
 801a90c:	6824      	ldr	r4, [r4, #0]
 801a90e:	2c00      	cmp	r4, #0
 801a910:	d1f7      	bne.n	801a902 <_fwalk_reent+0xe>
 801a912:	4638      	mov	r0, r7
 801a914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a918:	89ab      	ldrh	r3, [r5, #12]
 801a91a:	2b01      	cmp	r3, #1
 801a91c:	d907      	bls.n	801a92e <_fwalk_reent+0x3a>
 801a91e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a922:	3301      	adds	r3, #1
 801a924:	d003      	beq.n	801a92e <_fwalk_reent+0x3a>
 801a926:	4629      	mov	r1, r5
 801a928:	4630      	mov	r0, r6
 801a92a:	47c0      	blx	r8
 801a92c:	4307      	orrs	r7, r0
 801a92e:	3568      	adds	r5, #104	; 0x68
 801a930:	e7e9      	b.n	801a906 <_fwalk_reent+0x12>

0801a932 <__retarget_lock_init_recursive>:
 801a932:	4770      	bx	lr

0801a934 <__retarget_lock_acquire_recursive>:
 801a934:	4770      	bx	lr

0801a936 <__retarget_lock_release_recursive>:
 801a936:	4770      	bx	lr

0801a938 <__swhatbuf_r>:
 801a938:	b570      	push	{r4, r5, r6, lr}
 801a93a:	460e      	mov	r6, r1
 801a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a940:	2900      	cmp	r1, #0
 801a942:	b096      	sub	sp, #88	; 0x58
 801a944:	4614      	mov	r4, r2
 801a946:	461d      	mov	r5, r3
 801a948:	da07      	bge.n	801a95a <__swhatbuf_r+0x22>
 801a94a:	2300      	movs	r3, #0
 801a94c:	602b      	str	r3, [r5, #0]
 801a94e:	89b3      	ldrh	r3, [r6, #12]
 801a950:	061a      	lsls	r2, r3, #24
 801a952:	d410      	bmi.n	801a976 <__swhatbuf_r+0x3e>
 801a954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a958:	e00e      	b.n	801a978 <__swhatbuf_r+0x40>
 801a95a:	466a      	mov	r2, sp
 801a95c:	f000 fd54 	bl	801b408 <_fstat_r>
 801a960:	2800      	cmp	r0, #0
 801a962:	dbf2      	blt.n	801a94a <__swhatbuf_r+0x12>
 801a964:	9a01      	ldr	r2, [sp, #4]
 801a966:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a96a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a96e:	425a      	negs	r2, r3
 801a970:	415a      	adcs	r2, r3
 801a972:	602a      	str	r2, [r5, #0]
 801a974:	e7ee      	b.n	801a954 <__swhatbuf_r+0x1c>
 801a976:	2340      	movs	r3, #64	; 0x40
 801a978:	2000      	movs	r0, #0
 801a97a:	6023      	str	r3, [r4, #0]
 801a97c:	b016      	add	sp, #88	; 0x58
 801a97e:	bd70      	pop	{r4, r5, r6, pc}

0801a980 <__smakebuf_r>:
 801a980:	898b      	ldrh	r3, [r1, #12]
 801a982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a984:	079d      	lsls	r5, r3, #30
 801a986:	4606      	mov	r6, r0
 801a988:	460c      	mov	r4, r1
 801a98a:	d507      	bpl.n	801a99c <__smakebuf_r+0x1c>
 801a98c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a990:	6023      	str	r3, [r4, #0]
 801a992:	6123      	str	r3, [r4, #16]
 801a994:	2301      	movs	r3, #1
 801a996:	6163      	str	r3, [r4, #20]
 801a998:	b002      	add	sp, #8
 801a99a:	bd70      	pop	{r4, r5, r6, pc}
 801a99c:	ab01      	add	r3, sp, #4
 801a99e:	466a      	mov	r2, sp
 801a9a0:	f7ff ffca 	bl	801a938 <__swhatbuf_r>
 801a9a4:	9900      	ldr	r1, [sp, #0]
 801a9a6:	4605      	mov	r5, r0
 801a9a8:	4630      	mov	r0, r6
 801a9aa:	f7ff fc1d 	bl	801a1e8 <_malloc_r>
 801a9ae:	b948      	cbnz	r0, 801a9c4 <__smakebuf_r+0x44>
 801a9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a9b4:	059a      	lsls	r2, r3, #22
 801a9b6:	d4ef      	bmi.n	801a998 <__smakebuf_r+0x18>
 801a9b8:	f023 0303 	bic.w	r3, r3, #3
 801a9bc:	f043 0302 	orr.w	r3, r3, #2
 801a9c0:	81a3      	strh	r3, [r4, #12]
 801a9c2:	e7e3      	b.n	801a98c <__smakebuf_r+0xc>
 801a9c4:	4b0d      	ldr	r3, [pc, #52]	; (801a9fc <__smakebuf_r+0x7c>)
 801a9c6:	62b3      	str	r3, [r6, #40]	; 0x28
 801a9c8:	89a3      	ldrh	r3, [r4, #12]
 801a9ca:	6020      	str	r0, [r4, #0]
 801a9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9d0:	81a3      	strh	r3, [r4, #12]
 801a9d2:	9b00      	ldr	r3, [sp, #0]
 801a9d4:	6163      	str	r3, [r4, #20]
 801a9d6:	9b01      	ldr	r3, [sp, #4]
 801a9d8:	6120      	str	r0, [r4, #16]
 801a9da:	b15b      	cbz	r3, 801a9f4 <__smakebuf_r+0x74>
 801a9dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a9e0:	4630      	mov	r0, r6
 801a9e2:	f000 fd23 	bl	801b42c <_isatty_r>
 801a9e6:	b128      	cbz	r0, 801a9f4 <__smakebuf_r+0x74>
 801a9e8:	89a3      	ldrh	r3, [r4, #12]
 801a9ea:	f023 0303 	bic.w	r3, r3, #3
 801a9ee:	f043 0301 	orr.w	r3, r3, #1
 801a9f2:	81a3      	strh	r3, [r4, #12]
 801a9f4:	89a0      	ldrh	r0, [r4, #12]
 801a9f6:	4305      	orrs	r5, r0
 801a9f8:	81a5      	strh	r5, [r4, #12]
 801a9fa:	e7cd      	b.n	801a998 <__smakebuf_r+0x18>
 801a9fc:	0801a791 	.word	0x0801a791

0801aa00 <__malloc_lock>:
 801aa00:	4801      	ldr	r0, [pc, #4]	; (801aa08 <__malloc_lock+0x8>)
 801aa02:	f7ff bf97 	b.w	801a934 <__retarget_lock_acquire_recursive>
 801aa06:	bf00      	nop
 801aa08:	2004de24 	.word	0x2004de24

0801aa0c <__malloc_unlock>:
 801aa0c:	4801      	ldr	r0, [pc, #4]	; (801aa14 <__malloc_unlock+0x8>)
 801aa0e:	f7ff bf92 	b.w	801a936 <__retarget_lock_release_recursive>
 801aa12:	bf00      	nop
 801aa14:	2004de24 	.word	0x2004de24

0801aa18 <__ssputs_r>:
 801aa18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa1c:	688e      	ldr	r6, [r1, #8]
 801aa1e:	429e      	cmp	r6, r3
 801aa20:	4682      	mov	sl, r0
 801aa22:	460c      	mov	r4, r1
 801aa24:	4690      	mov	r8, r2
 801aa26:	461f      	mov	r7, r3
 801aa28:	d838      	bhi.n	801aa9c <__ssputs_r+0x84>
 801aa2a:	898a      	ldrh	r2, [r1, #12]
 801aa2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801aa30:	d032      	beq.n	801aa98 <__ssputs_r+0x80>
 801aa32:	6825      	ldr	r5, [r4, #0]
 801aa34:	6909      	ldr	r1, [r1, #16]
 801aa36:	eba5 0901 	sub.w	r9, r5, r1
 801aa3a:	6965      	ldr	r5, [r4, #20]
 801aa3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aa40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801aa44:	3301      	adds	r3, #1
 801aa46:	444b      	add	r3, r9
 801aa48:	106d      	asrs	r5, r5, #1
 801aa4a:	429d      	cmp	r5, r3
 801aa4c:	bf38      	it	cc
 801aa4e:	461d      	movcc	r5, r3
 801aa50:	0553      	lsls	r3, r2, #21
 801aa52:	d531      	bpl.n	801aab8 <__ssputs_r+0xa0>
 801aa54:	4629      	mov	r1, r5
 801aa56:	f7ff fbc7 	bl	801a1e8 <_malloc_r>
 801aa5a:	4606      	mov	r6, r0
 801aa5c:	b950      	cbnz	r0, 801aa74 <__ssputs_r+0x5c>
 801aa5e:	230c      	movs	r3, #12
 801aa60:	f8ca 3000 	str.w	r3, [sl]
 801aa64:	89a3      	ldrh	r3, [r4, #12]
 801aa66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa6a:	81a3      	strh	r3, [r4, #12]
 801aa6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa74:	6921      	ldr	r1, [r4, #16]
 801aa76:	464a      	mov	r2, r9
 801aa78:	f7ff fb50 	bl	801a11c <memcpy>
 801aa7c:	89a3      	ldrh	r3, [r4, #12]
 801aa7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801aa82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aa86:	81a3      	strh	r3, [r4, #12]
 801aa88:	6126      	str	r6, [r4, #16]
 801aa8a:	6165      	str	r5, [r4, #20]
 801aa8c:	444e      	add	r6, r9
 801aa8e:	eba5 0509 	sub.w	r5, r5, r9
 801aa92:	6026      	str	r6, [r4, #0]
 801aa94:	60a5      	str	r5, [r4, #8]
 801aa96:	463e      	mov	r6, r7
 801aa98:	42be      	cmp	r6, r7
 801aa9a:	d900      	bls.n	801aa9e <__ssputs_r+0x86>
 801aa9c:	463e      	mov	r6, r7
 801aa9e:	4632      	mov	r2, r6
 801aaa0:	6820      	ldr	r0, [r4, #0]
 801aaa2:	4641      	mov	r1, r8
 801aaa4:	f000 fce4 	bl	801b470 <memmove>
 801aaa8:	68a3      	ldr	r3, [r4, #8]
 801aaaa:	6822      	ldr	r2, [r4, #0]
 801aaac:	1b9b      	subs	r3, r3, r6
 801aaae:	4432      	add	r2, r6
 801aab0:	60a3      	str	r3, [r4, #8]
 801aab2:	6022      	str	r2, [r4, #0]
 801aab4:	2000      	movs	r0, #0
 801aab6:	e7db      	b.n	801aa70 <__ssputs_r+0x58>
 801aab8:	462a      	mov	r2, r5
 801aaba:	f000 fcf3 	bl	801b4a4 <_realloc_r>
 801aabe:	4606      	mov	r6, r0
 801aac0:	2800      	cmp	r0, #0
 801aac2:	d1e1      	bne.n	801aa88 <__ssputs_r+0x70>
 801aac4:	6921      	ldr	r1, [r4, #16]
 801aac6:	4650      	mov	r0, sl
 801aac8:	f7ff fb3e 	bl	801a148 <_free_r>
 801aacc:	e7c7      	b.n	801aa5e <__ssputs_r+0x46>
	...

0801aad0 <_svfiprintf_r>:
 801aad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aad4:	4698      	mov	r8, r3
 801aad6:	898b      	ldrh	r3, [r1, #12]
 801aad8:	061b      	lsls	r3, r3, #24
 801aada:	b09d      	sub	sp, #116	; 0x74
 801aadc:	4607      	mov	r7, r0
 801aade:	460d      	mov	r5, r1
 801aae0:	4614      	mov	r4, r2
 801aae2:	d50e      	bpl.n	801ab02 <_svfiprintf_r+0x32>
 801aae4:	690b      	ldr	r3, [r1, #16]
 801aae6:	b963      	cbnz	r3, 801ab02 <_svfiprintf_r+0x32>
 801aae8:	2140      	movs	r1, #64	; 0x40
 801aaea:	f7ff fb7d 	bl	801a1e8 <_malloc_r>
 801aaee:	6028      	str	r0, [r5, #0]
 801aaf0:	6128      	str	r0, [r5, #16]
 801aaf2:	b920      	cbnz	r0, 801aafe <_svfiprintf_r+0x2e>
 801aaf4:	230c      	movs	r3, #12
 801aaf6:	603b      	str	r3, [r7, #0]
 801aaf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aafc:	e0d1      	b.n	801aca2 <_svfiprintf_r+0x1d2>
 801aafe:	2340      	movs	r3, #64	; 0x40
 801ab00:	616b      	str	r3, [r5, #20]
 801ab02:	2300      	movs	r3, #0
 801ab04:	9309      	str	r3, [sp, #36]	; 0x24
 801ab06:	2320      	movs	r3, #32
 801ab08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ab0c:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab10:	2330      	movs	r3, #48	; 0x30
 801ab12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801acbc <_svfiprintf_r+0x1ec>
 801ab16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ab1a:	f04f 0901 	mov.w	r9, #1
 801ab1e:	4623      	mov	r3, r4
 801ab20:	469a      	mov	sl, r3
 801ab22:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab26:	b10a      	cbz	r2, 801ab2c <_svfiprintf_r+0x5c>
 801ab28:	2a25      	cmp	r2, #37	; 0x25
 801ab2a:	d1f9      	bne.n	801ab20 <_svfiprintf_r+0x50>
 801ab2c:	ebba 0b04 	subs.w	fp, sl, r4
 801ab30:	d00b      	beq.n	801ab4a <_svfiprintf_r+0x7a>
 801ab32:	465b      	mov	r3, fp
 801ab34:	4622      	mov	r2, r4
 801ab36:	4629      	mov	r1, r5
 801ab38:	4638      	mov	r0, r7
 801ab3a:	f7ff ff6d 	bl	801aa18 <__ssputs_r>
 801ab3e:	3001      	adds	r0, #1
 801ab40:	f000 80aa 	beq.w	801ac98 <_svfiprintf_r+0x1c8>
 801ab44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab46:	445a      	add	r2, fp
 801ab48:	9209      	str	r2, [sp, #36]	; 0x24
 801ab4a:	f89a 3000 	ldrb.w	r3, [sl]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	f000 80a2 	beq.w	801ac98 <_svfiprintf_r+0x1c8>
 801ab54:	2300      	movs	r3, #0
 801ab56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ab5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ab5e:	f10a 0a01 	add.w	sl, sl, #1
 801ab62:	9304      	str	r3, [sp, #16]
 801ab64:	9307      	str	r3, [sp, #28]
 801ab66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ab6a:	931a      	str	r3, [sp, #104]	; 0x68
 801ab6c:	4654      	mov	r4, sl
 801ab6e:	2205      	movs	r2, #5
 801ab70:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab74:	4851      	ldr	r0, [pc, #324]	; (801acbc <_svfiprintf_r+0x1ec>)
 801ab76:	f7e5 fbab 	bl	80002d0 <memchr>
 801ab7a:	9a04      	ldr	r2, [sp, #16]
 801ab7c:	b9d8      	cbnz	r0, 801abb6 <_svfiprintf_r+0xe6>
 801ab7e:	06d0      	lsls	r0, r2, #27
 801ab80:	bf44      	itt	mi
 801ab82:	2320      	movmi	r3, #32
 801ab84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ab88:	0711      	lsls	r1, r2, #28
 801ab8a:	bf44      	itt	mi
 801ab8c:	232b      	movmi	r3, #43	; 0x2b
 801ab8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ab92:	f89a 3000 	ldrb.w	r3, [sl]
 801ab96:	2b2a      	cmp	r3, #42	; 0x2a
 801ab98:	d015      	beq.n	801abc6 <_svfiprintf_r+0xf6>
 801ab9a:	9a07      	ldr	r2, [sp, #28]
 801ab9c:	4654      	mov	r4, sl
 801ab9e:	2000      	movs	r0, #0
 801aba0:	f04f 0c0a 	mov.w	ip, #10
 801aba4:	4621      	mov	r1, r4
 801aba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801abaa:	3b30      	subs	r3, #48	; 0x30
 801abac:	2b09      	cmp	r3, #9
 801abae:	d94e      	bls.n	801ac4e <_svfiprintf_r+0x17e>
 801abb0:	b1b0      	cbz	r0, 801abe0 <_svfiprintf_r+0x110>
 801abb2:	9207      	str	r2, [sp, #28]
 801abb4:	e014      	b.n	801abe0 <_svfiprintf_r+0x110>
 801abb6:	eba0 0308 	sub.w	r3, r0, r8
 801abba:	fa09 f303 	lsl.w	r3, r9, r3
 801abbe:	4313      	orrs	r3, r2
 801abc0:	9304      	str	r3, [sp, #16]
 801abc2:	46a2      	mov	sl, r4
 801abc4:	e7d2      	b.n	801ab6c <_svfiprintf_r+0x9c>
 801abc6:	9b03      	ldr	r3, [sp, #12]
 801abc8:	1d19      	adds	r1, r3, #4
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	9103      	str	r1, [sp, #12]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	bfbb      	ittet	lt
 801abd2:	425b      	neglt	r3, r3
 801abd4:	f042 0202 	orrlt.w	r2, r2, #2
 801abd8:	9307      	strge	r3, [sp, #28]
 801abda:	9307      	strlt	r3, [sp, #28]
 801abdc:	bfb8      	it	lt
 801abde:	9204      	strlt	r2, [sp, #16]
 801abe0:	7823      	ldrb	r3, [r4, #0]
 801abe2:	2b2e      	cmp	r3, #46	; 0x2e
 801abe4:	d10c      	bne.n	801ac00 <_svfiprintf_r+0x130>
 801abe6:	7863      	ldrb	r3, [r4, #1]
 801abe8:	2b2a      	cmp	r3, #42	; 0x2a
 801abea:	d135      	bne.n	801ac58 <_svfiprintf_r+0x188>
 801abec:	9b03      	ldr	r3, [sp, #12]
 801abee:	1d1a      	adds	r2, r3, #4
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	9203      	str	r2, [sp, #12]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	bfb8      	it	lt
 801abf8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801abfc:	3402      	adds	r4, #2
 801abfe:	9305      	str	r3, [sp, #20]
 801ac00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801accc <_svfiprintf_r+0x1fc>
 801ac04:	7821      	ldrb	r1, [r4, #0]
 801ac06:	2203      	movs	r2, #3
 801ac08:	4650      	mov	r0, sl
 801ac0a:	f7e5 fb61 	bl	80002d0 <memchr>
 801ac0e:	b140      	cbz	r0, 801ac22 <_svfiprintf_r+0x152>
 801ac10:	2340      	movs	r3, #64	; 0x40
 801ac12:	eba0 000a 	sub.w	r0, r0, sl
 801ac16:	fa03 f000 	lsl.w	r0, r3, r0
 801ac1a:	9b04      	ldr	r3, [sp, #16]
 801ac1c:	4303      	orrs	r3, r0
 801ac1e:	3401      	adds	r4, #1
 801ac20:	9304      	str	r3, [sp, #16]
 801ac22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac26:	4826      	ldr	r0, [pc, #152]	; (801acc0 <_svfiprintf_r+0x1f0>)
 801ac28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ac2c:	2206      	movs	r2, #6
 801ac2e:	f7e5 fb4f 	bl	80002d0 <memchr>
 801ac32:	2800      	cmp	r0, #0
 801ac34:	d038      	beq.n	801aca8 <_svfiprintf_r+0x1d8>
 801ac36:	4b23      	ldr	r3, [pc, #140]	; (801acc4 <_svfiprintf_r+0x1f4>)
 801ac38:	bb1b      	cbnz	r3, 801ac82 <_svfiprintf_r+0x1b2>
 801ac3a:	9b03      	ldr	r3, [sp, #12]
 801ac3c:	3307      	adds	r3, #7
 801ac3e:	f023 0307 	bic.w	r3, r3, #7
 801ac42:	3308      	adds	r3, #8
 801ac44:	9303      	str	r3, [sp, #12]
 801ac46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac48:	4433      	add	r3, r6
 801ac4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ac4c:	e767      	b.n	801ab1e <_svfiprintf_r+0x4e>
 801ac4e:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac52:	460c      	mov	r4, r1
 801ac54:	2001      	movs	r0, #1
 801ac56:	e7a5      	b.n	801aba4 <_svfiprintf_r+0xd4>
 801ac58:	2300      	movs	r3, #0
 801ac5a:	3401      	adds	r4, #1
 801ac5c:	9305      	str	r3, [sp, #20]
 801ac5e:	4619      	mov	r1, r3
 801ac60:	f04f 0c0a 	mov.w	ip, #10
 801ac64:	4620      	mov	r0, r4
 801ac66:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ac6a:	3a30      	subs	r2, #48	; 0x30
 801ac6c:	2a09      	cmp	r2, #9
 801ac6e:	d903      	bls.n	801ac78 <_svfiprintf_r+0x1a8>
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d0c5      	beq.n	801ac00 <_svfiprintf_r+0x130>
 801ac74:	9105      	str	r1, [sp, #20]
 801ac76:	e7c3      	b.n	801ac00 <_svfiprintf_r+0x130>
 801ac78:	fb0c 2101 	mla	r1, ip, r1, r2
 801ac7c:	4604      	mov	r4, r0
 801ac7e:	2301      	movs	r3, #1
 801ac80:	e7f0      	b.n	801ac64 <_svfiprintf_r+0x194>
 801ac82:	ab03      	add	r3, sp, #12
 801ac84:	9300      	str	r3, [sp, #0]
 801ac86:	462a      	mov	r2, r5
 801ac88:	4b0f      	ldr	r3, [pc, #60]	; (801acc8 <_svfiprintf_r+0x1f8>)
 801ac8a:	a904      	add	r1, sp, #16
 801ac8c:	4638      	mov	r0, r7
 801ac8e:	f3af 8000 	nop.w
 801ac92:	1c42      	adds	r2, r0, #1
 801ac94:	4606      	mov	r6, r0
 801ac96:	d1d6      	bne.n	801ac46 <_svfiprintf_r+0x176>
 801ac98:	89ab      	ldrh	r3, [r5, #12]
 801ac9a:	065b      	lsls	r3, r3, #25
 801ac9c:	f53f af2c 	bmi.w	801aaf8 <_svfiprintf_r+0x28>
 801aca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aca2:	b01d      	add	sp, #116	; 0x74
 801aca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aca8:	ab03      	add	r3, sp, #12
 801acaa:	9300      	str	r3, [sp, #0]
 801acac:	462a      	mov	r2, r5
 801acae:	4b06      	ldr	r3, [pc, #24]	; (801acc8 <_svfiprintf_r+0x1f8>)
 801acb0:	a904      	add	r1, sp, #16
 801acb2:	4638      	mov	r0, r7
 801acb4:	f000 f9d4 	bl	801b060 <_printf_i>
 801acb8:	e7eb      	b.n	801ac92 <_svfiprintf_r+0x1c2>
 801acba:	bf00      	nop
 801acbc:	08031724 	.word	0x08031724
 801acc0:	0803172e 	.word	0x0803172e
 801acc4:	00000000 	.word	0x00000000
 801acc8:	0801aa19 	.word	0x0801aa19
 801accc:	0803172a 	.word	0x0803172a

0801acd0 <__sfputc_r>:
 801acd0:	6893      	ldr	r3, [r2, #8]
 801acd2:	3b01      	subs	r3, #1
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	b410      	push	{r4}
 801acd8:	6093      	str	r3, [r2, #8]
 801acda:	da08      	bge.n	801acee <__sfputc_r+0x1e>
 801acdc:	6994      	ldr	r4, [r2, #24]
 801acde:	42a3      	cmp	r3, r4
 801ace0:	db01      	blt.n	801ace6 <__sfputc_r+0x16>
 801ace2:	290a      	cmp	r1, #10
 801ace4:	d103      	bne.n	801acee <__sfputc_r+0x1e>
 801ace6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801acea:	f7ff bbab 	b.w	801a444 <__swbuf_r>
 801acee:	6813      	ldr	r3, [r2, #0]
 801acf0:	1c58      	adds	r0, r3, #1
 801acf2:	6010      	str	r0, [r2, #0]
 801acf4:	7019      	strb	r1, [r3, #0]
 801acf6:	4608      	mov	r0, r1
 801acf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801acfc:	4770      	bx	lr

0801acfe <__sfputs_r>:
 801acfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad00:	4606      	mov	r6, r0
 801ad02:	460f      	mov	r7, r1
 801ad04:	4614      	mov	r4, r2
 801ad06:	18d5      	adds	r5, r2, r3
 801ad08:	42ac      	cmp	r4, r5
 801ad0a:	d101      	bne.n	801ad10 <__sfputs_r+0x12>
 801ad0c:	2000      	movs	r0, #0
 801ad0e:	e007      	b.n	801ad20 <__sfputs_r+0x22>
 801ad10:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad14:	463a      	mov	r2, r7
 801ad16:	4630      	mov	r0, r6
 801ad18:	f7ff ffda 	bl	801acd0 <__sfputc_r>
 801ad1c:	1c43      	adds	r3, r0, #1
 801ad1e:	d1f3      	bne.n	801ad08 <__sfputs_r+0xa>
 801ad20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ad24 <_vfiprintf_r>:
 801ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad28:	460d      	mov	r5, r1
 801ad2a:	b09d      	sub	sp, #116	; 0x74
 801ad2c:	4614      	mov	r4, r2
 801ad2e:	4698      	mov	r8, r3
 801ad30:	4606      	mov	r6, r0
 801ad32:	b118      	cbz	r0, 801ad3c <_vfiprintf_r+0x18>
 801ad34:	6983      	ldr	r3, [r0, #24]
 801ad36:	b90b      	cbnz	r3, 801ad3c <_vfiprintf_r+0x18>
 801ad38:	f7ff fd5e 	bl	801a7f8 <__sinit>
 801ad3c:	4b89      	ldr	r3, [pc, #548]	; (801af64 <_vfiprintf_r+0x240>)
 801ad3e:	429d      	cmp	r5, r3
 801ad40:	d11b      	bne.n	801ad7a <_vfiprintf_r+0x56>
 801ad42:	6875      	ldr	r5, [r6, #4]
 801ad44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad46:	07d9      	lsls	r1, r3, #31
 801ad48:	d405      	bmi.n	801ad56 <_vfiprintf_r+0x32>
 801ad4a:	89ab      	ldrh	r3, [r5, #12]
 801ad4c:	059a      	lsls	r2, r3, #22
 801ad4e:	d402      	bmi.n	801ad56 <_vfiprintf_r+0x32>
 801ad50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad52:	f7ff fdef 	bl	801a934 <__retarget_lock_acquire_recursive>
 801ad56:	89ab      	ldrh	r3, [r5, #12]
 801ad58:	071b      	lsls	r3, r3, #28
 801ad5a:	d501      	bpl.n	801ad60 <_vfiprintf_r+0x3c>
 801ad5c:	692b      	ldr	r3, [r5, #16]
 801ad5e:	b9eb      	cbnz	r3, 801ad9c <_vfiprintf_r+0x78>
 801ad60:	4629      	mov	r1, r5
 801ad62:	4630      	mov	r0, r6
 801ad64:	f7ff fbc0 	bl	801a4e8 <__swsetup_r>
 801ad68:	b1c0      	cbz	r0, 801ad9c <_vfiprintf_r+0x78>
 801ad6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad6c:	07dc      	lsls	r4, r3, #31
 801ad6e:	d50e      	bpl.n	801ad8e <_vfiprintf_r+0x6a>
 801ad70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ad74:	b01d      	add	sp, #116	; 0x74
 801ad76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad7a:	4b7b      	ldr	r3, [pc, #492]	; (801af68 <_vfiprintf_r+0x244>)
 801ad7c:	429d      	cmp	r5, r3
 801ad7e:	d101      	bne.n	801ad84 <_vfiprintf_r+0x60>
 801ad80:	68b5      	ldr	r5, [r6, #8]
 801ad82:	e7df      	b.n	801ad44 <_vfiprintf_r+0x20>
 801ad84:	4b79      	ldr	r3, [pc, #484]	; (801af6c <_vfiprintf_r+0x248>)
 801ad86:	429d      	cmp	r5, r3
 801ad88:	bf08      	it	eq
 801ad8a:	68f5      	ldreq	r5, [r6, #12]
 801ad8c:	e7da      	b.n	801ad44 <_vfiprintf_r+0x20>
 801ad8e:	89ab      	ldrh	r3, [r5, #12]
 801ad90:	0598      	lsls	r0, r3, #22
 801ad92:	d4ed      	bmi.n	801ad70 <_vfiprintf_r+0x4c>
 801ad94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad96:	f7ff fdce 	bl	801a936 <__retarget_lock_release_recursive>
 801ad9a:	e7e9      	b.n	801ad70 <_vfiprintf_r+0x4c>
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	9309      	str	r3, [sp, #36]	; 0x24
 801ada0:	2320      	movs	r3, #32
 801ada2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ada6:	f8cd 800c 	str.w	r8, [sp, #12]
 801adaa:	2330      	movs	r3, #48	; 0x30
 801adac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801af70 <_vfiprintf_r+0x24c>
 801adb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801adb4:	f04f 0901 	mov.w	r9, #1
 801adb8:	4623      	mov	r3, r4
 801adba:	469a      	mov	sl, r3
 801adbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801adc0:	b10a      	cbz	r2, 801adc6 <_vfiprintf_r+0xa2>
 801adc2:	2a25      	cmp	r2, #37	; 0x25
 801adc4:	d1f9      	bne.n	801adba <_vfiprintf_r+0x96>
 801adc6:	ebba 0b04 	subs.w	fp, sl, r4
 801adca:	d00b      	beq.n	801ade4 <_vfiprintf_r+0xc0>
 801adcc:	465b      	mov	r3, fp
 801adce:	4622      	mov	r2, r4
 801add0:	4629      	mov	r1, r5
 801add2:	4630      	mov	r0, r6
 801add4:	f7ff ff93 	bl	801acfe <__sfputs_r>
 801add8:	3001      	adds	r0, #1
 801adda:	f000 80aa 	beq.w	801af32 <_vfiprintf_r+0x20e>
 801adde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ade0:	445a      	add	r2, fp
 801ade2:	9209      	str	r2, [sp, #36]	; 0x24
 801ade4:	f89a 3000 	ldrb.w	r3, [sl]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	f000 80a2 	beq.w	801af32 <_vfiprintf_r+0x20e>
 801adee:	2300      	movs	r3, #0
 801adf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801adf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801adf8:	f10a 0a01 	add.w	sl, sl, #1
 801adfc:	9304      	str	r3, [sp, #16]
 801adfe:	9307      	str	r3, [sp, #28]
 801ae00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ae04:	931a      	str	r3, [sp, #104]	; 0x68
 801ae06:	4654      	mov	r4, sl
 801ae08:	2205      	movs	r2, #5
 801ae0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae0e:	4858      	ldr	r0, [pc, #352]	; (801af70 <_vfiprintf_r+0x24c>)
 801ae10:	f7e5 fa5e 	bl	80002d0 <memchr>
 801ae14:	9a04      	ldr	r2, [sp, #16]
 801ae16:	b9d8      	cbnz	r0, 801ae50 <_vfiprintf_r+0x12c>
 801ae18:	06d1      	lsls	r1, r2, #27
 801ae1a:	bf44      	itt	mi
 801ae1c:	2320      	movmi	r3, #32
 801ae1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae22:	0713      	lsls	r3, r2, #28
 801ae24:	bf44      	itt	mi
 801ae26:	232b      	movmi	r3, #43	; 0x2b
 801ae28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae2c:	f89a 3000 	ldrb.w	r3, [sl]
 801ae30:	2b2a      	cmp	r3, #42	; 0x2a
 801ae32:	d015      	beq.n	801ae60 <_vfiprintf_r+0x13c>
 801ae34:	9a07      	ldr	r2, [sp, #28]
 801ae36:	4654      	mov	r4, sl
 801ae38:	2000      	movs	r0, #0
 801ae3a:	f04f 0c0a 	mov.w	ip, #10
 801ae3e:	4621      	mov	r1, r4
 801ae40:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ae44:	3b30      	subs	r3, #48	; 0x30
 801ae46:	2b09      	cmp	r3, #9
 801ae48:	d94e      	bls.n	801aee8 <_vfiprintf_r+0x1c4>
 801ae4a:	b1b0      	cbz	r0, 801ae7a <_vfiprintf_r+0x156>
 801ae4c:	9207      	str	r2, [sp, #28]
 801ae4e:	e014      	b.n	801ae7a <_vfiprintf_r+0x156>
 801ae50:	eba0 0308 	sub.w	r3, r0, r8
 801ae54:	fa09 f303 	lsl.w	r3, r9, r3
 801ae58:	4313      	orrs	r3, r2
 801ae5a:	9304      	str	r3, [sp, #16]
 801ae5c:	46a2      	mov	sl, r4
 801ae5e:	e7d2      	b.n	801ae06 <_vfiprintf_r+0xe2>
 801ae60:	9b03      	ldr	r3, [sp, #12]
 801ae62:	1d19      	adds	r1, r3, #4
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	9103      	str	r1, [sp, #12]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	bfbb      	ittet	lt
 801ae6c:	425b      	neglt	r3, r3
 801ae6e:	f042 0202 	orrlt.w	r2, r2, #2
 801ae72:	9307      	strge	r3, [sp, #28]
 801ae74:	9307      	strlt	r3, [sp, #28]
 801ae76:	bfb8      	it	lt
 801ae78:	9204      	strlt	r2, [sp, #16]
 801ae7a:	7823      	ldrb	r3, [r4, #0]
 801ae7c:	2b2e      	cmp	r3, #46	; 0x2e
 801ae7e:	d10c      	bne.n	801ae9a <_vfiprintf_r+0x176>
 801ae80:	7863      	ldrb	r3, [r4, #1]
 801ae82:	2b2a      	cmp	r3, #42	; 0x2a
 801ae84:	d135      	bne.n	801aef2 <_vfiprintf_r+0x1ce>
 801ae86:	9b03      	ldr	r3, [sp, #12]
 801ae88:	1d1a      	adds	r2, r3, #4
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	9203      	str	r2, [sp, #12]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	bfb8      	it	lt
 801ae92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ae96:	3402      	adds	r4, #2
 801ae98:	9305      	str	r3, [sp, #20]
 801ae9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801af80 <_vfiprintf_r+0x25c>
 801ae9e:	7821      	ldrb	r1, [r4, #0]
 801aea0:	2203      	movs	r2, #3
 801aea2:	4650      	mov	r0, sl
 801aea4:	f7e5 fa14 	bl	80002d0 <memchr>
 801aea8:	b140      	cbz	r0, 801aebc <_vfiprintf_r+0x198>
 801aeaa:	2340      	movs	r3, #64	; 0x40
 801aeac:	eba0 000a 	sub.w	r0, r0, sl
 801aeb0:	fa03 f000 	lsl.w	r0, r3, r0
 801aeb4:	9b04      	ldr	r3, [sp, #16]
 801aeb6:	4303      	orrs	r3, r0
 801aeb8:	3401      	adds	r4, #1
 801aeba:	9304      	str	r3, [sp, #16]
 801aebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aec0:	482c      	ldr	r0, [pc, #176]	; (801af74 <_vfiprintf_r+0x250>)
 801aec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aec6:	2206      	movs	r2, #6
 801aec8:	f7e5 fa02 	bl	80002d0 <memchr>
 801aecc:	2800      	cmp	r0, #0
 801aece:	d03f      	beq.n	801af50 <_vfiprintf_r+0x22c>
 801aed0:	4b29      	ldr	r3, [pc, #164]	; (801af78 <_vfiprintf_r+0x254>)
 801aed2:	bb1b      	cbnz	r3, 801af1c <_vfiprintf_r+0x1f8>
 801aed4:	9b03      	ldr	r3, [sp, #12]
 801aed6:	3307      	adds	r3, #7
 801aed8:	f023 0307 	bic.w	r3, r3, #7
 801aedc:	3308      	adds	r3, #8
 801aede:	9303      	str	r3, [sp, #12]
 801aee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aee2:	443b      	add	r3, r7
 801aee4:	9309      	str	r3, [sp, #36]	; 0x24
 801aee6:	e767      	b.n	801adb8 <_vfiprintf_r+0x94>
 801aee8:	fb0c 3202 	mla	r2, ip, r2, r3
 801aeec:	460c      	mov	r4, r1
 801aeee:	2001      	movs	r0, #1
 801aef0:	e7a5      	b.n	801ae3e <_vfiprintf_r+0x11a>
 801aef2:	2300      	movs	r3, #0
 801aef4:	3401      	adds	r4, #1
 801aef6:	9305      	str	r3, [sp, #20]
 801aef8:	4619      	mov	r1, r3
 801aefa:	f04f 0c0a 	mov.w	ip, #10
 801aefe:	4620      	mov	r0, r4
 801af00:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af04:	3a30      	subs	r2, #48	; 0x30
 801af06:	2a09      	cmp	r2, #9
 801af08:	d903      	bls.n	801af12 <_vfiprintf_r+0x1ee>
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d0c5      	beq.n	801ae9a <_vfiprintf_r+0x176>
 801af0e:	9105      	str	r1, [sp, #20]
 801af10:	e7c3      	b.n	801ae9a <_vfiprintf_r+0x176>
 801af12:	fb0c 2101 	mla	r1, ip, r1, r2
 801af16:	4604      	mov	r4, r0
 801af18:	2301      	movs	r3, #1
 801af1a:	e7f0      	b.n	801aefe <_vfiprintf_r+0x1da>
 801af1c:	ab03      	add	r3, sp, #12
 801af1e:	9300      	str	r3, [sp, #0]
 801af20:	462a      	mov	r2, r5
 801af22:	4b16      	ldr	r3, [pc, #88]	; (801af7c <_vfiprintf_r+0x258>)
 801af24:	a904      	add	r1, sp, #16
 801af26:	4630      	mov	r0, r6
 801af28:	f3af 8000 	nop.w
 801af2c:	4607      	mov	r7, r0
 801af2e:	1c78      	adds	r0, r7, #1
 801af30:	d1d6      	bne.n	801aee0 <_vfiprintf_r+0x1bc>
 801af32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af34:	07d9      	lsls	r1, r3, #31
 801af36:	d405      	bmi.n	801af44 <_vfiprintf_r+0x220>
 801af38:	89ab      	ldrh	r3, [r5, #12]
 801af3a:	059a      	lsls	r2, r3, #22
 801af3c:	d402      	bmi.n	801af44 <_vfiprintf_r+0x220>
 801af3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af40:	f7ff fcf9 	bl	801a936 <__retarget_lock_release_recursive>
 801af44:	89ab      	ldrh	r3, [r5, #12]
 801af46:	065b      	lsls	r3, r3, #25
 801af48:	f53f af12 	bmi.w	801ad70 <_vfiprintf_r+0x4c>
 801af4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af4e:	e711      	b.n	801ad74 <_vfiprintf_r+0x50>
 801af50:	ab03      	add	r3, sp, #12
 801af52:	9300      	str	r3, [sp, #0]
 801af54:	462a      	mov	r2, r5
 801af56:	4b09      	ldr	r3, [pc, #36]	; (801af7c <_vfiprintf_r+0x258>)
 801af58:	a904      	add	r1, sp, #16
 801af5a:	4630      	mov	r0, r6
 801af5c:	f000 f880 	bl	801b060 <_printf_i>
 801af60:	e7e4      	b.n	801af2c <_vfiprintf_r+0x208>
 801af62:	bf00      	nop
 801af64:	080316e4 	.word	0x080316e4
 801af68:	08031704 	.word	0x08031704
 801af6c:	080316c4 	.word	0x080316c4
 801af70:	08031724 	.word	0x08031724
 801af74:	0803172e 	.word	0x0803172e
 801af78:	00000000 	.word	0x00000000
 801af7c:	0801acff 	.word	0x0801acff
 801af80:	0803172a 	.word	0x0803172a

0801af84 <_printf_common>:
 801af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af88:	4616      	mov	r6, r2
 801af8a:	4699      	mov	r9, r3
 801af8c:	688a      	ldr	r2, [r1, #8]
 801af8e:	690b      	ldr	r3, [r1, #16]
 801af90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801af94:	4293      	cmp	r3, r2
 801af96:	bfb8      	it	lt
 801af98:	4613      	movlt	r3, r2
 801af9a:	6033      	str	r3, [r6, #0]
 801af9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801afa0:	4607      	mov	r7, r0
 801afa2:	460c      	mov	r4, r1
 801afa4:	b10a      	cbz	r2, 801afaa <_printf_common+0x26>
 801afa6:	3301      	adds	r3, #1
 801afa8:	6033      	str	r3, [r6, #0]
 801afaa:	6823      	ldr	r3, [r4, #0]
 801afac:	0699      	lsls	r1, r3, #26
 801afae:	bf42      	ittt	mi
 801afb0:	6833      	ldrmi	r3, [r6, #0]
 801afb2:	3302      	addmi	r3, #2
 801afb4:	6033      	strmi	r3, [r6, #0]
 801afb6:	6825      	ldr	r5, [r4, #0]
 801afb8:	f015 0506 	ands.w	r5, r5, #6
 801afbc:	d106      	bne.n	801afcc <_printf_common+0x48>
 801afbe:	f104 0a19 	add.w	sl, r4, #25
 801afc2:	68e3      	ldr	r3, [r4, #12]
 801afc4:	6832      	ldr	r2, [r6, #0]
 801afc6:	1a9b      	subs	r3, r3, r2
 801afc8:	42ab      	cmp	r3, r5
 801afca:	dc26      	bgt.n	801b01a <_printf_common+0x96>
 801afcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801afd0:	1e13      	subs	r3, r2, #0
 801afd2:	6822      	ldr	r2, [r4, #0]
 801afd4:	bf18      	it	ne
 801afd6:	2301      	movne	r3, #1
 801afd8:	0692      	lsls	r2, r2, #26
 801afda:	d42b      	bmi.n	801b034 <_printf_common+0xb0>
 801afdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801afe0:	4649      	mov	r1, r9
 801afe2:	4638      	mov	r0, r7
 801afe4:	47c0      	blx	r8
 801afe6:	3001      	adds	r0, #1
 801afe8:	d01e      	beq.n	801b028 <_printf_common+0xa4>
 801afea:	6823      	ldr	r3, [r4, #0]
 801afec:	68e5      	ldr	r5, [r4, #12]
 801afee:	6832      	ldr	r2, [r6, #0]
 801aff0:	f003 0306 	and.w	r3, r3, #6
 801aff4:	2b04      	cmp	r3, #4
 801aff6:	bf08      	it	eq
 801aff8:	1aad      	subeq	r5, r5, r2
 801affa:	68a3      	ldr	r3, [r4, #8]
 801affc:	6922      	ldr	r2, [r4, #16]
 801affe:	bf0c      	ite	eq
 801b000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b004:	2500      	movne	r5, #0
 801b006:	4293      	cmp	r3, r2
 801b008:	bfc4      	itt	gt
 801b00a:	1a9b      	subgt	r3, r3, r2
 801b00c:	18ed      	addgt	r5, r5, r3
 801b00e:	2600      	movs	r6, #0
 801b010:	341a      	adds	r4, #26
 801b012:	42b5      	cmp	r5, r6
 801b014:	d11a      	bne.n	801b04c <_printf_common+0xc8>
 801b016:	2000      	movs	r0, #0
 801b018:	e008      	b.n	801b02c <_printf_common+0xa8>
 801b01a:	2301      	movs	r3, #1
 801b01c:	4652      	mov	r2, sl
 801b01e:	4649      	mov	r1, r9
 801b020:	4638      	mov	r0, r7
 801b022:	47c0      	blx	r8
 801b024:	3001      	adds	r0, #1
 801b026:	d103      	bne.n	801b030 <_printf_common+0xac>
 801b028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b030:	3501      	adds	r5, #1
 801b032:	e7c6      	b.n	801afc2 <_printf_common+0x3e>
 801b034:	18e1      	adds	r1, r4, r3
 801b036:	1c5a      	adds	r2, r3, #1
 801b038:	2030      	movs	r0, #48	; 0x30
 801b03a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b03e:	4422      	add	r2, r4
 801b040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b048:	3302      	adds	r3, #2
 801b04a:	e7c7      	b.n	801afdc <_printf_common+0x58>
 801b04c:	2301      	movs	r3, #1
 801b04e:	4622      	mov	r2, r4
 801b050:	4649      	mov	r1, r9
 801b052:	4638      	mov	r0, r7
 801b054:	47c0      	blx	r8
 801b056:	3001      	adds	r0, #1
 801b058:	d0e6      	beq.n	801b028 <_printf_common+0xa4>
 801b05a:	3601      	adds	r6, #1
 801b05c:	e7d9      	b.n	801b012 <_printf_common+0x8e>
	...

0801b060 <_printf_i>:
 801b060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b064:	460c      	mov	r4, r1
 801b066:	4691      	mov	r9, r2
 801b068:	7e27      	ldrb	r7, [r4, #24]
 801b06a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b06c:	2f78      	cmp	r7, #120	; 0x78
 801b06e:	4680      	mov	r8, r0
 801b070:	469a      	mov	sl, r3
 801b072:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b076:	d807      	bhi.n	801b088 <_printf_i+0x28>
 801b078:	2f62      	cmp	r7, #98	; 0x62
 801b07a:	d80a      	bhi.n	801b092 <_printf_i+0x32>
 801b07c:	2f00      	cmp	r7, #0
 801b07e:	f000 80d8 	beq.w	801b232 <_printf_i+0x1d2>
 801b082:	2f58      	cmp	r7, #88	; 0x58
 801b084:	f000 80a3 	beq.w	801b1ce <_printf_i+0x16e>
 801b088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b08c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b090:	e03a      	b.n	801b108 <_printf_i+0xa8>
 801b092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b096:	2b15      	cmp	r3, #21
 801b098:	d8f6      	bhi.n	801b088 <_printf_i+0x28>
 801b09a:	a001      	add	r0, pc, #4	; (adr r0, 801b0a0 <_printf_i+0x40>)
 801b09c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b0a0:	0801b0f9 	.word	0x0801b0f9
 801b0a4:	0801b10d 	.word	0x0801b10d
 801b0a8:	0801b089 	.word	0x0801b089
 801b0ac:	0801b089 	.word	0x0801b089
 801b0b0:	0801b089 	.word	0x0801b089
 801b0b4:	0801b089 	.word	0x0801b089
 801b0b8:	0801b10d 	.word	0x0801b10d
 801b0bc:	0801b089 	.word	0x0801b089
 801b0c0:	0801b089 	.word	0x0801b089
 801b0c4:	0801b089 	.word	0x0801b089
 801b0c8:	0801b089 	.word	0x0801b089
 801b0cc:	0801b219 	.word	0x0801b219
 801b0d0:	0801b13d 	.word	0x0801b13d
 801b0d4:	0801b1fb 	.word	0x0801b1fb
 801b0d8:	0801b089 	.word	0x0801b089
 801b0dc:	0801b089 	.word	0x0801b089
 801b0e0:	0801b23b 	.word	0x0801b23b
 801b0e4:	0801b089 	.word	0x0801b089
 801b0e8:	0801b13d 	.word	0x0801b13d
 801b0ec:	0801b089 	.word	0x0801b089
 801b0f0:	0801b089 	.word	0x0801b089
 801b0f4:	0801b203 	.word	0x0801b203
 801b0f8:	680b      	ldr	r3, [r1, #0]
 801b0fa:	1d1a      	adds	r2, r3, #4
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	600a      	str	r2, [r1, #0]
 801b100:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b108:	2301      	movs	r3, #1
 801b10a:	e0a3      	b.n	801b254 <_printf_i+0x1f4>
 801b10c:	6825      	ldr	r5, [r4, #0]
 801b10e:	6808      	ldr	r0, [r1, #0]
 801b110:	062e      	lsls	r6, r5, #24
 801b112:	f100 0304 	add.w	r3, r0, #4
 801b116:	d50a      	bpl.n	801b12e <_printf_i+0xce>
 801b118:	6805      	ldr	r5, [r0, #0]
 801b11a:	600b      	str	r3, [r1, #0]
 801b11c:	2d00      	cmp	r5, #0
 801b11e:	da03      	bge.n	801b128 <_printf_i+0xc8>
 801b120:	232d      	movs	r3, #45	; 0x2d
 801b122:	426d      	negs	r5, r5
 801b124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b128:	485e      	ldr	r0, [pc, #376]	; (801b2a4 <_printf_i+0x244>)
 801b12a:	230a      	movs	r3, #10
 801b12c:	e019      	b.n	801b162 <_printf_i+0x102>
 801b12e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b132:	6805      	ldr	r5, [r0, #0]
 801b134:	600b      	str	r3, [r1, #0]
 801b136:	bf18      	it	ne
 801b138:	b22d      	sxthne	r5, r5
 801b13a:	e7ef      	b.n	801b11c <_printf_i+0xbc>
 801b13c:	680b      	ldr	r3, [r1, #0]
 801b13e:	6825      	ldr	r5, [r4, #0]
 801b140:	1d18      	adds	r0, r3, #4
 801b142:	6008      	str	r0, [r1, #0]
 801b144:	0628      	lsls	r0, r5, #24
 801b146:	d501      	bpl.n	801b14c <_printf_i+0xec>
 801b148:	681d      	ldr	r5, [r3, #0]
 801b14a:	e002      	b.n	801b152 <_printf_i+0xf2>
 801b14c:	0669      	lsls	r1, r5, #25
 801b14e:	d5fb      	bpl.n	801b148 <_printf_i+0xe8>
 801b150:	881d      	ldrh	r5, [r3, #0]
 801b152:	4854      	ldr	r0, [pc, #336]	; (801b2a4 <_printf_i+0x244>)
 801b154:	2f6f      	cmp	r7, #111	; 0x6f
 801b156:	bf0c      	ite	eq
 801b158:	2308      	moveq	r3, #8
 801b15a:	230a      	movne	r3, #10
 801b15c:	2100      	movs	r1, #0
 801b15e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b162:	6866      	ldr	r6, [r4, #4]
 801b164:	60a6      	str	r6, [r4, #8]
 801b166:	2e00      	cmp	r6, #0
 801b168:	bfa2      	ittt	ge
 801b16a:	6821      	ldrge	r1, [r4, #0]
 801b16c:	f021 0104 	bicge.w	r1, r1, #4
 801b170:	6021      	strge	r1, [r4, #0]
 801b172:	b90d      	cbnz	r5, 801b178 <_printf_i+0x118>
 801b174:	2e00      	cmp	r6, #0
 801b176:	d04d      	beq.n	801b214 <_printf_i+0x1b4>
 801b178:	4616      	mov	r6, r2
 801b17a:	fbb5 f1f3 	udiv	r1, r5, r3
 801b17e:	fb03 5711 	mls	r7, r3, r1, r5
 801b182:	5dc7      	ldrb	r7, [r0, r7]
 801b184:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b188:	462f      	mov	r7, r5
 801b18a:	42bb      	cmp	r3, r7
 801b18c:	460d      	mov	r5, r1
 801b18e:	d9f4      	bls.n	801b17a <_printf_i+0x11a>
 801b190:	2b08      	cmp	r3, #8
 801b192:	d10b      	bne.n	801b1ac <_printf_i+0x14c>
 801b194:	6823      	ldr	r3, [r4, #0]
 801b196:	07df      	lsls	r7, r3, #31
 801b198:	d508      	bpl.n	801b1ac <_printf_i+0x14c>
 801b19a:	6923      	ldr	r3, [r4, #16]
 801b19c:	6861      	ldr	r1, [r4, #4]
 801b19e:	4299      	cmp	r1, r3
 801b1a0:	bfde      	ittt	le
 801b1a2:	2330      	movle	r3, #48	; 0x30
 801b1a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b1a8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801b1ac:	1b92      	subs	r2, r2, r6
 801b1ae:	6122      	str	r2, [r4, #16]
 801b1b0:	f8cd a000 	str.w	sl, [sp]
 801b1b4:	464b      	mov	r3, r9
 801b1b6:	aa03      	add	r2, sp, #12
 801b1b8:	4621      	mov	r1, r4
 801b1ba:	4640      	mov	r0, r8
 801b1bc:	f7ff fee2 	bl	801af84 <_printf_common>
 801b1c0:	3001      	adds	r0, #1
 801b1c2:	d14c      	bne.n	801b25e <_printf_i+0x1fe>
 801b1c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b1c8:	b004      	add	sp, #16
 801b1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1ce:	4835      	ldr	r0, [pc, #212]	; (801b2a4 <_printf_i+0x244>)
 801b1d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b1d4:	6823      	ldr	r3, [r4, #0]
 801b1d6:	680e      	ldr	r6, [r1, #0]
 801b1d8:	061f      	lsls	r7, r3, #24
 801b1da:	f856 5b04 	ldr.w	r5, [r6], #4
 801b1de:	600e      	str	r6, [r1, #0]
 801b1e0:	d514      	bpl.n	801b20c <_printf_i+0x1ac>
 801b1e2:	07d9      	lsls	r1, r3, #31
 801b1e4:	bf44      	itt	mi
 801b1e6:	f043 0320 	orrmi.w	r3, r3, #32
 801b1ea:	6023      	strmi	r3, [r4, #0]
 801b1ec:	b91d      	cbnz	r5, 801b1f6 <_printf_i+0x196>
 801b1ee:	6823      	ldr	r3, [r4, #0]
 801b1f0:	f023 0320 	bic.w	r3, r3, #32
 801b1f4:	6023      	str	r3, [r4, #0]
 801b1f6:	2310      	movs	r3, #16
 801b1f8:	e7b0      	b.n	801b15c <_printf_i+0xfc>
 801b1fa:	6823      	ldr	r3, [r4, #0]
 801b1fc:	f043 0320 	orr.w	r3, r3, #32
 801b200:	6023      	str	r3, [r4, #0]
 801b202:	2378      	movs	r3, #120	; 0x78
 801b204:	4828      	ldr	r0, [pc, #160]	; (801b2a8 <_printf_i+0x248>)
 801b206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b20a:	e7e3      	b.n	801b1d4 <_printf_i+0x174>
 801b20c:	065e      	lsls	r6, r3, #25
 801b20e:	bf48      	it	mi
 801b210:	b2ad      	uxthmi	r5, r5
 801b212:	e7e6      	b.n	801b1e2 <_printf_i+0x182>
 801b214:	4616      	mov	r6, r2
 801b216:	e7bb      	b.n	801b190 <_printf_i+0x130>
 801b218:	680b      	ldr	r3, [r1, #0]
 801b21a:	6826      	ldr	r6, [r4, #0]
 801b21c:	6960      	ldr	r0, [r4, #20]
 801b21e:	1d1d      	adds	r5, r3, #4
 801b220:	600d      	str	r5, [r1, #0]
 801b222:	0635      	lsls	r5, r6, #24
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	d501      	bpl.n	801b22c <_printf_i+0x1cc>
 801b228:	6018      	str	r0, [r3, #0]
 801b22a:	e002      	b.n	801b232 <_printf_i+0x1d2>
 801b22c:	0671      	lsls	r1, r6, #25
 801b22e:	d5fb      	bpl.n	801b228 <_printf_i+0x1c8>
 801b230:	8018      	strh	r0, [r3, #0]
 801b232:	2300      	movs	r3, #0
 801b234:	6123      	str	r3, [r4, #16]
 801b236:	4616      	mov	r6, r2
 801b238:	e7ba      	b.n	801b1b0 <_printf_i+0x150>
 801b23a:	680b      	ldr	r3, [r1, #0]
 801b23c:	1d1a      	adds	r2, r3, #4
 801b23e:	600a      	str	r2, [r1, #0]
 801b240:	681e      	ldr	r6, [r3, #0]
 801b242:	6862      	ldr	r2, [r4, #4]
 801b244:	2100      	movs	r1, #0
 801b246:	4630      	mov	r0, r6
 801b248:	f7e5 f842 	bl	80002d0 <memchr>
 801b24c:	b108      	cbz	r0, 801b252 <_printf_i+0x1f2>
 801b24e:	1b80      	subs	r0, r0, r6
 801b250:	6060      	str	r0, [r4, #4]
 801b252:	6863      	ldr	r3, [r4, #4]
 801b254:	6123      	str	r3, [r4, #16]
 801b256:	2300      	movs	r3, #0
 801b258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b25c:	e7a8      	b.n	801b1b0 <_printf_i+0x150>
 801b25e:	6923      	ldr	r3, [r4, #16]
 801b260:	4632      	mov	r2, r6
 801b262:	4649      	mov	r1, r9
 801b264:	4640      	mov	r0, r8
 801b266:	47d0      	blx	sl
 801b268:	3001      	adds	r0, #1
 801b26a:	d0ab      	beq.n	801b1c4 <_printf_i+0x164>
 801b26c:	6823      	ldr	r3, [r4, #0]
 801b26e:	079b      	lsls	r3, r3, #30
 801b270:	d413      	bmi.n	801b29a <_printf_i+0x23a>
 801b272:	68e0      	ldr	r0, [r4, #12]
 801b274:	9b03      	ldr	r3, [sp, #12]
 801b276:	4298      	cmp	r0, r3
 801b278:	bfb8      	it	lt
 801b27a:	4618      	movlt	r0, r3
 801b27c:	e7a4      	b.n	801b1c8 <_printf_i+0x168>
 801b27e:	2301      	movs	r3, #1
 801b280:	4632      	mov	r2, r6
 801b282:	4649      	mov	r1, r9
 801b284:	4640      	mov	r0, r8
 801b286:	47d0      	blx	sl
 801b288:	3001      	adds	r0, #1
 801b28a:	d09b      	beq.n	801b1c4 <_printf_i+0x164>
 801b28c:	3501      	adds	r5, #1
 801b28e:	68e3      	ldr	r3, [r4, #12]
 801b290:	9903      	ldr	r1, [sp, #12]
 801b292:	1a5b      	subs	r3, r3, r1
 801b294:	42ab      	cmp	r3, r5
 801b296:	dcf2      	bgt.n	801b27e <_printf_i+0x21e>
 801b298:	e7eb      	b.n	801b272 <_printf_i+0x212>
 801b29a:	2500      	movs	r5, #0
 801b29c:	f104 0619 	add.w	r6, r4, #25
 801b2a0:	e7f5      	b.n	801b28e <_printf_i+0x22e>
 801b2a2:	bf00      	nop
 801b2a4:	08031735 	.word	0x08031735
 801b2a8:	08031746 	.word	0x08031746

0801b2ac <_putc_r>:
 801b2ac:	b570      	push	{r4, r5, r6, lr}
 801b2ae:	460d      	mov	r5, r1
 801b2b0:	4614      	mov	r4, r2
 801b2b2:	4606      	mov	r6, r0
 801b2b4:	b118      	cbz	r0, 801b2be <_putc_r+0x12>
 801b2b6:	6983      	ldr	r3, [r0, #24]
 801b2b8:	b90b      	cbnz	r3, 801b2be <_putc_r+0x12>
 801b2ba:	f7ff fa9d 	bl	801a7f8 <__sinit>
 801b2be:	4b1c      	ldr	r3, [pc, #112]	; (801b330 <_putc_r+0x84>)
 801b2c0:	429c      	cmp	r4, r3
 801b2c2:	d124      	bne.n	801b30e <_putc_r+0x62>
 801b2c4:	6874      	ldr	r4, [r6, #4]
 801b2c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b2c8:	07d8      	lsls	r0, r3, #31
 801b2ca:	d405      	bmi.n	801b2d8 <_putc_r+0x2c>
 801b2cc:	89a3      	ldrh	r3, [r4, #12]
 801b2ce:	0599      	lsls	r1, r3, #22
 801b2d0:	d402      	bmi.n	801b2d8 <_putc_r+0x2c>
 801b2d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b2d4:	f7ff fb2e 	bl	801a934 <__retarget_lock_acquire_recursive>
 801b2d8:	68a3      	ldr	r3, [r4, #8]
 801b2da:	3b01      	subs	r3, #1
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	60a3      	str	r3, [r4, #8]
 801b2e0:	da05      	bge.n	801b2ee <_putc_r+0x42>
 801b2e2:	69a2      	ldr	r2, [r4, #24]
 801b2e4:	4293      	cmp	r3, r2
 801b2e6:	db1c      	blt.n	801b322 <_putc_r+0x76>
 801b2e8:	b2eb      	uxtb	r3, r5
 801b2ea:	2b0a      	cmp	r3, #10
 801b2ec:	d019      	beq.n	801b322 <_putc_r+0x76>
 801b2ee:	6823      	ldr	r3, [r4, #0]
 801b2f0:	1c5a      	adds	r2, r3, #1
 801b2f2:	6022      	str	r2, [r4, #0]
 801b2f4:	701d      	strb	r5, [r3, #0]
 801b2f6:	b2ed      	uxtb	r5, r5
 801b2f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b2fa:	07da      	lsls	r2, r3, #31
 801b2fc:	d405      	bmi.n	801b30a <_putc_r+0x5e>
 801b2fe:	89a3      	ldrh	r3, [r4, #12]
 801b300:	059b      	lsls	r3, r3, #22
 801b302:	d402      	bmi.n	801b30a <_putc_r+0x5e>
 801b304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b306:	f7ff fb16 	bl	801a936 <__retarget_lock_release_recursive>
 801b30a:	4628      	mov	r0, r5
 801b30c:	bd70      	pop	{r4, r5, r6, pc}
 801b30e:	4b09      	ldr	r3, [pc, #36]	; (801b334 <_putc_r+0x88>)
 801b310:	429c      	cmp	r4, r3
 801b312:	d101      	bne.n	801b318 <_putc_r+0x6c>
 801b314:	68b4      	ldr	r4, [r6, #8]
 801b316:	e7d6      	b.n	801b2c6 <_putc_r+0x1a>
 801b318:	4b07      	ldr	r3, [pc, #28]	; (801b338 <_putc_r+0x8c>)
 801b31a:	429c      	cmp	r4, r3
 801b31c:	bf08      	it	eq
 801b31e:	68f4      	ldreq	r4, [r6, #12]
 801b320:	e7d1      	b.n	801b2c6 <_putc_r+0x1a>
 801b322:	4629      	mov	r1, r5
 801b324:	4622      	mov	r2, r4
 801b326:	4630      	mov	r0, r6
 801b328:	f7ff f88c 	bl	801a444 <__swbuf_r>
 801b32c:	4605      	mov	r5, r0
 801b32e:	e7e3      	b.n	801b2f8 <_putc_r+0x4c>
 801b330:	080316e4 	.word	0x080316e4
 801b334:	08031704 	.word	0x08031704
 801b338:	080316c4 	.word	0x080316c4

0801b33c <__sread>:
 801b33c:	b510      	push	{r4, lr}
 801b33e:	460c      	mov	r4, r1
 801b340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b344:	f000 f8d4 	bl	801b4f0 <_read_r>
 801b348:	2800      	cmp	r0, #0
 801b34a:	bfab      	itete	ge
 801b34c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b34e:	89a3      	ldrhlt	r3, [r4, #12]
 801b350:	181b      	addge	r3, r3, r0
 801b352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b356:	bfac      	ite	ge
 801b358:	6563      	strge	r3, [r4, #84]	; 0x54
 801b35a:	81a3      	strhlt	r3, [r4, #12]
 801b35c:	bd10      	pop	{r4, pc}

0801b35e <__swrite>:
 801b35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b362:	461f      	mov	r7, r3
 801b364:	898b      	ldrh	r3, [r1, #12]
 801b366:	05db      	lsls	r3, r3, #23
 801b368:	4605      	mov	r5, r0
 801b36a:	460c      	mov	r4, r1
 801b36c:	4616      	mov	r6, r2
 801b36e:	d505      	bpl.n	801b37c <__swrite+0x1e>
 801b370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b374:	2302      	movs	r3, #2
 801b376:	2200      	movs	r2, #0
 801b378:	f000 f868 	bl	801b44c <_lseek_r>
 801b37c:	89a3      	ldrh	r3, [r4, #12]
 801b37e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b386:	81a3      	strh	r3, [r4, #12]
 801b388:	4632      	mov	r2, r6
 801b38a:	463b      	mov	r3, r7
 801b38c:	4628      	mov	r0, r5
 801b38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b392:	f000 b817 	b.w	801b3c4 <_write_r>

0801b396 <__sseek>:
 801b396:	b510      	push	{r4, lr}
 801b398:	460c      	mov	r4, r1
 801b39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b39e:	f000 f855 	bl	801b44c <_lseek_r>
 801b3a2:	1c43      	adds	r3, r0, #1
 801b3a4:	89a3      	ldrh	r3, [r4, #12]
 801b3a6:	bf15      	itete	ne
 801b3a8:	6560      	strne	r0, [r4, #84]	; 0x54
 801b3aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b3ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b3b2:	81a3      	strheq	r3, [r4, #12]
 801b3b4:	bf18      	it	ne
 801b3b6:	81a3      	strhne	r3, [r4, #12]
 801b3b8:	bd10      	pop	{r4, pc}

0801b3ba <__sclose>:
 801b3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3be:	f000 b813 	b.w	801b3e8 <_close_r>
	...

0801b3c4 <_write_r>:
 801b3c4:	b538      	push	{r3, r4, r5, lr}
 801b3c6:	4d07      	ldr	r5, [pc, #28]	; (801b3e4 <_write_r+0x20>)
 801b3c8:	4604      	mov	r4, r0
 801b3ca:	4608      	mov	r0, r1
 801b3cc:	4611      	mov	r1, r2
 801b3ce:	2200      	movs	r2, #0
 801b3d0:	602a      	str	r2, [r5, #0]
 801b3d2:	461a      	mov	r2, r3
 801b3d4:	f7e8 fd6f 	bl	8003eb6 <_write>
 801b3d8:	1c43      	adds	r3, r0, #1
 801b3da:	d102      	bne.n	801b3e2 <_write_r+0x1e>
 801b3dc:	682b      	ldr	r3, [r5, #0]
 801b3de:	b103      	cbz	r3, 801b3e2 <_write_r+0x1e>
 801b3e0:	6023      	str	r3, [r4, #0]
 801b3e2:	bd38      	pop	{r3, r4, r5, pc}
 801b3e4:	2004de2c 	.word	0x2004de2c

0801b3e8 <_close_r>:
 801b3e8:	b538      	push	{r3, r4, r5, lr}
 801b3ea:	4d06      	ldr	r5, [pc, #24]	; (801b404 <_close_r+0x1c>)
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	4604      	mov	r4, r0
 801b3f0:	4608      	mov	r0, r1
 801b3f2:	602b      	str	r3, [r5, #0]
 801b3f4:	f7e8 fd7b 	bl	8003eee <_close>
 801b3f8:	1c43      	adds	r3, r0, #1
 801b3fa:	d102      	bne.n	801b402 <_close_r+0x1a>
 801b3fc:	682b      	ldr	r3, [r5, #0]
 801b3fe:	b103      	cbz	r3, 801b402 <_close_r+0x1a>
 801b400:	6023      	str	r3, [r4, #0]
 801b402:	bd38      	pop	{r3, r4, r5, pc}
 801b404:	2004de2c 	.word	0x2004de2c

0801b408 <_fstat_r>:
 801b408:	b538      	push	{r3, r4, r5, lr}
 801b40a:	4d07      	ldr	r5, [pc, #28]	; (801b428 <_fstat_r+0x20>)
 801b40c:	2300      	movs	r3, #0
 801b40e:	4604      	mov	r4, r0
 801b410:	4608      	mov	r0, r1
 801b412:	4611      	mov	r1, r2
 801b414:	602b      	str	r3, [r5, #0]
 801b416:	f7e8 fd76 	bl	8003f06 <_fstat>
 801b41a:	1c43      	adds	r3, r0, #1
 801b41c:	d102      	bne.n	801b424 <_fstat_r+0x1c>
 801b41e:	682b      	ldr	r3, [r5, #0]
 801b420:	b103      	cbz	r3, 801b424 <_fstat_r+0x1c>
 801b422:	6023      	str	r3, [r4, #0]
 801b424:	bd38      	pop	{r3, r4, r5, pc}
 801b426:	bf00      	nop
 801b428:	2004de2c 	.word	0x2004de2c

0801b42c <_isatty_r>:
 801b42c:	b538      	push	{r3, r4, r5, lr}
 801b42e:	4d06      	ldr	r5, [pc, #24]	; (801b448 <_isatty_r+0x1c>)
 801b430:	2300      	movs	r3, #0
 801b432:	4604      	mov	r4, r0
 801b434:	4608      	mov	r0, r1
 801b436:	602b      	str	r3, [r5, #0]
 801b438:	f7e8 fd75 	bl	8003f26 <_isatty>
 801b43c:	1c43      	adds	r3, r0, #1
 801b43e:	d102      	bne.n	801b446 <_isatty_r+0x1a>
 801b440:	682b      	ldr	r3, [r5, #0]
 801b442:	b103      	cbz	r3, 801b446 <_isatty_r+0x1a>
 801b444:	6023      	str	r3, [r4, #0]
 801b446:	bd38      	pop	{r3, r4, r5, pc}
 801b448:	2004de2c 	.word	0x2004de2c

0801b44c <_lseek_r>:
 801b44c:	b538      	push	{r3, r4, r5, lr}
 801b44e:	4d07      	ldr	r5, [pc, #28]	; (801b46c <_lseek_r+0x20>)
 801b450:	4604      	mov	r4, r0
 801b452:	4608      	mov	r0, r1
 801b454:	4611      	mov	r1, r2
 801b456:	2200      	movs	r2, #0
 801b458:	602a      	str	r2, [r5, #0]
 801b45a:	461a      	mov	r2, r3
 801b45c:	f7e8 fd6e 	bl	8003f3c <_lseek>
 801b460:	1c43      	adds	r3, r0, #1
 801b462:	d102      	bne.n	801b46a <_lseek_r+0x1e>
 801b464:	682b      	ldr	r3, [r5, #0]
 801b466:	b103      	cbz	r3, 801b46a <_lseek_r+0x1e>
 801b468:	6023      	str	r3, [r4, #0]
 801b46a:	bd38      	pop	{r3, r4, r5, pc}
 801b46c:	2004de2c 	.word	0x2004de2c

0801b470 <memmove>:
 801b470:	4288      	cmp	r0, r1
 801b472:	b510      	push	{r4, lr}
 801b474:	eb01 0402 	add.w	r4, r1, r2
 801b478:	d902      	bls.n	801b480 <memmove+0x10>
 801b47a:	4284      	cmp	r4, r0
 801b47c:	4623      	mov	r3, r4
 801b47e:	d807      	bhi.n	801b490 <memmove+0x20>
 801b480:	1e43      	subs	r3, r0, #1
 801b482:	42a1      	cmp	r1, r4
 801b484:	d008      	beq.n	801b498 <memmove+0x28>
 801b486:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b48a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b48e:	e7f8      	b.n	801b482 <memmove+0x12>
 801b490:	4402      	add	r2, r0
 801b492:	4601      	mov	r1, r0
 801b494:	428a      	cmp	r2, r1
 801b496:	d100      	bne.n	801b49a <memmove+0x2a>
 801b498:	bd10      	pop	{r4, pc}
 801b49a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b49e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b4a2:	e7f7      	b.n	801b494 <memmove+0x24>

0801b4a4 <_realloc_r>:
 801b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4a6:	4607      	mov	r7, r0
 801b4a8:	4614      	mov	r4, r2
 801b4aa:	460e      	mov	r6, r1
 801b4ac:	b921      	cbnz	r1, 801b4b8 <_realloc_r+0x14>
 801b4ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b4b2:	4611      	mov	r1, r2
 801b4b4:	f7fe be98 	b.w	801a1e8 <_malloc_r>
 801b4b8:	b922      	cbnz	r2, 801b4c4 <_realloc_r+0x20>
 801b4ba:	f7fe fe45 	bl	801a148 <_free_r>
 801b4be:	4625      	mov	r5, r4
 801b4c0:	4628      	mov	r0, r5
 801b4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4c4:	f000 f826 	bl	801b514 <_malloc_usable_size_r>
 801b4c8:	42a0      	cmp	r0, r4
 801b4ca:	d20f      	bcs.n	801b4ec <_realloc_r+0x48>
 801b4cc:	4621      	mov	r1, r4
 801b4ce:	4638      	mov	r0, r7
 801b4d0:	f7fe fe8a 	bl	801a1e8 <_malloc_r>
 801b4d4:	4605      	mov	r5, r0
 801b4d6:	2800      	cmp	r0, #0
 801b4d8:	d0f2      	beq.n	801b4c0 <_realloc_r+0x1c>
 801b4da:	4631      	mov	r1, r6
 801b4dc:	4622      	mov	r2, r4
 801b4de:	f7fe fe1d 	bl	801a11c <memcpy>
 801b4e2:	4631      	mov	r1, r6
 801b4e4:	4638      	mov	r0, r7
 801b4e6:	f7fe fe2f 	bl	801a148 <_free_r>
 801b4ea:	e7e9      	b.n	801b4c0 <_realloc_r+0x1c>
 801b4ec:	4635      	mov	r5, r6
 801b4ee:	e7e7      	b.n	801b4c0 <_realloc_r+0x1c>

0801b4f0 <_read_r>:
 801b4f0:	b538      	push	{r3, r4, r5, lr}
 801b4f2:	4d07      	ldr	r5, [pc, #28]	; (801b510 <_read_r+0x20>)
 801b4f4:	4604      	mov	r4, r0
 801b4f6:	4608      	mov	r0, r1
 801b4f8:	4611      	mov	r1, r2
 801b4fa:	2200      	movs	r2, #0
 801b4fc:	602a      	str	r2, [r5, #0]
 801b4fe:	461a      	mov	r2, r3
 801b500:	f7e8 fcbc 	bl	8003e7c <_read>
 801b504:	1c43      	adds	r3, r0, #1
 801b506:	d102      	bne.n	801b50e <_read_r+0x1e>
 801b508:	682b      	ldr	r3, [r5, #0]
 801b50a:	b103      	cbz	r3, 801b50e <_read_r+0x1e>
 801b50c:	6023      	str	r3, [r4, #0]
 801b50e:	bd38      	pop	{r3, r4, r5, pc}
 801b510:	2004de2c 	.word	0x2004de2c

0801b514 <_malloc_usable_size_r>:
 801b514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b518:	1f18      	subs	r0, r3, #4
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	bfbc      	itt	lt
 801b51e:	580b      	ldrlt	r3, [r1, r0]
 801b520:	18c0      	addlt	r0, r0, r3
 801b522:	4770      	bx	lr

0801b524 <sqrtf>:
 801b524:	b508      	push	{r3, lr}
 801b526:	ed2d 8b02 	vpush	{d8}
 801b52a:	eeb0 8a40 	vmov.f32	s16, s0
 801b52e:	f000 f81f 	bl	801b570 <__ieee754_sqrtf>
 801b532:	4b0d      	ldr	r3, [pc, #52]	; (801b568 <sqrtf+0x44>)
 801b534:	f993 3000 	ldrsb.w	r3, [r3]
 801b538:	3301      	adds	r3, #1
 801b53a:	d011      	beq.n	801b560 <sqrtf+0x3c>
 801b53c:	eeb4 8a48 	vcmp.f32	s16, s16
 801b540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b544:	d60c      	bvs.n	801b560 <sqrtf+0x3c>
 801b546:	eddf 8a09 	vldr	s17, [pc, #36]	; 801b56c <sqrtf+0x48>
 801b54a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801b54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b552:	d505      	bpl.n	801b560 <sqrtf+0x3c>
 801b554:	f7fe fda8 	bl	801a0a8 <__errno>
 801b558:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801b55c:	2321      	movs	r3, #33	; 0x21
 801b55e:	6003      	str	r3, [r0, #0]
 801b560:	ecbd 8b02 	vpop	{d8}
 801b564:	bd08      	pop	{r3, pc}
 801b566:	bf00      	nop
 801b568:	200000c0 	.word	0x200000c0
 801b56c:	00000000 	.word	0x00000000

0801b570 <__ieee754_sqrtf>:
 801b570:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b574:	4770      	bx	lr
	...

0801b578 <_init>:
 801b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b57a:	bf00      	nop
 801b57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b57e:	bc08      	pop	{r3}
 801b580:	469e      	mov	lr, r3
 801b582:	4770      	bx	lr

0801b584 <_fini>:
 801b584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b586:	bf00      	nop
 801b588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b58a:	bc08      	pop	{r3}
 801b58c:	469e      	mov	lr, r3
 801b58e:	4770      	bx	lr
