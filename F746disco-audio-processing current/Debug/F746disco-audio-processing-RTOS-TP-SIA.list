
F746disco-audio-processing-RTOS-TP-SIA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001be84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000161f4  0801c054  0801c054  0002c054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032248  08032248  000500c4  2**0
                  CONTENTS
  4 .ARM          00000008  08032248  08032248  00042248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08032250  08032250  000500c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08032250  08032250  00042250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08032254  08032254  00042254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08032258  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004af68  200000c8  0803231c  000500c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2004b030  0803231c  0005b030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f45d  00000000  00000000  000500f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a585  00000000  00000000  0009f551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036b8  00000000  00000000  000a9ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003290  00000000  00000000  000ad190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039fff  00000000  00000000  000b0420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004ae8b  00000000  00000000  000ea41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129567  00000000  00000000  001352aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  0025e811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000efa8  00000000  00000000  0025e8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003a35  00000000  00000000  0026d87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801c03c 	.word	0x0801c03c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	0801c03c 	.word	0x0801c03c

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2iz>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d215      	bcs.n	8000c7e <__aeabi_d2iz+0x36>
 8000c52:	d511      	bpl.n	8000c78 <__aeabi_d2iz+0x30>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d912      	bls.n	8000c84 <__aeabi_d2iz+0x3c>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d105      	bne.n	8000c90 <__aeabi_d2iz+0x48>
 8000c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	bf08      	it	eq
 8000c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2uiz>:
 8000c98:	004a      	lsls	r2, r1, #1
 8000c9a:	d211      	bcs.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ca0:	d211      	bcs.n	8000cc6 <__aeabi_d2uiz+0x2e>
 8000ca2:	d50d      	bpl.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cac:	d40e      	bmi.n	8000ccc <__aeabi_d2uiz+0x34>
 8000cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cba:	fa23 f002 	lsr.w	r0, r3, r2
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cca:	d102      	bne.n	8000cd2 <__aeabi_d2uiz+0x3a>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b96e 	b.w	8000fcc <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468c      	mov	ip, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8083 	bne.w	8000e1e <__udivmoddi4+0x116>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d947      	bls.n	8000dae <__udivmoddi4+0xa6>
 8000d1e:	fab2 f282 	clz	r2, r2
 8000d22:	b142      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	f1c2 0020 	rsb	r0, r2, #32
 8000d28:	fa24 f000 	lsr.w	r0, r4, r0
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	4097      	lsls	r7, r2
 8000d30:	ea40 0c01 	orr.w	ip, r0, r1
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d40:	fa1f fe87 	uxth.w	lr, r7
 8000d44:	fb08 c116 	mls	r1, r8, r6, ip
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d5a:	f080 8119 	bcs.w	8000f90 <__udivmoddi4+0x288>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8116 	bls.w	8000f90 <__udivmoddi4+0x288>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	443b      	add	r3, r7
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d86:	f080 8105 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f240 8102 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	b11d      	cbz	r5, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c5 4300 	strd	r4, r3, [r5]
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xaa>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d150      	bne.n	8000e5c <__udivmoddi4+0x154>
 8000dba:	1bcb      	subs	r3, r1, r7
 8000dbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc0:	fa1f f887 	uxth.w	r8, r7
 8000dc4:	2601      	movs	r6, #1
 8000dc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dca:	0c21      	lsrs	r1, r4, #16
 8000dcc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0xe2>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	f200 80e9 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1ac9      	subs	r1, r1, r3
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x10c>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x10a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80d9 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e7bf      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x12e>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80b1 	beq.w	8000f8a <__udivmoddi4+0x282>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x1cc>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0x140>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80b8 	bhi.w	8000fb8 <__udivmoddi4+0x2b0>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	468c      	mov	ip, r1
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0a8      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000e56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e5a:	e7a5      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f603 	lsr.w	r6, r0, r3
 8000e64:	4097      	lsls	r7, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6e:	40d9      	lsrs	r1, r3
 8000e70:	4330      	orrs	r0, r6
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e78:	fa1f f887 	uxth.w	r8, r7
 8000e7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb06 f108 	mul.w	r1, r6, r8
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x19c>
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e96:	f080 808d 	bcs.w	8000fb4 <__udivmoddi4+0x2ac>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 808a 	bls.w	8000fb4 <__udivmoddi4+0x2ac>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	443b      	add	r3, r7
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b281      	uxth	r1, r0
 8000ea8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb4:	fb00 f308 	mul.w	r3, r0, r8
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x1c4>
 8000ebc:	1879      	adds	r1, r7, r1
 8000ebe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ec2:	d273      	bcs.n	8000fac <__udivmoddi4+0x2a4>
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d971      	bls.n	8000fac <__udivmoddi4+0x2a4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4439      	add	r1, r7
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ed2:	e778      	b.n	8000dc6 <__udivmoddi4+0xbe>
 8000ed4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed8:	fa03 f406 	lsl.w	r4, r3, r6
 8000edc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	0c3b      	lsrs	r3, r7, #16
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fa1f f884 	uxth.w	r8, r4
 8000efe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f06:	fb09 fa08 	mul.w	sl, r9, r8
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f10:	fa00 f306 	lsl.w	r3, r0, r6
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x220>
 8000f16:	1861      	adds	r1, r4, r1
 8000f18:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f1c:	d248      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	d946      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4421      	add	r1, r4
 8000f28:	eba1 010a 	sub.w	r1, r1, sl
 8000f2c:	b2bf      	uxth	r7, r7
 8000f2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f3a:	fb00 f808 	mul.w	r8, r0, r8
 8000f3e:	45b8      	cmp	r8, r7
 8000f40:	d907      	bls.n	8000f52 <__udivmoddi4+0x24a>
 8000f42:	19e7      	adds	r7, r4, r7
 8000f44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f48:	d22e      	bcs.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d92c      	bls.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4427      	add	r7, r4
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	eba7 0708 	sub.w	r7, r7, r8
 8000f5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5e:	454f      	cmp	r7, r9
 8000f60:	46c6      	mov	lr, r8
 8000f62:	4649      	mov	r1, r9
 8000f64:	d31a      	bcc.n	8000f9c <__udivmoddi4+0x294>
 8000f66:	d017      	beq.n	8000f98 <__udivmoddi4+0x290>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x27a>
 8000f6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f76:	40f2      	lsrs	r2, r6
 8000f78:	ea4c 0202 	orr.w	r2, ip, r2
 8000f7c:	40f7      	lsrs	r7, r6
 8000f7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f82:	2600      	movs	r6, #0
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e70b      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6fd      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f98:	4543      	cmp	r3, r8
 8000f9a:	d2e5      	bcs.n	8000f68 <__udivmoddi4+0x260>
 8000f9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fa0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7df      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e7d2      	b.n	8000f52 <__udivmoddi4+0x24a>
 8000fac:	4660      	mov	r0, ip
 8000fae:	e78d      	b.n	8000ecc <__udivmoddi4+0x1c4>
 8000fb0:	4681      	mov	r9, r0
 8000fb2:	e7b9      	b.n	8000f28 <__udivmoddi4+0x220>
 8000fb4:	4666      	mov	r6, ip
 8000fb6:	e775      	b.n	8000ea4 <__udivmoddi4+0x19c>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	e74a      	b.n	8000e52 <__udivmoddi4+0x14a>
 8000fbc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc0:	4439      	add	r1, r7
 8000fc2:	e713      	b.n	8000dec <__udivmoddi4+0xe4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	443c      	add	r4, r7
 8000fc8:	e724      	b.n	8000e14 <__udivmoddi4+0x10c>
 8000fca:	bf00      	nop

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af02      	add	r7, sp, #8

	//uiDisplayBasic();

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000fd6:	4a36      	ldr	r2, [pc, #216]	; (80010b0 <audioLoop+0xe0>)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4836      	ldr	r0, [pc, #216]	; (80010b4 <audioLoop+0xe4>)
 8000fdc:	f019 fb74 	bl	801a6c8 <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <audioLoop+0xe8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]

	arm_rfft_fast_init_f32(&FFTStruct, FFTLength);
 8000fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fea:	4834      	ldr	r0, [pc, #208]	; (80010bc <audioLoop+0xec>)
 8000fec:	f018 fa32 	bl	8019454 <arm_rfft_fast_init_f32>

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8000ff0:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <audioLoop+0xf0>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ffe:	4931      	ldr	r1, [pc, #196]	; (80010c4 <audioLoop+0xf4>)
 8001000:	4831      	ldr	r0, [pc, #196]	; (80010c8 <audioLoop+0xf8>)
 8001002:	f004 fa0f 	bl	8005424 <start_Audio_Processing>

	/* main audio loop */
	while (1) {

		accumulateInputLevels();
 8001006:	f000 f86f 	bl	80010e8 <accumulateInputLevels>
		count++;
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <audioLoop+0xfc>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <audioLoop+0xfc>)
 8001012:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <audioLoop+0xfc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b13      	cmp	r3, #19
 800101a:	dd2a      	ble.n	8001072 <audioLoop+0xa2>
			count = 0;
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <audioLoop+0xfc>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
			inputLevelLavr = inputLevelL * 0.05;
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <audioLoop+0x100>)
 8001024:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001028:	a31f      	add	r3, pc, #124	; (adr r3, 80010a8 <audioLoop+0xd8>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff fb5b 	bl	80006e8 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4927      	ldr	r1, [pc, #156]	; (80010d4 <audioLoop+0x104>)
 8001038:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelRavr = inputLevelR * 0.05;
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <audioLoop+0x108>)
 800103e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001042:	a319      	add	r3, pc, #100	; (adr r3, 80010a8 <audioLoop+0xd8>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fb4e 	bl	80006e8 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4922      	ldr	r1, [pc, #136]	; (80010dc <audioLoop+0x10c>)
 8001052:	e9c1 2300 	strd	r2, r3, [r1]
			//osSignalSet(uiTaskHandle, 0x0002);
			//uiDisplayInputLevel(inputLevelL, inputLevelR);
			inputLevelL = 0.;
 8001056:	491e      	ldr	r1, [pc, #120]	; (80010d0 <audioLoop+0x100>)
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 8001064:	491c      	ldr	r1, [pc, #112]	; (80010d8 <audioLoop+0x108>)
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		osSignalWait (0x0002, osWaitForever);
 8001072:	463b      	mov	r3, r7
 8001074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001078:	2102      	movs	r1, #2
 800107a:	4618      	mov	r0, r3
 800107c:	f015 fa4c 	bl	8016518 <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 1st half block */
		processAudio(buf_output, buf_input);
 8001080:	4910      	ldr	r1, [pc, #64]	; (80010c4 <audioLoop+0xf4>)
 8001082:	4811      	ldr	r0, [pc, #68]	; (80010c8 <audioLoop+0xf8>)
 8001084:	f000 f910 	bl	80012a8 <processAudio>

		osSignalWait (0x0001, osWaitForever);
 8001088:	463b      	mov	r3, r7
 800108a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108e:	2101      	movs	r1, #1
 8001090:	4618      	mov	r0, r3
 8001092:	f015 fa41 	bl	8016518 <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <audioLoop+0x110>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <audioLoop+0x114>)
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f901 	bl	80012a8 <processAudio>
		accumulateInputLevels();
 80010a6:	e7ae      	b.n	8001006 <audioLoop+0x36>
 80010a8:	9999999a 	.word	0x9999999a
 80010ac:	3fa99999 	.word	0x3fa99999
 80010b0:	0004e200 	.word	0x0004e200
 80010b4:	c0096000 	.word	0xc0096000
 80010b8:	20009f68 	.word	0x20009f68
 80010bc:	20008d40 	.word	0x20008d40
 80010c0:	2000a198 	.word	0x2000a198
 80010c4:	20008540 	.word	0x20008540
 80010c8:	20009158 	.word	0x20009158
 80010cc:	200000e4 	.word	0x200000e4
 80010d0:	200000f0 	.word	0x200000f0
 80010d4:	20009f58 	.word	0x20009f58
 80010d8:	200000f8 	.word	0x200000f8
 80010dc:	20009f60 	.word	0x20009f60
 80010e0:	20000004 	.word	0x20000004
 80010e4:	20000000 	.word	0x20000000

080010e8 <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	e016      	b.n	8001126 <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 80010f8:	4a3e      	ldr	r2, [pc, #248]	; (80011f4 <accumulateInputLevels+0x10c>)
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001100:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 8001102:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	dd05      	ble.n	8001116 <accumulateInputLevels+0x2e>
			lvl += v;
 800110a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e004      	b.n	8001120 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 8001116:	f9b7 3000 	ldrsh.w	r3, [r7]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	3302      	adds	r3, #2
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800112c:	d3e4      	bcc.n	80010f8 <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f7ff fa60 	bl	80005f4 <__aeabi_ui2d>
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <accumulateInputLevels+0x110>)
 800113a:	f7ff fbff 	bl	800093c <__aeabi_ddiv>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <accumulateInputLevels+0x114>)
 800114c:	f7ff fbf6 	bl	800093c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <accumulateInputLevels+0x118>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff f90d 	bl	800037c <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4926      	ldr	r1, [pc, #152]	; (8001200 <accumulateInputLevels+0x118>)
 8001168:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001170:	2301      	movs	r3, #1
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	e016      	b.n	80011a4 <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_input[i];
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <accumulateInputLevels+0x10c>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800117e:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 8001180:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dd05      	ble.n	8001194 <accumulateInputLevels+0xac>
			lvl += v;
 8001188:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e004      	b.n	800119e <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 8001194:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3302      	adds	r3, #2
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011aa:	d3e4      	bcc.n	8001176 <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff fa21 	bl	80005f4 <__aeabi_ui2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <accumulateInputLevels+0x110>)
 80011b8:	f7ff fbc0 	bl	800093c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <accumulateInputLevels+0x114>)
 80011ca:	f7ff fbb7 	bl	800093c <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <accumulateInputLevels+0x11c>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff f8ce 	bl	800037c <__adddf3>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <accumulateInputLevels+0x11c>)
 80011e6:	e9c1 2300 	strd	r2, r3, [r1]

}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20008540 	.word	0x20008540
 80011f8:	40900000 	.word	0x40900000
 80011fc:	40e00000 	.word	0x40e00000
 8001200:	200000f0 	.word	0x200000f0
 8001204:	200000f8 	.word	0x200000f8

08001208 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_FULL;
	osSignalSet(defaultTaskHandle, 0x0001);
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <HAL_SAI_RxCpltCallback+0x1c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	4618      	mov	r0, r3
 8001218:	f015 f93e 	bl	8016498 <osSignalSet>
	return;
 800121c:	bf00      	nop
}
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20009ff0 	.word	0x20009ff0

08001228 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_HALF;
	osSignalSet(defaultTaskHandle, 0x0002);
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2102      	movs	r1, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f015 f92e 	bl	8016498 <osSignalSet>
	return;
 800123c:	bf00      	nop
}
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20009ff0 	.word	0x20009ff0

08001248 <readFromAudioScratch>:
// --------------------------- Audio scratch buffer ---------------------------

/**
 * Read a sample from the audio scratch buffer in SDRAM at position "pos"
 */
static float readFromAudioScratch(int pos) {
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <readFromAudioScratch+0x2c>)
 8001252:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
	return *(__IO float*) pSdramAddress;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	ee07 3a90 	vmov	s15, r3

}
 8001266:	eeb0 0a67 	vmov.f32	s0, s15
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	c0096000 	.word	0xc0096000

08001278 <writeToAudioScratch>:

/**
 * Write the given value to the audio scratch buffer in SDRAM at position "pos"
 */
static void writeToAudioScratch(float val, int pos) {
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001282:	6038      	str	r0, [r7, #0]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <writeToAudioScratch+0x2c>)
 8001286:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
	*(__IO float*) pSdramAddress = val;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	601a      	str	r2, [r3, #0]

}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	c0096000 	.word	0xc0096000

080012a8 <processAudio>:
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */

static void processAudio(int16_t *out, int16_t *in) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]

	LED_On(); // for oscilloscope measurements...
 80012b2:	f003 faad 	bl	8004810 <LED_On>

	/* 16KHz -> 1000ms*16 = 1s*/
	int delay = (int) 16 * delayMs;
 80012b6:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <processAudio+0x1c8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	613b      	str	r3, [r7, #16]

	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	e09c      	b.n	80013fe <processAudio+0x156>

		//modulo AUDIO_SCRATCH_SIZE
		if(posScratch>AUDIO_SCRATCH_SIZE-1){
 80012c4:	4b6b      	ldr	r3, [pc, #428]	; (8001474 <processAudio+0x1cc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a6b      	ldr	r2, [pc, #428]	; (8001478 <processAudio+0x1d0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	dd02      	ble.n	80012d4 <processAudio+0x2c>
			posScratch=0;
 80012ce:	4b69      	ldr	r3, [pc, #420]	; (8001474 <processAudio+0x1cc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
		}

		if(fillScratch<delay){
 80012d4:	4b69      	ldr	r3, [pc, #420]	; (800147c <processAudio+0x1d4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	429a      	cmp	r2, r3
 80012dc:	dd32      	ble.n	8001344 <processAudio+0x9c>
			writeToAudioScratch((float)in[n],posScratch);
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f2:	4b60      	ldr	r3, [pc, #384]	; (8001474 <processAudio+0x1cc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	f7ff ffbc 	bl	8001278 <writeToAudioScratch>
			posScratch+=1;
 8001300:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <processAudio+0x1cc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	4a5b      	ldr	r2, [pc, #364]	; (8001474 <processAudio+0x1cc>)
 8001308:	6013      	str	r3, [r2, #0]
			out[n] = (in[n]*volume)/100;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001316:	461a      	mov	r2, r3
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <processAudio+0x1d8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	fb03 f302 	mul.w	r3, r3, r2
 8001320:	4a58      	ldr	r2, [pc, #352]	; (8001484 <processAudio+0x1dc>)
 8001322:	fb82 1203 	smull	r1, r2, r2, r3
 8001326:	1152      	asrs	r2, r2, #5
 8001328:	17db      	asrs	r3, r3, #31
 800132a:	1ad1      	subs	r1, r2, r3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	b20a      	sxth	r2, r1
 8001336:	801a      	strh	r2, [r3, #0]
			fillScratch+=1;
 8001338:	4b50      	ldr	r3, [pc, #320]	; (800147c <processAudio+0x1d4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a4f      	ldr	r2, [pc, #316]	; (800147c <processAudio+0x1d4>)
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e059      	b.n	80013f8 <processAudio+0x150>
		}else{
			int j = posScratch-delay;
 8001344:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <processAudio+0x1cc>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	61bb      	str	r3, [r7, #24]

			if(j<0){
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2b00      	cmp	r3, #0
 8001352:	da03      	bge.n	800135c <processAudio+0xb4>
				j=j+AUDIO_SCRATCH_SIZE;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <processAudio+0x1e0>)
 8001358:	4413      	add	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
			}
			/* old:  */
			int16_t old = (int16_t) readFromAudioScratch(j);
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f7ff ff73 	bl	8001248 <readFromAudioScratch>
 8001362:	eef0 7a40 	vmov.f32	s15, s0
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 3a90 	vmov	r3, s15
 800136e:	81fb      	strh	r3, [r7, #14]

			float new = in[n]+(float)old/100*(delayFeed);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	4413      	add	r3, r2
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001384:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800148c <processAudio+0x1e4>
 8001394:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <processAudio+0x1e8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ac:	edc7 7a02 	vstr	s15, [r7, #8]
			writeToAudioScratch((float)new,posScratch);
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <processAudio+0x1cc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ba:	f7ff ff5d 	bl	8001278 <writeToAudioScratch>
			posScratch+=1;
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <processAudio+0x1cc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <processAudio+0x1cc>)
 80013c6:	6013      	str	r3, [r2, #0]
			out[n]= (new*volume)/100;
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <processAudio+0x1d8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013dc:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800148c <processAudio+0x1e4>
 80013e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f0:	ee17 2a90 	vmov	r2, s15
 80013f4:	b212      	sxth	r2, r2
 80013f6:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3301      	adds	r3, #1
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001404:	f4ff af5e 	bcc.w	80012c4 <processAudio+0x1c>
		}
	}
	/* array copy */
	for(int i=0;i<FFTLength;i++){
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e016      	b.n	800143c <processAudio+0x194>
		FFTInput[i]=(float32_t) out[i*2]/32738;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001422:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001494 <processAudio+0x1ec>
 8001426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142a:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <processAudio+0x1f0>)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<FFTLength;i++){
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2bff      	cmp	r3, #255	; 0xff
 8001440:	dde5      	ble.n	800140e <processAudio+0x166>
	}
		/* fft -> dB fft */
	arm_rfft_fast_f32(&FFTStruct,FFTInput,FFTOutput,0);
 8001442:	2300      	movs	r3, #0
 8001444:	4a15      	ldr	r2, [pc, #84]	; (800149c <processAudio+0x1f4>)
 8001446:	4914      	ldr	r1, [pc, #80]	; (8001498 <processAudio+0x1f0>)
 8001448:	4815      	ldr	r0, [pc, #84]	; (80014a0 <processAudio+0x1f8>)
 800144a:	f018 f8b7 	bl	80195bc <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(FFTOutput,FFTOutputMag,FFTLength/2);
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	4914      	ldr	r1, [pc, #80]	; (80014a4 <processAudio+0x1fc>)
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <processAudio+0x1f4>)
 8001454:	f018 fd16 	bl	8019e84 <arm_cmplx_mag_f32>

	osSignalSet(uiTaskHandle, 0x0001);
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <processAudio+0x200>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f015 f81a 	bl	8016498 <osSignalSet>

	LED_Off();
 8001464:	f003 f9e0 	bl	8004828 <LED_Off>
}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000364 	.word	0x20000364
 8001474:	200000e8 	.word	0x200000e8
 8001478:	000270ff 	.word	0x000270ff
 800147c:	200000ec 	.word	0x200000ec
 8001480:	2000000c 	.word	0x2000000c
 8001484:	51eb851f 	.word	0x51eb851f
 8001488:	00027100 	.word	0x00027100
 800148c:	42c80000 	.word	0x42c80000
 8001490:	20000368 	.word	0x20000368
 8001494:	46ffc400 	.word	0x46ffc400
 8001498:	20008d58 	.word	0x20008d58
 800149c:	20009b58 	.word	0x20009b58
 80014a0:	20008d40 	.word	0x20008d40
 80014a4:	20009958 	.word	0x20009958
 80014a8:	2000a3bc 	.word	0x2000a3bc

080014ac <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4a07      	ldr	r2, [pc, #28]	; (800150c <vApplicationGetIdleTaskMemory+0x2c>)
 80014f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <vApplicationGetIdleTaskMemory+0x30>)
 80014f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2280      	movs	r2, #128	; 0x80
 80014fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000100 	.word	0x20000100
 8001510:	20000158 	.word	0x20000158

08001514 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001518:	f3bf 8f4f 	dsb	sy
}
 800151c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800151e:	f3bf 8f6f 	isb	sy
}
 8001522:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <SCB_EnableICache+0x48>)
 8001526:	2200      	movs	r2, #0
 8001528:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800152c:	f3bf 8f4f 	dsb	sy
}
 8001530:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001532:	f3bf 8f6f 	isb	sy
}
 8001536:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <SCB_EnableICache+0x48>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <SCB_EnableICache+0x48>)
 800153e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001542:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001544:	f3bf 8f4f 	dsb	sy
}
 8001548:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800154a:	f3bf 8f6f 	isb	sy
}
 800154e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001564:	f3bf 8f4f 	dsb	sy
}
 8001568:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156a:	f3bf 8f6f 	isb	sy
}
 800156e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <SCB_InvalidateICache+0x30>)
 8001572:	2200      	movs	r2, #0
 8001574:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001578:	f3bf 8f4f 	dsb	sy
}
 800157c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800157e:	f3bf 8f6f 	isb	sy
}
 8001582:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <SCB_EnableDCache+0x84>)
 800159c:	2200      	movs	r2, #0
 800159e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015a2:	f3bf 8f4f 	dsb	sy
}
 80015a6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <SCB_EnableDCache+0x84>)
 80015aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ae:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	0b5b      	lsrs	r3, r3, #13
 80015b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015b8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80015cc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015d2:	4911      	ldr	r1, [pc, #68]	; (8001618 <SCB_EnableDCache+0x84>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	60ba      	str	r2, [r7, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ef      	bne.n	80015c4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	60fa      	str	r2, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1e5      	bne.n	80015ba <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <SCB_EnableDCache+0x84>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <SCB_EnableDCache+0x84>)
 80015fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001600:	f3bf 8f4f 	dsb	sy
}
 8001604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001606:	f3bf 8f6f 	isb	sy
}
 800160a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <SCB_InvalidateDCache+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800162a:	f3bf 8f4f 	dsb	sy
}
 800162e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <SCB_InvalidateDCache+0x74>)
 8001632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001636:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	0b5b      	lsrs	r3, r3, #13
 800163c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001640:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800164a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001654:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800165a:	490d      	ldr	r1, [pc, #52]	; (8001690 <SCB_InvalidateDCache+0x74>)
 800165c:	4313      	orrs	r3, r2
 800165e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1e5a      	subs	r2, r3, #1
 8001666:	60ba      	str	r2, [r7, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ef      	bne.n	800164c <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1e5a      	subs	r2, r3, #1
 8001670:	60fa      	str	r2, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1e5      	bne.n	8001642 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001676:	f3bf 8f4f 	dsb	sy
}
 800167a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800167c:	f3bf 8f6f 	isb	sy
}
 8001680:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b08e      	sub	sp, #56	; 0x38
 8001698:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 800169a:	f7ff ffbf 	bl	800161c <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 800169e:	f7ff ff5f 	bl	8001560 <SCB_InvalidateICache>
	//SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016a2:	f005 fc3c 	bl	8006f1e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016a6:	f000 f873 	bl	8001790 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016aa:	f001 f8d1 	bl	8002850 <MX_GPIO_Init>
	MX_DMA_Init();
 80016ae:	f001 f80d 	bl	80026cc <MX_DMA_Init>
	MX_ADC3_Init();
 80016b2:	f000 f92d 	bl	8001910 <MX_ADC3_Init>
	MX_CRC_Init();
 80016b6:	f000 f97d 	bl	80019b4 <MX_CRC_Init>
	MX_DCMI_Init();
 80016ba:	f000 f99d 	bl	80019f8 <MX_DCMI_Init>
	MX_DMA2D_Init();
 80016be:	f000 f9cf 	bl	8001a60 <MX_DMA2D_Init>
	MX_FMC_Init();
 80016c2:	f001 f871 	bl	80027a8 <MX_FMC_Init>
	MX_I2C1_Init();
 80016c6:	f000 f9fd 	bl	8001ac4 <MX_I2C1_Init>
	MX_I2C3_Init();
 80016ca:	f000 fa3b 	bl	8001b44 <MX_I2C3_Init>
	MX_LTDC_Init();
 80016ce:	f000 fa79 	bl	8001bc4 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 80016d2:	f000 fafb 	bl	8001ccc <MX_QUADSPI_Init>
	MX_RTC_Init();
 80016d6:	f000 fb3b 	bl	8001d50 <MX_RTC_Init>
	MX_SAI2_Init();
 80016da:	f000 fbdf 	bl	8001e9c <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 80016de:	f000 fc99 	bl	8002014 <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 80016e2:	f000 fcb7 	bl	8002054 <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 80016e6:	f000 fce5 	bl	80020b4 <MX_TIM1_Init>
	MX_TIM2_Init();
 80016ea:	f000 fd8f 	bl	800220c <MX_TIM2_Init>
	MX_TIM3_Init();
 80016ee:	f000 fe03 	bl	80022f8 <MX_TIM3_Init>
	MX_TIM5_Init();
 80016f2:	f000 fe79 	bl	80023e8 <MX_TIM5_Init>
	MX_TIM8_Init();
 80016f6:	f000 feef 	bl	80024d8 <MX_TIM8_Init>
	MX_TIM12_Init();
 80016fa:	f000 ff41 	bl	8002580 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80016fe:	f000 ff85 	bl	800260c <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8001702:	f000 ffb3 	bl	800266c <MX_USART6_UART_Init>
	MX_FATFS_Init();
 8001706:	f012 fa15 	bl	8013b34 <MX_FATFS_Init>
	MX_LIBJPEG_Init();
 800170a:	f012 fc63 	bl	8013fd4 <MX_LIBJPEG_Init>
	/* USER CODE BEGIN 2 */

	MPU_Init();
 800170e:	f004 faf1 	bl	8005cf4 <MPU_Init>

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8001712:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001716:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800171a:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 800171c:	f003 ff76 	bl	800560c <TS_Init>
	printf("Touchscreen Init: OK\n");
 8001720:	4816      	ldr	r0, [pc, #88]	; (800177c <main+0xe8>)
 8001722:	f019 f91f 	bl	801a964 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 8001726:	f7ff fef5 	bl	8001514 <SCB_EnableICache>
	SCB_EnableDCache();
 800172a:	f7ff ff33 	bl	8001594 <SCB_EnableDCache>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <main+0xec>)
 8001730:	f107 041c 	add.w	r4, r7, #28
 8001734:	461d      	mov	r5, r3
 8001736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800173e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f014 fe45 	bl	80163d8 <osThreadCreate>
 800174e:	4603      	mov	r3, r0
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <main+0xf0>)
 8001752:	6013      	str	r3, [r2, #0]

	/* definition and creation of uiTask */
	osThreadDef(uiTask, startUITask, osPriorityLow, 0, 2048); // 128 = stack size too small -> 1024 !
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <main+0xf4>)
 8001756:	463c      	mov	r4, r7
 8001758:	461d      	mov	r5, r3
 800175a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 8001766:	463b      	mov	r3, r7
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f014 fe34 	bl	80163d8 <osThreadCreate>
 8001770:	4603      	mov	r3, r0
 8001772:	4a06      	ldr	r2, [pc, #24]	; (800178c <main+0xf8>)
 8001774:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001776:	f014 fe0c 	bl	8016392 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800177a:	e7fe      	b.n	800177a <main+0xe6>
 800177c:	0801c068 	.word	0x0801c068
 8001780:	0801c080 	.word	0x0801c080
 8001784:	20009ff0 	.word	0x20009ff0
 8001788:	0801c09c 	.word	0x0801c09c
 800178c:	2000a3bc 	.word	0x2000a3bc

08001790 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0b4      	sub	sp, #208	; 0xd0
 8001794:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800179a:	2230      	movs	r2, #48	; 0x30
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f018 ff92 	bl	801a6c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	2284      	movs	r2, #132	; 0x84
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f018 ff83 	bl	801a6c8 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80017c2:	f00a fb07 	bl	800bdd4 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <SystemClock_Config+0x174>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <SystemClock_Config+0x174>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <SystemClock_Config+0x174>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017de:	4b4a      	ldr	r3, [pc, #296]	; (8001908 <SystemClock_Config+0x178>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a49      	ldr	r2, [pc, #292]	; (8001908 <SystemClock_Config+0x178>)
 80017e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <SystemClock_Config+0x178>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80017f6:	2309      	movs	r3, #9
 80017f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001804:	2301      	movs	r3, #1
 8001806:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180a:	2302      	movs	r3, #2
 800180c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001810:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001818:	2319      	movs	r3, #25
 800181a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800181e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001822:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 800182c:	2309      	movs	r3, #9
 800182e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001832:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001836:	4618      	mov	r0, r3
 8001838:	f00b faf0 	bl	800ce1c <HAL_RCC_OscConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 8001842:	f001 fa73 	bl	8002d2c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001846:	f00a fad5 	bl	800bdf4 <HAL_PWREx_EnableOverDrive>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001850:	f001 fa6c 	bl	8002d2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001854:	230f      	movs	r3, #15
 8001856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001866:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800186a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800186e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001876:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800187a:	2106      	movs	r1, #6
 800187c:	4618      	mov	r0, r3
 800187e:	f00b fd71 	bl	800d364 <HAL_RCC_ClockConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001888:	f001 fa50 	bl	8002d2c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <SystemClock_Config+0x17c>)
 800188e:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001890:	2364      	movs	r3, #100	; 0x64
 8001892:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001898:	2302      	movs	r3, #2
 800189a:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800189c:	2302      	movs	r3, #2
 800189e:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80018a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018a4:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80018a6:	2305      	movs	r3, #5
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 80018aa:	2308      	movs	r3, #8
 80018ac:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80018ae:	2303      	movs	r3, #3
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80018ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80018c6:	2300      	movs	r3, #0
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018ca:	2300      	movs	r3, #0
 80018cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80018ce:	2300      	movs	r3, #0
 80018d0:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80018da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00b ff41 	bl	800d774 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0x16c>
	{
		Error_Handler();
 80018f8:	f001 fa18 	bl	8002d2c <Error_Handler>
	}
}
 80018fc:	bf00      	nop
 80018fe:	37d0      	adds	r7, #208	; 0xd0
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40007000 	.word	0x40007000
 800190c:	01b14868 	.word	0x01b14868

08001910 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001916:	463b      	mov	r3, r7
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <MX_ADC3_Init+0x98>)
 8001924:	4a21      	ldr	r2, [pc, #132]	; (80019ac <MX_ADC3_Init+0x9c>)
 8001926:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_ADC3_Init+0x98>)
 800192a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800192e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_ADC3_Init+0x98>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_ADC3_Init+0x98>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_ADC3_Init+0x98>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_ADC3_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_ADC3_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_ADC3_Init+0x98>)
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <MX_ADC3_Init+0xa0>)
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_ADC3_Init+0x98>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_ADC3_Init+0x98>)
 800195e:	2201      	movs	r2, #1
 8001960:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_ADC3_Init+0x98>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_ADC3_Init+0x98>)
 800196c:	2201      	movs	r2, #1
 800196e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MX_ADC3_Init+0x98>)
 8001972:	f005 fb25 	bl	8006fc0 <HAL_ADC_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 800197c:	f001 f9d6 	bl	8002d2c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001980:	2304      	movs	r3, #4
 8001982:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001984:	2301      	movs	r3, #1
 8001986:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_ADC3_Init+0x98>)
 8001992:	f005 fb59 	bl	8007048 <HAL_ADC_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 800199c:	f001 f9c6 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000a4b4 	.word	0x2000a4b4
 80019ac:	40012200 	.word	0x40012200
 80019b0:	0f000001 	.word	0x0f000001

080019b4 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <MX_CRC_Init+0x3c>)
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <MX_CRC_Init+0x40>)
 80019bc:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_CRC_Init+0x3c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <MX_CRC_Init+0x3c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_CRC_Init+0x3c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <MX_CRC_Init+0x3c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_CRC_Init+0x3c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <MX_CRC_Init+0x3c>)
 80019de:	f005 ff07 	bl	80077f0 <HAL_CRC_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_CRC_Init+0x38>
	{
		Error_Handler();
 80019e8:	f001 f9a0 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2000a268 	.word	0x2000a268
 80019f4:	40023000 	.word	0x40023000

080019f8 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_DCMI_Init+0x60>)
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <MX_DCMI_Init+0x64>)
 8001a00:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <MX_DCMI_Init+0x60>)
 8001a46:	f005 ffbd 	bl	80079c4 <HAL_DCMI_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 8001a50:	f001 f96c 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000a4fc 	.word	0x2000a4fc
 8001a5c:	50050000 	.word	0x50050000

08001a60 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_DMA2D_Init+0x5c>)
 8001a66:	4a16      	ldr	r2, [pc, #88]	; (8001ac0 <MX_DMA2D_Init+0x60>)
 8001a68:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_DMA2D_Init+0x5c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MX_DMA2D_Init+0x5c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_DMA2D_Init+0x5c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_DMA2D_Init+0x5c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_DMA2D_Init+0x5c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_DMA2D_Init+0x5c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_DMA2D_Init+0x5c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <MX_DMA2D_Init+0x5c>)
 8001a96:	f006 fcf5 	bl	8008484 <HAL_DMA2D_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8001aa0:	f001 f944 	bl	8002d2c <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_DMA2D_Init+0x5c>)
 8001aa8:	f006 ff5a 	bl	8008960 <HAL_DMA2D_ConfigLayer>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8001ab2:	f001 f93b 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000a720 	.word	0x2000a720
 8001ac0:	4002b000 	.word	0x4002b000

08001ac4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <MX_I2C1_Init+0x78>)
 8001acc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <MX_I2C1_Init+0x7c>)
 8001ad2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001afe:	480e      	ldr	r0, [pc, #56]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001b00:	f009 f8e8 	bl	800acd4 <HAL_I2C_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001b0a:	f001 f90f 	bl	8002d2c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4809      	ldr	r0, [pc, #36]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001b12:	f009 fde9 	bl	800b6e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001b1c:	f001 f906 	bl	8002d2c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b20:	2100      	movs	r1, #0
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_I2C1_Init+0x74>)
 8001b24:	f009 fe2b 	bl	800b77e <HAL_I2CEx_ConfigDigitalFilter>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001b2e:	f001 f8fd 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000a21c 	.word	0x2000a21c
 8001b3c:	40005400 	.word	0x40005400
 8001b40:	00c0eaff 	.word	0x00c0eaff

08001b44 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <MX_I2C3_Init+0x78>)
 8001b4c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <MX_I2C3_Init+0x7c>)
 8001b52:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b80:	f009 f8a8 	bl	800acd4 <HAL_I2C_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001b8a:	f001 f8cf 	bl	8002d2c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b92:	f009 fda9 	bl	800b6e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001b9c:	f001 f8c6 	bl	8002d2c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001ba4:	f009 fdeb 	bl	800b77e <HAL_I2CEx_ConfigDigitalFilter>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8001bae:	f001 f8bd 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20009ff4 	.word	0x20009ff4
 8001bbc:	40005c00 	.word	0x40005c00
 8001bc0:	00c0eaff 	.word	0x00c0eaff

08001bc4 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	; 0x38
 8001bc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2234      	movs	r2, #52	; 0x34
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f018 fd79 	bl	801a6c8 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001bd8:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <MX_LTDC_Init+0x104>)
 8001bda:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001bee:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001bf6:	2228      	movs	r2, #40	; 0x28
 8001bf8:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001bfc:	2209      	movs	r2, #9
 8001bfe:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001c02:	2235      	movs	r2, #53	; 0x35
 8001c04:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001c08:	220b      	movs	r2, #11
 8001c0a:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001c0e:	f240 2215 	movw	r2, #533	; 0x215
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001c16:	f240 121b 	movw	r2, #283	; 0x11b
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001c1e:	f240 2235 	movw	r2, #565	; 0x235
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001c26:	f240 121d 	movw	r2, #285	; 0x11d
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001c44:	481f      	ldr	r0, [pc, #124]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001c46:	f009 fde7 	bl	800b818 <HAL_LTDC_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8001c50:	f001 f86c 	bl	8002d2c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001c58:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c5c:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8001c62:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c66:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001c6c:	23ff      	movs	r3, #255	; 0xff
 8001c6e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001c74:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c78:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001c7e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001c84:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001c8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <MX_LTDC_Init+0x100>)
 8001caa:	f009 fe85 	bl	800b9b8 <HAL_LTDC_ConfigLayer>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8001cb4:	f001 f83a 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001cb8:	f002 fed2 	bl	8004a60 <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3738      	adds	r7, #56	; 0x38
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000a40c 	.word	0x2000a40c
 8001cc8:	40016800 	.word	0x40016800

08001ccc <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001cd2:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <MX_QUADSPI_Init+0x80>)
 8001cd4:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001cde:	2204      	movs	r2, #4
 8001ce0:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001ce2:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001cea:	2218      	movs	r2, #24
 8001cec:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001cf0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001cf4:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001d08:	480f      	ldr	r0, [pc, #60]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001d0a:	f00a f8c3 	bl	800be94 <HAL_QSPI_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 8001d14:	f001 f80a 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001d1a:	f003 fa4b 	bl	80051b4 <DISCO_QSPI_ResetMemory>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_QUADSPI_Init+0x5c>
 8001d24:	f001 f802 	bl	8002d2c <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <MX_QUADSPI_Init+0x7c>)
 8001d2a:	f003 fa85 	bl	8005238 <DISCO_QSPI_DummyCyclesCfg>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_QUADSPI_Init+0x6c>
 8001d34:	f000 fffa 	bl	8002d2c <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001d38:	f003 fa0a 	bl	8005150 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001d3c:	205c      	movs	r0, #92	; 0x5c
 8001d3e:	f005 fccd 	bl	80076dc <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000a82c 	.word	0x2000a82c
 8001d4c:	a0001000 	.word	0xa0001000

08001d50 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b092      	sub	sp, #72	; 0x48
 8001d54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001d56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]
 8001d66:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	222c      	movs	r2, #44	; 0x2c
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f018 fca8 	bl	801a6c8 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001d78:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <MX_RTC_Init+0x144>)
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <MX_RTC_Init+0x148>)
 8001d7c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d7e:	4b45      	ldr	r3, [pc, #276]	; (8001e94 <MX_RTC_Init+0x144>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001d84:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <MX_RTC_Init+0x144>)
 8001d86:	227f      	movs	r2, #127	; 0x7f
 8001d88:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001d8a:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <MX_RTC_Init+0x144>)
 8001d8c:	22ff      	movs	r2, #255	; 0xff
 8001d8e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d90:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <MX_RTC_Init+0x144>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d96:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <MX_RTC_Init+0x144>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <MX_RTC_Init+0x144>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001da2:	483c      	ldr	r0, [pc, #240]	; (8001e94 <MX_RTC_Init+0x144>)
 8001da4:	f00c fa1a 	bl	800e1dc <HAL_RTC_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_RTC_Init+0x62>
	{
		Error_Handler();
 8001dae:	f000 ffbd 	bl	8002d2c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001dcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	482f      	ldr	r0, [pc, #188]	; (8001e94 <MX_RTC_Init+0x144>)
 8001dd6:	f00c fa93 	bl	800e300 <HAL_RTC_SetTime>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001de0:	f000 ffa4 	bl	8002d2c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001de4:	2301      	movs	r3, #1
 8001de6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e00:	2201      	movs	r2, #1
 8001e02:	4619      	mov	r1, r3
 8001e04:	4823      	ldr	r0, [pc, #140]	; (8001e94 <MX_RTC_Init+0x144>)
 8001e06:	f00c fb39 	bl	800e47c <HAL_RTC_SetDate>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001e10:	f000 ff8c 	bl	8002d2c <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e44:	463b      	mov	r3, r7
 8001e46:	2201      	movs	r2, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4812      	ldr	r0, [pc, #72]	; (8001e94 <MX_RTC_Init+0x144>)
 8001e4c:	f00c fbbe 	bl	800e5cc <HAL_RTC_SetAlarm>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 8001e56:	f000 ff69 	bl	8002d2c <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 8001e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e60:	463b      	mov	r3, r7
 8001e62:	2201      	movs	r2, #1
 8001e64:	4619      	mov	r1, r3
 8001e66:	480b      	ldr	r0, [pc, #44]	; (8001e94 <MX_RTC_Init+0x144>)
 8001e68:	f00c fbb0 	bl	800e5cc <HAL_RTC_SetAlarm>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_RTC_Init+0x126>
	{
		Error_Handler();
 8001e72:	f000 ff5b 	bl	8002d2c <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001e76:	2202      	movs	r2, #2
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4806      	ldr	r0, [pc, #24]	; (8001e94 <MX_RTC_Init+0x144>)
 8001e7c:	f00c fd30 	bl	800e8e0 <HAL_RTCEx_SetTimeStamp>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 8001e86:	f000 ff51 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	3748      	adds	r7, #72	; 0x48
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000a5d0 	.word	0x2000a5d0
 8001e98:	40002800 	.word	0x40002800

08001e9c <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001ea0:	4b58      	ldr	r3, [pc, #352]	; (8002004 <MX_SAI2_Init+0x168>)
 8001ea2:	4a59      	ldr	r2, [pc, #356]	; (8002008 <MX_SAI2_Init+0x16c>)
 8001ea4:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ea6:	4b57      	ldr	r3, [pc, #348]	; (8002004 <MX_SAI2_Init+0x168>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001eac:	4b55      	ldr	r3, [pc, #340]	; (8002004 <MX_SAI2_Init+0x168>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001eb2:	4b54      	ldr	r3, [pc, #336]	; (8002004 <MX_SAI2_Init+0x168>)
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001eb8:	4b52      	ldr	r3, [pc, #328]	; (8002004 <MX_SAI2_Init+0x168>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <MX_SAI2_Init+0x168>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <MX_SAI2_Init+0x168>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001eca:	4b4e      	ldr	r3, [pc, #312]	; (8002004 <MX_SAI2_Init+0x168>)
 8001ecc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed0:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001ed2:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <MX_SAI2_Init+0x168>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001ed8:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <MX_SAI2_Init+0x168>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 8001ede:	4b49      	ldr	r3, [pc, #292]	; (8002004 <MX_SAI2_Init+0x168>)
 8001ee0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001ee4:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <MX_SAI2_Init+0x168>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001eec:	4b45      	ldr	r3, [pc, #276]	; (8002004 <MX_SAI2_Init+0x168>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ef2:	4b44      	ldr	r3, [pc, #272]	; (8002004 <MX_SAI2_Init+0x168>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ef8:	4b42      	ldr	r3, [pc, #264]	; (8002004 <MX_SAI2_Init+0x168>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001efe:	4b41      	ldr	r3, [pc, #260]	; (8002004 <MX_SAI2_Init+0x168>)
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001f04:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <MX_SAI2_Init+0x168>)
 8001f06:	2220      	movs	r2, #32
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001f0a:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <MX_SAI2_Init+0x168>)
 8001f0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f10:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f12:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <MX_SAI2_Init+0x168>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001f18:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <MX_SAI2_Init+0x168>)
 8001f1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f1e:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001f20:	4b38      	ldr	r3, [pc, #224]	; (8002004 <MX_SAI2_Init+0x168>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <MX_SAI2_Init+0x168>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <MX_SAI2_Init+0x168>)
 8001f2e:	2204      	movs	r2, #4
 8001f30:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <MX_SAI2_Init+0x168>)
 8001f34:	2205      	movs	r2, #5
 8001f36:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001f38:	4832      	ldr	r0, [pc, #200]	; (8002004 <MX_SAI2_Init+0x168>)
 8001f3a:	f00c fd27 	bl	800e98c <HAL_SAI_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8001f44:	f000 fef2 	bl	8002d2c <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <MX_SAI2_Init+0x170>)
 8001f4a:	4a31      	ldr	r2, [pc, #196]	; (8002010 <MX_SAI2_Init+0x174>)
 8001f4c:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	; (800200c <MX_SAI2_Init+0x170>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001f54:	4b2d      	ldr	r3, [pc, #180]	; (800200c <MX_SAI2_Init+0x170>)
 8001f56:	2203      	movs	r2, #3
 8001f58:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	; (800200c <MX_SAI2_Init+0x170>)
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001f60:	4b2a      	ldr	r3, [pc, #168]	; (800200c <MX_SAI2_Init+0x170>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <MX_SAI2_Init+0x170>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <MX_SAI2_Init+0x170>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001f72:	4b26      	ldr	r3, [pc, #152]	; (800200c <MX_SAI2_Init+0x170>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <MX_SAI2_Init+0x170>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001f7e:	4b23      	ldr	r3, [pc, #140]	; (800200c <MX_SAI2_Init+0x170>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <MX_SAI2_Init+0x170>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <MX_SAI2_Init+0x170>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001f90:	4b1e      	ldr	r3, [pc, #120]	; (800200c <MX_SAI2_Init+0x170>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <MX_SAI2_Init+0x170>)
 8001f98:	2240      	movs	r2, #64	; 0x40
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <MX_SAI2_Init+0x170>)
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	; (800200c <MX_SAI2_Init+0x170>)
 8001fa4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fa8:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <MX_SAI2_Init+0x170>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <MX_SAI2_Init+0x170>)
 8001fb2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001fb6:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <MX_SAI2_Init+0x170>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <MX_SAI2_Init+0x170>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_SAI2_Init+0x170>)
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A; //A for MIC/ 5 for LINE
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_SAI2_Init+0x170>)
 8001fcc:	220a      	movs	r2, #10
 8001fce:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001fd0:	480e      	ldr	r0, [pc, #56]	; (800200c <MX_SAI2_Init+0x170>)
 8001fd2:	f00c fcdb 	bl	800e98c <HAL_SAI_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001fdc:	f000 fea6 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_SAI2_Init+0x168>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <MX_SAI2_Init+0x168>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fee:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_SAI2_Init+0x170>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <MX_SAI2_Init+0x170>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ffe:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	2000a198 	.word	0x2000a198
 8002008:	40015c04 	.word	0x40015c04
 800200c:	20009f6c 	.word	0x20009f6c
 8002010:	40015c24 	.word	0x40015c24

08002014 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_SDMMC1_SD_Init+0x38>)
 800201a:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <MX_SDMMC1_SD_Init+0x3c>)
 800201c:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MX_SDMMC1_SD_Init+0x38>)
 8002020:	2200      	movs	r2, #0
 8002022:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_SDMMC1_SD_Init+0x38>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <MX_SDMMC1_SD_Init+0x38>)
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_SDMMC1_SD_Init+0x38>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <MX_SDMMC1_SD_Init+0x38>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <MX_SDMMC1_SD_Init+0x38>)
 800203e:	2200      	movs	r2, #0
 8002040:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	2000a2ec 	.word	0x2000a2ec
 8002050:	40012c00 	.word	0x40012c00

08002054 <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 800205a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800205e:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 8002062:	2200      	movs	r2, #0
 8002064:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 8002092:	2200      	movs	r2, #0
 8002094:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 8002098:	2200      	movs	r2, #0
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800209c:	4804      	ldr	r0, [pc, #16]	; (80020b0 <MX_SPDIFRX_Init+0x5c>)
 800209e:	f00e f96b 	bl	8010378 <HAL_SPDIFRX_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 80020a8:	f000 fe40 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2000a14c 	.word	0x2000a14c

080020b4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b09a      	sub	sp, #104	; 0x68
 80020b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80020d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
 80020e4:	615a      	str	r2, [r3, #20]
 80020e6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	222c      	movs	r2, #44	; 0x2c
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f018 faea 	bl	801a6c8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80020f4:	4b43      	ldr	r3, [pc, #268]	; (8002204 <MX_TIM1_Init+0x150>)
 80020f6:	4a44      	ldr	r2, [pc, #272]	; (8002208 <MX_TIM1_Init+0x154>)
 80020f8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <MX_TIM1_Init+0x150>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002100:	4b40      	ldr	r3, [pc, #256]	; (8002204 <MX_TIM1_Init+0x150>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002106:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <MX_TIM1_Init+0x150>)
 8002108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800210c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <MX_TIM1_Init+0x150>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <MX_TIM1_Init+0x150>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211a:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <MX_TIM1_Init+0x150>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002120:	4838      	ldr	r0, [pc, #224]	; (8002204 <MX_TIM1_Init+0x150>)
 8002122:	f00e f985 	bl	8010430 <HAL_TIM_Base_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 800212c:	f000 fdfe 	bl	8002d2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002134:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002136:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800213a:	4619      	mov	r1, r3
 800213c:	4831      	ldr	r0, [pc, #196]	; (8002204 <MX_TIM1_Init+0x150>)
 800213e:	f00e fccd 	bl	8010adc <HAL_TIM_ConfigClockSource>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8002148:	f000 fdf0 	bl	8002d2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800214c:	482d      	ldr	r0, [pc, #180]	; (8002204 <MX_TIM1_Init+0x150>)
 800214e:	f00e fa3f 	bl	80105d0 <HAL_TIM_PWM_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8002158:	f000 fde8 	bl	8002d2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002160:	2300      	movs	r3, #0
 8002162:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002168:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800216c:	4619      	mov	r1, r3
 800216e:	4825      	ldr	r0, [pc, #148]	; (8002204 <MX_TIM1_Init+0x150>)
 8002170:	f00f f93a 	bl	80113e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 800217a:	f000 fdd7 	bl	8002d2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800217e:	2360      	movs	r3, #96	; 0x60
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002186:	2300      	movs	r3, #0
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800218a:	2300      	movs	r3, #0
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800219a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800219e:	2200      	movs	r2, #0
 80021a0:	4619      	mov	r1, r3
 80021a2:	4818      	ldr	r0, [pc, #96]	; (8002204 <MX_TIM1_Init+0x150>)
 80021a4:	f00e fb8a 	bl	80108bc <HAL_TIM_PWM_ConfigChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 80021ae:	f000 fdbd 	bl	8002d2c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ca:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	4807      	ldr	r0, [pc, #28]	; (8002204 <MX_TIM1_Init+0x150>)
 80021e8:	f00f f98c 	bl	8011504 <HAL_TIMEx_ConfigBreakDeadTime>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 80021f2:	f000 fd9b 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80021f6:	4803      	ldr	r0, [pc, #12]	; (8002204 <MX_TIM1_Init+0x150>)
 80021f8:	f001 faba 	bl	8003770 <HAL_TIM_MspPostInit>

}
 80021fc:	bf00      	nop
 80021fe:	3768      	adds	r7, #104	; 0x68
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	2000a5f0 	.word	0x2000a5f0
 8002208:	40010000 	.word	0x40010000

0800220c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	; 0x38
 8002210:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800222c:	463b      	mov	r3, r7
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	615a      	str	r2, [r3, #20]
 800223c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <MX_TIM2_Init+0xe8>)
 8002240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002244:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <MX_TIM2_Init+0xe8>)
 8002248:	2200      	movs	r2, #0
 800224a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224c:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <MX_TIM2_Init+0xe8>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002252:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <MX_TIM2_Init+0xe8>)
 8002254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002258:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <MX_TIM2_Init+0xe8>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <MX_TIM2_Init+0xe8>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002266:	4823      	ldr	r0, [pc, #140]	; (80022f4 <MX_TIM2_Init+0xe8>)
 8002268:	f00e f8e2 	bl	8010430 <HAL_TIM_Base_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8002272:	f000 fd5b 	bl	8002d2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800227c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002280:	4619      	mov	r1, r3
 8002282:	481c      	ldr	r0, [pc, #112]	; (80022f4 <MX_TIM2_Init+0xe8>)
 8002284:	f00e fc2a 	bl	8010adc <HAL_TIM_ConfigClockSource>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 800228e:	f000 fd4d 	bl	8002d2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002292:	4818      	ldr	r0, [pc, #96]	; (80022f4 <MX_TIM2_Init+0xe8>)
 8002294:	f00e f99c 	bl	80105d0 <HAL_TIM_PWM_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 800229e:	f000 fd45 	bl	8002d2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4619      	mov	r1, r3
 80022b0:	4810      	ldr	r0, [pc, #64]	; (80022f4 <MX_TIM2_Init+0xe8>)
 80022b2:	f00f f899 	bl	80113e8 <HAL_TIMEx_MasterConfigSynchronization>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 80022bc:	f000 fd36 	bl	8002d2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c0:	2360      	movs	r3, #96	; 0x60
 80022c2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d0:	463b      	mov	r3, r7
 80022d2:	2200      	movs	r2, #0
 80022d4:	4619      	mov	r1, r3
 80022d6:	4807      	ldr	r0, [pc, #28]	; (80022f4 <MX_TIM2_Init+0xe8>)
 80022d8:	f00e faf0 	bl	80108bc <HAL_TIM_PWM_ConfigChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 80022e2:	f000 fd23 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80022e6:	4803      	ldr	r0, [pc, #12]	; (80022f4 <MX_TIM2_Init+0xe8>)
 80022e8:	f001 fa42 	bl	8003770 <HAL_TIM_MspPostInit>

}
 80022ec:	bf00      	nop
 80022ee:	3738      	adds	r7, #56	; 0x38
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000a760 	.word	0x2000a760

080022f8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08e      	sub	sp, #56	; 0x38
 80022fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002318:	463b      	mov	r3, r7
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	611a      	str	r2, [r3, #16]
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <MX_TIM3_Init+0xe8>)
 800232c:	4a2d      	ldr	r2, [pc, #180]	; (80023e4 <MX_TIM3_Init+0xec>)
 800232e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <MX_TIM3_Init+0xe8>)
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <MX_TIM3_Init+0xe8>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <MX_TIM3_Init+0xe8>)
 800233e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002342:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002344:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <MX_TIM3_Init+0xe8>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234a:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <MX_TIM3_Init+0xe8>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002350:	4823      	ldr	r0, [pc, #140]	; (80023e0 <MX_TIM3_Init+0xe8>)
 8002352:	f00e f86d 	bl	8010430 <HAL_TIM_Base_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 800235c:	f000 fce6 	bl	8002d2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800236a:	4619      	mov	r1, r3
 800236c:	481c      	ldr	r0, [pc, #112]	; (80023e0 <MX_TIM3_Init+0xe8>)
 800236e:	f00e fbb5 	bl	8010adc <HAL_TIM_ConfigClockSource>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8002378:	f000 fcd8 	bl	8002d2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800237c:	4818      	ldr	r0, [pc, #96]	; (80023e0 <MX_TIM3_Init+0xe8>)
 800237e:	f00e f927 	bl	80105d0 <HAL_TIM_PWM_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8002388:	f000 fcd0 	bl	8002d2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4811      	ldr	r0, [pc, #68]	; (80023e0 <MX_TIM3_Init+0xe8>)
 800239c:	f00f f824 	bl	80113e8 <HAL_TIMEx_MasterConfigSynchronization>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 80023a6:	f000 fcc1 	bl	8002d2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023aa:	2360      	movs	r3, #96	; 0x60
 80023ac:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ba:	463b      	mov	r3, r7
 80023bc:	2200      	movs	r2, #0
 80023be:	4619      	mov	r1, r3
 80023c0:	4807      	ldr	r0, [pc, #28]	; (80023e0 <MX_TIM3_Init+0xe8>)
 80023c2:	f00e fa7b 	bl	80108bc <HAL_TIM_PWM_ConfigChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 80023cc:	f000 fcae 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80023d0:	4803      	ldr	r0, [pc, #12]	; (80023e0 <MX_TIM3_Init+0xe8>)
 80023d2:	f001 f9cd 	bl	8003770 <HAL_TIM_MspPostInit>

}
 80023d6:	bf00      	nop
 80023d8:	3738      	adds	r7, #56	; 0x38
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000a3c0 	.word	0x2000a3c0
 80023e4:	40000400 	.word	0x40000400

080023e8 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08e      	sub	sp, #56	; 0x38
 80023ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002408:	463b      	mov	r3, r7
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <MX_TIM5_Init+0xe8>)
 800241c:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <MX_TIM5_Init+0xec>)
 800241e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <MX_TIM5_Init+0xe8>)
 8002422:	2200      	movs	r2, #0
 8002424:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <MX_TIM5_Init+0xe8>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <MX_TIM5_Init+0xe8>)
 800242e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002432:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002434:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <MX_TIM5_Init+0xe8>)
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243a:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <MX_TIM5_Init+0xe8>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002440:	4823      	ldr	r0, [pc, #140]	; (80024d0 <MX_TIM5_Init+0xe8>)
 8002442:	f00d fff5 	bl	8010430 <HAL_TIM_Base_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 800244c:	f000 fc6e 	bl	8002d2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800245a:	4619      	mov	r1, r3
 800245c:	481c      	ldr	r0, [pc, #112]	; (80024d0 <MX_TIM5_Init+0xe8>)
 800245e:	f00e fb3d 	bl	8010adc <HAL_TIM_ConfigClockSource>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 8002468:	f000 fc60 	bl	8002d2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800246c:	4818      	ldr	r0, [pc, #96]	; (80024d0 <MX_TIM5_Init+0xe8>)
 800246e:	f00e f8af 	bl	80105d0 <HAL_TIM_PWM_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 8002478:	f000 fc58 	bl	8002d2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	4619      	mov	r1, r3
 800248a:	4811      	ldr	r0, [pc, #68]	; (80024d0 <MX_TIM5_Init+0xe8>)
 800248c:	f00e ffac 	bl	80113e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 8002496:	f000 fc49 	bl	8002d2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249a:	2360      	movs	r3, #96	; 0x60
 800249c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024aa:	463b      	mov	r3, r7
 80024ac:	220c      	movs	r2, #12
 80024ae:	4619      	mov	r1, r3
 80024b0:	4807      	ldr	r0, [pc, #28]	; (80024d0 <MX_TIM5_Init+0xe8>)
 80024b2:	f00e fa03 	bl	80108bc <HAL_TIM_PWM_ConfigChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 80024bc:	f000 fc36 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 80024c0:	4803      	ldr	r0, [pc, #12]	; (80024d0 <MX_TIM5_Init+0xe8>)
 80024c2:	f001 f955 	bl	8003770 <HAL_TIM_MspPostInit>

}
 80024c6:	bf00      	nop
 80024c8:	3738      	adds	r7, #56	; 0x38
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000a370 	.word	0x2000a370
 80024d4:	40000c00 	.word	0x40000c00

080024d8 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0310 	add.w	r3, r7, #16
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <MX_TIM8_Init+0xa0>)
 80024f8:	4a20      	ldr	r2, [pc, #128]	; (800257c <MX_TIM8_Init+0xa4>)
 80024fa:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80024fc:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <MX_TIM8_Init+0xa0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <MX_TIM8_Init+0xa0>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <MX_TIM8_Init+0xa0>)
 800250a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <MX_TIM8_Init+0xa0>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <MX_TIM8_Init+0xa0>)
 8002518:	2200      	movs	r2, #0
 800251a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <MX_TIM8_Init+0xa0>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002522:	4815      	ldr	r0, [pc, #84]	; (8002578 <MX_TIM8_Init+0xa0>)
 8002524:	f00d ff84 	bl	8010430 <HAL_TIM_Base_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 800252e:	f000 fbfd 	bl	8002d2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002536:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4619      	mov	r1, r3
 800253e:	480e      	ldr	r0, [pc, #56]	; (8002578 <MX_TIM8_Init+0xa0>)
 8002540:	f00e facc 	bl	8010adc <HAL_TIM_ConfigClockSource>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 800254a:	f000 fbef 	bl	8002d2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4806      	ldr	r0, [pc, #24]	; (8002578 <MX_TIM8_Init+0xa0>)
 8002560:	f00e ff42 	bl	80113e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 800256a:	f000 fbdf 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000a0a0 	.word	0x2000a0a0
 800257c:	40010400 	.word	0x40010400

08002580 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
 8002594:	615a      	str	r2, [r3, #20]
 8002596:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <MX_TIM12_Init+0x84>)
 800259a:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <MX_TIM12_Init+0x88>)
 800259c:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <MX_TIM12_Init+0x84>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <MX_TIM12_Init+0x84>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <MX_TIM12_Init+0x84>)
 80025ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b0:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b2:	4b14      	ldr	r3, [pc, #80]	; (8002604 <MX_TIM12_Init+0x84>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <MX_TIM12_Init+0x84>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80025be:	4811      	ldr	r0, [pc, #68]	; (8002604 <MX_TIM12_Init+0x84>)
 80025c0:	f00e f806 	bl	80105d0 <HAL_TIM_PWM_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 80025ca:	f000 fbaf 	bl	8002d2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ce:	2360      	movs	r3, #96	; 0x60
 80025d0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	2200      	movs	r2, #0
 80025e2:	4619      	mov	r1, r3
 80025e4:	4807      	ldr	r0, [pc, #28]	; (8002604 <MX_TIM12_Init+0x84>)
 80025e6:	f00e f969 	bl	80108bc <HAL_TIM_PWM_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 80025f0:	f000 fb9c 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <MX_TIM12_Init+0x84>)
 80025f6:	f001 f8bb 	bl	8003770 <HAL_TIM_MspPostInit>

}
 80025fa:	bf00      	nop
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000a7ac 	.word	0x2000a7ac
 8002608:	40001800 	.word	0x40001800

0800260c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002612:	4a15      	ldr	r2, [pc, #84]	; (8002668 <MX_USART1_UART_Init+0x5c>)
 8002614:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800261c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <MX_USART1_UART_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002632:	220c      	movs	r2, #12
 8002634:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <MX_USART1_UART_Init+0x58>)
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <MX_USART1_UART_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002650:	f00e fff4 	bl	801163c <HAL_UART_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800265a:	f000 fb67 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000a54c 	.word	0x2000a54c
 8002668:	40011000 	.word	0x40011000

0800266c <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 8002672:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <MX_USART6_UART_Init+0x5c>)
 8002674:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 8002678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800267c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 8002692:	220c      	movs	r2, #12
 8002694:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_USART6_UART_Init+0x58>)
 80026b0:	f00e ffc4 	bl	801163c <HAL_UART_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 80026ba:	f000 fb37 	bl	8002d2c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000a69c 	.word	0x2000a69c
 80026c8:	40011400 	.word	0x40011400

080026cc <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80026d2:	4b32      	ldr	r3, [pc, #200]	; (800279c <MX_DMA_Init+0xd0>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a31      	ldr	r2, [pc, #196]	; (800279c <MX_DMA_Init+0xd0>)
 80026d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b2f      	ldr	r3, [pc, #188]	; (800279c <MX_DMA_Init+0xd0>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80026ea:	4b2d      	ldr	r3, [pc, #180]	; (80027a0 <MX_DMA_Init+0xd4>)
 80026ec:	4a2d      	ldr	r2, [pc, #180]	; (80027a4 <MX_DMA_Init+0xd8>)
 80026ee:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <MX_DMA_Init+0xd4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80026f6:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <MX_DMA_Init+0xd4>)
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <MX_DMA_Init+0xd4>)
 80026fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002702:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <MX_DMA_Init+0xd4>)
 8002706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800270a:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800270c:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <MX_DMA_Init+0xd4>)
 800270e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002712:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <MX_DMA_Init+0xd4>)
 8002716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800271a:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <MX_DMA_Init+0xd4>)
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8002722:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <MX_DMA_Init+0xd4>)
 8002724:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002728:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <MX_DMA_Init+0xd4>)
 800272c:	2204      	movs	r2, #4
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <MX_DMA_Init+0xd4>)
 8002732:	2203      	movs	r2, #3
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002736:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <MX_DMA_Init+0xd4>)
 8002738:	2200      	movs	r2, #0
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800273c:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <MX_DMA_Init+0xd4>)
 800273e:	2200      	movs	r2, #0
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002742:	4817      	ldr	r0, [pc, #92]	; (80027a0 <MX_DMA_Init+0xd4>)
 8002744:	f005 fa88 	bl	8007c58 <HAL_DMA_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 800274e:	f000 faed 	bl	8002d2c <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2105      	movs	r1, #5
 8002756:	2038      	movs	r0, #56	; 0x38
 8002758:	f004 ff96 	bl	8007688 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800275c:	2038      	movs	r0, #56	; 0x38
 800275e:	f004 ffaf 	bl	80076c0 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2105      	movs	r1, #5
 8002766:	2039      	movs	r0, #57	; 0x39
 8002768:	f004 ff8e 	bl	8007688 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800276c:	2039      	movs	r0, #57	; 0x39
 800276e:	f004 ffa7 	bl	80076c0 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2105      	movs	r1, #5
 8002776:	203c      	movs	r0, #60	; 0x3c
 8002778:	f004 ff86 	bl	8007688 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800277c:	203c      	movs	r0, #60	; 0x3c
 800277e:	f004 ff9f 	bl	80076c0 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2105      	movs	r1, #5
 8002786:	2046      	movs	r0, #70	; 0x46
 8002788:	f004 ff7e 	bl	8007688 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800278c:	2046      	movs	r0, #70	; 0x46
 800278e:	f004 ff97 	bl	80076c0 <HAL_NVIC_EnableIRQ>

}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	2000a040 	.word	0x2000a040
 80027a4:	40026410 	.word	0x40026410

080027a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
 80027bc:	615a      	str	r2, [r3, #20]
 80027be:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80027c0:	4b21      	ldr	r3, [pc, #132]	; (8002848 <MX_FMC_Init+0xa0>)
 80027c2:	4a22      	ldr	r2, [pc, #136]	; (800284c <MX_FMC_Init+0xa4>)
 80027c4:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <MX_FMC_Init+0xa0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027cc:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <MX_FMC_Init+0xa0>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <MX_FMC_Init+0xa0>)
 80027d4:	2204      	movs	r2, #4
 80027d6:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <MX_FMC_Init+0xa0>)
 80027da:	2210      	movs	r2, #16
 80027dc:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <MX_FMC_Init+0xa0>)
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80027e4:	4b18      	ldr	r3, [pc, #96]	; (8002848 <MX_FMC_Init+0xa0>)
 80027e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ea:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <MX_FMC_Init+0xa0>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <MX_FMC_Init+0xa0>)
 80027f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027f8:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <MX_FMC_Init+0xa0>)
 80027fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002800:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <MX_FMC_Init+0xa0>)
 8002804:	2200      	movs	r2, #0
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8002808:	2302      	movs	r3, #2
 800280a:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 800280c:	2307      	movs	r3, #7
 800280e:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8002810:	2304      	movs	r3, #4
 8002812:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8002814:	2307      	movs	r3, #7
 8002816:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8002818:	2303      	movs	r3, #3
 800281a:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 800281c:	2302      	movs	r3, #2
 800281e:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8002820:	2302      	movs	r3, #2
 8002822:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	4619      	mov	r1, r3
 8002828:	4807      	ldr	r0, [pc, #28]	; (8002848 <MX_FMC_Init+0xa0>)
 800282a:	f00d fd26 	bl	801027a <HAL_SDRAM_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 8002834:	f000 fa7a 	bl	8002d2c <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002838:	f240 6003 	movw	r0, #1539	; 0x603
 800283c:	f002 fe86 	bl	800554c <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 8002840:	bf00      	nop
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2000a7f8 	.word	0x2000a7f8
 800284c:	a0000140 	.word	0xa0000140

08002850 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b090      	sub	sp, #64	; 0x40
 8002854:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
 8002864:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002866:	4baf      	ldr	r3, [pc, #700]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4aae      	ldr	r2, [pc, #696]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4bac      	ldr	r3, [pc, #688]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800287e:	4ba9      	ldr	r3, [pc, #676]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4aa8      	ldr	r2, [pc, #672]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4ba6      	ldr	r3, [pc, #664]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	4ba3      	ldr	r3, [pc, #652]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4aa2      	ldr	r2, [pc, #648]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4ba0      	ldr	r3, [pc, #640]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	623b      	str	r3, [r7, #32]
 80028ac:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80028ae:	4b9d      	ldr	r3, [pc, #628]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a9c      	ldr	r2, [pc, #624]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b9a      	ldr	r3, [pc, #616]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80028c6:	4b97      	ldr	r3, [pc, #604]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a96      	ldr	r2, [pc, #600]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b94      	ldr	r3, [pc, #592]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	4b91      	ldr	r3, [pc, #580]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a90      	ldr	r2, [pc, #576]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b8e      	ldr	r3, [pc, #568]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80028f6:	4b8b      	ldr	r3, [pc, #556]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a8a      	ldr	r2, [pc, #552]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 80028fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b88      	ldr	r3, [pc, #544]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800290e:	4b85      	ldr	r3, [pc, #532]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a84      	ldr	r2, [pc, #528]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b82      	ldr	r3, [pc, #520]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8002926:	4b7f      	ldr	r3, [pc, #508]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a7e      	ldr	r2, [pc, #504]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 800292c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b7c      	ldr	r3, [pc, #496]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800293e:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a78      	ldr	r2, [pc, #480]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002944:	f043 0320 	orr.w	r3, r3, #32
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002956:	4b73      	ldr	r3, [pc, #460]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a72      	ldr	r2, [pc, #456]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 800295c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b70      	ldr	r3, [pc, #448]	; (8002b24 <MX_GPIO_Init+0x2d4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800296e:	2201      	movs	r2, #1
 8002970:	2120      	movs	r1, #32
 8002972:	486d      	ldr	r0, [pc, #436]	; (8002b28 <MX_GPIO_Init+0x2d8>)
 8002974:	f006 fbf2 	bl	800915c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8002978:	2200      	movs	r2, #0
 800297a:	210e      	movs	r1, #14
 800297c:	486b      	ldr	r0, [pc, #428]	; (8002b2c <MX_GPIO_Init+0x2dc>)
 800297e:	f006 fbed 	bl	800915c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002982:	2201      	movs	r2, #1
 8002984:	2108      	movs	r1, #8
 8002986:	486a      	ldr	r0, [pc, #424]	; (8002b30 <MX_GPIO_Init+0x2e0>)
 8002988:	f006 fbe8 	bl	800915c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800298c:	2201      	movs	r2, #1
 800298e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002992:	4866      	ldr	r0, [pc, #408]	; (8002b2c <MX_GPIO_Init+0x2dc>)
 8002994:	f006 fbe2 	bl	800915c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800299e:	4865      	ldr	r0, [pc, #404]	; (8002b34 <MX_GPIO_Init+0x2e4>)
 80029a0:	f006 fbdc 	bl	800915c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80029a4:	2200      	movs	r2, #0
 80029a6:	21c8      	movs	r1, #200	; 0xc8
 80029a8:	4863      	ldr	r0, [pc, #396]	; (8002b38 <MX_GPIO_Init+0x2e8>)
 80029aa:	f006 fbd7 	bl	800915c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80029ae:	2308      	movs	r3, #8
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b2:	2300      	movs	r3, #0
 80029b4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029be:	4619      	mov	r1, r3
 80029c0:	485e      	ldr	r0, [pc, #376]	; (8002b3c <MX_GPIO_Init+0x2ec>)
 80029c2:	f006 f8fb 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80029c6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029d8:	230b      	movs	r3, #11
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e0:	4619      	mov	r1, r3
 80029e2:	4855      	ldr	r0, [pc, #340]	; (8002b38 <MX_GPIO_Init+0x2e8>)
 80029e4:	f006 f8ea 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80029e8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80029fa:	230a      	movs	r3, #10
 80029fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a02:	4619      	mov	r1, r3
 8002a04:	484e      	ldr	r0, [pc, #312]	; (8002b40 <MX_GPIO_Init+0x2f0>)
 8002a06:	f006 f8d9 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a10:	2300      	movs	r3, #0
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4849      	ldr	r0, [pc, #292]	; (8002b44 <MX_GPIO_Init+0x2f4>)
 8002a20:	f006 f8cc 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002a24:	2340      	movs	r3, #64	; 0x40
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a28:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <MX_GPIO_Init+0x2f8>)
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a34:	4619      	mov	r1, r3
 8002a36:	483c      	ldr	r0, [pc, #240]	; (8002b28 <MX_GPIO_Init+0x2d8>)
 8002a38:	f006 f8c0 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a40:	2301      	movs	r3, #1
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a50:	4619      	mov	r1, r3
 8002a52:	4835      	ldr	r0, [pc, #212]	; (8002b28 <MX_GPIO_Init+0x2d8>)
 8002a54:	f006 f8b2 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8002a58:	f241 030e 	movw	r3, #4110	; 0x100e
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a6e:	4619      	mov	r1, r3
 8002a70:	482e      	ldr	r0, [pc, #184]	; (8002b2c <MX_GPIO_Init+0x2dc>)
 8002a72:	f006 f8a3 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4830      	ldr	r0, [pc, #192]	; (8002b4c <MX_GPIO_Init+0x2fc>)
 8002a8c:	f006 f896 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002a90:	2308      	movs	r3, #8
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a94:	2301      	movs	r3, #1
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4822      	ldr	r0, [pc, #136]	; (8002b30 <MX_GPIO_Init+0x2e0>)
 8002aa8:	f006 f888 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002aac:	2310      	movs	r3, #16
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002abc:	4619      	mov	r1, r3
 8002abe:	481a      	ldr	r0, [pc, #104]	; (8002b28 <MX_GPIO_Init+0x2d8>)
 8002ac0:	f006 f87c 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002ac4:	f248 0304 	movw	r3, #32772	; 0x8004
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aca:	2300      	movs	r3, #0
 8002acc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4816      	ldr	r0, [pc, #88]	; (8002b34 <MX_GPIO_Init+0x2e4>)
 8002ada:	f006 f86f 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af4:	4619      	mov	r1, r3
 8002af6:	480f      	ldr	r0, [pc, #60]	; (8002b34 <MX_GPIO_Init+0x2e4>)
 8002af8:	f006 f860 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b02:	2300      	movs	r3, #0
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4806      	ldr	r0, [pc, #24]	; (8002b2c <MX_GPIO_Init+0x2dc>)
 8002b12:	f006 f853 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <MX_GPIO_Init+0x300>)
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e017      	b.n	8002b54 <MX_GPIO_Init+0x304>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40022800 	.word	0x40022800
 8002b34:	40021c00 	.word	0x40021c00
 8002b38:	40021800 	.word	0x40021800
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40020400 	.word	0x40020400
 8002b44:	40022400 	.word	0x40022400
 8002b48:	10120000 	.word	0x10120000
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	10110000 	.word	0x10110000
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4844      	ldr	r0, [pc, #272]	; (8002c70 <MX_GPIO_Init+0x420>)
 8002b5e:	f006 f82d 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002b62:	2310      	movs	r3, #16
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b72:	230a      	movs	r3, #10
 8002b74:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	483d      	ldr	r0, [pc, #244]	; (8002c74 <MX_GPIO_Init+0x424>)
 8002b7e:	f006 f81d 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002b82:	23c8      	movs	r3, #200	; 0xc8
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b86:	2301      	movs	r3, #1
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b96:	4619      	mov	r1, r3
 8002b98:	4837      	ldr	r0, [pc, #220]	; (8002c78 <MX_GPIO_Init+0x428>)
 8002b9a:	f006 f80f 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002b9e:	2305      	movs	r3, #5
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002baa:	2303      	movs	r3, #3
 8002bac:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002bae:	230a      	movs	r3, #10
 8002bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4830      	ldr	r0, [pc, #192]	; (8002c7c <MX_GPIO_Init+0x42c>)
 8002bba:	f005 ffff 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002bbe:	2332      	movs	r3, #50	; 0x32
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bce:	230b      	movs	r3, #11
 8002bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4828      	ldr	r0, [pc, #160]	; (8002c7c <MX_GPIO_Init+0x42c>)
 8002bda:	f005 ffef 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002bde:	2304      	movs	r3, #4
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be2:	2300      	movs	r3, #0
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4821      	ldr	r0, [pc, #132]	; (8002c78 <MX_GPIO_Init+0x428>)
 8002bf2:	f005 ffe3 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002bf6:	2386      	movs	r3, #134	; 0x86
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c06:	230b      	movs	r3, #11
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c0e:	4619      	mov	r1, r3
 8002c10:	481b      	ldr	r0, [pc, #108]	; (8002c80 <MX_GPIO_Init+0x430>)
 8002c12:	f005 ffd3 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002c16:	2328      	movs	r3, #40	; 0x28
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c22:	2303      	movs	r3, #3
 8002c24:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c26:	230a      	movs	r3, #10
 8002c28:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4813      	ldr	r0, [pc, #76]	; (8002c80 <MX_GPIO_Init+0x430>)
 8002c32:	f005 ffc3 	bl	8008bbc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002c36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c48:	2305      	movs	r3, #5
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c50:	4619      	mov	r1, r3
 8002c52:	480c      	ldr	r0, [pc, #48]	; (8002c84 <MX_GPIO_Init+0x434>)
 8002c54:	f005 ffb2 	bl	8008bbc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2105      	movs	r1, #5
 8002c5c:	2028      	movs	r0, #40	; 0x28
 8002c5e:	f004 fd13 	bl	8007688 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c62:	2028      	movs	r0, #40	; 0x28
 8002c64:	f004 fd2c 	bl	80076c0 <HAL_NVIC_EnableIRQ>

}
 8002c68:	bf00      	nop
 8002c6a:	3740      	adds	r7, #64	; 0x40
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40021c00 	.word	0x40021c00
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	40020800 	.word	0x40020800
 8002c80:	40020000 	.word	0x40020000
 8002c84:	40020400 	.word	0x40020400

08002c88 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f017 fdcb 	bl	801a82c <iprintf>
	printf("\n");
 8002c96:	200a      	movs	r0, #10
 8002c98:	f017 fde0 	bl	801a85c <putchar>
	Error_Handler();
 8002c9c:	f000 f846 	bl	8002d2c <Error_Handler>
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8002cb0:	f016 f8da 	bl	8018e68 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 8002cb4:	4803      	ldr	r0, [pc, #12]	; (8002cc4 <StartDefaultTask+0x1c>)
 8002cb6:	f017 fe55 	bl	801a964 <puts>
	audioLoop();
 8002cba:	f7fe f989 	bl	8000fd0 <audioLoop>
	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	int i=0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
	for(;;)
 8002cc2:	e7fe      	b.n	8002cc2 <StartDefaultTask+0x1a>
 8002cc4:	0801c0b8 	.word	0x0801c0b8

08002cc8 <startUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN startUITask */

	osDelay(200);
 8002cd0:	20c8      	movs	r0, #200	; 0xc8
 8002cd2:	f013 fbcd 	bl	8016470 <osDelay>
	printf("StartLedTask\n");
 8002cd6:	480b      	ldr	r0, [pc, #44]	; (8002d04 <startUITask+0x3c>)
 8002cd8:	f017 fe44 	bl	801a964 <puts>
	uiDisplayBasic();
 8002cdc:	f001 f9ce 	bl	800407c <uiDisplayBasic>
	/* Infinite loop */
	for(;;)
	{
		osSignalWait (0x0001, osWaitForever);
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f013 fc15 	bl	8016518 <osSignalWait>
		uiDisplaySpectrum();
 8002cee:	f001 fcad 	bl	800464c <uiDisplaySpectrum>
		uiDisplayMaster();
 8002cf2:	f001 fd05 	bl	8004700 <uiDisplayMaster>
		uiSliderDelay();
 8002cf6:	f001 faad 	bl	8004254 <uiSliderDelay>
		uiSliderFeed();
 8002cfa:	f001 fb19 	bl	8004330 <uiSliderFeed>
		uiSliderVolume();
 8002cfe:	f001 fb9b 	bl	8004438 <uiSliderVolume>
		osSignalWait (0x0001, osWaitForever);
 8002d02:	e7ed      	b.n	8002ce0 <startUITask+0x18>
 8002d04:	0801c0cc 	.word	0x0801c0cc

08002d08 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002d1a:	f004 f90d 	bl	8006f38 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40001000 	.word	0x40001000

08002d2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002d30:	f001 fd86 	bl	8004840 <LED_Toggle>
		HAL_Delay(100);
 8002d34:	2064      	movs	r0, #100	; 0x64
 8002d36:	f004 f91f 	bl	8006f78 <HAL_Delay>
		LED_Toggle();
 8002d3a:	e7f9      	b.n	8002d30 <Error_Handler+0x4>

08002d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_MspInit+0x4c>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	4a10      	ldr	r2, [pc, #64]	; (8002d88 <HAL_MspInit+0x4c>)
 8002d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <HAL_MspInit+0x4c>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_MspInit+0x4c>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <HAL_MspInit+0x4c>)
 8002d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d64:	6453      	str	r3, [r2, #68]	; 0x44
 8002d66:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_MspInit+0x4c>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	210f      	movs	r1, #15
 8002d76:	f06f 0001 	mvn.w	r0, #1
 8002d7a:	f004 fc85 	bl	8007688 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800

08002d8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <HAL_ADC_MspInit+0xa4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d13c      	bne.n	8002e28 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002dae:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_ADC_MspInit+0xa8>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <HAL_ADC_MspInit+0xa8>)
 8002db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <HAL_ADC_MspInit+0xa8>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_ADC_MspInit+0xa8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <HAL_ADC_MspInit+0xa8>)
 8002dcc:	f043 0320 	orr.w	r3, r3, #32
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_ADC_MspInit+0xa8>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <HAL_ADC_MspInit+0xa8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <HAL_ADC_MspInit+0xa8>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_ADC_MspInit+0xa8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002df6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002dfa:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4619      	mov	r1, r3
 8002e0a:	480b      	ldr	r0, [pc, #44]	; (8002e38 <HAL_ADC_MspInit+0xac>)
 8002e0c:	f005 fed6 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002e10:	2301      	movs	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e14:	2303      	movs	r3, #3
 8002e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4619      	mov	r1, r3
 8002e22:	4806      	ldr	r0, [pc, #24]	; (8002e3c <HAL_ADC_MspInit+0xb0>)
 8002e24:	f005 feca 	bl	8008bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002e28:	bf00      	nop
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40012200 	.word	0x40012200
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40021400 	.word	0x40021400
 8002e3c:	40020000 	.word	0x40020000

08002e40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <HAL_CRC_MspInit+0x38>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d10b      	bne.n	8002e6a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_CRC_MspInit+0x3c>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_CRC_MspInit+0x3c>)
 8002e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_CRC_MspInit+0x3c>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40023000 	.word	0x40023000
 8002e7c:	40023800 	.word	0x40023800

08002e80 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08e      	sub	sp, #56	; 0x38
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a6c      	ldr	r2, [pc, #432]	; (8003050 <HAL_DCMI_MspInit+0x1d0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	f040 80d2 	bne.w	8003048 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002ea4:	4b6b      	ldr	r3, [pc, #428]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	4a6a      	ldr	r2, [pc, #424]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6353      	str	r3, [r2, #52]	; 0x34
 8002eb0:	4b68      	ldr	r3, [pc, #416]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	623b      	str	r3, [r7, #32]
 8002eba:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ebc:	4b65      	ldr	r3, [pc, #404]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	4a64      	ldr	r2, [pc, #400]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002ec2:	f043 0310 	orr.w	r3, r3, #16
 8002ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec8:	4b62      	ldr	r3, [pc, #392]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed4:	4b5f      	ldr	r3, [pc, #380]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	4a5e      	ldr	r2, [pc, #376]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002eda:	f043 0308 	orr.w	r3, r3, #8
 8002ede:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee0:	4b5c      	ldr	r3, [pc, #368]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef8:	4b56      	ldr	r3, [pc, #344]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1c:	4b4d      	ldr	r3, [pc, #308]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	4a4c      	ldr	r2, [pc, #304]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6313      	str	r3, [r2, #48]	; 0x30
 8002f28:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <HAL_DCMI_MspInit+0x1d4>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002f34:	2360      	movs	r3, #96	; 0x60
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f40:	2300      	movs	r3, #0
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f44:	230d      	movs	r3, #13
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4842      	ldr	r0, [pc, #264]	; (8003058 <HAL_DCMI_MspInit+0x1d8>)
 8002f50:	f005 fe34 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002f54:	2308      	movs	r3, #8
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f64:	230d      	movs	r3, #13
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	483b      	ldr	r0, [pc, #236]	; (800305c <HAL_DCMI_MspInit+0x1dc>)
 8002f70:	f005 fe24 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f86:	230d      	movs	r3, #13
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4833      	ldr	r0, [pc, #204]	; (8003060 <HAL_DCMI_MspInit+0x1e0>)
 8002f92:	f005 fe13 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002f96:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002fa8:	230d      	movs	r3, #13
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	482c      	ldr	r0, [pc, #176]	; (8003064 <HAL_DCMI_MspInit+0x1e4>)
 8002fb4:	f005 fe02 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002fb8:	2350      	movs	r3, #80	; 0x50
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002fc8:	230d      	movs	r3, #13
 8002fca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4825      	ldr	r0, [pc, #148]	; (8003068 <HAL_DCMI_MspInit+0x1e8>)
 8002fd4:	f005 fdf2 	bl	8008bbc <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8002fda:	4a25      	ldr	r2, [pc, #148]	; (8003070 <HAL_DCMI_MspInit+0x1f0>)
 8002fdc:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8002fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8002ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8002ffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003000:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8003004:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003008:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800300a:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 800300c:	2200      	movs	r2, #0
 800300e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8003012:	2200      	movs	r2, #0
 8003014:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8003018:	2200      	movs	r2, #0
 800301a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800301c:	4813      	ldr	r0, [pc, #76]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 800301e:	f004 fe1b 	bl	8007c58 <HAL_DMA_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8003028:	f7ff fe80 	bl	8002d2c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a0f      	ldr	r2, [pc, #60]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8003030:	649a      	str	r2, [r3, #72]	; 0x48
 8003032:	4a0e      	ldr	r2, [pc, #56]	; (800306c <HAL_DCMI_MspInit+0x1ec>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	2105      	movs	r1, #5
 800303c:	204e      	movs	r0, #78	; 0x4e
 800303e:	f004 fb23 	bl	8007688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003042:	204e      	movs	r0, #78	; 0x4e
 8003044:	f004 fb3c 	bl	80076c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003048:	bf00      	nop
 800304a:	3738      	adds	r7, #56	; 0x38
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	50050000 	.word	0x50050000
 8003054:	40023800 	.word	0x40023800
 8003058:	40021000 	.word	0x40021000
 800305c:	40020c00 	.word	0x40020c00
 8003060:	40021800 	.word	0x40021800
 8003064:	40021c00 	.word	0x40021c00
 8003068:	40020000 	.word	0x40020000
 800306c:	2000a28c 	.word	0x2000a28c
 8003070:	40026428 	.word	0x40026428

08003074 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_DMA2D_MspInit+0x44>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d113      	bne.n	80030ae <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_DMA2D_MspInit+0x48>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	4a0c      	ldr	r2, [pc, #48]	; (80030bc <HAL_DMA2D_MspInit+0x48>)
 800308c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003090:	6313      	str	r3, [r2, #48]	; 0x30
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_DMA2D_MspInit+0x48>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2105      	movs	r1, #5
 80030a2:	205a      	movs	r0, #90	; 0x5a
 80030a4:	f004 faf0 	bl	8007688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80030a8:	205a      	movs	r0, #90	; 0x5a
 80030aa:	f004 fb09 	bl	80076c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	4002b000 	.word	0x4002b000
 80030bc:	40023800 	.word	0x40023800

080030c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2f      	ldr	r2, [pc, #188]	; (800319c <HAL_I2C_MspInit+0xdc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d129      	bne.n	8003136 <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a2e      	ldr	r2, [pc, #184]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80030fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003100:	2312      	movs	r3, #18
 8003102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003104:	2301      	movs	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800310c:	2304      	movs	r3, #4
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	4619      	mov	r1, r3
 8003116:	4823      	ldr	r0, [pc, #140]	; (80031a4 <HAL_I2C_MspInit+0xe4>)
 8003118:	f005 fd50 	bl	8008bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 8003122:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003126:	6413      	str	r3, [r2, #64]	; 0x40
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003134:	e02d      	b.n	8003192 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <HAL_I2C_MspInit+0xe8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d128      	bne.n	8003192 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003140:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 8003146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314a:	6313      	str	r3, [r2, #48]	; 0x30
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003158:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800315c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800315e:	2312      	movs	r3, #18
 8003160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003162:	2301      	movs	r3, #1
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003166:	2303      	movs	r3, #3
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800316a:	2304      	movs	r3, #4
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800316e:	f107 031c 	add.w	r3, r7, #28
 8003172:	4619      	mov	r1, r3
 8003174:	480d      	ldr	r0, [pc, #52]	; (80031ac <HAL_I2C_MspInit+0xec>)
 8003176:	f005 fd21 	bl	8008bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	4a08      	ldr	r2, [pc, #32]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 8003180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_I2C_MspInit+0xe0>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
}
 8003192:	bf00      	nop
 8003194:	3730      	adds	r7, #48	; 0x30
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40005400 	.word	0x40005400
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40020400 	.word	0x40020400
 80031a8:	40005c00 	.word	0x40005c00
 80031ac:	40021c00 	.word	0x40021c00

080031b0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <HAL_I2C_MspDeInit+0x64>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d110      	bne.n	80031e4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_I2C_MspDeInit+0x68>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a14      	ldr	r2, [pc, #80]	; (8003218 <HAL_I2C_MspDeInit+0x68>)
 80031c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80031ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031d2:	4812      	ldr	r0, [pc, #72]	; (800321c <HAL_I2C_MspDeInit+0x6c>)
 80031d4:	f005 fe9e 	bl	8008f14 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80031d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031dc:	480f      	ldr	r0, [pc, #60]	; (800321c <HAL_I2C_MspDeInit+0x6c>)
 80031de:	f005 fe99 	bl	8008f14 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80031e2:	e013      	b.n	800320c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <HAL_I2C_MspDeInit+0x70>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d10e      	bne.n	800320c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_I2C_MspDeInit+0x68>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_I2C_MspDeInit+0x68>)
 80031f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80031fa:	2180      	movs	r1, #128	; 0x80
 80031fc:	4809      	ldr	r0, [pc, #36]	; (8003224 <HAL_I2C_MspDeInit+0x74>)
 80031fe:	f005 fe89 	bl	8008f14 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003206:	4807      	ldr	r0, [pc, #28]	; (8003224 <HAL_I2C_MspDeInit+0x74>)
 8003208:	f005 fe84 	bl	8008f14 <HAL_GPIO_DeInit>
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40005400 	.word	0x40005400
 8003218:	40023800 	.word	0x40023800
 800321c:	40020400 	.word	0x40020400
 8003220:	40005c00 	.word	0x40005c00
 8003224:	40021c00 	.word	0x40021c00

08003228 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08e      	sub	sp, #56	; 0x38
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a51      	ldr	r2, [pc, #324]	; (800338c <HAL_LTDC_MspInit+0x164>)
 8003246:	4293      	cmp	r3, r2
 8003248:	f040 809b 	bne.w	8003382 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800324c:	4b50      	ldr	r3, [pc, #320]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	4a4f      	ldr	r2, [pc, #316]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 8003252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003256:	6453      	str	r3, [r2, #68]	; 0x44
 8003258:	4b4d      	ldr	r3, [pc, #308]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 800325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003260:	623b      	str	r3, [r7, #32]
 8003262:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003264:	4b4a      	ldr	r3, [pc, #296]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	4a49      	ldr	r2, [pc, #292]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 800326a:	f043 0310 	orr.w	r3, r3, #16
 800326e:	6313      	str	r3, [r2, #48]	; 0x30
 8003270:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800327c:	4b44      	ldr	r3, [pc, #272]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	4a43      	ldr	r2, [pc, #268]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 8003282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003286:	6313      	str	r3, [r2, #48]	; 0x30
 8003288:	4b41      	ldr	r3, [pc, #260]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003294:	4b3e      	ldr	r3, [pc, #248]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 800329a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800329e:	6313      	str	r3, [r2, #48]	; 0x30
 80032a0:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032ac:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	4a37      	ldr	r2, [pc, #220]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 80032b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b6:	6313      	str	r3, [r2, #48]	; 0x30
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80032c4:	4b32      	ldr	r3, [pc, #200]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4a31      	ldr	r2, [pc, #196]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 80032ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ce:	6313      	str	r3, [r2, #48]	; 0x30
 80032d0:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <HAL_LTDC_MspInit+0x168>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80032dc:	2310      	movs	r3, #16
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e8:	2300      	movs	r3, #0
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032ec:	230e      	movs	r3, #14
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80032f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f4:	4619      	mov	r1, r3
 80032f6:	4827      	ldr	r0, [pc, #156]	; (8003394 <HAL_LTDC_MspInit+0x16c>)
 80032f8:	f005 fc60 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80032fc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	2300      	movs	r3, #0
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800330e:	230e      	movs	r3, #14
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003316:	4619      	mov	r1, r3
 8003318:	481f      	ldr	r0, [pc, #124]	; (8003398 <HAL_LTDC_MspInit+0x170>)
 800331a:	f005 fc4f 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800331e:	23f7      	movs	r3, #247	; 0xf7
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	2302      	movs	r3, #2
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	2300      	movs	r3, #0
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800332e:	230e      	movs	r3, #14
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003336:	4619      	mov	r1, r3
 8003338:	4818      	ldr	r0, [pc, #96]	; (800339c <HAL_LTDC_MspInit+0x174>)
 800333a:	f005 fc3f 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800333e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334c:	2300      	movs	r3, #0
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003350:	2309      	movs	r3, #9
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003358:	4619      	mov	r1, r3
 800335a:	4811      	ldr	r0, [pc, #68]	; (80033a0 <HAL_LTDC_MspInit+0x178>)
 800335c:	f005 fc2e 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003360:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336e:	2300      	movs	r3, #0
 8003370:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003372:	230e      	movs	r3, #14
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800337a:	4619      	mov	r1, r3
 800337c:	4809      	ldr	r0, [pc, #36]	; (80033a4 <HAL_LTDC_MspInit+0x17c>)
 800337e:	f005 fc1d 	bl	8008bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003382:	bf00      	nop
 8003384:	3738      	adds	r7, #56	; 0x38
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40016800 	.word	0x40016800
 8003390:	40023800 	.word	0x40023800
 8003394:	40021000 	.word	0x40021000
 8003398:	40022400 	.word	0x40022400
 800339c:	40022800 	.word	0x40022800
 80033a0:	40021800 	.word	0x40021800
 80033a4:	40022000 	.word	0x40022000

080033a8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08c      	sub	sp, #48	; 0x30
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	f107 031c 	add.w	r3, r7, #28
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a3f      	ldr	r2, [pc, #252]	; (80034c4 <HAL_QSPI_MspInit+0x11c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d178      	bne.n	80034bc <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80033ca:	4b3f      	ldr	r3, [pc, #252]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	4a3e      	ldr	r2, [pc, #248]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	6393      	str	r3, [r2, #56]	; 0x38
 80033d6:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033e2:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a38      	ldr	r2, [pc, #224]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 80033e8:	f043 0310 	orr.w	r3, r3, #16
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a32      	ldr	r2, [pc, #200]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 8003418:	f043 0308 	orr.w	r3, r3, #8
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <HAL_QSPI_MspInit+0x120>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800342a:	2304      	movs	r3, #4
 800342c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003436:	2303      	movs	r3, #3
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800343a:	2309      	movs	r3, #9
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800343e:	f107 031c 	add.w	r3, r7, #28
 8003442:	4619      	mov	r1, r3
 8003444:	4821      	ldr	r0, [pc, #132]	; (80034cc <HAL_QSPI_MspInit+0x124>)
 8003446:	f005 fbb9 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800344a:	2340      	movs	r3, #64	; 0x40
 800344c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003456:	2303      	movs	r3, #3
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800345a:	230a      	movs	r3, #10
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800345e:	f107 031c 	add.w	r3, r7, #28
 8003462:	4619      	mov	r1, r3
 8003464:	481a      	ldr	r0, [pc, #104]	; (80034d0 <HAL_QSPI_MspInit+0x128>)
 8003466:	f005 fba9 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800346a:	2304      	movs	r3, #4
 800346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800347a:	2309      	movs	r3, #9
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347e:	f107 031c 	add.w	r3, r7, #28
 8003482:	4619      	mov	r1, r3
 8003484:	4812      	ldr	r0, [pc, #72]	; (80034d0 <HAL_QSPI_MspInit+0x128>)
 8003486:	f005 fb99 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800348a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800348e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800349c:	2309      	movs	r3, #9
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034a0:	f107 031c 	add.w	r3, r7, #28
 80034a4:	4619      	mov	r1, r3
 80034a6:	480b      	ldr	r0, [pc, #44]	; (80034d4 <HAL_QSPI_MspInit+0x12c>)
 80034a8:	f005 fb88 	bl	8008bbc <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80034ac:	2200      	movs	r2, #0
 80034ae:	2105      	movs	r1, #5
 80034b0:	205c      	movs	r0, #92	; 0x5c
 80034b2:	f004 f8e9 	bl	8007688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80034b6:	205c      	movs	r0, #92	; 0x5c
 80034b8:	f004 f902 	bl	80076c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80034bc:	bf00      	nop
 80034be:	3730      	adds	r7, #48	; 0x30
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	a0001000 	.word	0xa0001000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40020400 	.word	0x40020400
 80034d4:	40020c00 	.word	0x40020c00

080034d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a07      	ldr	r2, [pc, #28]	; (8003504 <HAL_RTC_MspInit+0x2c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d105      	bne.n	80034f6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <HAL_RTC_MspInit+0x30>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a06      	ldr	r2, [pc, #24]	; (8003508 <HAL_RTC_MspInit+0x30>)
 80034f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40002800 	.word	0x40002800
 8003508:	40023800 	.word	0x40023800

0800350c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <HAL_SD_MspInit+0xb4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d144      	bne.n	80035b8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800352e:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_SD_MspInit+0xb8>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	4a24      	ldr	r2, [pc, #144]	; (80035c4 <HAL_SD_MspInit+0xb8>)
 8003534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003538:	6453      	str	r3, [r2, #68]	; 0x44
 800353a:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_SD_MspInit+0xb8>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003546:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <HAL_SD_MspInit+0xb8>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <HAL_SD_MspInit+0xb8>)
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	6313      	str	r3, [r2, #48]	; 0x30
 8003552:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <HAL_SD_MspInit+0xb8>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800355e:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_SD_MspInit+0xb8>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_SD_MspInit+0xb8>)
 8003564:	f043 0308 	orr.w	r3, r3, #8
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_SD_MspInit+0xb8>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003576:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800357a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003584:	2303      	movs	r3, #3
 8003586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003588:	230c      	movs	r3, #12
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	4619      	mov	r1, r3
 8003592:	480d      	ldr	r0, [pc, #52]	; (80035c8 <HAL_SD_MspInit+0xbc>)
 8003594:	f005 fb12 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003598:	2304      	movs	r3, #4
 800359a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2302      	movs	r3, #2
 800359e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a4:	2303      	movs	r3, #3
 80035a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80035a8:	230c      	movs	r3, #12
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4619      	mov	r1, r3
 80035b2:	4806      	ldr	r0, [pc, #24]	; (80035cc <HAL_SD_MspInit+0xc0>)
 80035b4:	f005 fb02 	bl	8008bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80035b8:	bf00      	nop
 80035ba:	3728      	adds	r7, #40	; 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40020800 	.word	0x40020800
 80035cc:	40020c00 	.word	0x40020c00

080035d0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	f107 0314 	add.w	r3, r7, #20
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80035f0:	d127      	bne.n	8003642 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80035f2:	4b16      	ldr	r3, [pc, #88]	; (800364c <HAL_SPDIFRX_MspInit+0x7c>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a15      	ldr	r2, [pc, #84]	; (800364c <HAL_SPDIFRX_MspInit+0x7c>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_SPDIFRX_MspInit+0x7c>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <HAL_SPDIFRX_MspInit+0x7c>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4a0f      	ldr	r2, [pc, #60]	; (800364c <HAL_SPDIFRX_MspInit+0x7c>)
 8003610:	f043 0308 	orr.w	r3, r3, #8
 8003614:	6313      	str	r3, [r2, #48]	; 0x30
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_SPDIFRX_MspInit+0x7c>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	2302      	movs	r3, #2
 8003628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003632:	2308      	movs	r3, #8
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003636:	f107 0314 	add.w	r3, r7, #20
 800363a:	4619      	mov	r1, r3
 800363c:	4804      	ldr	r0, [pc, #16]	; (8003650 <HAL_SPDIFRX_MspInit+0x80>)
 800363e:	f005 fabd 	bl	8008bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003642:	bf00      	nop
 8003644:	3728      	adds	r7, #40	; 0x28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800
 8003650:	40020c00 	.word	0x40020c00

08003654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2e      	ldr	r2, [pc, #184]	; (800371c <HAL_TIM_Base_MspInit+0xc8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10c      	bne.n	8003680 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003666:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6453      	str	r3, [r2, #68]	; 0x44
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800367e:	e046      	b.n	800370e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d10c      	bne.n	80036a4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800368a:	4b25      	ldr	r3, [pc, #148]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6413      	str	r3, [r2, #64]	; 0x40
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	69bb      	ldr	r3, [r7, #24]
}
 80036a2:	e034      	b.n	800370e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_TIM_Base_MspInit+0xd0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10c      	bne.n	80036c8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036ae:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]
}
 80036c6:	e022      	b.n	800370e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a16      	ldr	r2, [pc, #88]	; (8003728 <HAL_TIM_Base_MspInit+0xd4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10c      	bne.n	80036ec <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036d8:	f043 0308 	orr.w	r3, r3, #8
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]
}
 80036ea:	e010      	b.n	800370e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0e      	ldr	r2, [pc, #56]	; (800372c <HAL_TIM_Base_MspInit+0xd8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10b      	bne.n	800370e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	6453      	str	r3, [r2, #68]	; 0x44
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	bf00      	nop
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40010000 	.word	0x40010000
 8003720:	40023800 	.word	0x40023800
 8003724:	40000400 	.word	0x40000400
 8003728:	40000c00 	.word	0x40000c00
 800372c:	40010400 	.word	0x40010400

08003730 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_TIM_PWM_MspInit+0x38>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10b      	bne.n	800375a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003742:	4b0a      	ldr	r3, [pc, #40]	; (800376c <HAL_TIM_PWM_MspInit+0x3c>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_TIM_PWM_MspInit+0x3c>)
 8003748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374c:	6413      	str	r3, [r2, #64]	; 0x40
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_TIM_PWM_MspInit+0x3c>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40001800 	.word	0x40001800
 800376c:	40023800 	.word	0x40023800

08003770 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08c      	sub	sp, #48	; 0x30
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 031c 	add.w	r3, r7, #28
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a56      	ldr	r2, [pc, #344]	; (80038e8 <HAL_TIM_MspPostInit+0x178>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d11d      	bne.n	80037ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003792:	4b56      	ldr	r3, [pc, #344]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	4a55      	ldr	r2, [pc, #340]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6313      	str	r3, [r2, #48]	; 0x30
 800379e:	4b53      	ldr	r3, [pc, #332]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80037aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037bc:	2301      	movs	r3, #1
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80037c0:	f107 031c 	add.w	r3, r7, #28
 80037c4:	4619      	mov	r1, r3
 80037c6:	484a      	ldr	r0, [pc, #296]	; (80038f0 <HAL_TIM_MspPostInit+0x180>)
 80037c8:	f005 f9f8 	bl	8008bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80037cc:	e087      	b.n	80038de <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d6:	d11d      	bne.n	8003814 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d8:	4b44      	ldr	r3, [pc, #272]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	4a43      	ldr	r2, [pc, #268]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6313      	str	r3, [r2, #48]	; 0x30
 80037e4:	4b41      	ldr	r3, [pc, #260]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80037f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	2302      	movs	r3, #2
 80037f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fe:	2300      	movs	r3, #0
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003802:	2301      	movs	r3, #1
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003806:	f107 031c 	add.w	r3, r7, #28
 800380a:	4619      	mov	r1, r3
 800380c:	4838      	ldr	r0, [pc, #224]	; (80038f0 <HAL_TIM_MspPostInit+0x180>)
 800380e:	f005 f9d5 	bl	8008bbc <HAL_GPIO_Init>
}
 8003812:	e064      	b.n	80038de <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a36      	ldr	r2, [pc, #216]	; (80038f4 <HAL_TIM_MspPostInit+0x184>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d11c      	bne.n	8003858 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	4b33      	ldr	r3, [pc, #204]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4a32      	ldr	r2, [pc, #200]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 8003824:	f043 0302 	orr.w	r3, r3, #2
 8003828:	6313      	str	r3, [r2, #48]	; 0x30
 800382a:	4b30      	ldr	r3, [pc, #192]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003836:	2310      	movs	r3, #16
 8003838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003842:	2300      	movs	r3, #0
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003846:	2302      	movs	r3, #2
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800384a:	f107 031c 	add.w	r3, r7, #28
 800384e:	4619      	mov	r1, r3
 8003850:	4829      	ldr	r0, [pc, #164]	; (80038f8 <HAL_TIM_MspPostInit+0x188>)
 8003852:	f005 f9b3 	bl	8008bbc <HAL_GPIO_Init>
}
 8003856:	e042      	b.n	80038de <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a27      	ldr	r2, [pc, #156]	; (80038fc <HAL_TIM_MspPostInit+0x18c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d11c      	bne.n	800389c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003862:	4b22      	ldr	r3, [pc, #136]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a21      	ldr	r2, [pc, #132]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 8003868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800387a:	2301      	movs	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	2300      	movs	r3, #0
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800388a:	2302      	movs	r3, #2
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800388e:	f107 031c 	add.w	r3, r7, #28
 8003892:	4619      	mov	r1, r3
 8003894:	481a      	ldr	r0, [pc, #104]	; (8003900 <HAL_TIM_MspPostInit+0x190>)
 8003896:	f005 f991 	bl	8008bbc <HAL_GPIO_Init>
}
 800389a:	e020      	b.n	80038de <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_TIM_MspPostInit+0x194>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d11b      	bne.n	80038de <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a10      	ldr	r2, [pc, #64]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 80038ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_TIM_MspPostInit+0x17c>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80038be:	2340      	movs	r3, #64	; 0x40
 80038c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ca:	2300      	movs	r3, #0
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80038ce:	2309      	movs	r3, #9
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80038d2:	f107 031c 	add.w	r3, r7, #28
 80038d6:	4619      	mov	r1, r3
 80038d8:	480b      	ldr	r0, [pc, #44]	; (8003908 <HAL_TIM_MspPostInit+0x198>)
 80038da:	f005 f96f 	bl	8008bbc <HAL_GPIO_Init>
}
 80038de:	bf00      	nop
 80038e0:	3730      	adds	r7, #48	; 0x30
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40020000 	.word	0x40020000
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40020400 	.word	0x40020400
 80038fc:	40000c00 	.word	0x40000c00
 8003900:	40022000 	.word	0x40022000
 8003904:	40001800 	.word	0x40001800
 8003908:	40021c00 	.word	0x40021c00

0800390c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08c      	sub	sp, #48	; 0x30
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 031c 	add.w	r3, r7, #28
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a3c      	ldr	r2, [pc, #240]	; (8003a1c <HAL_UART_MspInit+0x110>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d145      	bne.n	80039ba <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800392e:	4b3c      	ldr	r3, [pc, #240]	; (8003a20 <HAL_UART_MspInit+0x114>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	4a3b      	ldr	r2, [pc, #236]	; (8003a20 <HAL_UART_MspInit+0x114>)
 8003934:	f043 0310 	orr.w	r3, r3, #16
 8003938:	6453      	str	r3, [r2, #68]	; 0x44
 800393a:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <HAL_UART_MspInit+0x114>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003946:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <HAL_UART_MspInit+0x114>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	4a35      	ldr	r2, [pc, #212]	; (8003a20 <HAL_UART_MspInit+0x114>)
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	6313      	str	r3, [r2, #48]	; 0x30
 8003952:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <HAL_UART_MspInit+0x114>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800395e:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_UART_MspInit+0x114>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	4a2f      	ldr	r2, [pc, #188]	; (8003a20 <HAL_UART_MspInit+0x114>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6313      	str	r3, [r2, #48]	; 0x30
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <HAL_UART_MspInit+0x114>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397a:	2302      	movs	r3, #2
 800397c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003982:	2300      	movs	r3, #0
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003986:	2307      	movs	r3, #7
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800398a:	f107 031c 	add.w	r3, r7, #28
 800398e:	4619      	mov	r1, r3
 8003990:	4824      	ldr	r0, [pc, #144]	; (8003a24 <HAL_UART_MspInit+0x118>)
 8003992:	f005 f913 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800399a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2302      	movs	r3, #2
 800399e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a4:	2300      	movs	r3, #0
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039a8:	2307      	movs	r3, #7
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80039ac:	f107 031c 	add.w	r3, r7, #28
 80039b0:	4619      	mov	r1, r3
 80039b2:	481d      	ldr	r0, [pc, #116]	; (8003a28 <HAL_UART_MspInit+0x11c>)
 80039b4:	f005 f902 	bl	8008bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80039b8:	e02c      	b.n	8003a14 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <HAL_UART_MspInit+0x120>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d127      	bne.n	8003a14 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039c4:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_UART_MspInit+0x114>)
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <HAL_UART_MspInit+0x114>)
 80039ca:	f043 0320 	orr.w	r3, r3, #32
 80039ce:	6453      	str	r3, [r2, #68]	; 0x44
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_UART_MspInit+0x114>)
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039dc:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_UART_MspInit+0x114>)
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	4a0f      	ldr	r2, [pc, #60]	; (8003a20 <HAL_UART_MspInit+0x114>)
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	6313      	str	r3, [r2, #48]	; 0x30
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_UART_MspInit+0x114>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80039f4:	23c0      	movs	r3, #192	; 0xc0
 80039f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a00:	2303      	movs	r3, #3
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a04:	2308      	movs	r3, #8
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a08:	f107 031c 	add.w	r3, r7, #28
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4808      	ldr	r0, [pc, #32]	; (8003a30 <HAL_UART_MspInit+0x124>)
 8003a10:	f005 f8d4 	bl	8008bbc <HAL_GPIO_Init>
}
 8003a14:	bf00      	nop
 8003a16:	3730      	adds	r7, #48	; 0x30
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40011000 	.word	0x40011000
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40020400 	.word	0x40020400
 8003a28:	40020000 	.word	0x40020000
 8003a2c:	40011400 	.word	0x40011400
 8003a30:	40020800 	.word	0x40020800

08003a34 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003a48:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <HAL_FMC_MspInit+0x10c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d173      	bne.n	8003b38 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_FMC_MspInit+0x10c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <HAL_FMC_MspInit+0x110>)
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	4a3a      	ldr	r2, [pc, #232]	; (8003b44 <HAL_FMC_MspInit+0x110>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6393      	str	r3, [r2, #56]	; 0x38
 8003a62:	4b38      	ldr	r3, [pc, #224]	; (8003b44 <HAL_FMC_MspInit+0x110>)
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003a6e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003a72:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a80:	230c      	movs	r3, #12
 8003a82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	482f      	ldr	r0, [pc, #188]	; (8003b48 <HAL_FMC_MspInit+0x114>)
 8003a8a:	f005 f897 	bl	8008bbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003a8e:	f248 1333 	movw	r3, #33075	; 0x8133
 8003a92:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4828      	ldr	r0, [pc, #160]	; (8003b4c <HAL_FMC_MspInit+0x118>)
 8003aaa:	f005 f887 	bl	8008bbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003aae:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003ab2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003abc:	2303      	movs	r3, #3
 8003abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ac0:	230c      	movs	r3, #12
 8003ac2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4821      	ldr	r0, [pc, #132]	; (8003b50 <HAL_FMC_MspInit+0x11c>)
 8003aca:	f005 f877 	bl	8008bbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003ace:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003ad2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003adc:	2303      	movs	r3, #3
 8003ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ae0:	230c      	movs	r3, #12
 8003ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	481a      	ldr	r0, [pc, #104]	; (8003b54 <HAL_FMC_MspInit+0x120>)
 8003aea:	f005 f867 	bl	8008bbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003aee:	2328      	movs	r3, #40	; 0x28
 8003af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afa:	2303      	movs	r3, #3
 8003afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003afe:	230c      	movs	r3, #12
 8003b00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4814      	ldr	r0, [pc, #80]	; (8003b58 <HAL_FMC_MspInit+0x124>)
 8003b08:	f005 f858 	bl	8008bbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	4619      	mov	r1, r3
 8003b24:	480d      	ldr	r0, [pc, #52]	; (8003b5c <HAL_FMC_MspInit+0x128>)
 8003b26:	f005 f849 	bl	8008bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <HAL_FMC_MspInit+0x12c>)
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <HAL_FMC_MspInit+0x130>)
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_FMC_MspInit+0x130>)
 8003b32:	4a0b      	ldr	r2, [pc, #44]	; (8003b60 <HAL_FMC_MspInit+0x12c>)
 8003b34:	639a      	str	r2, [r3, #56]	; 0x38
 8003b36:	e000      	b.n	8003b3a <HAL_FMC_MspInit+0x106>
    return;
 8003b38:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000358 	.word	0x20000358
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40021800 	.word	0x40021800
 8003b50:	40020c00 	.word	0x40020c00
 8003b54:	40021400 	.word	0x40021400
 8003b58:	40021c00 	.word	0x40021c00
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	2000a7f8 	.word	0x2000a7f8
 8003b64:	2000a040 	.word	0x2000a040

08003b68 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003b70:	f7ff ff60 	bl	8003a34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a6f      	ldr	r2, [pc, #444]	; (8003d48 <HAL_SAI_MspInit+0x1cc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d175      	bne.n	8003c7a <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003b8e:	4b6f      	ldr	r3, [pc, #444]	; (8003d4c <HAL_SAI_MspInit+0x1d0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003b96:	4b6e      	ldr	r3, [pc, #440]	; (8003d50 <HAL_SAI_MspInit+0x1d4>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	4a6d      	ldr	r2, [pc, #436]	; (8003d50 <HAL_SAI_MspInit+0x1d4>)
 8003b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba2:	4b6b      	ldr	r3, [pc, #428]	; (8003d50 <HAL_SAI_MspInit+0x1d4>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003bae:	4b67      	ldr	r3, [pc, #412]	; (8003d4c <HAL_SAI_MspInit+0x1d0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	4a65      	ldr	r2, [pc, #404]	; (8003d4c <HAL_SAI_MspInit+0x1d0>)
 8003bb6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8003bb8:	2310      	movs	r3, #16
 8003bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003bc8:	230a      	movs	r3, #10
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003bcc:	f107 0314 	add.w	r3, r7, #20
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4860      	ldr	r0, [pc, #384]	; (8003d54 <HAL_SAI_MspInit+0x1d8>)
 8003bd4:	f004 fff2 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003bd8:	23e0      	movs	r3, #224	; 0xe0
 8003bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003be4:	2302      	movs	r3, #2
 8003be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003be8:	230a      	movs	r3, #10
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4858      	ldr	r0, [pc, #352]	; (8003d54 <HAL_SAI_MspInit+0x1d8>)
 8003bf4:	f004 ffe2 	bl	8008bbc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003bf8:	4b57      	ldr	r3, [pc, #348]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003bfa:	4a58      	ldr	r2, [pc, #352]	; (8003d5c <HAL_SAI_MspInit+0x1e0>)
 8003bfc:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003bfe:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c00:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003c04:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c06:	4b54      	ldr	r3, [pc, #336]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c08:	2240      	movs	r2, #64	; 0x40
 8003c0a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c0c:	4b52      	ldr	r3, [pc, #328]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003c12:	4b51      	ldr	r3, [pc, #324]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c18:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c1a:	4b4f      	ldr	r3, [pc, #316]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c20:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c22:	4b4d      	ldr	r3, [pc, #308]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c28:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c30:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003c32:	4b49      	ldr	r3, [pc, #292]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c38:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003c3a:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003c40:	4b45      	ldr	r3, [pc, #276]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c42:	2203      	movs	r2, #3
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003c46:	4b44      	ldr	r3, [pc, #272]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003c4c:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003c52:	4841      	ldr	r0, [pc, #260]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c54:	f004 f800 	bl	8007c58 <HAL_DMA_Init>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8003c5e:	f7ff f865 	bl	8002d2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a3c      	ldr	r2, [pc, #240]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c66:	671a      	str	r2, [r3, #112]	; 0x70
 8003c68:	4a3b      	ldr	r2, [pc, #236]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a39      	ldr	r2, [pc, #228]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c72:	66da      	str	r2, [r3, #108]	; 0x6c
 8003c74:	4a38      	ldr	r2, [pc, #224]	; (8003d58 <HAL_SAI_MspInit+0x1dc>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a38      	ldr	r2, [pc, #224]	; (8003d60 <HAL_SAI_MspInit+0x1e4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d15c      	bne.n	8003d3e <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003c84:	4b31      	ldr	r3, [pc, #196]	; (8003d4c <HAL_SAI_MspInit+0x1d0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003c8c:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <HAL_SAI_MspInit+0x1d4>)
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	4a2f      	ldr	r2, [pc, #188]	; (8003d50 <HAL_SAI_MspInit+0x1d4>)
 8003c92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c96:	6453      	str	r3, [r2, #68]	; 0x44
 8003c98:	4b2d      	ldr	r3, [pc, #180]	; (8003d50 <HAL_SAI_MspInit+0x1d4>)
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003ca4:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <HAL_SAI_MspInit+0x1d0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	4a28      	ldr	r2, [pc, #160]	; (8003d4c <HAL_SAI_MspInit+0x1d0>)
 8003cac:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003cc0:	230a      	movs	r3, #10
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003cc4:	f107 0314 	add.w	r3, r7, #20
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4826      	ldr	r0, [pc, #152]	; (8003d64 <HAL_SAI_MspInit+0x1e8>)
 8003ccc:	f004 ff76 	bl	8008bbc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003cd2:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <HAL_SAI_MspInit+0x1f0>)
 8003cd4:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cdc:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ce2:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cee:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003cf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf6:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cfe:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d06:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003d08:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003d0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d0e:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d10:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003d16:	4814      	ldr	r0, [pc, #80]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003d18:	f003 ff9e 	bl	8007c58 <HAL_DMA_Init>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003d22:	f7ff f803 	bl	8002d2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003d2a:	671a      	str	r2, [r3, #112]	; 0x70
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003d36:	66da      	str	r2, [r3, #108]	; 0x6c
 8003d38:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <HAL_SAI_MspInit+0x1ec>)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003d3e:	bf00      	nop
 8003d40:	3728      	adds	r7, #40	; 0x28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40015c04 	.word	0x40015c04
 8003d4c:	2000035c 	.word	0x2000035c
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40022000 	.word	0x40022000
 8003d58:	2000a63c 	.word	0x2000a63c
 8003d5c:	40026470 	.word	0x40026470
 8003d60:	40015c24 	.word	0x40015c24
 8003d64:	40021800 	.word	0x40021800
 8003d68:	2000a0ec 	.word	0x2000a0ec
 8003d6c:	400264b8 	.word	0x400264b8

08003d70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	; 0x30
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003d80:	2200      	movs	r2, #0
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	2036      	movs	r0, #54	; 0x36
 8003d86:	f003 fc7f 	bl	8007688 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d8a:	2036      	movs	r0, #54	; 0x36
 8003d8c:	f003 fc98 	bl	80076c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d90:	4b1f      	ldr	r3, [pc, #124]	; (8003e10 <HAL_InitTick+0xa0>)
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <HAL_InitTick+0xa0>)
 8003d96:	f043 0310 	orr.w	r3, r3, #16
 8003d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <HAL_InitTick+0xa0>)
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003da8:	f107 0210 	add.w	r2, r7, #16
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f009 fcac 	bl	800d710 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003db8:	f009 fc82 	bl	800d6c0 <HAL_RCC_GetPCLK1Freq>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <HAL_InitTick+0xa4>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <HAL_InitTick+0xa8>)
 8003dd2:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <HAL_InitTick+0xac>)
 8003dd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_InitTick+0xa8>)
 8003dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ddc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003dde:	4a0e      	ldr	r2, [pc, #56]	; (8003e18 <HAL_InitTick+0xa8>)
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <HAL_InitTick+0xa8>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_InitTick+0xa8>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003df0:	4809      	ldr	r0, [pc, #36]	; (8003e18 <HAL_InitTick+0xa8>)
 8003df2:	f00c fb1d 	bl	8010430 <HAL_TIM_Base_Init>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d104      	bne.n	8003e06 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003dfc:	4806      	ldr	r0, [pc, #24]	; (8003e18 <HAL_InitTick+0xa8>)
 8003dfe:	f00c fb6f 	bl	80104e0 <HAL_TIM_Base_Start_IT>
 8003e02:	4603      	mov	r3, r0
 8003e04:	e000      	b.n	8003e08 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3730      	adds	r7, #48	; 0x30
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40023800 	.word	0x40023800
 8003e14:	431bde83 	.word	0x431bde83
 8003e18:	2000a878 	.word	0x2000a878
 8003e1c:	40001000 	.word	0x40001000

08003e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e24:	e7fe      	b.n	8003e24 <NMI_Handler+0x4>

08003e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e2a:	e7fe      	b.n	8003e2a <HardFault_Handler+0x4>

08003e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e30:	e7fe      	b.n	8003e30 <MemManage_Handler+0x4>

08003e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <BusFault_Handler+0x4>

08003e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e3c:	e7fe      	b.n	8003e3c <UsageFault_Handler+0x4>

08003e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003e50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e54:	f005 f9b6 	bl	80091c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e60:	4802      	ldr	r0, [pc, #8]	; (8003e6c <TIM6_DAC_IRQHandler+0x10>)
 8003e62:	f00c fc0c 	bl	801067e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	2000a878 	.word	0x2000a878

08003e70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003e74:	4802      	ldr	r0, [pc, #8]	; (8003e80 <DMA2_Stream0_IRQHandler+0x10>)
 8003e76:	f004 f88f 	bl	8007f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	2000a040 	.word	0x2000a040

08003e84 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003e88:	4802      	ldr	r0, [pc, #8]	; (8003e94 <DMA2_Stream1_IRQHandler+0x10>)
 8003e8a:	f004 f885 	bl	8007f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	2000a28c 	.word	0x2000a28c

08003e98 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003e9c:	4802      	ldr	r0, [pc, #8]	; (8003ea8 <DMA2_Stream4_IRQHandler+0x10>)
 8003e9e:	f004 f87b 	bl	8007f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	2000a63c 	.word	0x2000a63c

08003eac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003eb0:	4802      	ldr	r0, [pc, #8]	; (8003ebc <OTG_FS_IRQHandler+0x10>)
 8003eb2:	f005 fc15 	bl	80096e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	2004ad1c 	.word	0x2004ad1c

08003ec0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003ec4:	4802      	ldr	r0, [pc, #8]	; (8003ed0 <DMA2_Stream7_IRQHandler+0x10>)
 8003ec6:	f004 f867 	bl	8007f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	2000a0ec 	.word	0x2000a0ec

08003ed4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003ed8:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <DCMI_IRQHandler+0x10>)
 8003eda:	f003 fded 	bl	8007ab8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	2000a4fc 	.word	0x2000a4fc

08003ee8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003eec:	4802      	ldr	r0, [pc, #8]	; (8003ef8 <DMA2D_IRQHandler+0x10>)
 8003eee:	f004 fc27 	bl	8008740 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	2000a720 	.word	0x2000a720

08003efc <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003f00:	4802      	ldr	r0, [pc, #8]	; (8003f0c <QUADSPI_IRQHandler+0x10>)
 8003f02:	f008 f843 	bl	800bf8c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000a82c 	.word	0x2000a82c

08003f10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e00a      	b.n	8003f38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f22:	f3af 8000 	nop.w
 8003f26:	4601      	mov	r1, r0
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	60ba      	str	r2, [r7, #8]
 8003f2e:	b2ca      	uxtb	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	3301      	adds	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	dbf0      	blt.n	8003f22 <_read+0x12>
	}

return len;
 8003f40:	687b      	ldr	r3, [r7, #4]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e009      	b.n	8003f70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	60ba      	str	r2, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fc75 	bl	8004854 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	dbf1      	blt.n	8003f5c <_write+0x12>
	}
	return len;
 8003f78:	687b      	ldr	r3, [r7, #4]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_close>:

int _close(int file)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
	return -1;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003faa:	605a      	str	r2, [r3, #4]
	return 0;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <_isatty>:

int _isatty(int file)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8003fc2:	2301      	movs	r3, #1
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
	return 0;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ff4:	4a14      	ldr	r2, [pc, #80]	; (8004048 <_sbrk+0x5c>)
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <_sbrk+0x60>)
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004000:	4b13      	ldr	r3, [pc, #76]	; (8004050 <_sbrk+0x64>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d102      	bne.n	800400e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004008:	4b11      	ldr	r3, [pc, #68]	; (8004050 <_sbrk+0x64>)
 800400a:	4a12      	ldr	r2, [pc, #72]	; (8004054 <_sbrk+0x68>)
 800400c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <_sbrk+0x64>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	429a      	cmp	r2, r3
 800401a:	d207      	bcs.n	800402c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800401c:	f016 fb0c 	bl	801a638 <__errno>
 8004020:	4603      	mov	r3, r0
 8004022:	220c      	movs	r2, #12
 8004024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800402a:	e009      	b.n	8004040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <_sbrk+0x64>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004032:	4b07      	ldr	r3, [pc, #28]	; (8004050 <_sbrk+0x64>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	4a05      	ldr	r2, [pc, #20]	; (8004050 <_sbrk+0x64>)
 800403c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800403e:	68fb      	ldr	r3, [r7, #12]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20050000 	.word	0x20050000
 800404c:	00000400 	.word	0x00000400
 8004050:	20000360 	.word	0x20000360
 8004054:	2004b030 	.word	0x2004b030

08004058 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <SystemInit+0x20>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	4a05      	ldr	r2, [pc, #20]	; (8004078 <SystemInit+0x20>)
 8004064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <uiDisplayBasic>:
int time = 0;

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8004082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004086:	f000 fdd3 	bl	8004c30 <LCD_Clear>

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 800408a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800408e:	f000 fd31 	bl	8004af4 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004096:	f000 fd5d 	bl	8004b54 <LCD_SetBackColor>
	LCD_SetFont(&Font16);
 800409a:	4835      	ldr	r0, [pc, #212]	; (8004170 <uiDisplayBasic+0xf4>)
 800409c:	f000 fd72 	bl	8004b84 <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 80040a0:	2301      	movs	r3, #1
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	2301      	movs	r3, #1
 80040a6:	4a33      	ldr	r2, [pc, #204]	; (8004174 <uiDisplayBasic+0xf8>)
 80040a8:	2100      	movs	r1, #0
 80040aa:	2000      	movs	r0, #0
 80040ac:	f000 fe08 	bl	8004cc0 <LCD_DrawString>

	/* delay range */
	LCD_DrawRect(60,20,360,30);
 80040b0:	231e      	movs	r3, #30
 80040b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80040b6:	2114      	movs	r1, #20
 80040b8:	203c      	movs	r0, #60	; 0x3c
 80040ba:	f000 fe97 	bl	8004dec <LCD_DrawRect>
	/* feedback range */
	LCD_DrawRect(60,80,360,30);
 80040be:	231e      	movs	r3, #30
 80040c0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80040c4:	2150      	movs	r1, #80	; 0x50
 80040c6:	203c      	movs	r0, #60	; 0x3c
 80040c8:	f000 fe90 	bl	8004dec <LCD_DrawRect>
	/* volume range */
	LCD_DrawRect(435,36,30,200);
 80040cc:	23c8      	movs	r3, #200	; 0xc8
 80040ce:	221e      	movs	r2, #30
 80040d0:	2124      	movs	r1, #36	; 0x24
 80040d2:	f240 10b3 	movw	r0, #435	; 0x1b3
 80040d6:	f000 fe89 	bl	8004dec <LCD_DrawRect>
	/* Init Vol, Delay, Feed */
	LCD_SetFont(&Font12);
 80040da:	4827      	ldr	r0, [pc, #156]	; (8004178 <uiDisplayBasic+0xfc>)
 80040dc:	f000 fd52 	bl	8004b84 <LCD_SetFont>
	LCD_DrawString(428,15,(uint8_t *) "Volume", LEFT_MODE, true);
 80040e0:	2301      	movs	r3, #1
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2303      	movs	r3, #3
 80040e6:	4a25      	ldr	r2, [pc, #148]	; (800417c <uiDisplayBasic+0x100>)
 80040e8:	210f      	movs	r1, #15
 80040ea:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 80040ee:	f000 fde7 	bl	8004cc0 <LCD_DrawString>
	LCD_DrawString(440,245,(uint8_t *) "50 ", LEFT_MODE, true);
 80040f2:	2301      	movs	r3, #1
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2303      	movs	r3, #3
 80040f8:	4a21      	ldr	r2, [pc, #132]	; (8004180 <uiDisplayBasic+0x104>)
 80040fa:	21f5      	movs	r1, #245	; 0xf5
 80040fc:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004100:	f000 fdde 	bl	8004cc0 <LCD_DrawString>
	LCD_SetFillColor(LCD_COLOR_RED);
 8004104:	481f      	ldr	r0, [pc, #124]	; (8004184 <uiDisplayBasic+0x108>)
 8004106:	f000 fd0d 	bl	8004b24 <LCD_SetFillColor>
	LCD_FillRect(436,100+36,29,200-100);
 800410a:	2364      	movs	r3, #100	; 0x64
 800410c:	221d      	movs	r2, #29
 800410e:	2188      	movs	r1, #136	; 0x88
 8004110:	f44f 70da 	mov.w	r0, #436	; 0x1b4
 8004114:	f000 fedc 	bl	8004ed0 <LCD_FillRect>

	LCD_DrawString(LCD_SCREEN_WIDTH/2,60,(uint8_t *) "0 ms  ", LEFT_MODE, true);
 8004118:	2301      	movs	r3, #1
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2303      	movs	r3, #3
 800411e:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <uiDisplayBasic+0x10c>)
 8004120:	213c      	movs	r1, #60	; 0x3c
 8004122:	20f0      	movs	r0, #240	; 0xf0
 8004124:	f000 fdcc 	bl	8004cc0 <LCD_DrawString>
	LCD_DrawString(200,60,(uint8_t *) "Delay", LEFT_MODE, true);
 8004128:	2301      	movs	r3, #1
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2303      	movs	r3, #3
 800412e:	4a17      	ldr	r2, [pc, #92]	; (800418c <uiDisplayBasic+0x110>)
 8004130:	213c      	movs	r1, #60	; 0x3c
 8004132:	20c8      	movs	r0, #200	; 0xc8
 8004134:	f000 fdc4 	bl	8004cc0 <LCD_DrawString>
	LCD_DrawString(LCD_SCREEN_WIDTH/2,120,(uint8_t *) "0 %  ", LEFT_MODE, true);
 8004138:	2301      	movs	r3, #1
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2303      	movs	r3, #3
 800413e:	4a14      	ldr	r2, [pc, #80]	; (8004190 <uiDisplayBasic+0x114>)
 8004140:	2178      	movs	r1, #120	; 0x78
 8004142:	20f0      	movs	r0, #240	; 0xf0
 8004144:	f000 fdbc 	bl	8004cc0 <LCD_DrawString>
	LCD_DrawString(180,120,(uint8_t *) "Feedback", LEFT_MODE, true);
 8004148:	2301      	movs	r3, #1
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	2303      	movs	r3, #3
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <uiDisplayBasic+0x118>)
 8004150:	2178      	movs	r1, #120	; 0x78
 8004152:	20b4      	movs	r0, #180	; 0xb4
 8004154:	f000 fdb4 	bl	8004cc0 <LCD_DrawString>

	LCD_DrawString(10,5,(uint8_t *) "Input", LEFT_MODE, true);
 8004158:	2301      	movs	r3, #1
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2303      	movs	r3, #3
 800415e:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <uiDisplayBasic+0x11c>)
 8004160:	2105      	movs	r1, #5
 8004162:	200a      	movs	r0, #10
 8004164:	f000 fdac 	bl	8004cc0 <LCD_DrawString>
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000020 	.word	0x20000020
 8004174:	0801c0dc 	.word	0x0801c0dc
 8004178:	20000018 	.word	0x20000018
 800417c:	0801c0f4 	.word	0x0801c0f4
 8004180:	0801c0fc 	.word	0x0801c0fc
 8004184:	ffff0000 	.word	0xffff0000
 8004188:	0801c100 	.word	0x0801c100
 800418c:	0801c108 	.word	0x0801c108
 8004190:	0801c110 	.word	0x0801c110
 8004194:	0801c118 	.word	0x0801c118
 8004198:	0801c124 	.word	0x0801c124

0800419c <printDelay>:

/*
 * Display All Params
 */
static void printDelay(uint32_t x){
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	6078      	str	r0, [r7, #4]
	char delay_char[10];
	sprintf(delay_char, "%lu ms  ",x);
 80041a4:	f107 0308 	add.w	r3, r7, #8
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	490a      	ldr	r1, [pc, #40]	; (80041d4 <printDelay+0x38>)
 80041ac:	4618      	mov	r0, r3
 80041ae:	f016 fbf1 	bl	801a994 <siprintf>
	uint16_t X = LCD_SCREEN_WIDTH/2;
 80041b2:	23f0      	movs	r3, #240	; 0xf0
 80041b4:	82fb      	strh	r3, [r7, #22]
	uint16_t Y = 60;
 80041b6:	233c      	movs	r3, #60	; 0x3c
 80041b8:	82bb      	strh	r3, [r7, #20]
	LCD_DrawString(X,Y,(uint8_t *)delay_char, LEFT_MODE, true);
 80041ba:	f107 0208 	add.w	r2, r7, #8
 80041be:	8ab9      	ldrh	r1, [r7, #20]
 80041c0:	8af8      	ldrh	r0, [r7, #22]
 80041c2:	2301      	movs	r3, #1
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	2303      	movs	r3, #3
 80041c8:	f000 fd7a 	bl	8004cc0 <LCD_DrawString>
}
 80041cc:	bf00      	nop
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	0801c12c 	.word	0x0801c12c

080041d8 <printFeedback>:

static void printFeedback(uint32_t x){
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af02      	add	r7, sp, #8
 80041de:	6078      	str	r0, [r7, #4]
	char feedback_char[10];
	sprintf(feedback_char, "%lu %% ",x);
 80041e0:	f107 0308 	add.w	r3, r7, #8
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	490a      	ldr	r1, [pc, #40]	; (8004210 <printFeedback+0x38>)
 80041e8:	4618      	mov	r0, r3
 80041ea:	f016 fbd3 	bl	801a994 <siprintf>
	uint16_t X = LCD_SCREEN_WIDTH/2;
 80041ee:	23f0      	movs	r3, #240	; 0xf0
 80041f0:	82fb      	strh	r3, [r7, #22]
	uint16_t Y = 120;
 80041f2:	2378      	movs	r3, #120	; 0x78
 80041f4:	82bb      	strh	r3, [r7, #20]
	LCD_DrawString(X,Y,(uint8_t *)feedback_char, LEFT_MODE, true);
 80041f6:	f107 0208 	add.w	r2, r7, #8
 80041fa:	8ab9      	ldrh	r1, [r7, #20]
 80041fc:	8af8      	ldrh	r0, [r7, #22]
 80041fe:	2301      	movs	r3, #1
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2303      	movs	r3, #3
 8004204:	f000 fd5c 	bl	8004cc0 <LCD_DrawString>
}
 8004208:	bf00      	nop
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	0801c138 	.word	0x0801c138

08004214 <printVolume>:

static void printVolume(uint32_t v){
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af02      	add	r7, sp, #8
 800421a:	6078      	str	r0, [r7, #4]
	char volume_char[10];
	sprintf(volume_char, "%lu  ",v);
 800421c:	f107 0308 	add.w	r3, r7, #8
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	490b      	ldr	r1, [pc, #44]	; (8004250 <printVolume+0x3c>)
 8004224:	4618      	mov	r0, r3
 8004226:	f016 fbb5 	bl	801a994 <siprintf>
	uint16_t X = 440;
 800422a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800422e:	82fb      	strh	r3, [r7, #22]
	uint16_t Y = 245;
 8004230:	23f5      	movs	r3, #245	; 0xf5
 8004232:	82bb      	strh	r3, [r7, #20]
	LCD_DrawString(X,Y,(uint8_t *)volume_char, LEFT_MODE, true);
 8004234:	f107 0208 	add.w	r2, r7, #8
 8004238:	8ab9      	ldrh	r1, [r7, #20]
 800423a:	8af8      	ldrh	r0, [r7, #22]
 800423c:	2301      	movs	r3, #1
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2303      	movs	r3, #3
 8004242:	f000 fd3d 	bl	8004cc0 <LCD_DrawString>
}
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	0801c140 	.word	0x0801c140

08004254 <uiSliderDelay>:

/*
 * Range for delay value
 */
void uiSliderDelay(){
 8004254:	b580      	push	{r7, lr}
 8004256:	b090      	sub	sp, #64	; 0x40
 8004258:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 800425a:	463b      	mov	r3, r7
 800425c:	4618      	mov	r0, r3
 800425e:	f001 f9df 	bl	8005620 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004262:	783b      	ldrb	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d05b      	beq.n	8004320 <uiSliderDelay+0xcc>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004268:	887b      	ldrh	r3, [r7, #2]
 800426a:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 800426c:	89bb      	ldrh	r3, [r7, #12]
 800426e:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 60;
 8004270:	233c      	movs	r3, #60	; 0x3c
 8004272:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 20;
 8004274:	2314      	movs	r3, #20
 8004276:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 360;
 8004278:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800427c:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 30;
 800427e:	231e      	movs	r3, #30
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004282:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004286:	429a      	cmp	r2, r3
 8004288:	da4a      	bge.n	8004320 <uiSliderDelay+0xcc>
 800428a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800428c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	440b      	add	r3, r1
 8004292:	429a      	cmp	r2, r3
 8004294:	da44      	bge.n	8004320 <uiSliderDelay+0xcc>
 8004296:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800429a:	429a      	cmp	r2, r3
 800429c:	da40      	bge.n	8004320 <uiSliderDelay+0xcc>
 800429e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80042a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	440b      	add	r3, r1
 80042a6:	429a      	cmp	r2, r3
 80042a8:	da3a      	bge.n	8004320 <uiSliderDelay+0xcc>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 80042aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	1ad2      	subs	r2, r2, r3
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <uiSliderDelay+0xd4>)
 80042b8:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <uiSliderDelay+0xd4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff ff6c 	bl	800419c <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 80042c4:	4819      	ldr	r0, [pc, #100]	; (800432c <uiSliderDelay+0xd8>)
 80042c6:	f000 fc2d 	bl	8004b24 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3301      	adds	r3, #1
 80042d0:	b298      	uxth	r0, r3
 80042d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3301      	adds	r3, #1
 80042d8:	b299      	uxth	r1, r3
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	b29b      	uxth	r3, r3
 80042de:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f000 fdf0 	bl	8004ed0 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042f4:	f000 fc16 	bl	8004b24 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3301      	adds	r3, #1
 80042fe:	b299      	uxth	r1, r3
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	b29a      	uxth	r2, r3
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	b29b      	uxth	r3, r3
 8004308:	4413      	add	r3, r2
 800430a:	b29a      	uxth	r2, r3
 800430c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	b29a      	uxth	r2, r3
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29b      	uxth	r3, r3
 800431a:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 800431c:	f000 fdd8 	bl	8004ed0 <LCD_FillRect>
				}
	}
}
 8004320:	bf00      	nop
 8004322:	3740      	adds	r7, #64	; 0x40
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000364 	.word	0x20000364
 800432c:	ffff0000 	.word	0xffff0000

08004330 <uiSliderFeed>:

/*
 * Range for feedback value
 */
void uiSliderFeed(){
 8004330:	b580      	push	{r7, lr}
 8004332:	b090      	sub	sp, #64	; 0x40
 8004334:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004336:	463b      	mov	r3, r7
 8004338:	4618      	mov	r0, r3
 800433a:	f001 f971 	bl	8005620 <TS_GetState>

	if(TS_State.touchDetected){
 800433e:	783b      	ldrb	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d06d      	beq.n	8004420 <uiSliderFeed+0xf0>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004344:	887b      	ldrh	r3, [r7, #2]
 8004346:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004348:	89bb      	ldrh	r3, [r7, #12]
 800434a:	87bb      	strh	r3, [r7, #60]	; 0x3c

				int x = 60;
 800434c:	233c      	movs	r3, #60	; 0x3c
 800434e:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 80;
 8004350:	2350      	movs	r3, #80	; 0x50
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 360;
 8004354:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004358:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 30;
 800435a:	231e      	movs	r3, #30
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c

				if(xt>x && xt<x+w && yt>y && yt<y+h){
 800435e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004362:	429a      	cmp	r2, r3
 8004364:	da5c      	bge.n	8004420 <uiSliderFeed+0xf0>
 8004366:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004368:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	440b      	add	r3, r1
 800436e:	429a      	cmp	r2, r3
 8004370:	da56      	bge.n	8004420 <uiSliderFeed+0xf0>
 8004372:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004376:	429a      	cmp	r2, r3
 8004378:	da52      	bge.n	8004420 <uiSliderFeed+0xf0>
 800437a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800437c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	440b      	add	r3, r1
 8004382:	429a      	cmp	r2, r3
 8004384:	da4c      	bge.n	8004420 <uiSliderFeed+0xf0>
					/*Convert in feedback value {0:50}% */
					delayFeed=(uint32_t)(((float)(xt-x)/7.2));
 8004386:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	ee07 3a90 	vmov	s15, r3
 8004390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004394:	ee17 0a90 	vmov	r0, s15
 8004398:	f7fc f94e 	bl	8000638 <__aeabi_f2d>
 800439c:	a324      	add	r3, pc, #144	; (adr r3, 8004430 <uiSliderFeed+0x100>)
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f7fc facb 	bl	800093c <__aeabi_ddiv>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4610      	mov	r0, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	f7fc fc73 	bl	8000c98 <__aeabi_d2uiz>
 80043b2:	4603      	mov	r3, r0
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <uiSliderFeed+0xf8>)
 80043b8:	601a      	str	r2, [r3, #0]

					/* Display new feedback value */
					printFeedback(delayFeed);
 80043ba:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <uiSliderFeed+0xf8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff ff0a 	bl	80041d8 <printFeedback>
					/* RED Bar for level */
					LCD_SetFillColor(LCD_COLOR_RED);
 80043c4:	4819      	ldr	r0, [pc, #100]	; (800442c <uiSliderFeed+0xfc>)
 80043c6:	f000 fbad 	bl	8004b24 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	b298      	uxth	r0, r3
 80043d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3301      	adds	r3, #1
 80043d8:	b299      	uxth	r1, r3
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	b29b      	uxth	r3, r3
 80043de:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f000 fd70 	bl	8004ed0 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043f4:	f000 fb96 	bl	8004b24 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 80043f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3301      	adds	r3, #1
 80043fe:	b299      	uxth	r1, r3
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	b29a      	uxth	r2, r3
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	b29b      	uxth	r3, r3
 8004408:	4413      	add	r3, r2
 800440a:	b29a      	uxth	r2, r3
 800440c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	b29a      	uxth	r2, r3
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29b      	uxth	r3, r3
 800441a:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 800441c:	f000 fd58 	bl	8004ed0 <LCD_FillRect>
				}
	}
}
 8004420:	bf00      	nop
 8004422:	3740      	adds	r7, #64	; 0x40
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000368 	.word	0x20000368
 800442c:	ffff0000 	.word	0xffff0000
 8004430:	cccccccd 	.word	0xcccccccd
 8004434:	401ccccc 	.word	0x401ccccc

08004438 <uiSliderVolume>:
/*
 * Range for volume value
 */
void uiSliderVolume(){
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b091      	sub	sp, #68	; 0x44
 800443c:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 800443e:	463b      	mov	r3, r7
 8004440:	4618      	mov	r0, r3
 8004442:	f001 f8ed 	bl	8005620 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004446:	783b      	ldrb	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d062      	beq.n	8004512 <uiSliderVolume+0xda>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 800444c:	887b      	ldrh	r3, [r7, #2]
 800444e:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004450:	89bb      	ldrh	r3, [r7, #12]
 8004452:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 435;
 8004454:	f240 13b3 	movw	r3, #435	; 0x1b3
 8004458:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 36;
 800445a:	2324      	movs	r3, #36	; 0x24
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 30;
 800445e:	231e      	movs	r3, #30
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 200;
 8004462:	23c8      	movs	r3, #200	; 0xc8
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the volume bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004466:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800446a:	429a      	cmp	r2, r3
 800446c:	da51      	bge.n	8004512 <uiSliderVolume+0xda>
 800446e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	440b      	add	r3, r1
 8004476:	429a      	cmp	r2, r3
 8004478:	da4b      	bge.n	8004512 <uiSliderVolume+0xda>
 800447a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800447c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800447e:	429a      	cmp	r2, r3
 8004480:	da47      	bge.n	8004512 <uiSliderVolume+0xda>
 8004482:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	440b      	add	r3, r1
 800448a:	429a      	cmp	r2, r3
 800448c:	da41      	bge.n	8004512 <uiSliderVolume+0xda>
					/* Position yt into volume value in % */
					volume = 100-((yt-y))/2;
 800448e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	da00      	bge.n	800449a <uiSliderVolume+0x62>
 8004498:	3301      	adds	r3, #1
 800449a:	105b      	asrs	r3, r3, #1
 800449c:	425b      	negs	r3, r3
 800449e:	3364      	adds	r3, #100	; 0x64
 80044a0:	4a1e      	ldr	r2, [pc, #120]	; (800451c <uiSliderVolume+0xe4>)
 80044a2:	6013      	str	r3, [r2, #0]
					/* Display new volume value */
					printVolume((uint32_t) volume);
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <uiSliderVolume+0xe4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff feb3 	bl	8004214 <printVolume>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 80044ae:	481c      	ldr	r0, [pc, #112]	; (8004520 <uiSliderVolume+0xe8>)
 80044b0:	f000 fb38 	bl	8004b24 <LCD_SetFillColor>
					LCD_FillRect(x+1,yt,w-1,h-yt+y);
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3301      	adds	r3, #1
 80044ba:	b298      	uxth	r0, r3
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29c      	uxth	r4, r3
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80044d8:	4622      	mov	r2, r4
 80044da:	f000 fcf9 	bl	8004ed0 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 80044de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044e2:	f000 fb1f 	bl	8004b24 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,w-1,yt-y-1);
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3301      	adds	r3, #1
 80044ec:	b298      	uxth	r0, r3
 80044ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	b299      	uxth	r1, r3
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29c      	uxth	r4, r3
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004500:	b29b      	uxth	r3, r3
 8004502:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29b      	uxth	r3, r3
 800450c:	4622      	mov	r2, r4
 800450e:	f000 fcdf 	bl	8004ed0 <LCD_FillRect>
				}
	}
}
 8004512:	bf00      	nop
 8004514:	3744      	adds	r7, #68	; 0x44
 8004516:	46bd      	mov	sp, r7
 8004518:	bd90      	pop	{r4, r7, pc}
 800451a:	bf00      	nop
 800451c:	2000000c 	.word	0x2000000c
 8004520:	ffff0000 	.word	0xffff0000

08004524 <uiDisplayInputLevel>:


/**
 * Displays line or microphones input level on the LCD.
 */
void uiDisplayInputLevel() {
 8004524:	b580      	push	{r7, lr}
 8004526:	b092      	sub	sp, #72	; 0x48
 8004528:	af02      	add	r7, sp, #8

	uint8_t buf[50];

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 800452a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800452e:	f000 fae1 	bl	8004af4 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004536:	f000 fb0d 	bl	8004b54 <LCD_SetBackColor>
	LCD_SetFont(&Font12);
 800453a:	483e      	ldr	r0, [pc, #248]	; (8004634 <uiDisplayInputLevel+0x110>)
 800453c:	f000 fb22 	bl	8004b84 <LCD_SetFont>

	if (inputLevelLavr > 0) {
 8004540:	4b3d      	ldr	r3, [pc, #244]	; (8004638 <uiDisplayInputLevel+0x114>)
 8004542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	f7fc fb5b 	bl	8000c08 <__aeabi_dcmpgt>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d026      	beq.n	80045a6 <uiDisplayInputLevel+0x82>
		int lvl_db = (int) (20. * log10(inputLevelLavr));
 8004558:	4b37      	ldr	r3, [pc, #220]	; (8004638 <uiDisplayInputLevel+0x114>)
 800455a:	ed93 7b00 	vldr	d7, [r3]
 800455e:	eeb0 0a47 	vmov.f32	s0, s14
 8004562:	eef0 0a67 	vmov.f32	s1, s15
 8004566:	f017 faa7 	bl	801bab8 <log10>
 800456a:	ec51 0b10 	vmov	r0, r1, d0
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	4b32      	ldr	r3, [pc, #200]	; (800463c <uiDisplayInputLevel+0x118>)
 8004574:	f7fc f8b8 	bl	80006e8 <__aeabi_dmul>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	f7fc fb62 	bl	8000c48 <__aeabi_d2iz>
 8004584:	4603      	mov	r3, r0
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
		sprintf((char*) buf, "%d ", lvl_db);
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800458c:	492c      	ldr	r1, [pc, #176]	; (8004640 <uiDisplayInputLevel+0x11c>)
 800458e:	4618      	mov	r0, r3
 8004590:	f016 fa00 	bl	801a994 <siprintf>
		LCD_DrawString(5, 15, (uint8_t*) buf, LEFT_MODE, true);
 8004594:	1d3a      	adds	r2, r7, #4
 8004596:	2301      	movs	r3, #1
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	2303      	movs	r3, #3
 800459c:	210f      	movs	r1, #15
 800459e:	2005      	movs	r0, #5
 80045a0:	f000 fb8e 	bl	8004cc0 <LCD_DrawString>
 80045a4:	e007      	b.n	80045b6 <uiDisplayInputLevel+0x92>
	} else
		LCD_DrawString(5, 15, (uint8_t*) "-inf", LEFT_MODE, true);
 80045a6:	2301      	movs	r3, #1
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	2303      	movs	r3, #3
 80045ac:	4a25      	ldr	r2, [pc, #148]	; (8004644 <uiDisplayInputLevel+0x120>)
 80045ae:	210f      	movs	r1, #15
 80045b0:	2005      	movs	r0, #5
 80045b2:	f000 fb85 	bl	8004cc0 <LCD_DrawString>

	if (inputLevelRavr > 0) {
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <uiDisplayInputLevel+0x124>)
 80045b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	f7fc fb20 	bl	8000c08 <__aeabi_dcmpgt>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d026      	beq.n	800461c <uiDisplayInputLevel+0xf8>
		int lvl_db = (int) (20. * log10(inputLevelRavr));
 80045ce:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <uiDisplayInputLevel+0x124>)
 80045d0:	ed93 7b00 	vldr	d7, [r3]
 80045d4:	eeb0 0a47 	vmov.f32	s0, s14
 80045d8:	eef0 0a67 	vmov.f32	s1, s15
 80045dc:	f017 fa6c 	bl	801bab8 <log10>
 80045e0:	ec51 0b10 	vmov	r0, r1, d0
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	4b14      	ldr	r3, [pc, #80]	; (800463c <uiDisplayInputLevel+0x118>)
 80045ea:	f7fc f87d 	bl	80006e8 <__aeabi_dmul>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	f7fc fb27 	bl	8000c48 <__aeabi_d2iz>
 80045fa:	4603      	mov	r3, r0
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38
		sprintf((char*) buf, "%d ", lvl_db);
 80045fe:	1d3b      	adds	r3, r7, #4
 8004600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004602:	490f      	ldr	r1, [pc, #60]	; (8004640 <uiDisplayInputLevel+0x11c>)
 8004604:	4618      	mov	r0, r3
 8004606:	f016 f9c5 	bl	801a994 <siprintf>
		LCD_DrawString(30, 15, (uint8_t*) buf, LEFT_MODE, true);
 800460a:	1d3a      	adds	r2, r7, #4
 800460c:	2301      	movs	r3, #1
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2303      	movs	r3, #3
 8004612:	210f      	movs	r1, #15
 8004614:	201e      	movs	r0, #30
 8004616:	f000 fb53 	bl	8004cc0 <LCD_DrawString>
	} else
		LCD_DrawString(30, 15, (uint8_t*) "-inf", LEFT_MODE, true);



}
 800461a:	e007      	b.n	800462c <uiDisplayInputLevel+0x108>
		LCD_DrawString(30, 15, (uint8_t*) "-inf", LEFT_MODE, true);
 800461c:	2301      	movs	r3, #1
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2303      	movs	r3, #3
 8004622:	4a08      	ldr	r2, [pc, #32]	; (8004644 <uiDisplayInputLevel+0x120>)
 8004624:	210f      	movs	r1, #15
 8004626:	201e      	movs	r0, #30
 8004628:	f000 fb4a 	bl	8004cc0 <LCD_DrawString>
}
 800462c:	bf00      	nop
 800462e:	3740      	adds	r7, #64	; 0x40
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000018 	.word	0x20000018
 8004638:	20009f58 	.word	0x20009f58
 800463c:	40340000 	.word	0x40340000
 8004640:	0801c148 	.word	0x0801c148
 8004644:	0801c14c 	.word	0x0801c14c
 8004648:	20009f60 	.word	0x20009f60

0800464c <uiDisplaySpectrum>:
/**
 * Displays spectrogram.
 */

uint32_t VAL;
void uiDisplaySpectrum() {
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
	/* sweep reset */
	if(time>360){
 8004652:	4b26      	ldr	r3, [pc, #152]	; (80046ec <uiDisplaySpectrum+0xa0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800465a:	dd02      	ble.n	8004662 <uiDisplaySpectrum+0x16>
		time=0;
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <uiDisplaySpectrum+0xa0>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
	}
	/* sweep init position */
	uint16_t x=time+60;
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <uiDisplaySpectrum+0xa0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	333c      	adds	r3, #60	; 0x3c
 800466a:	817b      	strh	r3, [r7, #10]
	uint16_t y=270;
 800466c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004670:	813b      	strh	r3, [r7, #8]
	uint32_t color;

	/* run through mag values */
	for(int i=0;i<(256/2);i++){
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e02d      	b.n	80046d4 <uiDisplaySpectrum+0x88>
		/* Amplitude of frequency "i" */
		VAL = (uint32_t) (FFTOutputMag[i]*255);
 8004678:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <uiDisplaySpectrum+0xa4>)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80046f4 <uiDisplaySpectrum+0xa8>
 8004688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800468c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004690:	ee17 2a90 	vmov	r2, s15
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <uiDisplaySpectrum+0xac>)
 8004696:	601a      	str	r2, [r3, #0]
		color=(uint32_t) 4278190080+(VAL);
 8004698:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <uiDisplaySpectrum+0xac>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80046a0:	607b      	str	r3, [r7, #4]

		/* shade of blue */
		LCD_DrawPixelColor(x,y-(i),(uint32_t) color);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	893a      	ldrh	r2, [r7, #8]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	b299      	uxth	r1, r3
 80046ac:	897b      	ldrh	r3, [r7, #10]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fa77 	bl	8004ba4 <LCD_DrawPixelColor>
		/* tracking bar */
		LCD_DrawPixelColor(x+1,y-(i),(uint32_t) (4278190080+16753920));
 80046b6:	897b      	ldrh	r3, [r7, #10]
 80046b8:	3301      	adds	r3, #1
 80046ba:	b298      	uxth	r0, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	893a      	ldrh	r2, [r7, #8]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <uiDisplaySpectrum+0xb0>)
 80046c8:	4619      	mov	r1, r3
 80046ca:	f000 fa6b 	bl	8004ba4 <LCD_DrawPixelColor>
	for(int i=0;i<(256/2);i++){
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b7f      	cmp	r3, #127	; 0x7f
 80046d8:	ddce      	ble.n	8004678 <uiDisplaySpectrum+0x2c>
	}
	/* new sweep position */
	time=time+1;
 80046da:	4b04      	ldr	r3, [pc, #16]	; (80046ec <uiDisplaySpectrum+0xa0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3301      	adds	r3, #1
 80046e0:	4a02      	ldr	r2, [pc, #8]	; (80046ec <uiDisplaySpectrum+0xa0>)
 80046e2:	6013      	str	r3, [r2, #0]
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	2000036c 	.word	0x2000036c
 80046f0:	20009958 	.word	0x20009958
 80046f4:	437f0000 	.word	0x437f0000
 80046f8:	2000a8c4 	.word	0x2000a8c4
 80046fc:	ffffa500 	.word	0xffffa500

08004700 <uiDisplayMaster>:

/**
 * Displays Master VU level.
 */
void uiDisplayMaster() {
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
	int dbL = (int) (20. * log10(inputLevelLavr));
 8004706:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <uiDisplayMaster+0x100>)
 8004708:	ed93 7b00 	vldr	d7, [r3]
 800470c:	eeb0 0a47 	vmov.f32	s0, s14
 8004710:	eef0 0a67 	vmov.f32	s1, s15
 8004714:	f017 f9d0 	bl	801bab8 <log10>
 8004718:	ec51 0b10 	vmov	r0, r1, d0
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	4b38      	ldr	r3, [pc, #224]	; (8004804 <uiDisplayMaster+0x104>)
 8004722:	f7fb ffe1 	bl	80006e8 <__aeabi_dmul>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	f7fc fa8b 	bl	8000c48 <__aeabi_d2iz>
 8004732:	4603      	mov	r3, r0
 8004734:	60fb      	str	r3, [r7, #12]
	int dbR = (int) (20. * log10(inputLevelRavr));
 8004736:	4b34      	ldr	r3, [pc, #208]	; (8004808 <uiDisplayMaster+0x108>)
 8004738:	ed93 7b00 	vldr	d7, [r3]
 800473c:	eeb0 0a47 	vmov.f32	s0, s14
 8004740:	eef0 0a67 	vmov.f32	s1, s15
 8004744:	f017 f9b8 	bl	801bab8 <log10>
 8004748:	ec51 0b10 	vmov	r0, r1, d0
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	4b2c      	ldr	r3, [pc, #176]	; (8004804 <uiDisplayMaster+0x104>)
 8004752:	f7fb ffc9 	bl	80006e8 <__aeabi_dmul>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
 800475e:	f7fc fa73 	bl	8000c48 <__aeabi_d2iz>
 8004762:	4603      	mov	r3, r0
 8004764:	60bb      	str	r3, [r7, #8]

	uiDisplayInputLevel();
 8004766:	f7ff fedd 	bl	8004524 <uiDisplayInputLevel>

	int L = -2*(dbL+60)-100; // augmentation de dynamique pour l'affichage
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8004770:	4613      	mov	r3, r2
 8004772:	07db      	lsls	r3, r3, #31
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	607b      	str	r3, [r7, #4]
	int R =	-2*(dbR+60)-100; //
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8004780:	4613      	mov	r3, r2
 8004782:	07db      	lsls	r3, r3, #31
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	603b      	str	r3, [r7, #0]

	/* Refresh bar */
	LCD_SetFillColor(LCD_COLOR_WHITE);
 800478a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800478e:	f000 f9c9 	bl	8004b24 <LCD_SetFillColor>
	LCD_FillRect(5, 30, 20, (270+L));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800479a:	b29b      	uxth	r3, r3
 800479c:	2214      	movs	r2, #20
 800479e:	211e      	movs	r1, #30
 80047a0:	2005      	movs	r0, #5
 80047a2:	f000 fb95 	bl	8004ed0 <LCD_FillRect>
	LCD_FillRect(35, 30, 20 , (270+R));
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2214      	movs	r2, #20
 80047b2:	211e      	movs	r1, #30
 80047b4:	2023      	movs	r0, #35	; 0x23
 80047b6:	f000 fb8b 	bl	8004ed0 <LCD_FillRect>
	/* Value bar */
	LCD_SetFillColor(LCD_COLOR_RED);
 80047ba:	4814      	ldr	r0, [pc, #80]	; (800480c <uiDisplayMaster+0x10c>)
 80047bc:	f000 f9b2 	bl	8004b24 <LCD_SetFillColor>
	LCD_FillRect(5, 270+L, 20, LCD_SCREEN_HEIGHT-(270+L));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047c8:	b299      	uxth	r1, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f1c3 0302 	rsb	r3, r3, #2
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2214      	movs	r2, #20
 80047d6:	2005      	movs	r0, #5
 80047d8:	f000 fb7a 	bl	8004ed0 <LCD_FillRect>
	LCD_FillRect(35, 270+R, 20, LCD_SCREEN_HEIGHT-(270+R));
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047e4:	b299      	uxth	r1, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f1c3 0302 	rsb	r3, r3, #2
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2214      	movs	r2, #20
 80047f2:	2023      	movs	r0, #35	; 0x23
 80047f4:	f000 fb6c 	bl	8004ed0 <LCD_FillRect>
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20009f58 	.word	0x20009f58
 8004804:	40340000 	.word	0x40340000
 8004808:	20009f60 	.word	0x20009f60
 800480c:	ffff0000 	.word	0xffff0000

08004810 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 8004814:	2201      	movs	r2, #1
 8004816:	2102      	movs	r1, #2
 8004818:	4802      	ldr	r0, [pc, #8]	; (8004824 <LED_On+0x14>)
 800481a:	f004 fc9f 	bl	800915c <HAL_GPIO_WritePin>
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40022000 	.word	0x40022000

08004828 <LED_Off>:

void LED_Off(){
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 800482c:	2200      	movs	r2, #0
 800482e:	2102      	movs	r1, #2
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <LED_Off+0x14>)
 8004832:	f004 fc93 	bl	800915c <HAL_GPIO_WritePin>
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40022000 	.word	0x40022000

08004840 <LED_Toggle>:

void LED_Toggle(){
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8004844:	2102      	movs	r1, #2
 8004846:	4802      	ldr	r0, [pc, #8]	; (8004850 <LED_Toggle+0x10>)
 8004848:	f004 fca1 	bl	800918e <HAL_GPIO_TogglePin>

}
 800484c:	bf00      	nop
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40022000 	.word	0x40022000

08004854 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 800485c:	1d39      	adds	r1, r7, #4
 800485e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004862:	2201      	movs	r2, #1
 8004864:	4803      	ldr	r0, [pc, #12]	; (8004874 <__io_putchar+0x20>)
 8004866:	f00c ff37 	bl	80116d8 <HAL_UART_Transmit>
	return ch;
 800486a:	687b      	ldr	r3, [r7, #4]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	2000a54c 	.word	0x2000a54c

08004878 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af04      	add	r7, sp, #16
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	4608      	mov	r0, r1
 8004882:	4611      	mov	r1, r2
 8004884:	461a      	mov	r2, r3
 8004886:	4603      	mov	r3, r0
 8004888:	72fb      	strb	r3, [r7, #11]
 800488a:	460b      	mov	r3, r1
 800488c:	813b      	strh	r3, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004896:	7afb      	ldrb	r3, [r7, #11]
 8004898:	b299      	uxth	r1, r3
 800489a:	88f8      	ldrh	r0, [r7, #6]
 800489c:	893a      	ldrh	r2, [r7, #8]
 800489e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048a2:	9302      	str	r3, [sp, #8]
 80048a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048a6:	9301      	str	r3, [sp, #4]
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	4603      	mov	r3, r0
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f006 fbe4 	bl	800b07c <HAL_I2C_Mem_Read>
 80048b4:	4603      	mov	r3, r0
 80048b6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80048be:	7afb      	ldrb	r3, [r7, #11]
 80048c0:	4619      	mov	r1, r3
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f832 	bl	800492c <I2Cx_Error>
  }
  return status;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b08a      	sub	sp, #40	; 0x28
 80048d6:	af04      	add	r7, sp, #16
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	4608      	mov	r0, r1
 80048dc:	4611      	mov	r1, r2
 80048de:	461a      	mov	r2, r3
 80048e0:	4603      	mov	r3, r0
 80048e2:	72fb      	strb	r3, [r7, #11]
 80048e4:	460b      	mov	r3, r1
 80048e6:	813b      	strh	r3, [r7, #8]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80048f0:	7afb      	ldrb	r3, [r7, #11]
 80048f2:	b299      	uxth	r1, r3
 80048f4:	88f8      	ldrh	r0, [r7, #6]
 80048f6:	893a      	ldrh	r2, [r7, #8]
 80048f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048fc:	9302      	str	r3, [sp, #8]
 80048fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4603      	mov	r3, r0
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f006 faa3 	bl	800ae54 <HAL_I2C_Mem_Write>
 800490e:	4603      	mov	r3, r0
 8004910:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004918:	7afb      	ldrb	r3, [r7, #11]
 800491a:	4619      	mov	r1, r3
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f805 	bl	800492c <I2Cx_Error>
  }
  return status;
 8004922:	7dfb      	ldrb	r3, [r7, #23]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f006 fa5b 	bl	800adf4 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f006 f9c8 	bl	800acd4 <HAL_I2C_Init>
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af02      	add	r7, sp, #8
 8004952:	4603      	mov	r3, r0
 8004954:	71fb      	strb	r3, [r7, #7]
 8004956:	460b      	mov	r3, r1
 8004958:	80bb      	strh	r3, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 800495e:	887b      	ldrh	r3, [r7, #2]
 8004960:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	b29b      	uxth	r3, r3
 8004968:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800496a:	89fb      	ldrh	r3, [r7, #14]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	b29b      	uxth	r3, r3
 8004970:	b21a      	sxth	r2, r3
 8004972:	887b      	ldrh	r3, [r7, #2]
 8004974:	b21b      	sxth	r3, r3
 8004976:	4313      	orrs	r3, r2
 8004978:	b21b      	sxth	r3, r3
 800497a:	b29b      	uxth	r3, r3
 800497c:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800497e:	88ba      	ldrh	r2, [r7, #4]
 8004980:	79f9      	ldrb	r1, [r7, #7]
 8004982:	2302      	movs	r3, #2
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	1cbb      	adds	r3, r7, #2
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	2302      	movs	r3, #2
 800498c:	4803      	ldr	r0, [pc, #12]	; (800499c <AUDIO_I2C_Write+0x50>)
 800498e:	f7ff ffa0 	bl	80048d2 <I2Cx_WriteMultiple>
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20009ff4 	.word	0x20009ff4

080049a0 <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	4603      	mov	r3, r0
 80049a8:	460a      	mov	r2, r1
 80049aa:	71fb      	strb	r3, [r7, #7]
 80049ac:	4613      	mov	r3, r2
 80049ae:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	81bb      	strh	r3, [r7, #12]
 80049b4:	2300      	movs	r3, #0
 80049b6:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80049b8:	88ba      	ldrh	r2, [r7, #4]
 80049ba:	79f9      	ldrb	r1, [r7, #7]
 80049bc:	2302      	movs	r3, #2
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	f107 030c 	add.w	r3, r7, #12
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2302      	movs	r3, #2
 80049c8:	480a      	ldr	r0, [pc, #40]	; (80049f4 <AUDIO_I2C_Read+0x54>)
 80049ca:	f7ff ff55 	bl	8004878 <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80049ce:	89bb      	ldrh	r3, [r7, #12]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80049d4:	89bb      	ldrh	r3, [r7, #12]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	b29b      	uxth	r3, r3
 80049da:	b21a      	sxth	r2, r3
 80049dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	b21b      	sxth	r3, r3
 80049e4:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 80049e6:	89fb      	ldrh	r3, [r7, #14]
 80049e8:	81bb      	strh	r3, [r7, #12]

  return read_value;
 80049ea:	89bb      	ldrh	r3, [r7, #12]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20009ff4 	.word	0x20009ff4

080049f8 <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	4603      	mov	r3, r0
 8004a00:	460a      	mov	r2, r1
 8004a02:	71fb      	strb	r3, [r7, #7]
 8004a04:	4613      	mov	r3, r2
 8004a06:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	1dbb      	adds	r3, r7, #6
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	2301      	movs	r3, #1
 8004a16:	2170      	movs	r1, #112	; 0x70
 8004a18:	4803      	ldr	r0, [pc, #12]	; (8004a28 <TS_I2C_Write+0x30>)
 8004a1a:	f7ff ff5a 	bl	80048d2 <I2Cx_WriteMultiple>

}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20009ff4 	.word	0x20009ff4

08004a2c <TS_I2C_Read>:
/**
  * Reads a single control data from the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_I2C_Read(uint8_t Reg){
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]

  uint8_t read_value = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hi2c3, TS_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	2301      	movs	r3, #1
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	f107 030f 	add.w	r3, r7, #15
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	2301      	movs	r3, #1
 8004a4a:	2170      	movs	r1, #112	; 0x70
 8004a4c:	4803      	ldr	r0, [pc, #12]	; (8004a5c <TS_I2C_Read+0x30>)
 8004a4e:	f7ff ff13 	bl	8004878 <I2Cx_ReadMultiple>

  return read_value;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20009ff4 	.word	0x20009ff4

08004a60 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <LCD_Init+0x44>)
 8004a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d002      	beq.n	8004a72 <LCD_Init+0x12>
 8004a6c:	480e      	ldr	r0, [pc, #56]	; (8004aa8 <LCD_Init+0x48>)
 8004a6e:	f7fe f90b 	bl	8002c88 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 8004a72:	4b0e      	ldr	r3, [pc, #56]	; (8004aac <LCD_Init+0x4c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2200      	movs	r2, #0
 8004a78:	4619      	mov	r1, r3
 8004a7a:	480a      	ldr	r0, [pc, #40]	; (8004aa4 <LCD_Init+0x44>)
 8004a7c:	f006 ffda 	bl	800ba34 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8004a80:	f000 f81a 	bl	8004ab8 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8004a84:	480a      	ldr	r0, [pc, #40]	; (8004ab0 <LCD_Init+0x50>)
 8004a86:	f000 f87d 	bl	8004b84 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a8e:	f000 f861 	bl	8004b54 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8004a92:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004a96:	f000 f82d 	bl	8004af4 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8004a9a:	4806      	ldr	r0, [pc, #24]	; (8004ab4 <LCD_Init+0x54>)
 8004a9c:	f000 f842 	bl	8004b24 <LCD_SetFillColor>


}
 8004aa0:	bf00      	nop
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	2000a40c 	.word	0x2000a40c
 8004aa8:	0801c154 	.word	0x0801c154
 8004aac:	20000010 	.word	0x20000010
 8004ab0:	20000028 	.word	0x20000028
 8004ab4:	ffff0000 	.word	0xffff0000

08004ab8 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <LCD_DisplayOn+0x30>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <LCD_DisplayOn+0x30>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004acc:	2201      	movs	r2, #1
 8004ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ad2:	4806      	ldr	r0, [pc, #24]	; (8004aec <LCD_DisplayOn+0x34>)
 8004ad4:	f004 fb42 	bl	800915c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004ad8:	2201      	movs	r2, #1
 8004ada:	2108      	movs	r1, #8
 8004adc:	4804      	ldr	r0, [pc, #16]	; (8004af0 <LCD_DisplayOn+0x38>)
 8004ade:	f004 fb3d 	bl	800915c <HAL_GPIO_WritePin>
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	2000a40c 	.word	0x2000a40c
 8004aec:	40022000 	.word	0x40022000
 8004af0:	40022800 	.word	0x40022800

08004af4 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8004afc:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <LCD_SetStrokeColor+0x28>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <LCD_SetStrokeColor+0x28>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 faf4 	bl	80050f4 <ARGB888ToRGB565>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <LCD_SetStrokeColor+0x2c>)
 8004b12:	601a      	str	r2, [r3, #0]
#endif
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000370 	.word	0x20000370
 8004b20:	2000037c 	.word	0x2000037c

08004b24 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8004b2c:	4a07      	ldr	r2, [pc, #28]	; (8004b4c <LCD_SetFillColor+0x28>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <LCD_SetFillColor+0x28>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fadc 	bl	80050f4 <ARGB888ToRGB565>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b03      	ldr	r3, [pc, #12]	; (8004b50 <LCD_SetFillColor+0x2c>)
 8004b42:	601a      	str	r2, [r3, #0]
#endif
}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000374 	.word	0x20000374
 8004b50:	20000380 	.word	0x20000380

08004b54 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8004b5c:	4a07      	ldr	r2, [pc, #28]	; (8004b7c <LCD_SetBackColor+0x28>)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <LCD_SetBackColor+0x28>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fac4 	bl	80050f4 <ARGB888ToRGB565>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <LCD_SetBackColor+0x2c>)
 8004b72:	601a      	str	r2, [r3, #0]
#endif
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000378 	.word	0x20000378
 8004b80:	20000384 	.word	0x20000384

08004b84 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8004b8c:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <LCD_SetFont+0x1c>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6013      	str	r3, [r2, #0]
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000388 	.word	0x20000388

08004ba4 <LCD_DrawPixelColor>:
	__CleanDCache();

}

void LCD_DrawPixelColor(uint16_t Xpos, uint16_t Ypos, uint32_t Color8888)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	603a      	str	r2, [r7, #0]
 8004bae:	80fb      	strh	r3, [r7, #6]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	80bb      	strh	r3, [r7, #4]
	LCD_SetStrokeColor(Color8888);
 8004bb4:	6838      	ldr	r0, [r7, #0]
 8004bb6:	f7ff ff9d 	bl	8004af4 <LCD_SetStrokeColor>
	__DrawPixel(Xpos, Ypos, STROKE_COLOR);
 8004bba:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <LCD_DrawPixelColor+0x40>)
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <LCD_DrawPixelColor+0x44>)
 8004bc0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004bc2:	88ba      	ldrh	r2, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	015b      	lsls	r3, r3, #5
 8004bcc:	461a      	mov	r2, r3
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	440b      	add	r3, r1
 8004bd6:	b282      	uxth	r2, r0
 8004bd8:	801a      	strh	r2, [r3, #0]
	__CleanDCache();

}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	2000037c 	.word	0x2000037c
 8004be8:	2000a40c 	.word	0x2000a40c

08004bec <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	460a      	mov	r2, r1
 8004bf6:	80fb      	strh	r3, [r7, #6]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <LCD_ErasePixel+0x3c>)
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <LCD_ErasePixel+0x40>)
 8004c02:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004c04:	88ba      	ldrh	r2, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	015b      	lsls	r3, r3, #5
 8004c0e:	461a      	mov	r2, r3
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	4413      	add	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	440b      	add	r3, r1
 8004c18:	b282      	uxth	r2, r0
 8004c1a:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	20000384 	.word	0x20000384
 8004c2c:	2000a40c 	.word	0x2000a40c

08004c30 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 8004c36:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <LCD_Clear+0x28>)
 8004c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <LCD_Clear+0x2c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	2300      	movs	r3, #0
 8004c44:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004c48:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004c4c:	f000 fa1a 	bl	8005084 <LL_FillBuffer>
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	2000a40c 	.word	0x2000a40c
 8004c5c:	20000378 	.word	0x20000378

08004c60 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	80fb      	strh	r3, [r7, #6]
 8004c72:	4603      	mov	r3, r0
 8004c74:	80bb      	strh	r3, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	70fb      	strb	r3, [r7, #3]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <LCD_DrawChar+0x5c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	3b20      	subs	r3, #32
 8004c88:	490c      	ldr	r1, [pc, #48]	; (8004cbc <LCD_DrawChar+0x5c>)
 8004c8a:	6809      	ldr	r1, [r1, #0]
 8004c8c:	88c9      	ldrh	r1, [r1, #6]
 8004c8e:	fb01 f103 	mul.w	r1, r1, r3
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <LCD_DrawChar+0x5c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	889b      	ldrh	r3, [r3, #4]
 8004c98:	3307      	adds	r3, #7
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da00      	bge.n	8004ca0 <LCD_DrawChar+0x40>
 8004c9e:	3307      	adds	r3, #7
 8004ca0:	10db      	asrs	r3, r3, #3
 8004ca2:	fb03 f301 	mul.w	r3, r3, r1
 8004ca6:	441a      	add	r2, r3
 8004ca8:	78bb      	ldrb	r3, [r7, #2]
 8004caa:	88b9      	ldrh	r1, [r7, #4]
 8004cac:	88f8      	ldrh	r0, [r7, #6]
 8004cae:	f000 f941 	bl	8004f34 <DrawChar>

}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd90      	pop	{r4, r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000388 	.word	0x20000388

08004cc0 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60ba      	str	r2, [r7, #8]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4603      	mov	r3, r0
 8004ccc:	81fb      	strh	r3, [r7, #14]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	81bb      	strh	r3, [r7, #12]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	83fb      	strh	r3, [r7, #30]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 8004cea:	e002      	b.n	8004cf2 <LCD_DrawString+0x32>
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	617a      	str	r2, [r7, #20]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f6      	bne.n	8004cec <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 8004cfe:	4b3a      	ldr	r3, [pc, #232]	; (8004de8 <LCD_DrawString+0x128>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	889b      	ldrh	r3, [r3, #4]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004d0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d014      	beq.n	8004d40 <LCD_DrawString+0x80>
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	dc23      	bgt.n	8004d62 <LCD_DrawString+0xa2>
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d002      	beq.n	8004d24 <LCD_DrawString+0x64>
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d011      	beq.n	8004d46 <LCD_DrawString+0x86>
 8004d22:	e01e      	b.n	8004d62 <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	4a2f      	ldr	r2, [pc, #188]	; (8004de8 <LCD_DrawString+0x128>)
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	8892      	ldrh	r2, [r2, #4]
 8004d30:	fb02 f303 	mul.w	r3, r2, r3
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	89fb      	ldrh	r3, [r7, #14]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	83fb      	strh	r3, [r7, #30]
		break;
 8004d3e:	e013      	b.n	8004d68 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	83fb      	strh	r3, [r7, #30]
		break;
 8004d44:	e010      	b.n	8004d68 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <LCD_DrawString+0x128>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	889b      	ldrh	r3, [r3, #4]
 8004d54:	fb12 f303 	smulbb	r3, r2, r3
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	89fb      	ldrh	r3, [r7, #14]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	83fb      	strh	r3, [r7, #30]
		break;
 8004d60:	e002      	b.n	8004d68 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 8004d62:	89fb      	ldrh	r3, [r7, #14]
 8004d64:	83fb      	strh	r3, [r7, #30]
		break;
 8004d66:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 8004d68:	8bfb      	ldrh	r3, [r7, #30]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <LCD_DrawString+0xb6>
 8004d6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da16      	bge.n	8004da4 <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 8004d76:	2301      	movs	r3, #1
 8004d78:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004d7a:	e013      	b.n	8004da4 <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	781a      	ldrb	r2, [r3, #0]
 8004d80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d84:	89b9      	ldrh	r1, [r7, #12]
 8004d86:	8bf8      	ldrh	r0, [r7, #30]
 8004d88:	f7ff ff6a 	bl	8004c60 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 8004d8c:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <LCD_DrawString+0x128>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	889a      	ldrh	r2, [r3, #4]
 8004d92:	8bfb      	ldrh	r3, [r7, #30]
 8004d94:	4413      	add	r3, r2
 8004d96:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60bb      	str	r3, [r7, #8]
		i++;
 8004d9e:	8bbb      	ldrh	r3, [r7, #28]
 8004da0:	3301      	adds	r3, #1
 8004da2:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	8bbb      	ldrh	r3, [r7, #28]
 8004db4:	490c      	ldr	r1, [pc, #48]	; (8004de8 <LCD_DrawString+0x128>)
 8004db6:	6809      	ldr	r1, [r1, #0]
 8004db8:	8889      	ldrh	r1, [r1, #4]
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4908      	ldr	r1, [pc, #32]	; (8004de8 <LCD_DrawString+0x128>)
 8004dc6:	6809      	ldr	r1, [r1, #0]
 8004dc8:	8889      	ldrh	r1, [r1, #4]
 8004dca:	428b      	cmp	r3, r1
 8004dcc:	bfac      	ite	ge
 8004dce:	2301      	movge	r3, #1
 8004dd0:	2300      	movlt	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1cf      	bne.n	8004d7c <LCD_DrawString+0xbc>
	}
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000388 	.word	0x20000388

08004dec <LCD_DrawRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4623      	mov	r3, r4
 8004dfc:	80fb      	strh	r3, [r7, #6]
 8004dfe:	4603      	mov	r3, r0
 8004e00:	80bb      	strh	r3, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	807b      	strh	r3, [r7, #2]
 8004e06:	4613      	mov	r3, r2
 8004e08:	803b      	strh	r3, [r7, #0]

	/* Draw horizontal lines */
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, Ypos), Width, 1, 0, StrokeColor);
 8004e0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ec8 <LCD_DrawRect+0xdc>)
 8004e0c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004e0e:	88ba      	ldrh	r2, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	015b      	lsls	r3, r3, #5
 8004e18:	461a      	mov	r2, r3
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	440b      	add	r3, r1
 8004e22:	4618      	mov	r0, r3
 8004e24:	8879      	ldrh	r1, [r7, #2]
 8004e26:	4b29      	ldr	r3, [pc, #164]	; (8004ecc <LCD_DrawRect+0xe0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f000 f928 	bl	8005084 <LL_FillBuffer>
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, (Ypos+Height)), Width, 1, 0, StrokeColor);
 8004e34:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <LCD_DrawRect+0xdc>)
 8004e36:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004e38:	88ba      	ldrh	r2, [r7, #4]
 8004e3a:	883b      	ldrh	r3, [r7, #0]
 8004e3c:	441a      	add	r2, r3
 8004e3e:	4613      	mov	r3, r2
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	015b      	lsls	r3, r3, #5
 8004e46:	461a      	mov	r2, r3
 8004e48:	88fb      	ldrh	r3, [r7, #6]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	440b      	add	r3, r1
 8004e50:	4618      	mov	r0, r3
 8004e52:	8879      	ldrh	r1, [r7, #2]
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <LCD_DrawRect+0xe0>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f000 f911 	bl	8005084 <LL_FillBuffer>

	/* Draw vertical lines */
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, Ypos), 1, Height, (LCD_SCREEN_WIDTH - 1), StrokeColor);
 8004e62:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <LCD_DrawRect+0xdc>)
 8004e64:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004e66:	88ba      	ldrh	r2, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	015b      	lsls	r3, r3, #5
 8004e70:	461a      	mov	r2, r3
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	4413      	add	r3, r2
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	440b      	add	r3, r1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	883a      	ldrh	r2, [r7, #0]
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <LCD_DrawRect+0xe0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	f240 13df 	movw	r3, #479	; 0x1df
 8004e88:	2101      	movs	r1, #1
 8004e8a:	f000 f8fb 	bl	8005084 <LL_FillBuffer>
	LL_FillBuffer((uint32_t *)__GetAddress((Xpos+Width), Ypos), 1, Height, (LCD_SCREEN_WIDTH - 1), StrokeColor);
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <LCD_DrawRect+0xdc>)
 8004e90:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004e92:	88ba      	ldrh	r2, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	015b      	lsls	r3, r3, #5
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	887b      	ldrh	r3, [r7, #2]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	4403      	add	r3, r0
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	440b      	add	r3, r1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	883a      	ldrh	r2, [r7, #0]
 8004eae:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <LCD_DrawRect+0xe0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	f240 13df 	movw	r3, #479	; 0x1df
 8004eb8:	2101      	movs	r1, #1
 8004eba:	f000 f8e3 	bl	8005084 <LL_FillBuffer>

	__CleanDCache();
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd90      	pop	{r4, r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	2000a40c 	.word	0x2000a40c
 8004ecc:	20000370 	.word	0x20000370

08004ed0 <LCD_FillRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	4623      	mov	r3, r4
 8004ee0:	80fb      	strh	r3, [r7, #6]
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	80bb      	strh	r3, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	807b      	strh	r3, [r7, #2]
 8004eea:	4613      	mov	r3, r2
 8004eec:	803b      	strh	r3, [r7, #0]
	uint32_t  x_address = __GetAddress(Xpos, Ypos);
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <LCD_FillRect+0x5c>)
 8004ef0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004ef2:	88ba      	ldrh	r2, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	015b      	lsls	r3, r3, #5
 8004efc:	461a      	mov	r2, r3
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	4413      	add	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	440b      	add	r3, r1
 8004f06:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	LL_FillBuffer((uint32_t *)x_address, Width, Height, (LCD_SCREEN_WIDTH - Width), FillColor);
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	8879      	ldrh	r1, [r7, #2]
 8004f0c:	883a      	ldrh	r2, [r7, #0]
 8004f0e:	887b      	ldrh	r3, [r7, #2]
 8004f10:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004f14:	461c      	mov	r4, r3
 8004f16:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <LCD_FillRect+0x60>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	4623      	mov	r3, r4
 8004f1e:	f000 f8b1 	bl	8005084 <LL_FillBuffer>
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd90      	pop	{r4, r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	2000a40c 	.word	0x2000a40c
 8004f30:	20000374 	.word	0x20000374

08004f34 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 8004f34:	b590      	push	{r4, r7, lr}
 8004f36:	b08b      	sub	sp, #44	; 0x2c
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60ba      	str	r2, [r7, #8]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	81fb      	strh	r3, [r7, #14]
 8004f42:	460b      	mov	r3, r1
 8004f44:	81bb      	strh	r3, [r7, #12]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4e:	2300      	movs	r3, #0
 8004f50:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 8004f52:	4b49      	ldr	r3, [pc, #292]	; (8005078 <DrawChar+0x144>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	88db      	ldrh	r3, [r3, #6]
 8004f58:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 8004f5a:	4b47      	ldr	r3, [pc, #284]	; (8005078 <DrawChar+0x144>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	889b      	ldrh	r3, [r3, #4]
 8004f60:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 8004f62:	8b3b      	ldrh	r3, [r7, #24]
 8004f64:	3307      	adds	r3, #7
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	da00      	bge.n	8004f6c <DrawChar+0x38>
 8004f6a:	3307      	adds	r3, #7
 8004f6c:	10db      	asrs	r3, r3, #3
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	8b3b      	ldrh	r3, [r7, #24]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f80:	e070      	b.n	8005064 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004f82:	8b3b      	ldrh	r3, [r7, #24]
 8004f84:	3307      	adds	r3, #7
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	da00      	bge.n	8004f8c <DrawChar+0x58>
 8004f8a:	3307      	adds	r3, #7
 8004f8c:	10db      	asrs	r3, r3, #3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	fb03 f302 	mul.w	r3, r3, r2
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	4413      	add	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8004f9c:	8b3b      	ldrh	r3, [r7, #24]
 8004f9e:	3307      	adds	r3, #7
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	da00      	bge.n	8004fa6 <DrawChar+0x72>
 8004fa4:	3307      	adds	r3, #7
 8004fa6:	10db      	asrs	r3, r3, #3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d002      	beq.n	8004fb2 <DrawChar+0x7e>
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d004      	beq.n	8004fba <DrawChar+0x86>
 8004fb0:	e00c      	b.n	8004fcc <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	61fb      	str	r3, [r7, #28]
			break;
 8004fb8:	e016      	b.n	8004fe8 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	3201      	adds	r2, #1
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61fb      	str	r3, [r7, #28]
			break;
 8004fca:	e00d      	b.n	8004fe8 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	041a      	lsls	r2, r3, #16
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	3202      	adds	r2, #2
 8004fe0:	7812      	ldrb	r2, [r2, #0]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61fb      	str	r3, [r7, #28]
			break;
 8004fe6:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	623b      	str	r3, [r7, #32]
 8004fec:	e030      	b.n	8005050 <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 8004fee:	8b3a      	ldrh	r2, [r7, #24]
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	461a      	mov	r2, r3
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4013      	ands	r3, r2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d012      	beq.n	8005030 <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 800500a:	4b1c      	ldr	r3, [pc, #112]	; (800507c <DrawChar+0x148>)
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <DrawChar+0x14c>)
 8005010:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005012:	89ba      	ldrh	r2, [r7, #12]
 8005014:	4613      	mov	r3, r2
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	015b      	lsls	r3, r3, #5
 800501c:	461c      	mov	r4, r3
 800501e:	89fa      	ldrh	r2, [r7, #14]
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	4413      	add	r3, r2
 8005024:	4423      	add	r3, r4
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	440b      	add	r3, r1
 800502a:	b282      	uxth	r2, r0
 800502c:	801a      	strh	r2, [r3, #0]
 800502e:	e00c      	b.n	800504a <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d109      	bne.n	800504a <DrawChar+0x116>
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	b29a      	uxth	r2, r3
 800503a:	89fb      	ldrh	r3, [r7, #14]
 800503c:	4413      	add	r3, r2
 800503e:	b29b      	uxth	r3, r3
 8005040:	89ba      	ldrh	r2, [r7, #12]
 8005042:	4611      	mov	r1, r2
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fdd1 	bl	8004bec <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	3301      	adds	r3, #1
 800504e:	623b      	str	r3, [r7, #32]
 8005050:	8b3b      	ldrh	r3, [r7, #24]
 8005052:	6a3a      	ldr	r2, [r7, #32]
 8005054:	429a      	cmp	r2, r3
 8005056:	d3ca      	bcc.n	8004fee <DrawChar+0xba>
			}
		}
		Ypos++;
 8005058:	89bb      	ldrh	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	3301      	adds	r3, #1
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
 8005064:	8b7b      	ldrh	r3, [r7, #26]
 8005066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005068:	429a      	cmp	r2, r3
 800506a:	d38a      	bcc.n	8004f82 <DrawChar+0x4e>
	}

	__CleanDCache();
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	372c      	adds	r7, #44	; 0x2c
 8005072:	46bd      	mov	sp, r7
 8005074:	bd90      	pop	{r4, r7, pc}
 8005076:	bf00      	nop
 8005078:	20000388 	.word	0x20000388
 800507c:	2000037c 	.word	0x2000037c
 8005080:	2000a40c 	.word	0x2000a40c

08005084 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 8005092:	4b16      	ldr	r3, [pc, #88]	; (80050ec <LL_FillBuffer+0x68>)
 8005094:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005098:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <LL_FillBuffer+0x68>)
 800509c:	2202      	movs	r2, #2
 800509e:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 80050a0:	4a12      	ldr	r2, [pc, #72]	; (80050ec <LL_FillBuffer+0x68>)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 80050a6:	4b11      	ldr	r3, [pc, #68]	; (80050ec <LL_FillBuffer+0x68>)
 80050a8:	4a11      	ldr	r2, [pc, #68]	; (80050f0 <LL_FillBuffer+0x6c>)
 80050aa:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80050ac:	480f      	ldr	r0, [pc, #60]	; (80050ec <LL_FillBuffer+0x68>)
 80050ae:	f003 f9e9 	bl	8008484 <HAL_DMA2D_Init>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d115      	bne.n	80050e4 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 80050b8:	2100      	movs	r1, #0
 80050ba:	480c      	ldr	r0, [pc, #48]	; (80050ec <LL_FillBuffer+0x68>)
 80050bc:	f003 fc50 	bl	8008960 <HAL_DMA2D_ConfigLayer>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10e      	bne.n	80050e4 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	69b9      	ldr	r1, [r7, #24]
 80050d0:	4806      	ldr	r0, [pc, #24]	; (80050ec <LL_FillBuffer+0x68>)
 80050d2:	f003 fa21 	bl	8008518 <HAL_DMA2D_Start>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d103      	bne.n	80050e4 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 80050dc:	210a      	movs	r1, #10
 80050de:	4803      	ldr	r0, [pc, #12]	; (80050ec <LL_FillBuffer+0x68>)
 80050e0:	f003 fa45 	bl	800856e <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	2000a720 	.word	0x2000a720
 80050f0:	4002b000 	.word	0x4002b000

080050f4 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	0c1b      	lsrs	r3, r3, #16
 8005100:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	0a1b      	lsrs	r3, r3, #8
 8005106:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 800510c:	7d7b      	ldrb	r3, [r7, #21]
 800510e:	08db      	lsrs	r3, r3, #3
 8005110:	b2db      	uxtb	r3, r3
 8005112:	b29b      	uxth	r3, r3
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 800511a:	7dbb      	ldrb	r3, [r7, #22]
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	b2db      	uxtb	r3, r3
 8005120:	015b      	lsls	r3, r3, #5
 8005122:	b29b      	uxth	r3, r3
 8005124:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8005128:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	08db      	lsrs	r3, r3, #3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	02db      	lsls	r3, r3, #11
 8005132:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8005134:	89fa      	ldrh	r2, [r7, #14]
 8005136:	8a3b      	ldrh	r3, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	b29a      	uxth	r2, r3
 800513c:	8a7b      	ldrh	r3, [r7, #18]
 800513e:	4313      	orrs	r3, r2
 8005140:	b29b      	uxth	r3, r3
}
 8005142:	4618      	mov	r0, r3
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b090      	sub	sp, #64	; 0x40
 8005154:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800515a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800515c:	23eb      	movs	r3, #235	; 0xeb
 800515e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005160:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8005166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800516a:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800516c:	2300      	movs	r3, #0
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005170:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8005176:	230a      	movs	r3, #10
 8005178:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800517a:	2300      	movs	r3, #0
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800517e:	2300      	movs	r3, #0
 8005180:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005182:	2300      	movs	r3, #0
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8005186:	2300      	movs	r3, #0
 8005188:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800518e:	463a      	mov	r2, r7
 8005190:	f107 0308 	add.w	r3, r7, #8
 8005194:	4619      	mov	r1, r3
 8005196:	4806      	ldr	r0, [pc, #24]	; (80051b0 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8005198:	f007 fac6 	bl	800c728 <HAL_QSPI_MemoryMapped>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3740      	adds	r7, #64	; 0x40
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	2000a82c 	.word	0x2000a82c

080051b4 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b090      	sub	sp, #64	; 0x40
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80051bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051c0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 80051c2:	2366      	movs	r3, #102	; 0x66
 80051c4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80051da:	2300      	movs	r3, #0
 80051dc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80051de:	2300      	movs	r3, #0
 80051e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051e2:	f107 0308 	add.w	r3, r7, #8
 80051e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f007 f88d 	bl	800c30c <HAL_QSPI_Command>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e019      	b.n	8005230 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80051fc:	2399      	movs	r3, #153	; 0x99
 80051fe:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005200:	f107 0308 	add.w	r3, r7, #8
 8005204:	f241 3288 	movw	r2, #5000	; 0x1388
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f007 f87e 	bl	800c30c <HAL_QSPI_Command>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e00a      	b.n	8005230 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800521a:	f241 3188 	movw	r1, #5000	; 0x1388
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f8c7 	bl	80053b2 <QSPI_AutoPollingMemReady>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3740      	adds	r7, #64	; 0x40
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b094      	sub	sp, #80	; 0x50
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8005246:	2385      	movs	r3, #133	; 0x85
 8005248:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800524a:	2300      	movs	r3, #0
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800524e:	2300      	movs	r3, #0
 8005250:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8005252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 800525c:	2301      	movs	r3, #1
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005260:	2300      	movs	r3, #0
 8005262:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005264:	2300      	movs	r3, #0
 8005266:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005268:	2300      	movs	r3, #0
 800526a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800526c:	f107 0310 	add.w	r3, r7, #16
 8005270:	f241 3288 	movw	r2, #5000	; 0x1388
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f007 f848 	bl	800c30c <HAL_QSPI_Command>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e048      	b.n	8005318 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005286:	f107 030f 	add.w	r3, r7, #15
 800528a:	f241 3288 	movw	r2, #5000	; 0x1388
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f007 f930 	bl	800c4f6 <HAL_QSPI_Receive>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e03b      	b.n	8005318 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f83d 	bl	8005320 <QSPI_WriteEnable>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e033      	b.n	8005318 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80052b0:	2381      	movs	r3, #129	; 0x81
 80052b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	b25b      	sxtb	r3, r3
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	b25a      	sxtb	r2, r3
 80052be:	23f0      	movs	r3, #240	; 0xf0
 80052c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	fa93 f3a3 	rbit	r3, r3
 80052c8:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052cc:	fab3 f383 	clz	r3, r3
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	4619      	mov	r1, r3
 80052d4:	230a      	movs	r3, #10
 80052d6:	408b      	lsls	r3, r1
 80052d8:	b25b      	sxtb	r3, r3
 80052da:	4313      	orrs	r3, r2
 80052dc:	b25b      	sxtb	r3, r3
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052e2:	f107 0310 	add.w	r3, r7, #16
 80052e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f007 f80d 	bl	800c30c <HAL_QSPI_Command>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e00d      	b.n	8005318 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052fc:	f107 030f 	add.w	r3, r7, #15
 8005300:	f241 3288 	movw	r2, #5000	; 0x1388
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f007 f85e 	bl	800c3c8 <HAL_QSPI_Transmit>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3750      	adds	r7, #80	; 0x50
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b096      	sub	sp, #88	; 0x58
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800532c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800532e:	2306      	movs	r3, #6
 8005330:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005332:	2300      	movs	r3, #0
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005336:	2300      	movs	r3, #0
 8005338:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800533a:	2300      	movs	r3, #0
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005342:	2300      	movs	r3, #0
 8005344:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005346:	2300      	movs	r3, #0
 8005348:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800534a:	2300      	movs	r3, #0
 800534c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800534e:	f107 0320 	add.w	r3, r7, #32
 8005352:	f241 3288 	movw	r2, #5000	; 0x1388
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f006 ffd7 	bl	800c30c <HAL_QSPI_Command>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e020      	b.n	80053aa <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8005368:	2302      	movs	r3, #2
 800536a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 800536c:	2302      	movs	r3, #2
 800536e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005370:	2300      	movs	r3, #0
 8005372:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8005374:	2301      	movs	r3, #1
 8005376:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8005378:	2310      	movs	r3, #16
 800537a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800537c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005380:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8005382:	2305      	movs	r3, #5
 8005384:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8005386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800538a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800538c:	f107 0208 	add.w	r2, r7, #8
 8005390:	f107 0120 	add.w	r1, r7, #32
 8005394:	f241 3388 	movw	r3, #5000	; 0x1388
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f007 f94e 	bl	800c63a <HAL_QSPI_AutoPolling>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3758      	adds	r7, #88	; 0x58
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b096      	sub	sp, #88	; 0x58
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80053bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053c0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80053c2:	2305      	movs	r3, #5
 80053c4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80053ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053d2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80053d8:	2300      	movs	r3, #0
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80053dc:	2300      	movs	r3, #0
 80053de:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80053e0:	2300      	movs	r3, #0
 80053e2:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 80053e8:	2301      	movs	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80053f0:	2301      	movs	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80053f4:	2310      	movs	r3, #16
 80053f6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80053f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053fc:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80053fe:	f107 0208 	add.w	r2, r7, #8
 8005402:	f107 0120 	add.w	r1, r7, #32
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f007 f916 	bl	800c63a <HAL_QSPI_AutoPolling>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3758      	adds	r7, #88	; 0x58
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8005432:	887b      	ldrh	r3, [r7, #2]
 8005434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005438:	d005      	beq.n	8005446 <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 800543a:	887b      	ldrh	r3, [r7, #2]
 800543c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005440:	d001      	beq.n	8005446 <start_Audio_Processing+0x22>
		Error_Handler();
 8005442:	f7fd fc73 	bl	8002d2c <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <start_Audio_Processing+0xb4>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	4a23      	ldr	r2, [pc, #140]	; (80054d8 <start_Audio_Processing+0xb4>)
 800544c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005450:	6453      	str	r3, [r2, #68]	; 0x44
 8005452:	4b21      	ldr	r3, [pc, #132]	; (80054d8 <start_Audio_Processing+0xb4>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 800545e:	2034      	movs	r0, #52	; 0x34
 8005460:	f001 fb7a 	bl	8006b58 <wm8994_ReadID>
 8005464:	4603      	mov	r3, r0
 8005466:	f648 1294 	movw	r2, #35220	; 0x8994
 800546a:	4293      	cmp	r3, r2
 800546c:	d001      	beq.n	8005472 <start_Audio_Processing+0x4e>
 800546e:	f7fd fc5d 	bl	8002d2c <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8005472:	2034      	movs	r0, #52	; 0x34
 8005474:	f001 fcf2 	bl	8006e5c <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8005478:	887b      	ldrh	r3, [r7, #2]
 800547a:	f043 0302 	orr.w	r3, r3, #2
 800547e:	b299      	uxth	r1, r3
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	2264      	movs	r2, #100	; 0x64
 8005484:	2034      	movs	r0, #52	; 0x34
 8005486:	f000 fcad 	bl	8005de4 <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 800548a:	887b      	ldrh	r3, [r7, #2]
 800548c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005490:	d104      	bne.n	800549c <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 8005492:	214b      	movs	r1, #75	; 0x4b
 8005494:	2034      	movs	r0, #52	; 0x34
 8005496:	f001 fb6f 	bl	8006b78 <wm8994_SetVolume>
 800549a:	e007      	b.n	80054ac <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 800549c:	887b      	ldrh	r3, [r7, #2]
 800549e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a2:	d103      	bne.n	80054ac <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 80054a4:	21c8      	movs	r1, #200	; 0xc8
 80054a6:	2034      	movs	r0, #52	; 0x34
 80054a8:	f001 fb66 	bl	8006b78 <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 80054ac:	2100      	movs	r1, #0
 80054ae:	2034      	movs	r0, #52	; 0x34
 80054b0:	f001 fc86 	bl	8006dc0 <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	4807      	ldr	r0, [pc, #28]	; (80054dc <start_Audio_Processing+0xb8>)
 80054be:	f009 fc93 	bl	800ede8 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	68f9      	ldr	r1, [r7, #12]
 80054ca:	4805      	ldr	r0, [pc, #20]	; (80054e0 <start_Audio_Processing+0xbc>)
 80054cc:	f009 fbdc 	bl	800ec88 <HAL_SAI_Transmit_DMA>

}
 80054d0:	bf00      	nop
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40023800 	.word	0x40023800
 80054dc:	20009f6c 	.word	0x20009f6c
 80054e0:	2000a198 	.word	0x2000a198

080054e4 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <HAL_SAI_ErrorCallback+0x30>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d103      	bne.n	8005524 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 800551c:	4808      	ldr	r0, [pc, #32]	; (8005540 <HAL_SAI_ErrorCallback+0x34>)
 800551e:	f015 fa21 	bl	801a964 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8005522:	e006      	b.n	8005532 <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a07      	ldr	r2, [pc, #28]	; (8005544 <HAL_SAI_ErrorCallback+0x38>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d102      	bne.n	8005532 <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 800552c:	4806      	ldr	r0, [pc, #24]	; (8005548 <HAL_SAI_ErrorCallback+0x3c>)
 800552e:	f015 fa19 	bl	801a964 <puts>
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	2000a198 	.word	0x2000a198
 8005540:	0801c1a4 	.word	0x0801c1a4
 8005544:	20009f6c 	.word	0x20009f6c
 8005548:	0801c1b4 	.word	0x0801c1b4

0800554c <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005558:	4b2a      	ldr	r3, [pc, #168]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800555e:	4b29      	ldr	r3, [pc, #164]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005560:	2210      	movs	r2, #16
 8005562:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005564:	4b27      	ldr	r3, [pc, #156]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005566:	2201      	movs	r2, #1
 8005568:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800556a:	4b26      	ldr	r3, [pc, #152]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800556c:	2200      	movs	r2, #0
 800556e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005574:	4923      	ldr	r1, [pc, #140]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005576:	4824      	ldr	r0, [pc, #144]	; (8005608 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005578:	f00a feb3 	bl	80102e2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800557c:	2001      	movs	r0, #1
 800557e:	f001 fcfb 	bl	8006f78 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005582:	4b20      	ldr	r3, [pc, #128]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005584:	2202      	movs	r2, #2
 8005586:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005588:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800558a:	2210      	movs	r2, #16
 800558c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800558e:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005590:	2201      	movs	r2, #1
 8005592:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005594:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005596:	2200      	movs	r2, #0
 8005598:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800559a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800559e:	4919      	ldr	r1, [pc, #100]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055a0:	4819      	ldr	r0, [pc, #100]	; (8005608 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80055a2:	f00a fe9e 	bl	80102e2 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80055a6:	4b17      	ldr	r3, [pc, #92]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055a8:	2203      	movs	r2, #3
 80055aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80055ac:	4b15      	ldr	r3, [pc, #84]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055ae:	2210      	movs	r2, #16
 80055b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80055b2:	4b14      	ldr	r3, [pc, #80]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055b4:	2208      	movs	r2, #8
 80055b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80055b8:	4b12      	ldr	r3, [pc, #72]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80055be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055c2:	4910      	ldr	r1, [pc, #64]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055c4:	4810      	ldr	r0, [pc, #64]	; (8005608 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80055c6:	f00a fe8c 	bl	80102e2 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80055ca:	f44f 7308 	mov.w	r3, #544	; 0x220
 80055ce:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80055d0:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055d2:	2204      	movs	r2, #4
 80055d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80055d6:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055d8:	2210      	movs	r2, #16
 80055da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055de:	2201      	movs	r2, #1
 80055e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a07      	ldr	r2, [pc, #28]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055e6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80055e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ec:	4905      	ldr	r1, [pc, #20]	; (8005604 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80055ee:	4806      	ldr	r0, [pc, #24]	; (8005608 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80055f0:	f00a fe77 	bl	80102e2 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4804      	ldr	r0, [pc, #16]	; (8005608 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80055f8:	f00a fe9e 	bl	8010338 <HAL_SDRAM_ProgramRefreshRate>
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	2000038c 	.word	0x2000038c
 8005608:	2000a7f8 	.word	0x2000a7f8

0800560c <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8005610:	20c8      	movs	r0, #200	; 0xc8
 8005612:	f001 fcb1 	bl	8006f78 <HAL_Delay>

	TS_DisableIT();
 8005616:	f000 fab7 	bl	8005b88 <TS_DisableIT>

}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <TS_GetState>:
 * @brief  Returns status and positions of the touch screen.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t TS_GetState(TS_StateTypeDef *TS_State)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b096      	sub	sp, #88	; 0x58
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
	static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
	uint8_t ts_status = TS_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint16_t brute_x[TS_MAX_NB_TOUCH];
	uint16_t brute_y[TS_MAX_NB_TOUCH];
	uint16_t x_diff;
	uint16_t y_diff;
	uint32_t index;
	uint32_t weight = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	61bb      	str	r3, [r7, #24]
	uint32_t area = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
	uint32_t event = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]

	/* Read register FT5336_TD_STAT_REG to check number of touches detection */
	volatile uint8_t nbTouch = TS_I2C_Read(FT5336_TD_STAT_REG) & FT5336_TD_STAT_MASK;
 800563a:	2002      	movs	r0, #2
 800563c:	f7ff f9f6 	bl	8004a2c <TS_I2C_Read>
 8005640:	4603      	mov	r3, r0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	b2db      	uxtb	r3, r3
 800564a:	73fb      	strb	r3, [r7, #15]

	if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH){
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b05      	cmp	r3, #5
 8005652:	d901      	bls.n	8005658 <TS_GetState+0x38>
		/* If invalid number of touch detected, set it to zero */
		nbTouch = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	73fb      	strb	r3, [r7, #15]
	}

	/* Update current number of active touches */
	currActiveTouchNb = nbTouch;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	4b95      	ldr	r3, [pc, #596]	; (80058b4 <TS_GetState+0x294>)
 800565e:	701a      	strb	r2, [r3, #0]

	/* Reset current active touch index on which to work on */
	currActiveTouchIdx = 0;
 8005660:	4b95      	ldr	r3, [pc, #596]	; (80058b8 <TS_GetState+0x298>)
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]

	/* Check and update the number of touches active detected */
	TS_State->touchDetected = nbTouch; // ft5336_TS_DetectTouch();
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	b2da      	uxtb	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	701a      	strb	r2, [r3, #0]

	if(TS_State->touchDetected)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8118 	beq.w	80058a8 <TS_GetState+0x288>
	{
		for(index=0; index < TS_State->touchDetected; index++)
 8005678:	2300      	movs	r3, #0
 800567a:	653b      	str	r3, [r7, #80]	; 0x50
 800567c:	e107      	b.n	800588e <TS_GetState+0x26e>
		{
			/* Get each touch coordinates */
			TS_GetXY(&(brute_x[index]), &(brute_y[index]));
 800567e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	18d0      	adds	r0, r2, r3
 8005688:	f107 021c 	add.w	r2, r7, #28
 800568c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4413      	add	r3, r2
 8005692:	4619      	mov	r1, r3
 8005694:	f000 f990 	bl	80059b8 <TS_GetXY>
				y[index] = 4096 - brute_y[index];
			}

			if(TS_ORIENTATION & TS_SWAP_XY)
			{
				y[index] = brute_x[index];
 8005698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80056a0:	4413      	add	r3, r2
 80056a2:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80056a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80056ae:	440b      	add	r3, r1
 80056b0:	f823 2c24 	strh.w	r2, [r3, #-36]
				x[index] = brute_y[index];
 80056b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80056bc:	4413      	add	r3, r2
 80056be:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80056c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80056ca:	440b      	add	r3, r1
 80056cc:	f823 2c18 	strh.w	r2, [r3, #-24]
			}

			x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80056d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80056d8:	4413      	add	r3, r2
 80056da:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80056de:	4619      	mov	r1, r3
 80056e0:	4a76      	ldr	r2, [pc, #472]	; (80058bc <TS_GetState+0x29c>)
 80056e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e8:	4299      	cmp	r1, r3
 80056ea:	d90e      	bls.n	800570a <TS_GetState+0xea>
 80056ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80056f4:	4413      	add	r3, r2
 80056f6:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80056fa:	4970      	ldr	r1, [pc, #448]	; (80058bc <TS_GetState+0x29c>)
 80056fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005702:	b29b      	uxth	r3, r3
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	b29b      	uxth	r3, r3
 8005708:	e00d      	b.n	8005726 <TS_GetState+0x106>
 800570a:	4a6c      	ldr	r2, [pc, #432]	; (80058bc <TS_GetState+0x29c>)
 800570c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005712:	b29a      	uxth	r2, r3
 8005714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800571c:	440b      	add	r3, r1
 800571e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	b29b      	uxth	r3, r3
 8005726:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800572a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005732:	4413      	add	r3, r2
 8005734:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005738:	4619      	mov	r1, r3
 800573a:	4a61      	ldr	r2, [pc, #388]	; (80058c0 <TS_GetState+0x2a0>)
 800573c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800573e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005742:	4299      	cmp	r1, r3
 8005744:	d90e      	bls.n	8005764 <TS_GetState+0x144>
 8005746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800574e:	4413      	add	r3, r2
 8005750:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005754:	495a      	ldr	r1, [pc, #360]	; (80058c0 <TS_GetState+0x2a0>)
 8005756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005758:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800575c:	b29b      	uxth	r3, r3
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	b29b      	uxth	r3, r3
 8005762:	e00d      	b.n	8005780 <TS_GetState+0x160>
 8005764:	4a56      	ldr	r2, [pc, #344]	; (80058c0 <TS_GetState+0x2a0>)
 8005766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576c:	b29a      	uxth	r2, r3
 800576e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005776:	440b      	add	r3, r1
 8005778:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	b29b      	uxth	r3, r3
 8005780:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			if ((x_diff + y_diff) > 5)
 8005784:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8005788:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800578c:	4413      	add	r3, r2
 800578e:	2b05      	cmp	r3, #5
 8005790:	dd17      	ble.n	80057c2 <TS_GetState+0x1a2>
			{
				_x[index] = x[index];
 8005792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800579a:	4413      	add	r3, r2
 800579c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80057a0:	4619      	mov	r1, r3
 80057a2:	4a46      	ldr	r2, [pc, #280]	; (80058bc <TS_GetState+0x29c>)
 80057a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				_y[index] = y[index];
 80057aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80057b2:	4413      	add	r3, r2
 80057b4:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80057b8:	4619      	mov	r1, r3
 80057ba:	4a41      	ldr	r2, [pc, #260]	; (80058c0 <TS_GetState+0x2a0>)
 80057bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			TS_State->touchX[index] = x[index];
 80057c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80057ca:	4413      	add	r3, r2
 80057cc:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	460a      	mov	r2, r1
 80057da:	805a      	strh	r2, [r3, #2]
			TS_State->touchY[index] = y[index];
 80057dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80057e4:	4413      	add	r3, r2
 80057e6:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ee:	3304      	adds	r3, #4
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4413      	add	r3, r2
 80057f4:	460a      	mov	r2, r1
 80057f6:	809a      	strh	r2, [r3, #4]

			/* Get touch info related to the current touch */
			TS_GetTouchInfo(index, &weight, &area, &event);
 80057f8:	f107 0310 	add.w	r3, r7, #16
 80057fc:	f107 0214 	add.w	r2, r7, #20
 8005800:	f107 0118 	add.w	r1, r7, #24
 8005804:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005806:	f000 f9cf 	bl	8005ba8 <TS_GetTouchInfo>

			/* Update TS_State structure */
			TS_State->touchWeight[index] = weight;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	b2d9      	uxtb	r1, r3
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005812:	4413      	add	r3, r2
 8005814:	3316      	adds	r3, #22
 8005816:	460a      	mov	r2, r1
 8005818:	701a      	strb	r2, [r3, #0]
			TS_State->touchArea[index]   = area;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	b2d9      	uxtb	r1, r3
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005822:	4413      	add	r3, r2
 8005824:	3320      	adds	r3, #32
 8005826:	460a      	mov	r2, r1
 8005828:	701a      	strb	r2, [r3, #0]

			/* Remap touch event */
			switch(event)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d827      	bhi.n	8005880 <TS_GetState+0x260>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <TS_GetState+0x218>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	08005849 	.word	0x08005849
 800583c:	08005857 	.word	0x08005857
 8005840:	08005865 	.word	0x08005865
 8005844:	08005873 	.word	0x08005873
			{
			case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
				TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800584c:	4413      	add	r3, r2
 800584e:	331b      	adds	r3, #27
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
				break;
 8005854:	e018      	b.n	8005888 <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
				TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585a:	4413      	add	r3, r2
 800585c:	331b      	adds	r3, #27
 800585e:	2202      	movs	r2, #2
 8005860:	701a      	strb	r2, [r3, #0]
				break;
 8005862:	e011      	b.n	8005888 <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_CONTACT :
				TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005868:	4413      	add	r3, r2
 800586a:	331b      	adds	r3, #27
 800586c:	2203      	movs	r2, #3
 800586e:	701a      	strb	r2, [r3, #0]
				break;
 8005870:	e00a      	b.n	8005888 <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
				TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005876:	4413      	add	r3, r2
 8005878:	331b      	adds	r3, #27
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
				break;
 800587e:	e003      	b.n	8005888 <TS_GetState+0x268>
			default :
				ts_status = TS_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8005886:	bf00      	nop
		for(index=0; index < TS_State->touchDetected; index++)
 8005888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588a:	3301      	adds	r3, #1
 800588c:	653b      	str	r3, [r7, #80]	; 0x50
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005896:	4293      	cmp	r3, r2
 8005898:	f4ff aef1 	bcc.w	800567e <TS_GetState+0x5e>


		} /* of for(index=0; index < TS_State->touchDetected; index++) */

		/* Get gesture Id */
		ts_status = TS_Get_GestureId(TS_State);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f811 	bl	80058c4 <TS_Get_GestureId>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	} /* end of if(TS_State->touchDetected != 0) */

	return (ts_status);
 80058a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3758      	adds	r7, #88	; 0x58
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	2000039c 	.word	0x2000039c
 80058b8:	2000039d 	.word	0x2000039d
 80058bc:	200003a0 	.word	0x200003a0
 80058c0:	200003b4 	.word	0x200003b4

080058c4 <TS_Get_GestureId>:
 * @brief  Update gesture Id following a touch detected.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	uint32_t gestureId = TS_I2C_Read(FT5336_GEST_ID_REG);
 80058cc:	2001      	movs	r0, #1
 80058ce:	f7ff f8ad 	bl	8004a2c <TS_I2C_Read>
 80058d2:	4603      	mov	r3, r0
 80058d4:	60fb      	str	r3, [r7, #12]

	//ft5336_TS_GetGestureID(&gestureId);

	/* Remap gesture Id to a TS_GestureIdTypeDef value */
	switch(gestureId)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b49      	cmp	r3, #73	; 0x49
 80058da:	d061      	beq.n	80059a0 <TS_Get_GestureId+0xdc>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b49      	cmp	r3, #73	; 0x49
 80058e0:	d862      	bhi.n	80059a8 <TS_Get_GestureId+0xe4>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b1c      	cmp	r3, #28
 80058e6:	d83f      	bhi.n	8005968 <TS_Get_GestureId+0xa4>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b1c      	cmp	r3, #28
 80058ec:	d85c      	bhi.n	80059a8 <TS_Get_GestureId+0xe4>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <TS_Get_GestureId+0x30>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005971 	.word	0x08005971
 80058f8:	080059a9 	.word	0x080059a9
 80058fc:	080059a9 	.word	0x080059a9
 8005900:	080059a9 	.word	0x080059a9
 8005904:	080059a9 	.word	0x080059a9
 8005908:	080059a9 	.word	0x080059a9
 800590c:	080059a9 	.word	0x080059a9
 8005910:	080059a9 	.word	0x080059a9
 8005914:	080059a9 	.word	0x080059a9
 8005918:	080059a9 	.word	0x080059a9
 800591c:	080059a9 	.word	0x080059a9
 8005920:	080059a9 	.word	0x080059a9
 8005924:	080059a9 	.word	0x080059a9
 8005928:	080059a9 	.word	0x080059a9
 800592c:	080059a9 	.word	0x080059a9
 8005930:	080059a9 	.word	0x080059a9
 8005934:	08005979 	.word	0x08005979
 8005938:	080059a9 	.word	0x080059a9
 800593c:	080059a9 	.word	0x080059a9
 8005940:	080059a9 	.word	0x080059a9
 8005944:	08005981 	.word	0x08005981
 8005948:	080059a9 	.word	0x080059a9
 800594c:	080059a9 	.word	0x080059a9
 8005950:	080059a9 	.word	0x080059a9
 8005954:	08005989 	.word	0x08005989
 8005958:	080059a9 	.word	0x080059a9
 800595c:	080059a9 	.word	0x080059a9
 8005960:	080059a9 	.word	0x080059a9
 8005964:	08005991 	.word	0x08005991
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	d014      	beq.n	8005998 <TS_Get_GestureId+0xd4>
 800596e:	e01b      	b.n	80059a8 <TS_Get_GestureId+0xe4>
	{
	case FT5336_GEST_ID_NO_GESTURE :
		TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005976:	e019      	b.n	80059ac <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_UP :
		TS_State->gestureId = GEST_ID_MOVE_UP;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 800597e:	e015      	b.n	80059ac <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_RIGHT :
		TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005986:	e011      	b.n	80059ac <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_DOWN :
		TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2203      	movs	r2, #3
 800598c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 800598e:	e00d      	b.n	80059ac <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_LEFT :
		TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2204      	movs	r2, #4
 8005994:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005996:	e009      	b.n	80059ac <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_ZOOM_IN :
		TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2205      	movs	r2, #5
 800599c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 800599e:	e005      	b.n	80059ac <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_ZOOM_OUT :
		TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2206      	movs	r2, #6
 80059a4:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80059a6:	e001      	b.n	80059ac <TS_Get_GestureId+0xe8>
	default :
		return TS_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <TS_Get_GestureId+0xea>
	} /* of switch(gestureId) */

	return TS_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop

080059b8 <TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
static void TS_GetXY(uint16_t *X, uint16_t *Y)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  volatile uint8_t ucReadData = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	72fb      	strb	r3, [r7, #11]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
  uint8_t regAddressXHigh = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	73bb      	strb	r3, [r7, #14]
  uint8_t regAddressYLow = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	737b      	strb	r3, [r7, #13]
  uint8_t regAddressYHigh = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	733b      	strb	r3, [r7, #12]

  if(currActiveTouchIdx < currActiveTouchNb)
 80059d6:	4b69      	ldr	r3, [pc, #420]	; (8005b7c <TS_GetXY+0x1c4>)
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	4b69      	ldr	r3, [pc, #420]	; (8005b80 <TS_GetXY+0x1c8>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	f080 80c7 	bcs.w	8005b72 <TS_GetXY+0x1ba>
  {
    switch(currActiveTouchIdx)
 80059e4:	4b65      	ldr	r3, [pc, #404]	; (8005b7c <TS_GetXY+0x1c4>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b09      	cmp	r3, #9
 80059ea:	d871      	bhi.n	8005ad0 <TS_GetXY+0x118>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <TS_GetXY+0x3c>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a1d 	.word	0x08005a1d
 80059f8:	08005a2f 	.word	0x08005a2f
 80059fc:	08005a41 	.word	0x08005a41
 8005a00:	08005a53 	.word	0x08005a53
 8005a04:	08005a65 	.word	0x08005a65
 8005a08:	08005a77 	.word	0x08005a77
 8005a0c:	08005a89 	.word	0x08005a89
 8005a10:	08005a9b 	.word	0x08005a9b
 8005a14:	08005aad 	.word	0x08005aad
 8005a18:	08005abf 	.word	0x08005abf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P1_XH_REG;
 8005a20:	2303      	movs	r3, #3
 8005a22:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P1_YL_REG;
 8005a24:	2306      	movs	r3, #6
 8005a26:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P1_YH_REG;
 8005a28:	2305      	movs	r3, #5
 8005a2a:	733b      	strb	r3, [r7, #12]
      break;
 8005a2c:	e051      	b.n	8005ad2 <TS_GetXY+0x11a>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8005a2e:	230a      	movs	r3, #10
 8005a30:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P2_XH_REG;
 8005a32:	2309      	movs	r3, #9
 8005a34:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P2_YL_REG;
 8005a36:	230c      	movs	r3, #12
 8005a38:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P2_YH_REG;
 8005a3a:	230b      	movs	r3, #11
 8005a3c:	733b      	strb	r3, [r7, #12]
      break;
 8005a3e:	e048      	b.n	8005ad2 <TS_GetXY+0x11a>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8005a40:	2310      	movs	r3, #16
 8005a42:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P3_XH_REG;
 8005a44:	230f      	movs	r3, #15
 8005a46:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P3_YL_REG;
 8005a48:	2312      	movs	r3, #18
 8005a4a:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P3_YH_REG;
 8005a4c:	2311      	movs	r3, #17
 8005a4e:	733b      	strb	r3, [r7, #12]
      break;
 8005a50:	e03f      	b.n	8005ad2 <TS_GetXY+0x11a>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8005a52:	2316      	movs	r3, #22
 8005a54:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P4_XH_REG;
 8005a56:	2315      	movs	r3, #21
 8005a58:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P4_YL_REG;
 8005a5a:	2318      	movs	r3, #24
 8005a5c:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P4_YH_REG;
 8005a5e:	2317      	movs	r3, #23
 8005a60:	733b      	strb	r3, [r7, #12]
      break;
 8005a62:	e036      	b.n	8005ad2 <TS_GetXY+0x11a>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8005a64:	231c      	movs	r3, #28
 8005a66:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P5_XH_REG;
 8005a68:	231b      	movs	r3, #27
 8005a6a:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P5_YL_REG;
 8005a6c:	231e      	movs	r3, #30
 8005a6e:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P5_YH_REG;
 8005a70:	231d      	movs	r3, #29
 8005a72:	733b      	strb	r3, [r7, #12]
      break;
 8005a74:	e02d      	b.n	8005ad2 <TS_GetXY+0x11a>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8005a76:	2322      	movs	r3, #34	; 0x22
 8005a78:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P6_XH_REG;
 8005a7a:	2321      	movs	r3, #33	; 0x21
 8005a7c:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P6_YL_REG;
 8005a7e:	2324      	movs	r3, #36	; 0x24
 8005a80:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P6_YH_REG;
 8005a82:	2323      	movs	r3, #35	; 0x23
 8005a84:	733b      	strb	r3, [r7, #12]
      break;
 8005a86:	e024      	b.n	8005ad2 <TS_GetXY+0x11a>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8005a88:	2328      	movs	r3, #40	; 0x28
 8005a8a:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P7_XH_REG;
 8005a8c:	2327      	movs	r3, #39	; 0x27
 8005a8e:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P7_YL_REG;
 8005a90:	232a      	movs	r3, #42	; 0x2a
 8005a92:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P7_YH_REG;
 8005a94:	2329      	movs	r3, #41	; 0x29
 8005a96:	733b      	strb	r3, [r7, #12]
      break;
 8005a98:	e01b      	b.n	8005ad2 <TS_GetXY+0x11a>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8005a9a:	232e      	movs	r3, #46	; 0x2e
 8005a9c:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P8_XH_REG;
 8005a9e:	232d      	movs	r3, #45	; 0x2d
 8005aa0:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P8_YL_REG;
 8005aa2:	2330      	movs	r3, #48	; 0x30
 8005aa4:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P8_YH_REG;
 8005aa6:	232f      	movs	r3, #47	; 0x2f
 8005aa8:	733b      	strb	r3, [r7, #12]
      break;
 8005aaa:	e012      	b.n	8005ad2 <TS_GetXY+0x11a>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8005aac:	2334      	movs	r3, #52	; 0x34
 8005aae:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P9_XH_REG;
 8005ab0:	2333      	movs	r3, #51	; 0x33
 8005ab2:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P9_YL_REG;
 8005ab4:	2336      	movs	r3, #54	; 0x36
 8005ab6:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P9_YH_REG;
 8005ab8:	2335      	movs	r3, #53	; 0x35
 8005aba:	733b      	strb	r3, [r7, #12]
      break;
 8005abc:	e009      	b.n	8005ad2 <TS_GetXY+0x11a>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8005abe:	233a      	movs	r3, #58	; 0x3a
 8005ac0:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P10_XH_REG;
 8005ac2:	2339      	movs	r3, #57	; 0x39
 8005ac4:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P10_YL_REG;
 8005ac6:	233c      	movs	r3, #60	; 0x3c
 8005ac8:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P10_YH_REG;
 8005aca:	233b      	movs	r3, #59	; 0x3b
 8005acc:	733b      	strb	r3, [r7, #12]
      break;
 8005ace:	e000      	b.n	8005ad2 <TS_GetXY+0x11a>

    default :
      break;
 8005ad0:	bf00      	nop

    } /* end switch(currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_I2C_Read(regAddressXLow);
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe ffa9 	bl	8004a2c <TS_I2C_Read>
 8005ada:	4603      	mov	r3, r0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	72fb      	strb	r3, [r7, #11]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005ae0:	7afb      	ldrb	r3, [r7, #11]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	4b27      	ldr	r3, [pc, #156]	; (8005b84 <TS_GetXY+0x1cc>)
 8005ae8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_I2C_Read(regAddressXHigh);
 8005aea:	7bbb      	ldrb	r3, [r7, #14]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe ff9d 	bl	8004a2c <TS_I2C_Read>
 8005af2:	4603      	mov	r3, r0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	72fb      	strb	r3, [r7, #11]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005af8:	7afb      	ldrb	r3, [r7, #11]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b02:	b21a      	sxth	r2, r3
 8005b04:	4b1f      	ldr	r3, [pc, #124]	; (8005b84 <TS_GetXY+0x1cc>)
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b21b      	sxth	r3, r3
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	b21b      	sxth	r3, r3
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	4b1c      	ldr	r3, [pc, #112]	; (8005b84 <TS_GetXY+0x1cc>)
 8005b12:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8005b14:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <TS_GetXY+0x1cc>)
 8005b16:	881a      	ldrh	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_I2C_Read(regAddressYLow);
 8005b1c:	7b7b      	ldrb	r3, [r7, #13]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe ff84 	bl	8004a2c <TS_I2C_Read>
 8005b24:	4603      	mov	r3, r0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	72fb      	strb	r3, [r7, #11]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005b2a:	7afb      	ldrb	r3, [r7, #11]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <TS_GetXY+0x1cc>)
 8005b32:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_I2C_Read(regAddressYHigh);
 8005b34:	7b3b      	ldrb	r3, [r7, #12]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe ff78 	bl	8004a2c <TS_I2C_Read>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	72fb      	strb	r3, [r7, #11]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005b42:	7afb      	ldrb	r3, [r7, #11]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b4c:	b21a      	sxth	r2, r3
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <TS_GetXY+0x1cc>)
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b21b      	sxth	r3, r3
 8005b54:	4313      	orrs	r3, r2
 8005b56:	b21b      	sxth	r3, r3
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <TS_GetXY+0x1cc>)
 8005b5c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <TS_GetXY+0x1cc>)
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	801a      	strh	r2, [r3, #0]

    currActiveTouchIdx++; /* next call will work on next touch */
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <TS_GetXY+0x1c4>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <TS_GetXY+0x1c4>)
 8005b70:	701a      	strb	r2, [r3, #0]

  } /* of if(currActiveTouchIdx < currActiveTouchNb) */
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	2000039d 	.word	0x2000039d
 8005b80:	2000039c 	.word	0x2000039c
 8005b84:	200003c8 	.word	0x200003c8

08005b88 <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8005b92:	2300      	movs	r3, #0
 8005b94:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	20a4      	movs	r0, #164	; 0xa4
 8005b9c:	f7fe ff2c 	bl	80049f8 <TS_I2C_Write>
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <TS_GetTouchInfo>:
  * @param  pEvent  : Pointer to to get the event information of 'touchIdx'.

  * @retval None.
  */
static void TS_GetTouchInfo(uint32_t   touchIdx, uint32_t * pWeight, uint32_t * pArea, uint32_t * pEvent)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  volatile uint8_t ucReadData = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	757b      	strb	r3, [r7, #21]

  if(touchIdx < currActiveTouchNb)
 8005bc6:	4b4a      	ldr	r3, [pc, #296]	; (8005cf0 <TS_GetTouchInfo+0x148>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	f080 8089 	bcs.w	8005ce6 <TS_GetTouchInfo+0x13e>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b09      	cmp	r3, #9
 8005bd8:	d85c      	bhi.n	8005c94 <TS_GetTouchInfo+0xec>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <TS_GetTouchInfo+0x38>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c17 	.word	0x08005c17
 8005be8:	08005c25 	.word	0x08005c25
 8005bec:	08005c33 	.word	0x08005c33
 8005bf0:	08005c41 	.word	0x08005c41
 8005bf4:	08005c4f 	.word	0x08005c4f
 8005bf8:	08005c5d 	.word	0x08005c5d
 8005bfc:	08005c6b 	.word	0x08005c6b
 8005c00:	08005c79 	.word	0x08005c79
 8005c04:	08005c87 	.word	0x08005c87
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8005c0c:	2307      	movs	r3, #7
 8005c0e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8005c10:	2308      	movs	r3, #8
 8005c12:	757b      	strb	r3, [r7, #21]
      break;
 8005c14:	e03f      	b.n	8005c96 <TS_GetTouchInfo+0xee>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8005c16:	2309      	movs	r3, #9
 8005c18:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8005c1a:	230d      	movs	r3, #13
 8005c1c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8005c1e:	230e      	movs	r3, #14
 8005c20:	757b      	strb	r3, [r7, #21]
      break;
 8005c22:	e038      	b.n	8005c96 <TS_GetTouchInfo+0xee>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8005c24:	230f      	movs	r3, #15
 8005c26:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8005c28:	2313      	movs	r3, #19
 8005c2a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8005c2c:	2314      	movs	r3, #20
 8005c2e:	757b      	strb	r3, [r7, #21]
      break;
 8005c30:	e031      	b.n	8005c96 <TS_GetTouchInfo+0xee>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8005c32:	2315      	movs	r3, #21
 8005c34:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8005c36:	2319      	movs	r3, #25
 8005c38:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8005c3a:	231a      	movs	r3, #26
 8005c3c:	757b      	strb	r3, [r7, #21]
      break;
 8005c3e:	e02a      	b.n	8005c96 <TS_GetTouchInfo+0xee>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8005c40:	231b      	movs	r3, #27
 8005c42:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8005c44:	231f      	movs	r3, #31
 8005c46:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8005c48:	2320      	movs	r3, #32
 8005c4a:	757b      	strb	r3, [r7, #21]
      break;
 8005c4c:	e023      	b.n	8005c96 <TS_GetTouchInfo+0xee>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8005c4e:	2321      	movs	r3, #33	; 0x21
 8005c50:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8005c52:	2325      	movs	r3, #37	; 0x25
 8005c54:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8005c56:	2326      	movs	r3, #38	; 0x26
 8005c58:	757b      	strb	r3, [r7, #21]
      break;
 8005c5a:	e01c      	b.n	8005c96 <TS_GetTouchInfo+0xee>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8005c5c:	2327      	movs	r3, #39	; 0x27
 8005c5e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8005c60:	232b      	movs	r3, #43	; 0x2b
 8005c62:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8005c64:	232c      	movs	r3, #44	; 0x2c
 8005c66:	757b      	strb	r3, [r7, #21]
      break;
 8005c68:	e015      	b.n	8005c96 <TS_GetTouchInfo+0xee>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8005c6a:	232d      	movs	r3, #45	; 0x2d
 8005c6c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8005c6e:	2331      	movs	r3, #49	; 0x31
 8005c70:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8005c72:	2332      	movs	r3, #50	; 0x32
 8005c74:	757b      	strb	r3, [r7, #21]
      break;
 8005c76:	e00e      	b.n	8005c96 <TS_GetTouchInfo+0xee>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8005c78:	2333      	movs	r3, #51	; 0x33
 8005c7a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8005c7c:	2337      	movs	r3, #55	; 0x37
 8005c7e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8005c80:	2338      	movs	r3, #56	; 0x38
 8005c82:	757b      	strb	r3, [r7, #21]
      break;
 8005c84:	e007      	b.n	8005c96 <TS_GetTouchInfo+0xee>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8005c86:	2339      	movs	r3, #57	; 0x39
 8005c88:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8005c8a:	233d      	movs	r3, #61	; 0x3d
 8005c8c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8005c8e:	233e      	movs	r3, #62	; 0x3e
 8005c90:	757b      	strb	r3, [r7, #21]
      break;
 8005c92:	e000      	b.n	8005c96 <TS_GetTouchInfo+0xee>

    default :
      break;
 8005c94:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_I2C_Read(regAddressXHigh);
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fec7 	bl	8004a2c <TS_I2C_Read>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8005ca4:	7d3b      	ldrb	r3, [r7, #20]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	119b      	asrs	r3, r3, #6
 8005caa:	f003 0203 	and.w	r2, r3, #3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_I2C_Read(regAddressPWeight);
 8005cb2:	7dbb      	ldrb	r3, [r7, #22]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe feb9 	bl	8004a2c <TS_I2C_Read>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8005cc0:	7d3b      	ldrb	r3, [r7, #20]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_I2C_Read(regAddressPMisc);
 8005cca:	7d7b      	ldrb	r3, [r7, #21]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fead 	bl	8004a2c <TS_I2C_Read>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8005cd8:	7d3b      	ldrb	r3, [r7, #20]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	111b      	asrs	r3, r3, #4
 8005cde:	f003 0204 	and.w	r2, r3, #4
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < currActiveTouchNb) */
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	2000039c 	.word	0x2000039c

08005cf4 <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 8005cfa:	f001 fcfd 	bl	80076f8 <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8005d02:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8005d06:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8005d08:	231b      	movs	r3, #27
 8005d0a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005d14:	2300      	movs	r3, #0
 8005d16:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8005d24:	2300      	movs	r3, #0
 8005d26:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fd1a 	bl	8007768 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8005d38:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8005d3c:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8005d3e:	2317      	movs	r3, #23
 8005d40:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005d42:	2303      	movs	r3, #3
 8005d44:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8005d52:	2303      	movs	r3, #3
 8005d54:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005d62:	463b      	mov	r3, r7
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 fcff 	bl	8007768 <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 8005d6e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8005d72:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8005d74:	2316      	movs	r3, #22
 8005d76:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8005d90:	2300      	movs	r3, #0
 8005d92:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005d94:	2301      	movs	r3, #1
 8005d96:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005d98:	463b      	mov	r3, r7
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fce4 	bl	8007768 <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 8005da4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005da8:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8005daa:	2312      	movs	r3, #18
 8005dac:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005dae:	2303      	movs	r3, #3
 8005db0:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005dce:	463b      	mov	r3, r7
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fcc9 	bl	8007768 <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005dd6:	2004      	movs	r0, #4
 8005dd8:	f001 fca6 	bl	8007728 <HAL_MPU_Enable>

}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	4603      	mov	r3, r0
 8005dee:	81fb      	strh	r3, [r7, #14]
 8005df0:	460b      	mov	r3, r1
 8005df2:	81bb      	strh	r3, [r7, #12]
 8005df4:	4613      	mov	r3, r2
 8005df6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8005dfc:	89bb      	ldrh	r3, [r7, #12]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8005e02:	89bb      	ldrh	r3, [r7, #12]
 8005e04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e08:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8005e0e:	89fb      	ldrh	r3, [r7, #14]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2203      	movs	r2, #3
 8005e14:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 f83f 	bl	8006e9c <CODEC_IO_Write>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	461a      	mov	r2, r3
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8005e28:	89fb      	ldrh	r3, [r7, #14]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f640 0117 	movw	r1, #2071	; 0x817
 8005e32:	4618      	mov	r0, r3
 8005e34:	f001 f832 	bl	8006e9c <CODEC_IO_Write>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8005e42:	89fb      	ldrh	r3, [r7, #14]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2200      	movs	r2, #0
 8005e48:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 f825 	bl	8006e9c <CODEC_IO_Write>
 8005e52:	4603      	mov	r3, r0
 8005e54:	461a      	mov	r2, r3
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8005e5c:	89fb      	ldrh	r3, [r7, #14]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	226c      	movs	r2, #108	; 0x6c
 8005e62:	2139      	movs	r1, #57	; 0x39
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 f819 	bl	8006e9c <CODEC_IO_Write>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8005e74:	8afb      	ldrh	r3, [r7, #22]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00c      	beq.n	8005e94 <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8005e7a:	89fb      	ldrh	r3, [r7, #14]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2213      	movs	r2, #19
 8005e80:	2101      	movs	r1, #1
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f80a 	bl	8006e9c <CODEC_IO_Write>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	61fb      	str	r3, [r7, #28]
 8005e92:	e00b      	b.n	8005eac <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8005e94:	89fb      	ldrh	r3, [r7, #14]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2203      	movs	r2, #3
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fffd 	bl	8006e9c <CODEC_IO_Write>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 8005eac:	2032      	movs	r0, #50	; 0x32
 8005eae:	f001 f863 	bl	8006f78 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8005eb2:	8b3b      	ldrh	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 815f 	beq.w	8006178 <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 8005eba:	4bae      	ldr	r3, [pc, #696]	; (8006174 <wm8994_Init+0x390>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8005ec0:	8b3b      	ldrh	r3, [r7, #24]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	f000 808c 	beq.w	8005fe0 <wm8994_Init+0x1fc>
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	f300 8111 	bgt.w	80060f0 <wm8994_Init+0x30c>
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d002      	beq.n	8005ed8 <wm8994_Init+0xf4>
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d042      	beq.n	8005f5c <wm8994_Init+0x178>
 8005ed6:	e10b      	b.n	80060f0 <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005ed8:	89fb      	ldrh	r3, [r7, #14]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005ee0:	2105      	movs	r1, #5
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 ffda 	bl	8006e9c <CODEC_IO_Write>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8005ef2:	89fb      	ldrh	r3, [r7, #14]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f240 6101 	movw	r1, #1537	; 0x601
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 ffcd 	bl	8006e9c <CODEC_IO_Write>
 8005f02:	4603      	mov	r3, r0
 8005f04:	461a      	mov	r2, r3
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8005f0c:	89fb      	ldrh	r3, [r7, #14]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2200      	movs	r2, #0
 8005f12:	f240 6102 	movw	r1, #1538	; 0x602
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 ffc0 	bl	8006e9c <CODEC_IO_Write>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	461a      	mov	r2, r3
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005f26:	89fb      	ldrh	r3, [r7, #14]
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f240 6104 	movw	r1, #1540	; 0x604
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 ffb3 	bl	8006e9c <CODEC_IO_Write>
 8005f36:	4603      	mov	r3, r0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005f40:	89fb      	ldrh	r3, [r7, #14]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2202      	movs	r2, #2
 8005f46:	f240 6105 	movw	r1, #1541	; 0x605
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 ffa6 	bl	8006e9c <CODEC_IO_Write>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	61fb      	str	r3, [r7, #28]
      break;
 8005f5a:	e110      	b.n	800617e <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005f5c:	89fb      	ldrh	r3, [r7, #14]
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	f240 3203 	movw	r2, #771	; 0x303
 8005f64:	2105      	movs	r1, #5
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 ff98 	bl	8006e9c <CODEC_IO_Write>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005f76:	89fb      	ldrh	r3, [r7, #14]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f240 6101 	movw	r1, #1537	; 0x601
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 ff8b 	bl	8006e9c <CODEC_IO_Write>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005f90:	89fb      	ldrh	r3, [r7, #14]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2201      	movs	r2, #1
 8005f96:	f240 6102 	movw	r1, #1538	; 0x602
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 ff7e 	bl	8006e9c <CODEC_IO_Write>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005faa:	89fb      	ldrh	r3, [r7, #14]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f240 6104 	movw	r1, #1540	; 0x604
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 ff71 	bl	8006e9c <CODEC_IO_Write>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005fc4:	89fb      	ldrh	r3, [r7, #14]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f240 6105 	movw	r1, #1541	; 0x605
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 ff64 	bl	8006e9c <CODEC_IO_Write>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	61fb      	str	r3, [r7, #28]
      break;
 8005fde:	e0ce      	b.n	800617e <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005fe0:	8afb      	ldrh	r3, [r7, #22]
 8005fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe6:	d141      	bne.n	800606c <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005fe8:	89fb      	ldrh	r3, [r7, #14]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005ff0:	2105      	movs	r1, #5
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 ff52 	bl	8006e9c <CODEC_IO_Write>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8006002:	89fb      	ldrh	r3, [r7, #14]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2203      	movs	r2, #3
 8006008:	f240 6101 	movw	r1, #1537	; 0x601
 800600c:	4618      	mov	r0, r3
 800600e:	f000 ff45 	bl	8006e9c <CODEC_IO_Write>
 8006012:	4603      	mov	r3, r0
 8006014:	461a      	mov	r2, r3
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2203      	movs	r2, #3
 8006022:	f240 6102 	movw	r1, #1538	; 0x602
 8006026:	4618      	mov	r0, r3
 8006028:	f000 ff38 	bl	8006e9c <CODEC_IO_Write>
 800602c:	4603      	mov	r3, r0
 800602e:	461a      	mov	r2, r3
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8006036:	89fb      	ldrh	r3, [r7, #14]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2203      	movs	r2, #3
 800603c:	f240 6104 	movw	r1, #1540	; 0x604
 8006040:	4618      	mov	r0, r3
 8006042:	f000 ff2b 	bl	8006e9c <CODEC_IO_Write>
 8006046:	4603      	mov	r3, r0
 8006048:	461a      	mov	r2, r3
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8006050:	89fb      	ldrh	r3, [r7, #14]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2203      	movs	r2, #3
 8006056:	f240 6105 	movw	r1, #1541	; 0x605
 800605a:	4618      	mov	r0, r3
 800605c:	f000 ff1e 	bl	8006e9c <CODEC_IO_Write>
 8006060:	4603      	mov	r3, r0
 8006062:	461a      	mov	r2, r3
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 800606a:	e088      	b.n	800617e <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800606c:	89fb      	ldrh	r3, [r7, #14]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006074:	2105      	movs	r1, #5
 8006076:	4618      	mov	r0, r3
 8006078:	f000 ff10 	bl	8006e9c <CODEC_IO_Write>
 800607c:	4603      	mov	r3, r0
 800607e:	461a      	mov	r2, r3
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006086:	89fb      	ldrh	r3, [r7, #14]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2201      	movs	r2, #1
 800608c:	f240 6101 	movw	r1, #1537	; 0x601
 8006090:	4618      	mov	r0, r3
 8006092:	f000 ff03 	bl	8006e9c <CODEC_IO_Write>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80060a0:	89fb      	ldrh	r3, [r7, #14]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2201      	movs	r2, #1
 80060a6:	f240 6102 	movw	r1, #1538	; 0x602
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fef6 	bl	8006e9c <CODEC_IO_Write>
 80060b0:	4603      	mov	r3, r0
 80060b2:	461a      	mov	r2, r3
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	4413      	add	r3, r2
 80060b8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2202      	movs	r2, #2
 80060c0:	f240 6104 	movw	r1, #1540	; 0x604
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fee9 	bl	8006e9c <CODEC_IO_Write>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80060d4:	89fb      	ldrh	r3, [r7, #14]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2202      	movs	r2, #2
 80060da:	f240 6105 	movw	r1, #1541	; 0x605
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fedc 	bl	8006e9c <CODEC_IO_Write>
 80060e4:	4603      	mov	r3, r0
 80060e6:	461a      	mov	r2, r3
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	61fb      	str	r3, [r7, #28]
      break;
 80060ee:	e046      	b.n	800617e <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80060f0:	89fb      	ldrh	r3, [r7, #14]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f240 3203 	movw	r2, #771	; 0x303
 80060f8:	2105      	movs	r1, #5
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fece 	bl	8006e9c <CODEC_IO_Write>
 8006100:	4603      	mov	r3, r0
 8006102:	461a      	mov	r2, r3
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800610a:	89fb      	ldrh	r3, [r7, #14]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2201      	movs	r2, #1
 8006110:	f240 6101 	movw	r1, #1537	; 0x601
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fec1 	bl	8006e9c <CODEC_IO_Write>
 800611a:	4603      	mov	r3, r0
 800611c:	461a      	mov	r2, r3
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006124:	89fb      	ldrh	r3, [r7, #14]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2201      	movs	r2, #1
 800612a:	f240 6102 	movw	r1, #1538	; 0x602
 800612e:	4618      	mov	r0, r3
 8006130:	f000 feb4 	bl	8006e9c <CODEC_IO_Write>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800613e:	89fb      	ldrh	r3, [r7, #14]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2200      	movs	r2, #0
 8006144:	f240 6104 	movw	r1, #1540	; 0x604
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fea7 	bl	8006e9c <CODEC_IO_Write>
 800614e:	4603      	mov	r3, r0
 8006150:	461a      	mov	r2, r3
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	4413      	add	r3, r2
 8006156:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006158:	89fb      	ldrh	r3, [r7, #14]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2200      	movs	r2, #0
 800615e:	f240 6105 	movw	r1, #1541	; 0x605
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fe9a 	bl	8006e9c <CODEC_IO_Write>
 8006168:	4603      	mov	r3, r0
 800616a:	461a      	mov	r2, r3
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	4413      	add	r3, r2
 8006170:	61fb      	str	r3, [r7, #28]
      break;
 8006172:	e004      	b.n	800617e <wm8994_Init+0x39a>
 8006174:	200003cc 	.word	0x200003cc
    }
  }
  else
  {
    outputEnabled = 0;
 8006178:	4b99      	ldr	r3, [pc, #612]	; (80063e0 <wm8994_Init+0x5fc>)
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800617e:	8afb      	ldrh	r3, [r7, #22]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 81ab 	beq.w	80064dc <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 8006186:	4b97      	ldr	r3, [pc, #604]	; (80063e4 <wm8994_Init+0x600>)
 8006188:	2201      	movs	r2, #1
 800618a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800618c:	8afb      	ldrh	r3, [r7, #22]
 800618e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006192:	f000 8129 	beq.w	80063e8 <wm8994_Init+0x604>
 8006196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619a:	f300 819b 	bgt.w	80064d4 <wm8994_Init+0x6f0>
 800619e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a2:	d05a      	beq.n	800625a <wm8994_Init+0x476>
 80061a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a8:	f300 8194 	bgt.w	80064d4 <wm8994_Init+0x6f0>
 80061ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b0:	f000 80c6 	beq.w	8006340 <wm8994_Init+0x55c>
 80061b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b8:	f040 818c 	bne.w	80064d4 <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80061bc:	89fb      	ldrh	r3, [r7, #14]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80061c4:	2104      	movs	r1, #4
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fe68 	bl	8006e9c <CODEC_IO_Write>
 80061cc:	4603      	mov	r3, r0
 80061ce:	461a      	mov	r2, r3
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80061d6:	89fb      	ldrh	r3, [r7, #14]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	22db      	movs	r2, #219	; 0xdb
 80061dc:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fe5b 	bl	8006e9c <CODEC_IO_Write>
 80061e6:	4603      	mov	r3, r0
 80061e8:	461a      	mov	r2, r3
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	4413      	add	r3, r2
 80061ee:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80061f0:	89fb      	ldrh	r3, [r7, #14]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80061f8:	2102      	movs	r1, #2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fe4e 	bl	8006e9c <CODEC_IO_Write>
 8006200:	4603      	mov	r3, r0
 8006202:	461a      	mov	r2, r3
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	4413      	add	r3, r2
 8006208:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800620a:	89fb      	ldrh	r3, [r7, #14]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2202      	movs	r2, #2
 8006210:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fe41 	bl	8006e9c <CODEC_IO_Write>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006224:	89fb      	ldrh	r3, [r7, #14]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2202      	movs	r2, #2
 800622a:	f240 6109 	movw	r1, #1545	; 0x609
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fe34 	bl	8006e9c <CODEC_IO_Write>
 8006234:	4603      	mov	r3, r0
 8006236:	461a      	mov	r2, r3
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800623e:	89fb      	ldrh	r3, [r7, #14]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	220e      	movs	r2, #14
 8006244:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fe27 	bl	8006e9c <CODEC_IO_Write>
 800624e:	4603      	mov	r3, r0
 8006250:	461a      	mov	r2, r3
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	61fb      	str	r3, [r7, #28]
      break;
 8006258:	e143      	b.n	80064e2 <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800625a:	89fb      	ldrh	r3, [r7, #14]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2211      	movs	r2, #17
 8006260:	2128      	movs	r1, #40	; 0x28
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fe1a 	bl	8006e9c <CODEC_IO_Write>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	4413      	add	r3, r2
 8006270:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8006272:	89fb      	ldrh	r3, [r7, #14]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2220      	movs	r2, #32
 8006278:	2129      	movs	r1, #41	; 0x29
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fe0e 	bl	8006e9c <CODEC_IO_Write>
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 800628a:	89fb      	ldrh	r3, [r7, #14]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2220      	movs	r2, #32
 8006290:	212a      	movs	r1, #42	; 0x2a
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fe02 	bl	8006e9c <CODEC_IO_Write>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	4413      	add	r3, r2
 80062a0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80062a2:	89fb      	ldrh	r3, [r7, #14]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f240 3203 	movw	r2, #771	; 0x303
 80062aa:	2104      	movs	r1, #4
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fdf5 	bl	8006e9c <CODEC_IO_Write>
 80062b2:	4603      	mov	r3, r0
 80062b4:	461a      	mov	r2, r3
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80062bc:	89fb      	ldrh	r3, [r7, #14]
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	22db      	movs	r2, #219	; 0xdb
 80062c2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fde8 	bl	8006e9c <CODEC_IO_Write>
 80062cc:	4603      	mov	r3, r0
 80062ce:	461a      	mov	r2, r3
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	4413      	add	r3, r2
 80062d4:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80062d6:	89fb      	ldrh	r3, [r7, #14]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f246 3250 	movw	r2, #25424	; 0x6350
 80062de:	2102      	movs	r1, #2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fddb 	bl	8006e9c <CODEC_IO_Write>
 80062e6:	4603      	mov	r3, r0
 80062e8:	461a      	mov	r2, r3
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80062f0:	89fb      	ldrh	r3, [r7, #14]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2202      	movs	r2, #2
 80062f6:	f240 6106 	movw	r1, #1542	; 0x606
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fdce 	bl	8006e9c <CODEC_IO_Write>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800630a:	89fb      	ldrh	r3, [r7, #14]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2202      	movs	r2, #2
 8006310:	f240 6107 	movw	r1, #1543	; 0x607
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fdc1 	bl	8006e9c <CODEC_IO_Write>
 800631a:	4603      	mov	r3, r0
 800631c:	461a      	mov	r2, r3
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006324:	89fb      	ldrh	r3, [r7, #14]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	220d      	movs	r2, #13
 800632a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fdb4 	bl	8006e9c <CODEC_IO_Write>
 8006334:	4603      	mov	r3, r0
 8006336:	461a      	mov	r2, r3
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	61fb      	str	r3, [r7, #28]
      break;
 800633e:	e0d0      	b.n	80064e2 <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8006340:	89fb      	ldrh	r3, [r7, #14]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8006348:	2104      	movs	r1, #4
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fda6 	bl	8006e9c <CODEC_IO_Write>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800635a:	89fb      	ldrh	r3, [r7, #14]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	22db      	movs	r2, #219	; 0xdb
 8006360:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fd99 	bl	8006e9c <CODEC_IO_Write>
 800636a:	4603      	mov	r3, r0
 800636c:	461a      	mov	r2, r3
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4413      	add	r3, r2
 8006372:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8006374:	89fb      	ldrh	r3, [r7, #14]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f246 3250 	movw	r2, #25424	; 0x6350
 800637c:	2102      	movs	r1, #2
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fd8c 	bl	8006e9c <CODEC_IO_Write>
 8006384:	4603      	mov	r3, r0
 8006386:	461a      	mov	r2, r3
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800638e:	89fb      	ldrh	r3, [r7, #14]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2202      	movs	r2, #2
 8006394:	f240 6106 	movw	r1, #1542	; 0x606
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fd7f 	bl	8006e9c <CODEC_IO_Write>
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80063a8:	89fb      	ldrh	r3, [r7, #14]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2202      	movs	r2, #2
 80063ae:	f240 6107 	movw	r1, #1543	; 0x607
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fd72 	bl	8006e9c <CODEC_IO_Write>
 80063b8:	4603      	mov	r3, r0
 80063ba:	461a      	mov	r2, r3
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80063c2:	89fb      	ldrh	r3, [r7, #14]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	220d      	movs	r2, #13
 80063c8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fd65 	bl	8006e9c <CODEC_IO_Write>
 80063d2:	4603      	mov	r3, r0
 80063d4:	461a      	mov	r2, r3
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	61fb      	str	r3, [r7, #28]
      break;
 80063dc:	e081      	b.n	80064e2 <wm8994_Init+0x6fe>
 80063de:	bf00      	nop
 80063e0:	200003cc 	.word	0x200003cc
 80063e4:	200003d0 	.word	0x200003d0
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80063e8:	89fb      	ldrh	r3, [r7, #14]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f640 723c 	movw	r2, #3900	; 0xf3c
 80063f0:	2104      	movs	r1, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fd52 	bl	8006e9c <CODEC_IO_Write>
 80063f8:	4603      	mov	r3, r0
 80063fa:	461a      	mov	r2, r3
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006402:	89fb      	ldrh	r3, [r7, #14]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	22db      	movs	r2, #219	; 0xdb
 8006408:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fd45 	bl	8006e9c <CODEC_IO_Write>
 8006412:	4603      	mov	r3, r0
 8006414:	461a      	mov	r2, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	4413      	add	r3, r2
 800641a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800641c:	89fb      	ldrh	r3, [r7, #14]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	22db      	movs	r2, #219	; 0xdb
 8006422:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fd38 	bl	8006e9c <CODEC_IO_Write>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8006436:	89fb      	ldrh	r3, [r7, #14]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f246 32a0 	movw	r2, #25504	; 0x63a0
 800643e:	2102      	movs	r1, #2
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fd2b 	bl	8006e9c <CODEC_IO_Write>
 8006446:	4603      	mov	r3, r0
 8006448:	461a      	mov	r2, r3
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006450:	89fb      	ldrh	r3, [r7, #14]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2202      	movs	r2, #2
 8006456:	f240 6106 	movw	r1, #1542	; 0x606
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fd1e 	bl	8006e9c <CODEC_IO_Write>
 8006460:	4603      	mov	r3, r0
 8006462:	461a      	mov	r2, r3
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800646a:	89fb      	ldrh	r3, [r7, #14]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2202      	movs	r2, #2
 8006470:	f240 6107 	movw	r1, #1543	; 0x607
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fd11 	bl	8006e9c <CODEC_IO_Write>
 800647a:	4603      	mov	r3, r0
 800647c:	461a      	mov	r2, r3
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8006484:	89fb      	ldrh	r3, [r7, #14]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2202      	movs	r2, #2
 800648a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fd04 	bl	8006e9c <CODEC_IO_Write>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800649e:	89fb      	ldrh	r3, [r7, #14]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2202      	movs	r2, #2
 80064a4:	f240 6109 	movw	r1, #1545	; 0x609
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fcf7 	bl	8006e9c <CODEC_IO_Write>
 80064ae:	4603      	mov	r3, r0
 80064b0:	461a      	mov	r2, r3
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4413      	add	r3, r2
 80064b6:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80064b8:	89fb      	ldrh	r3, [r7, #14]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	220d      	movs	r2, #13
 80064be:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fcea 	bl	8006e9c <CODEC_IO_Write>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	61fb      	str	r3, [r7, #28]
      break;
 80064d2:	e006      	b.n	80064e2 <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
      break;
 80064da:	e002      	b.n	80064e2 <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 80064dc:	4ba4      	ldr	r3, [pc, #656]	; (8006770 <wm8994_Init+0x98c>)
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4aa3      	ldr	r2, [pc, #652]	; (8006774 <wm8994_Init+0x990>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d079      	beq.n	80065de <wm8994_Init+0x7fa>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4aa1      	ldr	r2, [pc, #644]	; (8006774 <wm8994_Init+0x990>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	f200 80ad 	bhi.w	800664e <wm8994_Init+0x86a>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d061      	beq.n	80065c2 <wm8994_Init+0x7de>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006504:	4293      	cmp	r3, r2
 8006506:	f200 80a2 	bhi.w	800664e <wm8994_Init+0x86a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006510:	4293      	cmp	r3, r2
 8006512:	f000 808e 	beq.w	8006632 <wm8994_Init+0x84e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f64a 4244 	movw	r2, #44100	; 0xac44
 800651c:	4293      	cmp	r3, r2
 800651e:	f200 8096 	bhi.w	800664e <wm8994_Init+0x86a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006528:	d03d      	beq.n	80065a6 <wm8994_Init+0x7c2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006530:	f200 808d 	bhi.w	800664e <wm8994_Init+0x86a>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f245 6222 	movw	r2, #22050	; 0x5622
 800653a:	4293      	cmp	r3, r2
 800653c:	d06b      	beq.n	8006616 <wm8994_Init+0x832>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f245 6222 	movw	r2, #22050	; 0x5622
 8006544:	4293      	cmp	r3, r2
 8006546:	f200 8082 	bhi.w	800664e <wm8994_Init+0x86a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006550:	d01b      	beq.n	800658a <wm8994_Init+0x7a6>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006558:	d879      	bhi.n	800664e <wm8994_Init+0x86a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006560:	d005      	beq.n	800656e <wm8994_Init+0x78a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f642 3211 	movw	r2, #11025	; 0x2b11
 8006568:	4293      	cmp	r3, r2
 800656a:	d046      	beq.n	80065fa <wm8994_Init+0x816>
 800656c:	e06f      	b.n	800664e <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800656e:	89fb      	ldrh	r3, [r7, #14]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2203      	movs	r2, #3
 8006574:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fc8f 	bl	8006e9c <CODEC_IO_Write>
 800657e:	4603      	mov	r3, r0
 8006580:	461a      	mov	r2, r3
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	61fb      	str	r3, [r7, #28]
    break;
 8006588:	e06f      	b.n	800666a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800658a:	89fb      	ldrh	r3, [r7, #14]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2233      	movs	r2, #51	; 0x33
 8006590:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fc81 	bl	8006e9c <CODEC_IO_Write>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]
    break;
 80065a4:	e061      	b.n	800666a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80065a6:	89fb      	ldrh	r3, [r7, #14]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2263      	movs	r2, #99	; 0x63
 80065ac:	f44f 7104 	mov.w	r1, #528	; 0x210
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fc73 	bl	8006e9c <CODEC_IO_Write>
 80065b6:	4603      	mov	r3, r0
 80065b8:	461a      	mov	r2, r3
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	61fb      	str	r3, [r7, #28]
    break;
 80065c0:	e053      	b.n	800666a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80065c2:	89fb      	ldrh	r3, [r7, #14]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2283      	movs	r2, #131	; 0x83
 80065c8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fc65 	bl	8006e9c <CODEC_IO_Write>
 80065d2:	4603      	mov	r3, r0
 80065d4:	461a      	mov	r2, r3
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	61fb      	str	r3, [r7, #28]
    break;
 80065dc:	e045      	b.n	800666a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80065de:	89fb      	ldrh	r3, [r7, #14]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	22a3      	movs	r2, #163	; 0xa3
 80065e4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fc57 	bl	8006e9c <CODEC_IO_Write>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	61fb      	str	r3, [r7, #28]
    break;
 80065f8:	e037      	b.n	800666a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80065fa:	89fb      	ldrh	r3, [r7, #14]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2213      	movs	r2, #19
 8006600:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fc49 	bl	8006e9c <CODEC_IO_Write>
 800660a:	4603      	mov	r3, r0
 800660c:	461a      	mov	r2, r3
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	61fb      	str	r3, [r7, #28]
    break;
 8006614:	e029      	b.n	800666a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8006616:	89fb      	ldrh	r3, [r7, #14]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2243      	movs	r2, #67	; 0x43
 800661c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fc3b 	bl	8006e9c <CODEC_IO_Write>
 8006626:	4603      	mov	r3, r0
 8006628:	461a      	mov	r2, r3
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	61fb      	str	r3, [r7, #28]
    break;
 8006630:	e01b      	b.n	800666a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8006632:	89fb      	ldrh	r3, [r7, #14]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2273      	movs	r2, #115	; 0x73
 8006638:	f44f 7104 	mov.w	r1, #528	; 0x210
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fc2d 	bl	8006e9c <CODEC_IO_Write>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	61fb      	str	r3, [r7, #28]
    break;
 800664c:	e00d      	b.n	800666a <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800664e:	89fb      	ldrh	r3, [r7, #14]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2283      	movs	r2, #131	; 0x83
 8006654:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fc1f 	bl	8006e9c <CODEC_IO_Write>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	61fb      	str	r3, [r7, #28]
    break;
 8006668:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800666a:	8afb      	ldrh	r3, [r7, #22]
 800666c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006670:	d10e      	bne.n	8006690 <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 8006672:	89fb      	ldrh	r3, [r7, #14]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f244 0218 	movw	r2, #16408	; 0x4018
 800667a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fc0c 	bl	8006e9c <CODEC_IO_Write>
 8006684:	4603      	mov	r3, r0
 8006686:	461a      	mov	r2, r3
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	e00d      	b.n	80066ac <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8006690:	89fb      	ldrh	r3, [r7, #14]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f244 0210 	movw	r2, #16400	; 0x4010
 8006698:	f44f 7140 	mov.w	r1, #768	; 0x300
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fbfd 	bl	8006e9c <CODEC_IO_Write>
 80066a2:	4603      	mov	r3, r0
 80066a4:	461a      	mov	r2, r3
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80066ac:	89fb      	ldrh	r3, [r7, #14]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2200      	movs	r2, #0
 80066b2:	f240 3102 	movw	r1, #770	; 0x302
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fbf0 	bl	8006e9c <CODEC_IO_Write>
 80066bc:	4603      	mov	r3, r0
 80066be:	461a      	mov	r2, r3
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	4413      	add	r3, r2
 80066c4:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80066c6:	89fb      	ldrh	r3, [r7, #14]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	220a      	movs	r2, #10
 80066cc:	f44f 7102 	mov.w	r1, #520	; 0x208
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fbe3 	bl	8006e9c <CODEC_IO_Write>
 80066d6:	4603      	mov	r3, r0
 80066d8:	461a      	mov	r2, r3
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80066e0:	89fb      	ldrh	r3, [r7, #14]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2201      	movs	r2, #1
 80066e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fbd6 	bl	8006e9c <CODEC_IO_Write>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80066fa:	8b3b      	ldrh	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 817b 	beq.w	80069f8 <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8006702:	8b3b      	ldrh	r3, [r7, #24]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d157      	bne.n	80067b8 <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8006708:	89fb      	ldrh	r3, [r7, #14]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006710:	212d      	movs	r1, #45	; 0x2d
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fbc2 	bl	8006e9c <CODEC_IO_Write>
 8006718:	4603      	mov	r3, r0
 800671a:	461a      	mov	r2, r3
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 8006722:	89fb      	ldrh	r3, [r7, #14]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800672a:	212e      	movs	r1, #46	; 0x2e
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fbb5 	bl	8006e9c <CODEC_IO_Write>
 8006732:	4603      	mov	r3, r0
 8006734:	461a      	mov	r2, r3
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	4413      	add	r3, r2
 800673a:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 800673c:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <wm8994_Init+0x994>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01b      	beq.n	800677c <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8006744:	89fb      	ldrh	r3, [r7, #14]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 800674c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fba3 	bl	8006e9c <CODEC_IO_Write>
 8006756:	4603      	mov	r3, r0
 8006758:	461a      	mov	r2, r3
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <wm8994_Init+0x994>)
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 8006766:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800676a:	f000 fc05 	bl	8006f78 <HAL_Delay>
 800676e:	e016      	b.n	800679e <wm8994_Init+0x9ba>
 8006770:	200003d0 	.word	0x200003d0
 8006774:	00017700 	.word	0x00017700
 8006778:	20000014 	.word	0x20000014
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 800677c:	89fb      	ldrh	r3, [r7, #14]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f248 1208 	movw	r2, #33032	; 0x8108
 8006784:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fb87 	bl	8006e9c <CODEC_IO_Write>
 800678e:	4603      	mov	r3, r0
 8006790:	461a      	mov	r2, r3
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 8006798:	2032      	movs	r0, #50	; 0x32
 800679a:	f000 fbed 	bl	8006f78 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800679e:	89fb      	ldrh	r3, [r7, #14]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2200      	movs	r2, #0
 80067a4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fb77 	bl	8006e9c <CODEC_IO_Write>
 80067ae:	4603      	mov	r3, r0
 80067b0:	461a      	mov	r2, r3
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80067b8:	89fb      	ldrh	r3, [r7, #14]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80067c0:	2103      	movs	r1, #3
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fb6a 	bl	8006e9c <CODEC_IO_Write>
 80067c8:	4603      	mov	r3, r0
 80067ca:	461a      	mov	r2, r3
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	4413      	add	r3, r2
 80067d0:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80067d2:	89fb      	ldrh	r3, [r7, #14]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2200      	movs	r2, #0
 80067d8:	2122      	movs	r1, #34	; 0x22
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fb5e 	bl	8006e9c <CODEC_IO_Write>
 80067e0:	4603      	mov	r3, r0
 80067e2:	461a      	mov	r2, r3
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80067ea:	89fb      	ldrh	r3, [r7, #14]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2200      	movs	r2, #0
 80067f0:	2123      	movs	r1, #35	; 0x23
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fb52 	bl	8006e9c <CODEC_IO_Write>
 80067f8:	4603      	mov	r3, r0
 80067fa:	461a      	mov	r2, r3
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	4413      	add	r3, r2
 8006800:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8006802:	89fb      	ldrh	r3, [r7, #14]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f44f 7240 	mov.w	r2, #768	; 0x300
 800680a:	2136      	movs	r1, #54	; 0x36
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fb45 	bl	8006e9c <CODEC_IO_Write>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	4413      	add	r3, r2
 800681a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 800681c:	89fb      	ldrh	r3, [r7, #14]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f243 0203 	movw	r2, #12291	; 0x3003
 8006824:	2101      	movs	r1, #1
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fb38 	bl	8006e9c <CODEC_IO_Write>
 800682c:	4603      	mov	r3, r0
 800682e:	461a      	mov	r2, r3
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006836:	8afb      	ldrh	r3, [r7, #22]
 8006838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683c:	d10d      	bne.n	800685a <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800683e:	89fb      	ldrh	r3, [r7, #14]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f240 2205 	movw	r2, #517	; 0x205
 8006846:	2151      	movs	r1, #81	; 0x51
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fb27 	bl	8006e9c <CODEC_IO_Write>
 800684e:	4603      	mov	r3, r0
 8006850:	461a      	mov	r2, r3
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4413      	add	r3, r2
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e00b      	b.n	8006872 <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 800685a:	89fb      	ldrh	r3, [r7, #14]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2205      	movs	r2, #5
 8006860:	2151      	movs	r1, #81	; 0x51
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fb1a 	bl	8006e9c <CODEC_IO_Write>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4413      	add	r3, r2
 8006870:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8006872:	8b7b      	ldrh	r3, [r7, #26]
 8006874:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8006878:	f043 0303 	orr.w	r3, r3, #3
 800687c:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	8b7a      	ldrh	r2, [r7, #26]
 8006884:	2101      	movs	r1, #1
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fb08 	bl	8006e9c <CODEC_IO_Write>
 800688c:	4603      	mov	r3, r0
 800688e:	461a      	mov	r2, r3
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	4413      	add	r3, r2
 8006894:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8006896:	89fb      	ldrh	r3, [r7, #14]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2222      	movs	r2, #34	; 0x22
 800689c:	2160      	movs	r1, #96	; 0x60
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fafc 	bl	8006e9c <CODEC_IO_Write>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80068ae:	89fb      	ldrh	r3, [r7, #14]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f649 7225 	movw	r2, #40741	; 0x9f25
 80068b6:	214c      	movs	r1, #76	; 0x4c
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 faef 	bl	8006e9c <CODEC_IO_Write>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 80068c8:	200f      	movs	r0, #15
 80068ca:	f000 fb55 	bl	8006f78 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80068ce:	89fb      	ldrh	r3, [r7, #14]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2201      	movs	r2, #1
 80068d4:	212d      	movs	r1, #45	; 0x2d
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fae0 	bl	8006e9c <CODEC_IO_Write>
 80068dc:	4603      	mov	r3, r0
 80068de:	461a      	mov	r2, r3
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80068e6:	89fb      	ldrh	r3, [r7, #14]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2201      	movs	r2, #1
 80068ec:	212e      	movs	r1, #46	; 0x2e
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fad4 	bl	8006e9c <CODEC_IO_Write>
 80068f4:	4603      	mov	r3, r0
 80068f6:	461a      	mov	r2, r3
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	4413      	add	r3, r2
 80068fc:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80068fe:	89fb      	ldrh	r3, [r7, #14]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	f44f 724c 	mov.w	r2, #816	; 0x330
 8006906:	2103      	movs	r1, #3
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fac7 	bl	8006e9c <CODEC_IO_Write>
 800690e:	4603      	mov	r3, r0
 8006910:	461a      	mov	r2, r3
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8006918:	89fb      	ldrh	r3, [r7, #14]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2233      	movs	r2, #51	; 0x33
 800691e:	2154      	movs	r1, #84	; 0x54
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fabb 	bl	8006e9c <CODEC_IO_Write>
 8006926:	4603      	mov	r3, r0
 8006928:	461a      	mov	r2, r3
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	4413      	add	r3, r2
 800692e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 8006930:	f240 1001 	movw	r0, #257	; 0x101
 8006934:	f000 fb20 	bl	8006f78 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8006938:	89fb      	ldrh	r3, [r7, #14]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	22ee      	movs	r2, #238	; 0xee
 800693e:	2160      	movs	r1, #96	; 0x60
 8006940:	4618      	mov	r0, r3
 8006942:	f000 faab 	bl	8006e9c <CODEC_IO_Write>
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8006950:	89fb      	ldrh	r3, [r7, #14]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	22c0      	movs	r2, #192	; 0xc0
 8006956:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fa9e 	bl	8006e9c <CODEC_IO_Write>
 8006960:	4603      	mov	r3, r0
 8006962:	461a      	mov	r2, r3
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	4413      	add	r3, r2
 8006968:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800696a:	89fb      	ldrh	r3, [r7, #14]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	22c0      	movs	r2, #192	; 0xc0
 8006970:	f240 6111 	movw	r1, #1553	; 0x611
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fa91 	bl	8006e9c <CODEC_IO_Write>
 800697a:	4603      	mov	r3, r0
 800697c:	461a      	mov	r2, r3
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8006984:	89fb      	ldrh	r3, [r7, #14]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2210      	movs	r2, #16
 800698a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fa84 	bl	8006e9c <CODEC_IO_Write>
 8006994:	4603      	mov	r3, r0
 8006996:	461a      	mov	r2, r3
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800699e:	89fb      	ldrh	r3, [r7, #14]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	22c0      	movs	r2, #192	; 0xc0
 80069a4:	f240 6112 	movw	r1, #1554	; 0x612
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fa77 	bl	8006e9c <CODEC_IO_Write>
 80069ae:	4603      	mov	r3, r0
 80069b0:	461a      	mov	r2, r3
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80069b8:	89fb      	ldrh	r3, [r7, #14]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	22c0      	movs	r2, #192	; 0xc0
 80069be:	f240 6113 	movw	r1, #1555	; 0x613
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fa6a 	bl	8006e9c <CODEC_IO_Write>
 80069c8:	4603      	mov	r3, r0
 80069ca:	461a      	mov	r2, r3
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	4413      	add	r3, r2
 80069d0:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80069d2:	89fb      	ldrh	r3, [r7, #14]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2210      	movs	r2, #16
 80069d8:	f240 4122 	movw	r1, #1058	; 0x422
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fa5d 	bl	8006e9c <CODEC_IO_Write>
 80069e2:	4603      	mov	r3, r0
 80069e4:	461a      	mov	r2, r3
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80069ec:	7afa      	ldrb	r2, [r7, #11]
 80069ee:	89fb      	ldrh	r3, [r7, #14]
 80069f0:	4611      	mov	r1, r2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f8c0 	bl	8006b78 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80069f8:	8afb      	ldrh	r3, [r7, #22]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80a6 	beq.w	8006b4c <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8006a00:	8afb      	ldrh	r3, [r7, #22]
 8006a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a06:	d003      	beq.n	8006a10 <wm8994_Init+0xc2c>
 8006a08:	8afb      	ldrh	r3, [r7, #22]
 8006a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0e:	d12b      	bne.n	8006a68 <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8006a10:	8b7b      	ldrh	r3, [r7, #26]
 8006a12:	f043 0313 	orr.w	r3, r3, #19
 8006a16:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006a18:	89fb      	ldrh	r3, [r7, #14]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	8b7a      	ldrh	r2, [r7, #26]
 8006a1e:	2101      	movs	r1, #1
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fa3b 	bl	8006e9c <CODEC_IO_Write>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8006a30:	89fb      	ldrh	r3, [r7, #14]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2202      	movs	r2, #2
 8006a36:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fa2e 	bl	8006e9c <CODEC_IO_Write>
 8006a40:	4603      	mov	r3, r0
 8006a42:	461a      	mov	r2, r3
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	4413      	add	r3, r2
 8006a48:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8006a4a:	89fb      	ldrh	r3, [r7, #14]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006a52:	f240 4111 	movw	r1, #1041	; 0x411
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fa20 	bl	8006e9c <CODEC_IO_Write>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	461a      	mov	r2, r3
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	4413      	add	r3, r2
 8006a64:	61fb      	str	r3, [r7, #28]
 8006a66:	e06b      	b.n	8006b40 <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006a68:	8afb      	ldrh	r3, [r7, #22]
 8006a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a6e:	d139      	bne.n	8006ae4 <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8006a70:	8b7b      	ldrh	r3, [r7, #26]
 8006a72:	f043 0313 	orr.w	r3, r3, #19
 8006a76:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	8b7a      	ldrh	r2, [r7, #26]
 8006a7e:	2101      	movs	r1, #1
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fa0b 	bl	8006e9c <CODEC_IO_Write>
 8006a86:	4603      	mov	r3, r0
 8006a88:	461a      	mov	r2, r3
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8006a90:	89fb      	ldrh	r3, [r7, #14]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2202      	movs	r2, #2
 8006a96:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 f9fe 	bl	8006e9c <CODEC_IO_Write>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006aaa:	89fb      	ldrh	r3, [r7, #14]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006ab2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 f9f0 	bl	8006e9c <CODEC_IO_Write>
 8006abc:	4603      	mov	r3, r0
 8006abe:	461a      	mov	r2, r3
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 8006ac6:	89fb      	ldrh	r3, [r7, #14]
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006ace:	f240 4111 	movw	r1, #1041	; 0x411
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 f9e2 	bl	8006e9c <CODEC_IO_Write>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	461a      	mov	r2, r3
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4413      	add	r3, r2
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	e02d      	b.n	8006b40 <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8006ae4:	8afb      	ldrh	r3, [r7, #22]
 8006ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aea:	d003      	beq.n	8006af4 <wm8994_Init+0xd10>
 8006aec:	8afb      	ldrh	r3, [r7, #22]
 8006aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af2:	d125      	bne.n	8006b40 <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8006af4:	89fb      	ldrh	r3, [r7, #14]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	220b      	movs	r2, #11
 8006afa:	2118      	movs	r1, #24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 f9cd 	bl	8006e9c <CODEC_IO_Write>
 8006b02:	4603      	mov	r3, r0
 8006b04:	461a      	mov	r2, r3
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8006b0c:	89fb      	ldrh	r3, [r7, #14]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	220b      	movs	r2, #11
 8006b12:	211a      	movs	r1, #26
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 f9c1 	bl	8006e9c <CODEC_IO_Write>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006b24:	89fb      	ldrh	r3, [r7, #14]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006b2c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f9b3 	bl	8006e9c <CODEC_IO_Write>
 8006b36:	4603      	mov	r3, r0
 8006b38:	461a      	mov	r2, r3
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006b40:	7afa      	ldrb	r2, [r7, #11]
 8006b42:	89fb      	ldrh	r3, [r7, #14]
 8006b44:	4611      	mov	r1, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f816 	bl	8006b78 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3720      	adds	r7, #32
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop

08006b58 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2100      	movs	r1, #0
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fd ff19 	bl	80049a0 <AUDIO_I2C_Read>
 8006b6e:	4603      	mov	r3, r0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	460a      	mov	r2, r1
 8006b82:	80fb      	strh	r3, [r7, #6]
 8006b84:	4613      	mov	r3, r2
 8006b86:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8006b8c:	797b      	ldrb	r3, [r7, #5]
 8006b8e:	2b64      	cmp	r3, #100	; 0x64
 8006b90:	d80b      	bhi.n	8006baa <wm8994_SetVolume+0x32>
 8006b92:	797a      	ldrb	r2, [r7, #5]
 8006b94:	4613      	mov	r3, r2
 8006b96:	019b      	lsls	r3, r3, #6
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	4a86      	ldr	r2, [pc, #536]	; (8006db4 <wm8994_SetVolume+0x23c>)
 8006b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8006ba0:	1152      	asrs	r2, r2, #5
 8006ba2:	17db      	asrs	r3, r3, #31
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	e000      	b.n	8006bac <wm8994_SetVolume+0x34>
 8006baa:	2364      	movs	r3, #100	; 0x64
 8006bac:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8006bae:	4b82      	ldr	r3, [pc, #520]	; (8006db8 <wm8994_SetVolume+0x240>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 809b 	beq.w	8006cee <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	2b3e      	cmp	r3, #62	; 0x3e
 8006bbc:	d93d      	bls.n	8006c3a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 f8fc 	bl	8006dc0 <wm8994_SetMute>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	f240 127f 	movw	r2, #383	; 0x17f
 8006bd8:	211c      	movs	r1, #28
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f95e 	bl	8006e9c <CODEC_IO_Write>
 8006be0:	4603      	mov	r3, r0
 8006be2:	461a      	mov	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8006bea:	88fb      	ldrh	r3, [r7, #6]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f240 127f 	movw	r2, #383	; 0x17f
 8006bf2:	211d      	movs	r1, #29
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 f951 	bl	8006e9c <CODEC_IO_Write>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4413      	add	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8006c04:	88fb      	ldrh	r3, [r7, #6]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f240 127f 	movw	r2, #383	; 0x17f
 8006c0c:	2126      	movs	r1, #38	; 0x26
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 f944 	bl	8006e9c <CODEC_IO_Write>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f240 127f 	movw	r2, #383	; 0x17f
 8006c26:	2127      	movs	r1, #39	; 0x27
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 f937 	bl	8006e9c <CODEC_IO_Write>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	461a      	mov	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	e059      	b.n	8006cee <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8006c3a:	797b      	ldrb	r3, [r7, #5]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d109      	bne.n	8006c54 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006c40:	88fb      	ldrh	r3, [r7, #6]
 8006c42:	2101      	movs	r1, #1
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 f8bb 	bl	8006dc0 <wm8994_SetMute>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	e04c      	b.n	8006cee <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006c54:	88fb      	ldrh	r3, [r7, #6]
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f8b1 	bl	8006dc0 <wm8994_SetMute>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	b2d8      	uxtb	r0, r3
 8006c6a:	7afb      	ldrb	r3, [r7, #11]
 8006c6c:	b21b      	sxth	r3, r3
 8006c6e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006c72:	b21b      	sxth	r3, r3
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	211c      	movs	r1, #28
 8006c7a:	f000 f90f 	bl	8006e9c <CODEC_IO_Write>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	461a      	mov	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	b2d8      	uxtb	r0, r3
 8006c8c:	7afb      	ldrb	r3, [r7, #11]
 8006c8e:	b21b      	sxth	r3, r3
 8006c90:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006c94:	b21b      	sxth	r3, r3
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	211d      	movs	r1, #29
 8006c9c:	f000 f8fe 	bl	8006e9c <CODEC_IO_Write>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	b2d8      	uxtb	r0, r3
 8006cae:	7afb      	ldrb	r3, [r7, #11]
 8006cb0:	b21b      	sxth	r3, r3
 8006cb2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006cb6:	b21b      	sxth	r3, r3
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2126      	movs	r1, #38	; 0x26
 8006cbe:	f000 f8ed 	bl	8006e9c <CODEC_IO_Write>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	b2d8      	uxtb	r0, r3
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	b21b      	sxth	r3, r3
 8006cd4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006cd8:	b21b      	sxth	r3, r3
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2127      	movs	r1, #39	; 0x27
 8006ce0:	f000 f8dc 	bl	8006e9c <CODEC_IO_Write>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4413      	add	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8006cee:	4b33      	ldr	r3, [pc, #204]	; (8006dbc <wm8994_SetVolume+0x244>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d059      	beq.n	8006daa <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8006cf6:	797b      	ldrb	r3, [r7, #5]
 8006cf8:	2b63      	cmp	r3, #99	; 0x63
 8006cfa:	d80c      	bhi.n	8006d16 <wm8994_SetVolume+0x19e>
 8006cfc:	797a      	ldrb	r2, [r7, #5]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	4a2b      	ldr	r2, [pc, #172]	; (8006db4 <wm8994_SetVolume+0x23c>)
 8006d08:	fb82 1203 	smull	r1, r2, r2, r3
 8006d0c:	1152      	asrs	r2, r2, #5
 8006d0e:	17db      	asrs	r3, r3, #31
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	e000      	b.n	8006d18 <wm8994_SetVolume+0x1a0>
 8006d16:	23ef      	movs	r3, #239	; 0xef
 8006d18:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8006d1a:	88fb      	ldrh	r3, [r7, #6]
 8006d1c:	b2d8      	uxtb	r0, r3
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	b21b      	sxth	r3, r3
 8006d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d26:	b21b      	sxth	r3, r3
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d30:	f000 f8b4 	bl	8006e9c <CODEC_IO_Write>
 8006d34:	4603      	mov	r3, r0
 8006d36:	461a      	mov	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	b2d8      	uxtb	r0, r3
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	b21b      	sxth	r3, r3
 8006d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d4a:	b21b      	sxth	r3, r3
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f240 4101 	movw	r1, #1025	; 0x401
 8006d54:	f000 f8a2 	bl	8006e9c <CODEC_IO_Write>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8006d62:	88fb      	ldrh	r3, [r7, #6]
 8006d64:	b2d8      	uxtb	r0, r3
 8006d66:	7afb      	ldrb	r3, [r7, #11]
 8006d68:	b21b      	sxth	r3, r3
 8006d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d6e:	b21b      	sxth	r3, r3
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	f240 4104 	movw	r1, #1028	; 0x404
 8006d78:	f000 f890 	bl	8006e9c <CODEC_IO_Write>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	461a      	mov	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	b2d8      	uxtb	r0, r3
 8006d8a:	7afb      	ldrb	r3, [r7, #11]
 8006d8c:	b21b      	sxth	r3, r3
 8006d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d92:	b21b      	sxth	r3, r3
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	461a      	mov	r2, r3
 8006d98:	f240 4105 	movw	r1, #1029	; 0x405
 8006d9c:	f000 f87e 	bl	8006e9c <CODEC_IO_Write>
 8006da0:	4603      	mov	r3, r0
 8006da2:	461a      	mov	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8006daa:	68fb      	ldr	r3, [r7, #12]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	51eb851f 	.word	0x51eb851f
 8006db8:	200003cc 	.word	0x200003cc
 8006dbc:	200003d0 	.word	0x200003d0

08006dc0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	6039      	str	r1, [r7, #0]
 8006dca:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8006dd0:	4b21      	ldr	r3, [pc, #132]	; (8006e58 <wm8994_SetMute+0x98>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d039      	beq.n	8006e4c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d11c      	bne.n	8006e18 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8006dde:	88fb      	ldrh	r3, [r7, #6]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 f856 	bl	8006e9c <CODEC_IO_Write>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8006dfa:	88fb      	ldrh	r3, [r7, #6]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e02:	f240 4122 	movw	r1, #1058	; 0x422
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f848 	bl	8006e9c <CODEC_IO_Write>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e019      	b.n	8006e4c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2210      	movs	r2, #16
 8006e1e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 f83a 	bl	8006e9c <CODEC_IO_Write>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2210      	movs	r2, #16
 8006e38:	f240 4122 	movw	r1, #1058	; 0x422
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 f82d 	bl	8006e9c <CODEC_IO_Write>
 8006e42:	4603      	mov	r3, r0
 8006e44:	461a      	mov	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	200003cc 	.word	0x200003cc

08006e5c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f812 	bl	8006e9c <CODEC_IO_Write>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <wm8994_Reset+0x38>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <wm8994_Reset+0x3c>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

  return counter;
 8006e88:	68fb      	ldr	r3, [r7, #12]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200003cc 	.word	0x200003cc
 8006e98:	200003d0 	.word	0x200003d0

08006e9c <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	71fb      	strb	r3, [r7, #7]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	80bb      	strh	r3, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 8006eb2:	887a      	ldrh	r2, [r7, #2]
 8006eb4:	88b9      	ldrh	r1, [r7, #4]
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fd fd47 	bl	800494c <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	b2db      	uxtb	r3, r3
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006ed0:	480d      	ldr	r0, [pc, #52]	; (8006f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006ed2:	490e      	ldr	r1, [pc, #56]	; (8006f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006ed4:	4a0e      	ldr	r2, [pc, #56]	; (8006f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ed8:	e002      	b.n	8006ee0 <LoopCopyDataInit>

08006eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ede:	3304      	adds	r3, #4

08006ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ee4:	d3f9      	bcc.n	8006eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ee6:	4a0b      	ldr	r2, [pc, #44]	; (8006f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ee8:	4c0b      	ldr	r4, [pc, #44]	; (8006f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006eec:	e001      	b.n	8006ef2 <LoopFillZerobss>

08006eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ef0:	3204      	adds	r2, #4

08006ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ef4:	d3fb      	bcc.n	8006eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006ef6:	f7fd f8af 	bl	8004058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006efa:	f013 fba3 	bl	801a644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006efe:	f7fa fbc9 	bl	8001694 <main>
  bx  lr    
 8006f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006f04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f0c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8006f10:	08032258 	.word	0x08032258
  ldr r2, =_sbss
 8006f14:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8006f18:	2004b030 	.word	0x2004b030

08006f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f1c:	e7fe      	b.n	8006f1c <ADC_IRQHandler>

08006f1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f22:	2003      	movs	r0, #3
 8006f24:	f000 fba5 	bl	8007672 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f28:	2000      	movs	r0, #0
 8006f2a:	f7fc ff21 	bl	8003d70 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006f2e:	f7fb ff05 	bl	8002d3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f3c:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <HAL_IncTick+0x20>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <HAL_IncTick+0x24>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4413      	add	r3, r2
 8006f48:	4a04      	ldr	r2, [pc, #16]	; (8006f5c <HAL_IncTick+0x24>)
 8006f4a:	6013      	str	r3, [r2, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000034 	.word	0x20000034
 8006f5c:	2004a4c8 	.word	0x2004a4c8

08006f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  return uwTick;
 8006f64:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <HAL_GetTick+0x14>)
 8006f66:	681b      	ldr	r3, [r3, #0]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	2004a4c8 	.word	0x2004a4c8

08006f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f80:	f7ff ffee 	bl	8006f60 <HAL_GetTick>
 8006f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f90:	d005      	beq.n	8006f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f92:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <HAL_Delay+0x44>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f9e:	bf00      	nop
 8006fa0:	f7ff ffde 	bl	8006f60 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d8f7      	bhi.n	8006fa0 <HAL_Delay+0x28>
  {
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000034 	.word	0x20000034

08006fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e031      	b.n	800703a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fb fed4 	bl	8002d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d116      	bne.n	800702c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007002:	4b10      	ldr	r3, [pc, #64]	; (8007044 <HAL_ADC_Init+0x84>)
 8007004:	4013      	ands	r3, r2
 8007006:	f043 0202 	orr.w	r2, r3, #2
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f964 	bl	80072dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	f023 0303 	bic.w	r3, r3, #3
 8007022:	f043 0201 	orr.w	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	641a      	str	r2, [r3, #64]	; 0x40
 800702a:	e001      	b.n	8007030 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	ffffeefd 	.word	0xffffeefd

08007048 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_ADC_ConfigChannel+0x1c>
 8007060:	2302      	movs	r3, #2
 8007062:	e12a      	b.n	80072ba <HAL_ADC_ConfigChannel+0x272>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b09      	cmp	r3, #9
 8007072:	d93a      	bls.n	80070ea <HAL_ADC_ConfigChannel+0xa2>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800707c:	d035      	beq.n	80070ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68d9      	ldr	r1, [r3, #12]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	4613      	mov	r3, r2
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	4413      	add	r3, r2
 8007092:	3b1e      	subs	r3, #30
 8007094:	2207      	movs	r2, #7
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	43da      	mvns	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	400a      	ands	r2, r1
 80070a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a87      	ldr	r2, [pc, #540]	; (80072c8 <HAL_ADC_ConfigChannel+0x280>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d10a      	bne.n	80070c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68d9      	ldr	r1, [r3, #12]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	061a      	lsls	r2, r3, #24
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80070c2:	e035      	b.n	8007130 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68d9      	ldr	r1, [r3, #12]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	4618      	mov	r0, r3
 80070d6:	4603      	mov	r3, r0
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	4403      	add	r3, r0
 80070dc:	3b1e      	subs	r3, #30
 80070de:	409a      	lsls	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80070e8:	e022      	b.n	8007130 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6919      	ldr	r1, [r3, #16]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	461a      	mov	r2, r3
 80070f8:	4613      	mov	r3, r2
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	2207      	movs	r2, #7
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	43da      	mvns	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	400a      	ands	r2, r1
 800710c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6919      	ldr	r1, [r3, #16]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	4618      	mov	r0, r3
 8007120:	4603      	mov	r3, r0
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	4403      	add	r3, r0
 8007126:	409a      	lsls	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2b06      	cmp	r3, #6
 8007136:	d824      	bhi.n	8007182 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	3b05      	subs	r3, #5
 800714a:	221f      	movs	r2, #31
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	43da      	mvns	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	400a      	ands	r2, r1
 8007158:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	4618      	mov	r0, r3
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	3b05      	subs	r3, #5
 8007174:	fa00 f203 	lsl.w	r2, r0, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	635a      	str	r2, [r3, #52]	; 0x34
 8007180:	e04c      	b.n	800721c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b0c      	cmp	r3, #12
 8007188:	d824      	bhi.n	80071d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	3b23      	subs	r3, #35	; 0x23
 800719c:	221f      	movs	r2, #31
 800719e:	fa02 f303 	lsl.w	r3, r2, r3
 80071a2:	43da      	mvns	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	400a      	ands	r2, r1
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	4618      	mov	r0, r3
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	3b23      	subs	r3, #35	; 0x23
 80071c6:	fa00 f203 	lsl.w	r2, r0, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30
 80071d2:	e023      	b.n	800721c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	3b41      	subs	r3, #65	; 0x41
 80071e6:	221f      	movs	r2, #31
 80071e8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ec:	43da      	mvns	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	400a      	ands	r2, r1
 80071f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	4618      	mov	r0, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	3b41      	subs	r3, #65	; 0x41
 8007210:	fa00 f203 	lsl.w	r2, r0, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a2a      	ldr	r2, [pc, #168]	; (80072cc <HAL_ADC_ConfigChannel+0x284>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d10a      	bne.n	800723c <HAL_ADC_ConfigChannel+0x1f4>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800722e:	d105      	bne.n	800723c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007230:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <HAL_ADC_ConfigChannel+0x288>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	4a26      	ldr	r2, [pc, #152]	; (80072d0 <HAL_ADC_ConfigChannel+0x288>)
 8007236:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800723a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a22      	ldr	r2, [pc, #136]	; (80072cc <HAL_ADC_ConfigChannel+0x284>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d109      	bne.n	800725a <HAL_ADC_ConfigChannel+0x212>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b12      	cmp	r3, #18
 800724c:	d105      	bne.n	800725a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800724e:	4b20      	ldr	r3, [pc, #128]	; (80072d0 <HAL_ADC_ConfigChannel+0x288>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	4a1f      	ldr	r2, [pc, #124]	; (80072d0 <HAL_ADC_ConfigChannel+0x288>)
 8007254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007258:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1b      	ldr	r2, [pc, #108]	; (80072cc <HAL_ADC_ConfigChannel+0x284>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d125      	bne.n	80072b0 <HAL_ADC_ConfigChannel+0x268>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <HAL_ADC_ConfigChannel+0x280>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d003      	beq.n	8007276 <HAL_ADC_ConfigChannel+0x22e>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b11      	cmp	r3, #17
 8007274:	d11c      	bne.n	80072b0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007276:	4b16      	ldr	r3, [pc, #88]	; (80072d0 <HAL_ADC_ConfigChannel+0x288>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	4a15      	ldr	r2, [pc, #84]	; (80072d0 <HAL_ADC_ConfigChannel+0x288>)
 800727c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007280:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a10      	ldr	r2, [pc, #64]	; (80072c8 <HAL_ADC_ConfigChannel+0x280>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d111      	bne.n	80072b0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800728c:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <HAL_ADC_ConfigChannel+0x28c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a11      	ldr	r2, [pc, #68]	; (80072d8 <HAL_ADC_ConfigChannel+0x290>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	0c9a      	lsrs	r2, r3, #18
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80072a2:	e002      	b.n	80072aa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f9      	bne.n	80072a4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	10000012 	.word	0x10000012
 80072cc:	40012000 	.word	0x40012000
 80072d0:	40012300 	.word	0x40012300
 80072d4:	20000008 	.word	0x20000008
 80072d8:	431bde83 	.word	0x431bde83

080072dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80072e4:	4b78      	ldr	r3, [pc, #480]	; (80074c8 <ADC_Init+0x1ec>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	4a77      	ldr	r2, [pc, #476]	; (80074c8 <ADC_Init+0x1ec>)
 80072ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80072ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80072f0:	4b75      	ldr	r3, [pc, #468]	; (80074c8 <ADC_Init+0x1ec>)
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4973      	ldr	r1, [pc, #460]	; (80074c8 <ADC_Init+0x1ec>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800730c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6859      	ldr	r1, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	021a      	lsls	r2, r3, #8
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6859      	ldr	r1, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6899      	ldr	r1, [r3, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736a:	4a58      	ldr	r2, [pc, #352]	; (80074cc <ADC_Init+0x1f0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d022      	beq.n	80073b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800737e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6899      	ldr	r1, [r3, #8]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80073a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6899      	ldr	r1, [r3, #8]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	609a      	str	r2, [r3, #8]
 80073b4:	e00f      	b.n	80073d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80073d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0202 	bic.w	r2, r2, #2
 80073e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6899      	ldr	r1, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	005a      	lsls	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01b      	beq.n	800743c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007412:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007422:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	3b01      	subs	r3, #1
 8007430:	035a      	lsls	r2, r3, #13
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
 800743a:	e007      	b.n	800744c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800744a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	3b01      	subs	r3, #1
 8007468:	051a      	lsls	r2, r3, #20
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6899      	ldr	r1, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800748e:	025a      	lsls	r2, r3, #9
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6899      	ldr	r1, [r3, #8]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	029a      	lsls	r2, r3, #10
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	609a      	str	r2, [r3, #8]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40012300 	.word	0x40012300
 80074cc:	0f000001 	.word	0x0f000001

080074d0 <__NVIC_SetPriorityGrouping>:
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <__NVIC_SetPriorityGrouping+0x40>)
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80074ec:	4013      	ands	r3, r2
 80074ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80074f8:	4b06      	ldr	r3, [pc, #24]	; (8007514 <__NVIC_SetPriorityGrouping+0x44>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074fe:	4a04      	ldr	r2, [pc, #16]	; (8007510 <__NVIC_SetPriorityGrouping+0x40>)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	60d3      	str	r3, [r2, #12]
}
 8007504:	bf00      	nop
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	e000ed00 	.word	0xe000ed00
 8007514:	05fa0000 	.word	0x05fa0000

08007518 <__NVIC_GetPriorityGrouping>:
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800751c:	4b04      	ldr	r3, [pc, #16]	; (8007530 <__NVIC_GetPriorityGrouping+0x18>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	0a1b      	lsrs	r3, r3, #8
 8007522:	f003 0307 	and.w	r3, r3, #7
}
 8007526:	4618      	mov	r0, r3
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	e000ed00 	.word	0xe000ed00

08007534 <__NVIC_EnableIRQ>:
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800753e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007542:	2b00      	cmp	r3, #0
 8007544:	db0b      	blt.n	800755e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	f003 021f 	and.w	r2, r3, #31
 800754c:	4907      	ldr	r1, [pc, #28]	; (800756c <__NVIC_EnableIRQ+0x38>)
 800754e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	2001      	movs	r0, #1
 8007556:	fa00 f202 	lsl.w	r2, r0, r2
 800755a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	e000e100 	.word	0xe000e100

08007570 <__NVIC_DisableIRQ>:
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800757a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800757e:	2b00      	cmp	r3, #0
 8007580:	db12      	blt.n	80075a8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007582:	79fb      	ldrb	r3, [r7, #7]
 8007584:	f003 021f 	and.w	r2, r3, #31
 8007588:	490a      	ldr	r1, [pc, #40]	; (80075b4 <__NVIC_DisableIRQ+0x44>)
 800758a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	2001      	movs	r0, #1
 8007592:	fa00 f202 	lsl.w	r2, r0, r2
 8007596:	3320      	adds	r3, #32
 8007598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800759c:	f3bf 8f4f 	dsb	sy
}
 80075a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80075a2:	f3bf 8f6f 	isb	sy
}
 80075a6:	bf00      	nop
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	e000e100 	.word	0xe000e100

080075b8 <__NVIC_SetPriority>:
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	6039      	str	r1, [r7, #0]
 80075c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	db0a      	blt.n	80075e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	490c      	ldr	r1, [pc, #48]	; (8007604 <__NVIC_SetPriority+0x4c>)
 80075d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d6:	0112      	lsls	r2, r2, #4
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	440b      	add	r3, r1
 80075dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80075e0:	e00a      	b.n	80075f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	4908      	ldr	r1, [pc, #32]	; (8007608 <__NVIC_SetPriority+0x50>)
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	3b04      	subs	r3, #4
 80075f0:	0112      	lsls	r2, r2, #4
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	440b      	add	r3, r1
 80075f6:	761a      	strb	r2, [r3, #24]
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	e000e100 	.word	0xe000e100
 8007608:	e000ed00 	.word	0xe000ed00

0800760c <NVIC_EncodePriority>:
{
 800760c:	b480      	push	{r7}
 800760e:	b089      	sub	sp, #36	; 0x24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	f1c3 0307 	rsb	r3, r3, #7
 8007626:	2b04      	cmp	r3, #4
 8007628:	bf28      	it	cs
 800762a:	2304      	movcs	r3, #4
 800762c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	3304      	adds	r3, #4
 8007632:	2b06      	cmp	r3, #6
 8007634:	d902      	bls.n	800763c <NVIC_EncodePriority+0x30>
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	3b03      	subs	r3, #3
 800763a:	e000      	b.n	800763e <NVIC_EncodePriority+0x32>
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43da      	mvns	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	401a      	ands	r2, r3
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	fa01 f303 	lsl.w	r3, r1, r3
 800765e:	43d9      	mvns	r1, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007664:	4313      	orrs	r3, r2
}
 8007666:	4618      	mov	r0, r3
 8007668:	3724      	adds	r7, #36	; 0x24
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff ff28 	bl	80074d0 <__NVIC_SetPriorityGrouping>
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800769a:	f7ff ff3d 	bl	8007518 <__NVIC_GetPriorityGrouping>
 800769e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	6978      	ldr	r0, [r7, #20]
 80076a6:	f7ff ffb1 	bl	800760c <NVIC_EncodePriority>
 80076aa:	4602      	mov	r2, r0
 80076ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076b0:	4611      	mov	r1, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff ff80 	bl	80075b8 <__NVIC_SetPriority>
}
 80076b8:	bf00      	nop
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff ff30 	bl	8007534 <__NVIC_EnableIRQ>
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80076e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff ff40 	bl	8007570 <__NVIC_DisableIRQ>
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80076fc:	f3bf 8f5f 	dmb	sy
}
 8007700:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007702:	4b07      	ldr	r3, [pc, #28]	; (8007720 <HAL_MPU_Disable+0x28>)
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	4a06      	ldr	r2, [pc, #24]	; (8007720 <HAL_MPU_Disable+0x28>)
 8007708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_MPU_Disable+0x2c>)
 8007710:	2200      	movs	r2, #0
 8007712:	605a      	str	r2, [r3, #4]
}
 8007714:	bf00      	nop
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	e000ed00 	.word	0xe000ed00
 8007724:	e000ed90 	.word	0xe000ed90

08007728 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007730:	4a0b      	ldr	r2, [pc, #44]	; (8007760 <HAL_MPU_Enable+0x38>)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f043 0301 	orr.w	r3, r3, #1
 8007738:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800773a:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <HAL_MPU_Enable+0x3c>)
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	4a09      	ldr	r2, [pc, #36]	; (8007764 <HAL_MPU_Enable+0x3c>)
 8007740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007744:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007746:	f3bf 8f4f 	dsb	sy
}
 800774a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800774c:	f3bf 8f6f 	isb	sy
}
 8007750:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	e000ed90 	.word	0xe000ed90
 8007764:	e000ed00 	.word	0xe000ed00

08007768 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	785a      	ldrb	r2, [r3, #1]
 8007774:	4b1d      	ldr	r3, [pc, #116]	; (80077ec <HAL_MPU_ConfigRegion+0x84>)
 8007776:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d029      	beq.n	80077d4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8007780:	4a1a      	ldr	r2, [pc, #104]	; (80077ec <HAL_MPU_ConfigRegion+0x84>)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	7b1b      	ldrb	r3, [r3, #12]
 800778c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7adb      	ldrb	r3, [r3, #11]
 8007792:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007794:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	7a9b      	ldrb	r3, [r3, #10]
 800779a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800779c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	7b5b      	ldrb	r3, [r3, #13]
 80077a2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80077a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	7b9b      	ldrb	r3, [r3, #14]
 80077aa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80077ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7bdb      	ldrb	r3, [r3, #15]
 80077b2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80077b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7a5b      	ldrb	r3, [r3, #9]
 80077ba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80077bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7a1b      	ldrb	r3, [r3, #8]
 80077c2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80077c4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	7812      	ldrb	r2, [r2, #0]
 80077ca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80077cc:	4a07      	ldr	r2, [pc, #28]	; (80077ec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80077ce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80077d0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80077d2:	e005      	b.n	80077e0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <HAL_MPU_ConfigRegion+0x84>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80077da:	4b04      	ldr	r3, [pc, #16]	; (80077ec <HAL_MPU_ConfigRegion+0x84>)
 80077dc:	2200      	movs	r2, #0
 80077de:	611a      	str	r2, [r3, #16]
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	e000ed90 	.word	0xe000ed90

080077f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e054      	b.n	80078ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	7f5b      	ldrb	r3, [r3, #29]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d105      	bne.n	8007818 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fb fb14 	bl	8002e40 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	791b      	ldrb	r3, [r3, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10c      	bne.n	8007840 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a22      	ldr	r2, [pc, #136]	; (80078b4 <HAL_CRC_Init+0xc4>)
 800782c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0218 	bic.w	r2, r2, #24
 800783c:	609a      	str	r2, [r3, #8]
 800783e:	e00c      	b.n	800785a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6899      	ldr	r1, [r3, #8]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	461a      	mov	r2, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f834 	bl	80078b8 <HAL_CRCEx_Polynomial_Set>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e028      	b.n	80078ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	795b      	ldrb	r3, [r3, #5]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d105      	bne.n	800786e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800786a:	611a      	str	r2, [r3, #16]
 800786c:	e004      	b.n	8007878 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6912      	ldr	r2, [r2, #16]
 8007876:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695a      	ldr	r2, [r3, #20]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699a      	ldr	r2, [r3, #24]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	04c11db7 	.word	0x04c11db7

080078b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80078c8:	231f      	movs	r3, #31
 80078ca:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80078cc:	bf00      	nop
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1e5a      	subs	r2, r3, #1
 80078d2:	613a      	str	r2, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <HAL_CRCEx_Polynomial_Set+0x34>
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0f0      	beq.n	80078ce <HAL_CRCEx_Polynomial_Set+0x16>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b18      	cmp	r3, #24
 80078f0:	d846      	bhi.n	8007980 <HAL_CRCEx_Polynomial_Set+0xc8>
 80078f2:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007987 	.word	0x08007987
 80078fc:	08007981 	.word	0x08007981
 8007900:	08007981 	.word	0x08007981
 8007904:	08007981 	.word	0x08007981
 8007908:	08007981 	.word	0x08007981
 800790c:	08007981 	.word	0x08007981
 8007910:	08007981 	.word	0x08007981
 8007914:	08007981 	.word	0x08007981
 8007918:	08007975 	.word	0x08007975
 800791c:	08007981 	.word	0x08007981
 8007920:	08007981 	.word	0x08007981
 8007924:	08007981 	.word	0x08007981
 8007928:	08007981 	.word	0x08007981
 800792c:	08007981 	.word	0x08007981
 8007930:	08007981 	.word	0x08007981
 8007934:	08007981 	.word	0x08007981
 8007938:	08007969 	.word	0x08007969
 800793c:	08007981 	.word	0x08007981
 8007940:	08007981 	.word	0x08007981
 8007944:	08007981 	.word	0x08007981
 8007948:	08007981 	.word	0x08007981
 800794c:	08007981 	.word	0x08007981
 8007950:	08007981 	.word	0x08007981
 8007954:	08007981 	.word	0x08007981
 8007958:	0800795d 	.word	0x0800795d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d913      	bls.n	800798a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007966:	e010      	b.n	800798a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2b07      	cmp	r3, #7
 800796c:	d90f      	bls.n	800798e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007972:	e00c      	b.n	800798e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2b0f      	cmp	r3, #15
 8007978:	d90b      	bls.n	8007992 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800797e:	e008      	b.n	8007992 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
      break;
 8007984:	e006      	b.n	8007994 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007986:	bf00      	nop
 8007988:	e004      	b.n	8007994 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800798a:	bf00      	nop
 800798c:	e002      	b.n	8007994 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800798e:	bf00      	nop
 8007990:	e000      	b.n	8007994 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007992:	bf00      	nop
  }
  if (status == HAL_OK)
 8007994:	7dfb      	ldrb	r3, [r7, #23]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10d      	bne.n	80079b6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f023 0118 	bic.w	r1, r3, #24
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e069      	b.n	8007aaa <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fb fa4c 	bl	8002e80 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	4b2a      	ldr	r3, [pc, #168]	; (8007ab4 <HAL_DCMI_Init+0xf0>)
 8007a0a:	400b      	ands	r3, r1
 8007a0c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007a22:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007a2e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007a3a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007a46:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8007a52:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b10      	cmp	r3, #16
 8007a62:	d112      	bne.n	8007a8a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	7f1b      	ldrb	r3, [r3, #28]
 8007a68:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	7f5b      	ldrb	r3, [r3, #29]
 8007a6e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007a70:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	7f9b      	ldrb	r3, [r3, #30]
 8007a76:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007a78:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7fdb      	ldrb	r3, [r3, #31]
 8007a80:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8007a86:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007a88:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 021e 	orr.w	r2, r2, #30
 8007a98:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	ffe0f007 	.word	0xffe0f007

08007ab8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d016      	beq.n	8007b00 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ade:	f043 0202 	orr.w	r2, r3, #2
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2204      	movs	r2, #4
 8007aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af2:	4a35      	ldr	r2, [pc, #212]	; (8007bc8 <HAL_DCMI_IRQHandler+0x110>)
 8007af4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fa2a 	bl	8007f54 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01e      	beq.n	8007b48 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b16:	f043 0201 	orr.w	r2, r3, #1
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2204      	movs	r2, #4
 8007b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2a:	4a27      	ldr	r2, [pc, #156]	; (8007bc8 <HAL_DCMI_IRQHandler+0x110>)
 8007b2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 fa0e 	bl	8007f54 <HAL_DMA_Abort_IT>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 f86a 	bl	8007c1c <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 0310 	and.w	r3, r3, #16
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d006      	beq.n	8007b60 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2210      	movs	r2, #16
 8007b58:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f840 	bl	8007be0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d006      	beq.n	8007b78 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2208      	movs	r2, #8
 8007b70:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f83e 	bl	8007bf4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d01d      	beq.n	8007bbe <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d107      	bne.n	8007ba0 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 021e 	bic.w	r2, r2, #30
 8007b9e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0201 	bic.w	r2, r2, #1
 8007bae:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f825 	bl	8007c08 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	08007c1d 	.word	0x08007c1d

08007bcc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d009      	beq.n	8007c48 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff ffbf 	bl	8007bcc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007c64:	f7ff f97c 	bl	8006f60 <HAL_GetTick>
 8007c68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e099      	b.n	8007da8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2202      	movs	r2, #2
 8007c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0201 	bic.w	r2, r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c94:	e00f      	b.n	8007cb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c96:	f7ff f963 	bl	8006f60 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b05      	cmp	r3, #5
 8007ca2:	d908      	bls.n	8007cb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2203      	movs	r2, #3
 8007cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e078      	b.n	8007da8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e8      	bne.n	8007c96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	4b38      	ldr	r3, [pc, #224]	; (8007db0 <HAL_DMA_Init+0x158>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d107      	bne.n	8007d20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f023 0307 	bic.w	r3, r3, #7
 8007d36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d117      	bne.n	8007d7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00e      	beq.n	8007d7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fb15 	bl	800838c <DMA_CheckFifoParam>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d008      	beq.n	8007d7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2240      	movs	r2, #64	; 0x40
 8007d6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007d76:	2301      	movs	r3, #1
 8007d78:	e016      	b.n	8007da8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 facc 	bl	8008320 <DMA_CalcBaseAndBitshift>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d90:	223f      	movs	r2, #63	; 0x3f
 8007d92:	409a      	lsls	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	f010803f 	.word	0xf010803f

08007db4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_DMA_Start_IT+0x26>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e048      	b.n	8007e6c <HAL_DMA_Start_IT+0xb8>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d137      	bne.n	8007e5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2202      	movs	r2, #2
 8007df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 fa5e 	bl	80082c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e0c:	223f      	movs	r2, #63	; 0x3f
 8007e0e:	409a      	lsls	r2, r3
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0216 	orr.w	r2, r2, #22
 8007e22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695a      	ldr	r2, [r3, #20]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e32:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d007      	beq.n	8007e4c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f042 0208 	orr.w	r2, r2, #8
 8007e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	e005      	b.n	8007e6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
 8007e68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007e82:	f7ff f86d 	bl	8006f60 <HAL_GetTick>
 8007e86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d008      	beq.n	8007ea6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2280      	movs	r2, #128	; 0x80
 8007e98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e052      	b.n	8007f4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0216 	bic.w	r2, r2, #22
 8007eb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	695a      	ldr	r2, [r3, #20]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ec4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d103      	bne.n	8007ed6 <HAL_DMA_Abort+0x62>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0208 	bic.w	r2, r2, #8
 8007ee4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0201 	bic.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ef6:	e013      	b.n	8007f20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ef8:	f7ff f832 	bl	8006f60 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d90c      	bls.n	8007f20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2203      	movs	r2, #3
 8007f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e015      	b.n	8007f4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e4      	bne.n	8007ef8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f32:	223f      	movs	r2, #63	; 0x3f
 8007f34:	409a      	lsls	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d004      	beq.n	8007f72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2280      	movs	r2, #128	; 0x80
 8007f6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e00c      	b.n	8007f8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2205      	movs	r2, #5
 8007f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0201 	bic.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007fa4:	4b92      	ldr	r3, [pc, #584]	; (80081f0 <HAL_DMA_IRQHandler+0x258>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a92      	ldr	r2, [pc, #584]	; (80081f4 <HAL_DMA_IRQHandler+0x25c>)
 8007faa:	fba2 2303 	umull	r2, r3, r2, r3
 8007fae:	0a9b      	lsrs	r3, r3, #10
 8007fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc2:	2208      	movs	r2, #8
 8007fc4:	409a      	lsls	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d01a      	beq.n	8008004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d013      	beq.n	8008004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0204 	bic.w	r2, r2, #4
 8007fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	409a      	lsls	r2, r3
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffc:	f043 0201 	orr.w	r2, r3, #1
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008008:	2201      	movs	r2, #1
 800800a:	409a      	lsls	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4013      	ands	r3, r2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d012      	beq.n	800803a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008026:	2201      	movs	r2, #1
 8008028:	409a      	lsls	r2, r3
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008032:	f043 0202 	orr.w	r2, r3, #2
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803e:	2204      	movs	r2, #4
 8008040:	409a      	lsls	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4013      	ands	r3, r2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d012      	beq.n	8008070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805c:	2204      	movs	r2, #4
 800805e:	409a      	lsls	r2, r3
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008068:	f043 0204 	orr.w	r2, r3, #4
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008074:	2210      	movs	r2, #16
 8008076:	409a      	lsls	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4013      	ands	r3, r2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d043      	beq.n	8008108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0308 	and.w	r3, r3, #8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d03c      	beq.n	8008108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008092:	2210      	movs	r2, #16
 8008094:	409a      	lsls	r2, r3
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d018      	beq.n	80080da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d108      	bne.n	80080c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d024      	beq.n	8008108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	4798      	blx	r3
 80080c6:	e01f      	b.n	8008108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01b      	beq.n	8008108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
 80080d8:	e016      	b.n	8008108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d107      	bne.n	80080f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0208 	bic.w	r2, r2, #8
 80080f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810c:	2220      	movs	r2, #32
 800810e:	409a      	lsls	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4013      	ands	r3, r2
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 808e 	beq.w	8008236 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0310 	and.w	r3, r3, #16
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 8086 	beq.w	8008236 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812e:	2220      	movs	r2, #32
 8008130:	409a      	lsls	r2, r3
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b05      	cmp	r3, #5
 8008140:	d136      	bne.n	80081b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0216 	bic.w	r2, r2, #22
 8008150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695a      	ldr	r2, [r3, #20]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <HAL_DMA_IRQHandler+0x1da>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0208 	bic.w	r2, r2, #8
 8008180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008186:	223f      	movs	r2, #63	; 0x3f
 8008188:	409a      	lsls	r2, r3
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d07d      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	4798      	blx	r3
        }
        return;
 80081ae:	e078      	b.n	80082a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d01c      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d108      	bne.n	80081de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d030      	beq.n	8008236 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
 80081dc:	e02b      	b.n	8008236 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d027      	beq.n	8008236 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
 80081ee:	e022      	b.n	8008236 <HAL_DMA_IRQHandler+0x29e>
 80081f0:	20000008 	.word	0x20000008
 80081f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10f      	bne.n	8008226 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0210 	bic.w	r2, r2, #16
 8008214:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823a:	2b00      	cmp	r3, #0
 800823c:	d032      	beq.n	80082a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d022      	beq.n	8008290 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2205      	movs	r2, #5
 800824e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	3301      	adds	r3, #1
 8008266:	60bb      	str	r3, [r7, #8]
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	429a      	cmp	r2, r3
 800826c:	d307      	bcc.n	800827e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1f2      	bne.n	8008262 <HAL_DMA_IRQHandler+0x2ca>
 800827c:	e000      	b.n	8008280 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800827e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	4798      	blx	r3
 80082a0:	e000      	b.n	80082a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80082a2:	bf00      	nop
    }
  }
}
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop

080082ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	2b40      	cmp	r3, #64	; 0x40
 80082f0:	d108      	bne.n	8008304 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008302:	e007      	b.n	8008314 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	60da      	str	r2, [r3, #12]
}
 8008314:	bf00      	nop
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	3b10      	subs	r3, #16
 8008330:	4a13      	ldr	r2, [pc, #76]	; (8008380 <DMA_CalcBaseAndBitshift+0x60>)
 8008332:	fba2 2303 	umull	r2, r3, r2, r3
 8008336:	091b      	lsrs	r3, r3, #4
 8008338:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800833a:	4a12      	ldr	r2, [pc, #72]	; (8008384 <DMA_CalcBaseAndBitshift+0x64>)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b03      	cmp	r3, #3
 800834c:	d908      	bls.n	8008360 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <DMA_CalcBaseAndBitshift+0x68>)
 8008356:	4013      	ands	r3, r2
 8008358:	1d1a      	adds	r2, r3, #4
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	659a      	str	r2, [r3, #88]	; 0x58
 800835e:	e006      	b.n	800836e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	461a      	mov	r2, r3
 8008366:	4b08      	ldr	r3, [pc, #32]	; (8008388 <DMA_CalcBaseAndBitshift+0x68>)
 8008368:	4013      	ands	r3, r2
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	aaaaaaab 	.word	0xaaaaaaab
 8008384:	0801ed3c 	.word	0x0801ed3c
 8008388:	fffffc00 	.word	0xfffffc00

0800838c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d11f      	bne.n	80083e6 <DMA_CheckFifoParam+0x5a>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d856      	bhi.n	800845a <DMA_CheckFifoParam+0xce>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <DMA_CheckFifoParam+0x28>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	080083c5 	.word	0x080083c5
 80083b8:	080083d7 	.word	0x080083d7
 80083bc:	080083c5 	.word	0x080083c5
 80083c0:	0800845b 	.word	0x0800845b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d046      	beq.n	800845e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083d4:	e043      	b.n	800845e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083de:	d140      	bne.n	8008462 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083e4:	e03d      	b.n	8008462 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ee:	d121      	bne.n	8008434 <DMA_CheckFifoParam+0xa8>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d837      	bhi.n	8008466 <DMA_CheckFifoParam+0xda>
 80083f6:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <DMA_CheckFifoParam+0x70>)
 80083f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	08008413 	.word	0x08008413
 8008404:	0800840d 	.word	0x0800840d
 8008408:	08008425 	.word	0x08008425
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	73fb      	strb	r3, [r7, #15]
      break;
 8008410:	e030      	b.n	8008474 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d025      	beq.n	800846a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008422:	e022      	b.n	800846a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800842c:	d11f      	bne.n	800846e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008432:	e01c      	b.n	800846e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d903      	bls.n	8008442 <DMA_CheckFifoParam+0xb6>
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b03      	cmp	r3, #3
 800843e:	d003      	beq.n	8008448 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008440:	e018      	b.n	8008474 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]
      break;
 8008446:	e015      	b.n	8008474 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00e      	beq.n	8008472 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	73fb      	strb	r3, [r7, #15]
      break;
 8008458:	e00b      	b.n	8008472 <DMA_CheckFifoParam+0xe6>
      break;
 800845a:	bf00      	nop
 800845c:	e00a      	b.n	8008474 <DMA_CheckFifoParam+0xe8>
      break;
 800845e:	bf00      	nop
 8008460:	e008      	b.n	8008474 <DMA_CheckFifoParam+0xe8>
      break;
 8008462:	bf00      	nop
 8008464:	e006      	b.n	8008474 <DMA_CheckFifoParam+0xe8>
      break;
 8008466:	bf00      	nop
 8008468:	e004      	b.n	8008474 <DMA_CheckFifoParam+0xe8>
      break;
 800846a:	bf00      	nop
 800846c:	e002      	b.n	8008474 <DMA_CheckFifoParam+0xe8>
      break;   
 800846e:	bf00      	nop
 8008470:	e000      	b.n	8008474 <DMA_CheckFifoParam+0xe8>
      break;
 8008472:	bf00      	nop
    }
  } 
  
  return status; 
 8008474:	7bfb      	ldrb	r3, [r7, #15]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop

08008484 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e039      	b.n	800850a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7fa fde2 	bl	8003074 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d4:	f023 0107 	bic.w	r1, r3, #7
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084ea:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <HAL_DMA2D_Init+0x90>)
 80084ec:	4013      	ands	r3, r2
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	68d1      	ldr	r1, [r2, #12]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6812      	ldr	r2, [r2, #0]
 80084f6:	430b      	orrs	r3, r1
 80084f8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	ffffc000 	.word	0xffffc000

08008518 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_DMA2D_Start+0x1c>
 8008530:	2302      	movs	r3, #2
 8008532:	e018      	b.n	8008566 <HAL_DMA2D_Start+0x4e>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	68b9      	ldr	r1, [r7, #8]
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 fa98 	bl	8008a84 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b086      	sub	sp, #24
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008578:	2300      	movs	r3, #0
 800857a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d056      	beq.n	8008638 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800858a:	f7fe fce9 	bl	8006f60 <HAL_GetTick>
 800858e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008590:	e04b      	b.n	800862a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d023      	beq.n	80085ec <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d005      	beq.n	80085ba <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	f043 0202 	orr.w	r2, r3, #2
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c8:	f043 0201 	orr.w	r2, r3, #1
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2221      	movs	r2, #33	; 0x21
 80085d6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2204      	movs	r2, #4
 80085dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e0a5      	b.n	8008738 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f2:	d01a      	beq.n	800862a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80085f4:	f7fe fcb4 	bl	8006f60 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d302      	bcc.n	800860a <HAL_DMA2D_PollForTransfer+0x9c>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10f      	bne.n	800862a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860e:	f043 0220 	orr.w	r2, r3, #32
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2203      	movs	r2, #3
 800861a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e086      	b.n	8008738 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d0ac      	beq.n	8008592 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d061      	beq.n	800871e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800865a:	f7fe fc81 	bl	8006f60 <HAL_GetTick>
 800865e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008660:	e056      	b.n	8008710 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8008670:	2b00      	cmp	r3, #0
 8008672:	d02e      	beq.n	80086d2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	f043 0204 	orr.w	r2, r3, #4
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f003 0320 	and.w	r3, r3, #32
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008698:	f043 0202 	orr.w	r2, r3, #2
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ae:	f043 0201 	orr.w	r2, r3, #1
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2229      	movs	r2, #41	; 0x29
 80086bc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2204      	movs	r2, #4
 80086c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e032      	b.n	8008738 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086d8:	d01a      	beq.n	8008710 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80086da:	f7fe fc41 	bl	8006f60 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d302      	bcc.n	80086f0 <HAL_DMA2D_PollForTransfer+0x182>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10f      	bne.n	8008710 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f4:	f043 0220 	orr.w	r2, r3, #32
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2203      	movs	r2, #3
 8008700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e013      	b.n	8008738 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0a1      	beq.n	8008662 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2212      	movs	r2, #18
 8008724:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d026      	beq.n	80087b0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008768:	2b00      	cmp	r3, #0
 800876a:	d021      	beq.n	80087b0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800877a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008780:	f043 0201 	orr.w	r2, r3, #1
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2201      	movs	r2, #1
 800878e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2204      	movs	r2, #4
 8008794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d026      	beq.n	8008808 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d021      	beq.n	8008808 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087d2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2220      	movs	r2, #32
 80087da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e0:	f043 0202 	orr.w	r2, r3, #2
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2204      	movs	r2, #4
 80087ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f003 0308 	and.w	r3, r3, #8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d026      	beq.n	8008860 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008818:	2b00      	cmp	r3, #0
 800881a:	d021      	beq.n	8008860 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800882a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2208      	movs	r2, #8
 8008832:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008838:	f043 0204 	orr.w	r2, r3, #4
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2204      	movs	r2, #4
 8008844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f003 0304 	and.w	r3, r3, #4
 8008866:	2b00      	cmp	r3, #0
 8008868:	d013      	beq.n	8008892 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00e      	beq.n	8008892 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008882:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2204      	movs	r2, #4
 800888a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f853 	bl	8008938 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d024      	beq.n	80088e6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d01f      	beq.n	80088e6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088b4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2202      	movs	r2, #2
 80088bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f003 0310 	and.w	r3, r3, #16
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01f      	beq.n	8008930 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01a      	beq.n	8008930 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008908:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2210      	movs	r2, #16
 8008910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f80e 	bl	800894c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008978:	2b01      	cmp	r3, #1
 800897a:	d101      	bne.n	8008980 <HAL_DMA2D_ConfigLayer+0x20>
 800897c:	2302      	movs	r3, #2
 800897e:	e079      	b.n	8008a74 <HAL_DMA2D_ConfigLayer+0x114>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	3318      	adds	r3, #24
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	4413      	add	r3, r2
 800899a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	041b      	lsls	r3, r3, #16
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80089aa:	4b35      	ldr	r3, [pc, #212]	; (8008a80 <HAL_DMA2D_ConfigLayer+0x120>)
 80089ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	2b0a      	cmp	r3, #10
 80089b4:	d003      	beq.n	80089be <HAL_DMA2D_ConfigLayer+0x5e>
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2b09      	cmp	r3, #9
 80089bc:	d107      	bne.n	80089ce <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	e005      	b.n	80089da <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	061b      	lsls	r3, r3, #24
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d120      	bne.n	8008a22 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	43db      	mvns	r3, r3
 80089ea:	ea02 0103 	and.w	r1, r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	6812      	ldr	r2, [r2, #0]
 8008a00:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	2b0a      	cmp	r3, #10
 8008a08:	d003      	beq.n	8008a12 <HAL_DMA2D_ConfigLayer+0xb2>
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	2b09      	cmp	r3, #9
 8008a10:	d127      	bne.n	8008a62 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8008a20:	e01f      	b.n	8008a62 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69da      	ldr	r2, [r3, #28]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	43db      	mvns	r3, r3
 8008a2c:	ea02 0103 	and.w	r1, r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	6812      	ldr	r2, [r2, #0]
 8008a42:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	2b0a      	cmp	r3, #10
 8008a4a:	d003      	beq.n	8008a54 <HAL_DMA2D_ConfigLayer+0xf4>
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	2b09      	cmp	r3, #9
 8008a52:	d106      	bne.n	8008a62 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	68da      	ldr	r2, [r3, #12]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008a60:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	371c      	adds	r7, #28
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	ff03000f 	.word	0xff03000f

08008a84 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b08b      	sub	sp, #44	; 0x2c
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a98:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	041a      	lsls	r2, r3, #16
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008abc:	d174      	bne.n	8008ba8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008ac4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008acc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ad4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d108      	bne.n	8008af6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
 8008af4:	e053      	b.n	8008b9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d106      	bne.n	8008b0c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	627b      	str	r3, [r7, #36]	; 0x24
 8008b0a:	e048      	b.n	8008b9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d111      	bne.n	8008b38 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	0cdb      	lsrs	r3, r3, #19
 8008b18:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	0a9b      	lsrs	r3, r3, #10
 8008b1e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	08db      	lsrs	r3, r3, #3
 8008b24:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	02db      	lsls	r3, r3, #11
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	627b      	str	r3, [r7, #36]	; 0x24
 8008b36:	e032      	b.n	8008b9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d117      	bne.n	8008b70 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	0fdb      	lsrs	r3, r3, #31
 8008b44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	0cdb      	lsrs	r3, r3, #19
 8008b4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	0adb      	lsrs	r3, r3, #11
 8008b50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	08db      	lsrs	r3, r3, #3
 8008b56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	029b      	lsls	r3, r3, #10
 8008b60:	431a      	orrs	r2, r3
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	03db      	lsls	r3, r3, #15
 8008b66:	4313      	orrs	r3, r2
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b6e:	e016      	b.n	8008b9e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	0f1b      	lsrs	r3, r3, #28
 8008b74:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	0d1b      	lsrs	r3, r3, #20
 8008b7a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	0b1b      	lsrs	r3, r3, #12
 8008b80:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	091b      	lsrs	r3, r3, #4
 8008b86:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	011a      	lsls	r2, r3, #4
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	431a      	orrs	r2, r3
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	4313      	orrs	r3, r2
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008ba6:	e003      	b.n	8008bb0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	60da      	str	r2, [r3, #12]
}
 8008bb0:	bf00      	nop
 8008bb2:	372c      	adds	r7, #44	; 0x2c
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b089      	sub	sp, #36	; 0x24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	61fb      	str	r3, [r7, #28]
 8008bda:	e175      	b.n	8008ec8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008bdc:	2201      	movs	r2, #1
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	fa02 f303 	lsl.w	r3, r2, r3
 8008be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	4013      	ands	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	f040 8164 	bne.w	8008ec2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d00b      	beq.n	8008c1a <HAL_GPIO_Init+0x5e>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d007      	beq.n	8008c1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c0e:	2b11      	cmp	r3, #17
 8008c10:	d003      	beq.n	8008c1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	2b12      	cmp	r3, #18
 8008c18:	d130      	bne.n	8008c7c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	005b      	lsls	r3, r3, #1
 8008c24:	2203      	movs	r2, #3
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	43db      	mvns	r3, r3
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	005b      	lsls	r3, r3, #1
 8008c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c50:	2201      	movs	r2, #1
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	fa02 f303 	lsl.w	r3, r2, r3
 8008c58:	43db      	mvns	r3, r3
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	091b      	lsrs	r3, r3, #4
 8008c66:	f003 0201 	and.w	r2, r3, #1
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	2203      	movs	r2, #3
 8008c88:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4013      	ands	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d003      	beq.n	8008cbc <HAL_GPIO_Init+0x100>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2b12      	cmp	r3, #18
 8008cba:	d123      	bne.n	8008d04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	08da      	lsrs	r2, r3, #3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	3208      	adds	r2, #8
 8008cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	220f      	movs	r2, #15
 8008cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd8:	43db      	mvns	r3, r3
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	691a      	ldr	r2, [r3, #16]
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f003 0307 	and.w	r3, r3, #7
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	08da      	lsrs	r2, r3, #3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	3208      	adds	r2, #8
 8008cfe:	69b9      	ldr	r1, [r7, #24]
 8008d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	2203      	movs	r2, #3
 8008d10:	fa02 f303 	lsl.w	r3, r2, r3
 8008d14:	43db      	mvns	r3, r3
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	4013      	ands	r3, r2
 8008d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f003 0203 	and.w	r2, r3, #3
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 80be 	beq.w	8008ec2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d46:	4b66      	ldr	r3, [pc, #408]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4a:	4a65      	ldr	r2, [pc, #404]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d50:	6453      	str	r3, [r2, #68]	; 0x44
 8008d52:	4b63      	ldr	r3, [pc, #396]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008d5e:	4a61      	ldr	r2, [pc, #388]	; (8008ee4 <HAL_GPIO_Init+0x328>)
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	089b      	lsrs	r3, r3, #2
 8008d64:	3302      	adds	r3, #2
 8008d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	220f      	movs	r2, #15
 8008d76:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a58      	ldr	r2, [pc, #352]	; (8008ee8 <HAL_GPIO_Init+0x32c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d037      	beq.n	8008dfa <HAL_GPIO_Init+0x23e>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a57      	ldr	r2, [pc, #348]	; (8008eec <HAL_GPIO_Init+0x330>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d031      	beq.n	8008df6 <HAL_GPIO_Init+0x23a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a56      	ldr	r2, [pc, #344]	; (8008ef0 <HAL_GPIO_Init+0x334>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d02b      	beq.n	8008df2 <HAL_GPIO_Init+0x236>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a55      	ldr	r2, [pc, #340]	; (8008ef4 <HAL_GPIO_Init+0x338>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d025      	beq.n	8008dee <HAL_GPIO_Init+0x232>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a54      	ldr	r2, [pc, #336]	; (8008ef8 <HAL_GPIO_Init+0x33c>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d01f      	beq.n	8008dea <HAL_GPIO_Init+0x22e>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a53      	ldr	r2, [pc, #332]	; (8008efc <HAL_GPIO_Init+0x340>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d019      	beq.n	8008de6 <HAL_GPIO_Init+0x22a>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a52      	ldr	r2, [pc, #328]	; (8008f00 <HAL_GPIO_Init+0x344>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d013      	beq.n	8008de2 <HAL_GPIO_Init+0x226>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a51      	ldr	r2, [pc, #324]	; (8008f04 <HAL_GPIO_Init+0x348>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00d      	beq.n	8008dde <HAL_GPIO_Init+0x222>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a50      	ldr	r2, [pc, #320]	; (8008f08 <HAL_GPIO_Init+0x34c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d007      	beq.n	8008dda <HAL_GPIO_Init+0x21e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a4f      	ldr	r2, [pc, #316]	; (8008f0c <HAL_GPIO_Init+0x350>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d101      	bne.n	8008dd6 <HAL_GPIO_Init+0x21a>
 8008dd2:	2309      	movs	r3, #9
 8008dd4:	e012      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	e010      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dda:	2308      	movs	r3, #8
 8008ddc:	e00e      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dde:	2307      	movs	r3, #7
 8008de0:	e00c      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008de2:	2306      	movs	r3, #6
 8008de4:	e00a      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008de6:	2305      	movs	r3, #5
 8008de8:	e008      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dea:	2304      	movs	r3, #4
 8008dec:	e006      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dee:	2303      	movs	r3, #3
 8008df0:	e004      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e002      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e000      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	f002 0203 	and.w	r2, r2, #3
 8008e02:	0092      	lsls	r2, r2, #2
 8008e04:	4093      	lsls	r3, r2
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008e0c:	4935      	ldr	r1, [pc, #212]	; (8008ee4 <HAL_GPIO_Init+0x328>)
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	089b      	lsrs	r3, r3, #2
 8008e12:	3302      	adds	r3, #2
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e1a:	4b3d      	ldr	r3, [pc, #244]	; (8008f10 <HAL_GPIO_Init+0x354>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	43db      	mvns	r3, r3
 8008e24:	69ba      	ldr	r2, [r7, #24]
 8008e26:	4013      	ands	r3, r2
 8008e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008e3e:	4a34      	ldr	r2, [pc, #208]	; (8008f10 <HAL_GPIO_Init+0x354>)
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008e44:	4b32      	ldr	r3, [pc, #200]	; (8008f10 <HAL_GPIO_Init+0x354>)
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	4013      	ands	r3, r2
 8008e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e68:	4a29      	ldr	r2, [pc, #164]	; (8008f10 <HAL_GPIO_Init+0x354>)
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e6e:	4b28      	ldr	r3, [pc, #160]	; (8008f10 <HAL_GPIO_Init+0x354>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	43db      	mvns	r3, r3
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e92:	4a1f      	ldr	r2, [pc, #124]	; (8008f10 <HAL_GPIO_Init+0x354>)
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e98:	4b1d      	ldr	r3, [pc, #116]	; (8008f10 <HAL_GPIO_Init+0x354>)
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ebc:	4a14      	ldr	r2, [pc, #80]	; (8008f10 <HAL_GPIO_Init+0x354>)
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	61fb      	str	r3, [r7, #28]
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	2b0f      	cmp	r3, #15
 8008ecc:	f67f ae86 	bls.w	8008bdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	3724      	adds	r7, #36	; 0x24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	40023800 	.word	0x40023800
 8008ee4:	40013800 	.word	0x40013800
 8008ee8:	40020000 	.word	0x40020000
 8008eec:	40020400 	.word	0x40020400
 8008ef0:	40020800 	.word	0x40020800
 8008ef4:	40020c00 	.word	0x40020c00
 8008ef8:	40021000 	.word	0x40021000
 8008efc:	40021400 	.word	0x40021400
 8008f00:	40021800 	.word	0x40021800
 8008f04:	40021c00 	.word	0x40021c00
 8008f08:	40022000 	.word	0x40022000
 8008f0c:	40022400 	.word	0x40022400
 8008f10:	40013c00 	.word	0x40013c00

08008f14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	617b      	str	r3, [r7, #20]
 8008f2e:	e0d9      	b.n	80090e4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008f30:	2201      	movs	r2, #1
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	fa02 f303 	lsl.w	r3, r2, r3
 8008f38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	4013      	ands	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	f040 80c9 	bne.w	80090de <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008f4c:	4a6b      	ldr	r2, [pc, #428]	; (80090fc <HAL_GPIO_DeInit+0x1e8>)
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	089b      	lsrs	r3, r3, #2
 8008f52:	3302      	adds	r3, #2
 8008f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f58:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f003 0303 	and.w	r3, r3, #3
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	220f      	movs	r2, #15
 8008f64:	fa02 f303 	lsl.w	r3, r2, r3
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a63      	ldr	r2, [pc, #396]	; (8009100 <HAL_GPIO_DeInit+0x1ec>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d037      	beq.n	8008fe6 <HAL_GPIO_DeInit+0xd2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a62      	ldr	r2, [pc, #392]	; (8009104 <HAL_GPIO_DeInit+0x1f0>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d031      	beq.n	8008fe2 <HAL_GPIO_DeInit+0xce>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a61      	ldr	r2, [pc, #388]	; (8009108 <HAL_GPIO_DeInit+0x1f4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d02b      	beq.n	8008fde <HAL_GPIO_DeInit+0xca>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a60      	ldr	r2, [pc, #384]	; (800910c <HAL_GPIO_DeInit+0x1f8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d025      	beq.n	8008fda <HAL_GPIO_DeInit+0xc6>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a5f      	ldr	r2, [pc, #380]	; (8009110 <HAL_GPIO_DeInit+0x1fc>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d01f      	beq.n	8008fd6 <HAL_GPIO_DeInit+0xc2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a5e      	ldr	r2, [pc, #376]	; (8009114 <HAL_GPIO_DeInit+0x200>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d019      	beq.n	8008fd2 <HAL_GPIO_DeInit+0xbe>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a5d      	ldr	r2, [pc, #372]	; (8009118 <HAL_GPIO_DeInit+0x204>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d013      	beq.n	8008fce <HAL_GPIO_DeInit+0xba>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a5c      	ldr	r2, [pc, #368]	; (800911c <HAL_GPIO_DeInit+0x208>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00d      	beq.n	8008fca <HAL_GPIO_DeInit+0xb6>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a5b      	ldr	r2, [pc, #364]	; (8009120 <HAL_GPIO_DeInit+0x20c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d007      	beq.n	8008fc6 <HAL_GPIO_DeInit+0xb2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a5a      	ldr	r2, [pc, #360]	; (8009124 <HAL_GPIO_DeInit+0x210>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d101      	bne.n	8008fc2 <HAL_GPIO_DeInit+0xae>
 8008fbe:	2309      	movs	r3, #9
 8008fc0:	e012      	b.n	8008fe8 <HAL_GPIO_DeInit+0xd4>
 8008fc2:	230a      	movs	r3, #10
 8008fc4:	e010      	b.n	8008fe8 <HAL_GPIO_DeInit+0xd4>
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	e00e      	b.n	8008fe8 <HAL_GPIO_DeInit+0xd4>
 8008fca:	2307      	movs	r3, #7
 8008fcc:	e00c      	b.n	8008fe8 <HAL_GPIO_DeInit+0xd4>
 8008fce:	2306      	movs	r3, #6
 8008fd0:	e00a      	b.n	8008fe8 <HAL_GPIO_DeInit+0xd4>
 8008fd2:	2305      	movs	r3, #5
 8008fd4:	e008      	b.n	8008fe8 <HAL_GPIO_DeInit+0xd4>
 8008fd6:	2304      	movs	r3, #4
 8008fd8:	e006      	b.n	8008fe8 <HAL_GPIO_DeInit+0xd4>
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e004      	b.n	8008fe8 <HAL_GPIO_DeInit+0xd4>
 8008fde:	2302      	movs	r3, #2
 8008fe0:	e002      	b.n	8008fe8 <HAL_GPIO_DeInit+0xd4>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e000      	b.n	8008fe8 <HAL_GPIO_DeInit+0xd4>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	f002 0203 	and.w	r2, r2, #3
 8008fee:	0092      	lsls	r2, r2, #2
 8008ff0:	4093      	lsls	r3, r2
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d132      	bne.n	800905e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008ff8:	4b4b      	ldr	r3, [pc, #300]	; (8009128 <HAL_GPIO_DeInit+0x214>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	43db      	mvns	r3, r3
 8009000:	4949      	ldr	r1, [pc, #292]	; (8009128 <HAL_GPIO_DeInit+0x214>)
 8009002:	4013      	ands	r3, r2
 8009004:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009006:	4b48      	ldr	r3, [pc, #288]	; (8009128 <HAL_GPIO_DeInit+0x214>)
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	43db      	mvns	r3, r3
 800900e:	4946      	ldr	r1, [pc, #280]	; (8009128 <HAL_GPIO_DeInit+0x214>)
 8009010:	4013      	ands	r3, r2
 8009012:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009014:	4b44      	ldr	r3, [pc, #272]	; (8009128 <HAL_GPIO_DeInit+0x214>)
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	43db      	mvns	r3, r3
 800901c:	4942      	ldr	r1, [pc, #264]	; (8009128 <HAL_GPIO_DeInit+0x214>)
 800901e:	4013      	ands	r3, r2
 8009020:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009022:	4b41      	ldr	r3, [pc, #260]	; (8009128 <HAL_GPIO_DeInit+0x214>)
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	43db      	mvns	r3, r3
 800902a:	493f      	ldr	r1, [pc, #252]	; (8009128 <HAL_GPIO_DeInit+0x214>)
 800902c:	4013      	ands	r3, r2
 800902e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	220f      	movs	r2, #15
 800903a:	fa02 f303 	lsl.w	r3, r2, r3
 800903e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009040:	4a2e      	ldr	r2, [pc, #184]	; (80090fc <HAL_GPIO_DeInit+0x1e8>)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	089b      	lsrs	r3, r3, #2
 8009046:	3302      	adds	r3, #2
 8009048:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	43da      	mvns	r2, r3
 8009050:	482a      	ldr	r0, [pc, #168]	; (80090fc <HAL_GPIO_DeInit+0x1e8>)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	089b      	lsrs	r3, r3, #2
 8009056:	400a      	ands	r2, r1
 8009058:	3302      	adds	r3, #2
 800905a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	2103      	movs	r1, #3
 8009068:	fa01 f303 	lsl.w	r3, r1, r3
 800906c:	43db      	mvns	r3, r3
 800906e:	401a      	ands	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	08da      	lsrs	r2, r3, #3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3208      	adds	r2, #8
 800907c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	220f      	movs	r2, #15
 800908a:	fa02 f303 	lsl.w	r3, r2, r3
 800908e:	43db      	mvns	r3, r3
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	08d2      	lsrs	r2, r2, #3
 8009094:	4019      	ands	r1, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3208      	adds	r2, #8
 800909a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	2103      	movs	r1, #3
 80090a8:	fa01 f303 	lsl.w	r3, r1, r3
 80090ac:	43db      	mvns	r3, r3
 80090ae:	401a      	ands	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	2101      	movs	r1, #1
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	fa01 f303 	lsl.w	r3, r1, r3
 80090c0:	43db      	mvns	r3, r3
 80090c2:	401a      	ands	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	005b      	lsls	r3, r3, #1
 80090d0:	2103      	movs	r1, #3
 80090d2:	fa01 f303 	lsl.w	r3, r1, r3
 80090d6:	43db      	mvns	r3, r3
 80090d8:	401a      	ands	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	3301      	adds	r3, #1
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2b0f      	cmp	r3, #15
 80090e8:	f67f af22 	bls.w	8008f30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80090ec:	bf00      	nop
 80090ee:	bf00      	nop
 80090f0:	371c      	adds	r7, #28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	40013800 	.word	0x40013800
 8009100:	40020000 	.word	0x40020000
 8009104:	40020400 	.word	0x40020400
 8009108:	40020800 	.word	0x40020800
 800910c:	40020c00 	.word	0x40020c00
 8009110:	40021000 	.word	0x40021000
 8009114:	40021400 	.word	0x40021400
 8009118:	40021800 	.word	0x40021800
 800911c:	40021c00 	.word	0x40021c00
 8009120:	40022000 	.word	0x40022000
 8009124:	40022400 	.word	0x40022400
 8009128:	40013c00 	.word	0x40013c00

0800912c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691a      	ldr	r2, [r3, #16]
 800913c:	887b      	ldrh	r3, [r7, #2]
 800913e:	4013      	ands	r3, r2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009144:	2301      	movs	r3, #1
 8009146:	73fb      	strb	r3, [r7, #15]
 8009148:	e001      	b.n	800914e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800914e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	807b      	strh	r3, [r7, #2]
 8009168:	4613      	mov	r3, r2
 800916a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800916c:	787b      	ldrb	r3, [r7, #1]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009172:	887a      	ldrh	r2, [r7, #2]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009178:	e003      	b.n	8009182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800917a:	887b      	ldrh	r3, [r7, #2]
 800917c:	041a      	lsls	r2, r3, #16
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	619a      	str	r2, [r3, #24]
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	460b      	mov	r3, r1
 8009198:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80091a0:	887a      	ldrh	r2, [r7, #2]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4013      	ands	r3, r2
 80091a6:	041a      	lsls	r2, r3, #16
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	43d9      	mvns	r1, r3
 80091ac:	887b      	ldrh	r3, [r7, #2]
 80091ae:	400b      	ands	r3, r1
 80091b0:	431a      	orrs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	619a      	str	r2, [r3, #24]
}
 80091b6:	bf00      	nop
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
	...

080091c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80091ce:	4b08      	ldr	r3, [pc, #32]	; (80091f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80091d0:	695a      	ldr	r2, [r3, #20]
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	4013      	ands	r3, r2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d006      	beq.n	80091e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80091da:	4a05      	ldr	r2, [pc, #20]	; (80091f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80091e0:	88fb      	ldrh	r3, [r7, #6]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f806 	bl	80091f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80091e8:	bf00      	nop
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	40013c00 	.word	0x40013c00

080091f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800920a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800920c:	b08f      	sub	sp, #60	; 0x3c
 800920e:	af0a      	add	r7, sp, #40	; 0x28
 8009210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e054      	b.n	80092c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f00f fe6a 	bl	8018f10 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2203      	movs	r2, #3
 8009240:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800924c:	2b00      	cmp	r3, #0
 800924e:	d102      	bne.n	8009256 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4618      	mov	r0, r3
 800925c:	f009 fd7d 	bl	8012d5a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	603b      	str	r3, [r7, #0]
 8009266:	687e      	ldr	r6, [r7, #4]
 8009268:	466d      	mov	r5, sp
 800926a:	f106 0410 	add.w	r4, r6, #16
 800926e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800927a:	e885 0003 	stmia.w	r5, {r0, r1}
 800927e:	1d33      	adds	r3, r6, #4
 8009280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009282:	6838      	ldr	r0, [r7, #0]
 8009284:	f009 fd00 	bl	8012c88 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2101      	movs	r1, #1
 800928e:	4618      	mov	r0, r3
 8009290:	f009 fd74 	bl	8012d7c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	603b      	str	r3, [r7, #0]
 800929a:	687e      	ldr	r6, [r7, #4]
 800929c:	466d      	mov	r5, sp
 800929e:	f106 0410 	add.w	r4, r6, #16
 80092a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80092ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80092b2:	1d33      	adds	r3, r6, #4
 80092b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092b6:	6838      	ldr	r0, [r7, #0]
 80092b8:	f009 fe86 	bl	8012fc8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092ce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80092ce:	b590      	push	{r4, r7, lr}
 80092d0:	b089      	sub	sp, #36	; 0x24
 80092d2:	af04      	add	r7, sp, #16
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	4608      	mov	r0, r1
 80092d8:	4611      	mov	r1, r2
 80092da:	461a      	mov	r2, r3
 80092dc:	4603      	mov	r3, r0
 80092de:	70fb      	strb	r3, [r7, #3]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70bb      	strb	r3, [r7, #2]
 80092e4:	4613      	mov	r3, r2
 80092e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d101      	bne.n	80092f6 <HAL_HCD_HC_Init+0x28>
 80092f2:	2302      	movs	r3, #2
 80092f4:	e076      	b.n	80093e4 <HAL_HCD_HC_Init+0x116>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80092fe:	78fb      	ldrb	r3, [r7, #3]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	212c      	movs	r1, #44	; 0x2c
 8009304:	fb01 f303 	mul.w	r3, r1, r3
 8009308:	4413      	add	r3, r2
 800930a:	333d      	adds	r3, #61	; 0x3d
 800930c:	2200      	movs	r2, #0
 800930e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	212c      	movs	r1, #44	; 0x2c
 8009316:	fb01 f303 	mul.w	r3, r1, r3
 800931a:	4413      	add	r3, r2
 800931c:	3338      	adds	r3, #56	; 0x38
 800931e:	787a      	ldrb	r2, [r7, #1]
 8009320:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009322:	78fb      	ldrb	r3, [r7, #3]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	212c      	movs	r1, #44	; 0x2c
 8009328:	fb01 f303 	mul.w	r3, r1, r3
 800932c:	4413      	add	r3, r2
 800932e:	3340      	adds	r3, #64	; 0x40
 8009330:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009332:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	212c      	movs	r1, #44	; 0x2c
 800933a:	fb01 f303 	mul.w	r3, r1, r3
 800933e:	4413      	add	r3, r2
 8009340:	3339      	adds	r3, #57	; 0x39
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009346:	78fb      	ldrb	r3, [r7, #3]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	212c      	movs	r1, #44	; 0x2c
 800934c:	fb01 f303 	mul.w	r3, r1, r3
 8009350:	4413      	add	r3, r2
 8009352:	333f      	adds	r3, #63	; 0x3f
 8009354:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009358:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	78ba      	ldrb	r2, [r7, #2]
 800935e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009362:	b2d0      	uxtb	r0, r2
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	212c      	movs	r1, #44	; 0x2c
 8009368:	fb01 f303 	mul.w	r3, r1, r3
 800936c:	4413      	add	r3, r2
 800936e:	333a      	adds	r3, #58	; 0x3a
 8009370:	4602      	mov	r2, r0
 8009372:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009374:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009378:	2b00      	cmp	r3, #0
 800937a:	da09      	bge.n	8009390 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	212c      	movs	r1, #44	; 0x2c
 8009382:	fb01 f303 	mul.w	r3, r1, r3
 8009386:	4413      	add	r3, r2
 8009388:	333b      	adds	r3, #59	; 0x3b
 800938a:	2201      	movs	r2, #1
 800938c:	701a      	strb	r2, [r3, #0]
 800938e:	e008      	b.n	80093a2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	212c      	movs	r1, #44	; 0x2c
 8009396:	fb01 f303 	mul.w	r3, r1, r3
 800939a:	4413      	add	r3, r2
 800939c:	333b      	adds	r3, #59	; 0x3b
 800939e:	2200      	movs	r2, #0
 80093a0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	212c      	movs	r1, #44	; 0x2c
 80093a8:	fb01 f303 	mul.w	r3, r1, r3
 80093ac:	4413      	add	r3, r2
 80093ae:	333c      	adds	r3, #60	; 0x3c
 80093b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80093b4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	787c      	ldrb	r4, [r7, #1]
 80093bc:	78ba      	ldrb	r2, [r7, #2]
 80093be:	78f9      	ldrb	r1, [r7, #3]
 80093c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093c2:	9302      	str	r3, [sp, #8]
 80093c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	4623      	mov	r3, r4
 80093d2:	f009 ff6f 	bl	80132b4 <USB_HC_Init>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd90      	pop	{r4, r7, pc}

080093ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009402:	2b01      	cmp	r3, #1
 8009404:	d101      	bne.n	800940a <HAL_HCD_HC_Halt+0x1e>
 8009406:	2302      	movs	r3, #2
 8009408:	e00f      	b.n	800942a <HAL_HCD_HC_Halt+0x3e>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	4611      	mov	r1, r2
 800941a:	4618      	mov	r0, r3
 800941c:	f00a f9ab 	bl	8013776 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009428:	7bfb      	ldrb	r3, [r7, #15]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
	...

08009434 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	4608      	mov	r0, r1
 800943e:	4611      	mov	r1, r2
 8009440:	461a      	mov	r2, r3
 8009442:	4603      	mov	r3, r0
 8009444:	70fb      	strb	r3, [r7, #3]
 8009446:	460b      	mov	r3, r1
 8009448:	70bb      	strb	r3, [r7, #2]
 800944a:	4613      	mov	r3, r2
 800944c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	212c      	movs	r1, #44	; 0x2c
 8009454:	fb01 f303 	mul.w	r3, r1, r3
 8009458:	4413      	add	r3, r2
 800945a:	333b      	adds	r3, #59	; 0x3b
 800945c:	78ba      	ldrb	r2, [r7, #2]
 800945e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	212c      	movs	r1, #44	; 0x2c
 8009466:	fb01 f303 	mul.w	r3, r1, r3
 800946a:	4413      	add	r3, r2
 800946c:	333f      	adds	r3, #63	; 0x3f
 800946e:	787a      	ldrb	r2, [r7, #1]
 8009470:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8009472:	7c3b      	ldrb	r3, [r7, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d112      	bne.n	800949e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	212c      	movs	r1, #44	; 0x2c
 800947e:	fb01 f303 	mul.w	r3, r1, r3
 8009482:	4413      	add	r3, r2
 8009484:	3342      	adds	r3, #66	; 0x42
 8009486:	2203      	movs	r2, #3
 8009488:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	212c      	movs	r1, #44	; 0x2c
 8009490:	fb01 f303 	mul.w	r3, r1, r3
 8009494:	4413      	add	r3, r2
 8009496:	333d      	adds	r3, #61	; 0x3d
 8009498:	7f3a      	ldrb	r2, [r7, #28]
 800949a:	701a      	strb	r2, [r3, #0]
 800949c:	e008      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800949e:	78fb      	ldrb	r3, [r7, #3]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	212c      	movs	r1, #44	; 0x2c
 80094a4:	fb01 f303 	mul.w	r3, r1, r3
 80094a8:	4413      	add	r3, r2
 80094aa:	3342      	adds	r3, #66	; 0x42
 80094ac:	2202      	movs	r2, #2
 80094ae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80094b0:	787b      	ldrb	r3, [r7, #1]
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	f200 80c6 	bhi.w	8009644 <HAL_HCD_HC_SubmitRequest+0x210>
 80094b8:	a201      	add	r2, pc, #4	; (adr r2, 80094c0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80094ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094be:	bf00      	nop
 80094c0:	080094d1 	.word	0x080094d1
 80094c4:	08009631 	.word	0x08009631
 80094c8:	08009535 	.word	0x08009535
 80094cc:	080095b3 	.word	0x080095b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80094d0:	7c3b      	ldrb	r3, [r7, #16]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	f040 80b8 	bne.w	8009648 <HAL_HCD_HC_SubmitRequest+0x214>
 80094d8:	78bb      	ldrb	r3, [r7, #2]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f040 80b4 	bne.w	8009648 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80094e0:	8b3b      	ldrh	r3, [r7, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d108      	bne.n	80094f8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80094e6:	78fb      	ldrb	r3, [r7, #3]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	212c      	movs	r1, #44	; 0x2c
 80094ec:	fb01 f303 	mul.w	r3, r1, r3
 80094f0:	4413      	add	r3, r2
 80094f2:	3355      	adds	r3, #85	; 0x55
 80094f4:	2201      	movs	r2, #1
 80094f6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	212c      	movs	r1, #44	; 0x2c
 80094fe:	fb01 f303 	mul.w	r3, r1, r3
 8009502:	4413      	add	r3, r2
 8009504:	3355      	adds	r3, #85	; 0x55
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d109      	bne.n	8009520 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	212c      	movs	r1, #44	; 0x2c
 8009512:	fb01 f303 	mul.w	r3, r1, r3
 8009516:	4413      	add	r3, r2
 8009518:	3342      	adds	r3, #66	; 0x42
 800951a:	2200      	movs	r2, #0
 800951c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800951e:	e093      	b.n	8009648 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	212c      	movs	r1, #44	; 0x2c
 8009526:	fb01 f303 	mul.w	r3, r1, r3
 800952a:	4413      	add	r3, r2
 800952c:	3342      	adds	r3, #66	; 0x42
 800952e:	2202      	movs	r2, #2
 8009530:	701a      	strb	r2, [r3, #0]
      break;
 8009532:	e089      	b.n	8009648 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009534:	78bb      	ldrb	r3, [r7, #2]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d11d      	bne.n	8009576 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800953a:	78fb      	ldrb	r3, [r7, #3]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	212c      	movs	r1, #44	; 0x2c
 8009540:	fb01 f303 	mul.w	r3, r1, r3
 8009544:	4413      	add	r3, r2
 8009546:	3355      	adds	r3, #85	; 0x55
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d109      	bne.n	8009562 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800954e:	78fb      	ldrb	r3, [r7, #3]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	212c      	movs	r1, #44	; 0x2c
 8009554:	fb01 f303 	mul.w	r3, r1, r3
 8009558:	4413      	add	r3, r2
 800955a:	3342      	adds	r3, #66	; 0x42
 800955c:	2200      	movs	r2, #0
 800955e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009560:	e073      	b.n	800964a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	212c      	movs	r1, #44	; 0x2c
 8009568:	fb01 f303 	mul.w	r3, r1, r3
 800956c:	4413      	add	r3, r2
 800956e:	3342      	adds	r3, #66	; 0x42
 8009570:	2202      	movs	r2, #2
 8009572:	701a      	strb	r2, [r3, #0]
      break;
 8009574:	e069      	b.n	800964a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	212c      	movs	r1, #44	; 0x2c
 800957c:	fb01 f303 	mul.w	r3, r1, r3
 8009580:	4413      	add	r3, r2
 8009582:	3354      	adds	r3, #84	; 0x54
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d109      	bne.n	800959e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	212c      	movs	r1, #44	; 0x2c
 8009590:	fb01 f303 	mul.w	r3, r1, r3
 8009594:	4413      	add	r3, r2
 8009596:	3342      	adds	r3, #66	; 0x42
 8009598:	2200      	movs	r2, #0
 800959a:	701a      	strb	r2, [r3, #0]
      break;
 800959c:	e055      	b.n	800964a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	212c      	movs	r1, #44	; 0x2c
 80095a4:	fb01 f303 	mul.w	r3, r1, r3
 80095a8:	4413      	add	r3, r2
 80095aa:	3342      	adds	r3, #66	; 0x42
 80095ac:	2202      	movs	r2, #2
 80095ae:	701a      	strb	r2, [r3, #0]
      break;
 80095b0:	e04b      	b.n	800964a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80095b2:	78bb      	ldrb	r3, [r7, #2]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d11d      	bne.n	80095f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	212c      	movs	r1, #44	; 0x2c
 80095be:	fb01 f303 	mul.w	r3, r1, r3
 80095c2:	4413      	add	r3, r2
 80095c4:	3355      	adds	r3, #85	; 0x55
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d109      	bne.n	80095e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	212c      	movs	r1, #44	; 0x2c
 80095d2:	fb01 f303 	mul.w	r3, r1, r3
 80095d6:	4413      	add	r3, r2
 80095d8:	3342      	adds	r3, #66	; 0x42
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80095de:	e034      	b.n	800964a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	212c      	movs	r1, #44	; 0x2c
 80095e6:	fb01 f303 	mul.w	r3, r1, r3
 80095ea:	4413      	add	r3, r2
 80095ec:	3342      	adds	r3, #66	; 0x42
 80095ee:	2202      	movs	r2, #2
 80095f0:	701a      	strb	r2, [r3, #0]
      break;
 80095f2:	e02a      	b.n	800964a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	212c      	movs	r1, #44	; 0x2c
 80095fa:	fb01 f303 	mul.w	r3, r1, r3
 80095fe:	4413      	add	r3, r2
 8009600:	3354      	adds	r3, #84	; 0x54
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d109      	bne.n	800961c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	212c      	movs	r1, #44	; 0x2c
 800960e:	fb01 f303 	mul.w	r3, r1, r3
 8009612:	4413      	add	r3, r2
 8009614:	3342      	adds	r3, #66	; 0x42
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
      break;
 800961a:	e016      	b.n	800964a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	212c      	movs	r1, #44	; 0x2c
 8009622:	fb01 f303 	mul.w	r3, r1, r3
 8009626:	4413      	add	r3, r2
 8009628:	3342      	adds	r3, #66	; 0x42
 800962a:	2202      	movs	r2, #2
 800962c:	701a      	strb	r2, [r3, #0]
      break;
 800962e:	e00c      	b.n	800964a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	212c      	movs	r1, #44	; 0x2c
 8009636:	fb01 f303 	mul.w	r3, r1, r3
 800963a:	4413      	add	r3, r2
 800963c:	3342      	adds	r3, #66	; 0x42
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
      break;
 8009642:	e002      	b.n	800964a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009644:	bf00      	nop
 8009646:	e000      	b.n	800964a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009648:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	212c      	movs	r1, #44	; 0x2c
 8009650:	fb01 f303 	mul.w	r3, r1, r3
 8009654:	4413      	add	r3, r2
 8009656:	3344      	adds	r3, #68	; 0x44
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	8b3a      	ldrh	r2, [r7, #24]
 8009660:	6879      	ldr	r1, [r7, #4]
 8009662:	202c      	movs	r0, #44	; 0x2c
 8009664:	fb00 f303 	mul.w	r3, r0, r3
 8009668:	440b      	add	r3, r1
 800966a:	334c      	adds	r3, #76	; 0x4c
 800966c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800966e:	78fb      	ldrb	r3, [r7, #3]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	212c      	movs	r1, #44	; 0x2c
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	4413      	add	r3, r2
 800967a:	3360      	adds	r3, #96	; 0x60
 800967c:	2200      	movs	r2, #0
 800967e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	212c      	movs	r1, #44	; 0x2c
 8009686:	fb01 f303 	mul.w	r3, r1, r3
 800968a:	4413      	add	r3, r2
 800968c:	3350      	adds	r3, #80	; 0x50
 800968e:	2200      	movs	r2, #0
 8009690:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009692:	78fb      	ldrb	r3, [r7, #3]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	212c      	movs	r1, #44	; 0x2c
 8009698:	fb01 f303 	mul.w	r3, r1, r3
 800969c:	4413      	add	r3, r2
 800969e:	3339      	adds	r3, #57	; 0x39
 80096a0:	78fa      	ldrb	r2, [r7, #3]
 80096a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	212c      	movs	r1, #44	; 0x2c
 80096aa:	fb01 f303 	mul.w	r3, r1, r3
 80096ae:	4413      	add	r3, r2
 80096b0:	3361      	adds	r3, #97	; 0x61
 80096b2:	2200      	movs	r2, #0
 80096b4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	222c      	movs	r2, #44	; 0x2c
 80096be:	fb02 f303 	mul.w	r3, r2, r3
 80096c2:	3338      	adds	r3, #56	; 0x38
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	18d1      	adds	r1, r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	461a      	mov	r2, r3
 80096d0:	f009 fefe 	bl	80134d0 <USB_HC_StartXfer>
 80096d4:	4603      	mov	r3, r0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop

080096e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f009 fc23 	bl	8012f42 <USB_GetMode>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b01      	cmp	r3, #1
 8009700:	f040 80ef 	bne.w	80098e2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4618      	mov	r0, r3
 800970a:	f009 fc07 	bl	8012f1c <USB_ReadInterrupts>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 80e5 	beq.w	80098e0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4618      	mov	r0, r3
 800971c:	f009 fbfe 	bl	8012f1c <USB_ReadInterrupts>
 8009720:	4603      	mov	r3, r0
 8009722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800972a:	d104      	bne.n	8009736 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009734:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4618      	mov	r0, r3
 800973c:	f009 fbee 	bl	8012f1c <USB_ReadInterrupts>
 8009740:	4603      	mov	r3, r0
 8009742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800974a:	d104      	bne.n	8009756 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009754:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4618      	mov	r0, r3
 800975c:	f009 fbde 	bl	8012f1c <USB_ReadInterrupts>
 8009760:	4603      	mov	r3, r0
 8009762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009766:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800976a:	d104      	bne.n	8009776 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009774:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4618      	mov	r0, r3
 800977c:	f009 fbce 	bl	8012f1c <USB_ReadInterrupts>
 8009780:	4603      	mov	r3, r0
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b02      	cmp	r3, #2
 8009788:	d103      	bne.n	8009792 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2202      	movs	r2, #2
 8009790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4618      	mov	r0, r3
 8009798:	f009 fbc0 	bl	8012f1c <USB_ReadInterrupts>
 800979c:	4603      	mov	r3, r0
 800979e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a6:	d115      	bne.n	80097d4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80097b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d108      	bne.n	80097d4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f00f fc16 	bl	8018ff4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2101      	movs	r1, #1
 80097ce:	4618      	mov	r0, r3
 80097d0:	f009 fcaa 	bl	8013128 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f009 fb9f 	bl	8012f1c <USB_ReadInterrupts>
 80097de:	4603      	mov	r3, r0
 80097e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097e8:	d102      	bne.n	80097f0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f001 f9ff 	bl	800abee <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f009 fb91 	bl	8012f1c <USB_ReadInterrupts>
 80097fa:	4603      	mov	r3, r0
 80097fc:	f003 0308 	and.w	r3, r3, #8
 8009800:	2b08      	cmp	r3, #8
 8009802:	d106      	bne.n	8009812 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f00f fbd9 	bl	8018fbc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2208      	movs	r2, #8
 8009810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4618      	mov	r0, r3
 8009818:	f009 fb80 	bl	8012f1c <USB_ReadInterrupts>
 800981c:	4603      	mov	r3, r0
 800981e:	f003 0310 	and.w	r3, r3, #16
 8009822:	2b10      	cmp	r3, #16
 8009824:	d101      	bne.n	800982a <HAL_HCD_IRQHandler+0x14a>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <HAL_HCD_IRQHandler+0x14c>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d012      	beq.n	8009856 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	699a      	ldr	r2, [r3, #24]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0210 	bic.w	r2, r2, #16
 800983e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f001 f902 	bl	800aa4a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	699a      	ldr	r2, [r3, #24]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0210 	orr.w	r2, r2, #16
 8009854:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4618      	mov	r0, r3
 800985c:	f009 fb5e 	bl	8012f1c <USB_ReadInterrupts>
 8009860:	4603      	mov	r3, r0
 8009862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800986a:	d13a      	bne.n	80098e2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4618      	mov	r0, r3
 8009872:	f009 ff6f 	bl	8013754 <USB_HC_ReadInterrupt>
 8009876:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	e025      	b.n	80098ca <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f003 030f 	and.w	r3, r3, #15
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	fa22 f303 	lsr.w	r3, r2, r3
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d018      	beq.n	80098c4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4413      	add	r3, r2
 800989a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a8:	d106      	bne.n	80098b8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f8ab 	bl	8009a0c <HCD_HC_IN_IRQHandler>
 80098b6:	e005      	b.n	80098c4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fcc6 	bl	800a250 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	3301      	adds	r3, #1
 80098c8:	617b      	str	r3, [r7, #20]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d3d4      	bcc.n	800987e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80098dc:	615a      	str	r2, [r3, #20]
 80098de:	e000      	b.n	80098e2 <HAL_HCD_IRQHandler+0x202>
      return;
 80098e0:	bf00      	nop
    }
  }
}
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d101      	bne.n	80098fe <HAL_HCD_Start+0x16>
 80098fa:	2302      	movs	r3, #2
 80098fc:	e013      	b.n	8009926 <HAL_HCD_Start+0x3e>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4618      	mov	r0, r3
 800990c:	f009 fa14 	bl	8012d38 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2101      	movs	r1, #1
 8009916:	4618      	mov	r0, r3
 8009918:	f009 fc6a 	bl	80131f0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b082      	sub	sp, #8
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800993c:	2b01      	cmp	r3, #1
 800993e:	d101      	bne.n	8009944 <HAL_HCD_Stop+0x16>
 8009940:	2302      	movs	r3, #2
 8009942:	e00d      	b.n	8009960 <HAL_HCD_Stop+0x32>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4618      	mov	r0, r3
 8009952:	f00a f869 	bl	8013a28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4618      	mov	r0, r3
 8009976:	f009 fc11 	bl	801319c <USB_ResetPort>
 800997a:	4603      	mov	r3, r0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	212c      	movs	r1, #44	; 0x2c
 8009996:	fb01 f303 	mul.w	r3, r1, r3
 800999a:	4413      	add	r3, r2
 800999c:	3360      	adds	r3, #96	; 0x60
 800999e:	781b      	ldrb	r3, [r3, #0]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	212c      	movs	r1, #44	; 0x2c
 80099be:	fb01 f303 	mul.w	r3, r1, r3
 80099c2:	4413      	add	r3, r2
 80099c4:	3350      	adds	r3, #80	; 0x50
 80099c6:	681b      	ldr	r3, [r3, #0]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f009 fc55 	bl	8013290 <USB_GetCurrentFrame>
 80099e6:	4603      	mov	r3, r0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f009 fc30 	bl	8013262 <USB_GetHostSpeed>
 8009a02:	4603      	mov	r3, r0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d119      	bne.n	8009a70 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a48:	461a      	mov	r2, r3
 8009a4a:	2304      	movs	r3, #4
 8009a4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	0151      	lsls	r1, r2, #5
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	440a      	add	r2, r1
 8009a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a68:	f043 0302 	orr.w	r3, r3, #2
 8009a6c:	60d3      	str	r3, [r2, #12]
 8009a6e:	e101      	b.n	8009c74 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a86:	d12b      	bne.n	8009ae0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a94:	461a      	mov	r2, r3
 8009a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	212c      	movs	r1, #44	; 0x2c
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3361      	adds	r3, #97	; 0x61
 8009aaa:	2207      	movs	r2, #7
 8009aac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	0151      	lsls	r1, r2, #5
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	440a      	add	r2, r1
 8009ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ac8:	f043 0302 	orr.w	r3, r3, #2
 8009acc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	b2d2      	uxtb	r2, r2
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f009 fe4c 	bl	8013776 <USB_HC_Halt>
 8009ade:	e0c9      	b.n	8009c74 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f003 0320 	and.w	r3, r3, #32
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d109      	bne.n	8009b0a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b02:	461a      	mov	r2, r3
 8009b04:	2320      	movs	r3, #32
 8009b06:	6093      	str	r3, [r2, #8]
 8009b08:	e0b4      	b.n	8009c74 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f003 0308 	and.w	r3, r3, #8
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d133      	bne.n	8009b88 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	0151      	lsls	r1, r2, #5
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	440a      	add	r2, r1
 8009b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b3a:	f043 0302 	orr.w	r3, r3, #2
 8009b3e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	212c      	movs	r1, #44	; 0x2c
 8009b46:	fb01 f303 	mul.w	r3, r1, r3
 8009b4a:	4413      	add	r3, r2
 8009b4c:	3361      	adds	r3, #97	; 0x61
 8009b4e:	2205      	movs	r2, #5
 8009b50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b5e:	461a      	mov	r2, r3
 8009b60:	2310      	movs	r3, #16
 8009b62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b70:	461a      	mov	r2, r3
 8009b72:	2308      	movs	r3, #8
 8009b74:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	4611      	mov	r1, r2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f009 fdf8 	bl	8013776 <USB_HC_Halt>
 8009b86:	e075      	b.n	8009c74 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b9e:	d134      	bne.n	8009c0a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	0151      	lsls	r1, r2, #5
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	440a      	add	r2, r1
 8009bb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bba:	f043 0302 	orr.w	r3, r3, #2
 8009bbe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	212c      	movs	r1, #44	; 0x2c
 8009bc6:	fb01 f303 	mul.w	r3, r1, r3
 8009bca:	4413      	add	r3, r2
 8009bcc:	3361      	adds	r3, #97	; 0x61
 8009bce:	2208      	movs	r2, #8
 8009bd0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bde:	461a      	mov	r2, r3
 8009be0:	2310      	movs	r3, #16
 8009be2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bf6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	4611      	mov	r1, r2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f009 fdb7 	bl	8013776 <USB_HC_Halt>
 8009c08:	e034      	b.n	8009c74 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c1c:	2b80      	cmp	r3, #128	; 0x80
 8009c1e:	d129      	bne.n	8009c74 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	0151      	lsls	r1, r2, #5
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	440a      	add	r2, r1
 8009c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c3a:	f043 0302 	orr.w	r3, r3, #2
 8009c3e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	212c      	movs	r1, #44	; 0x2c
 8009c46:	fb01 f303 	mul.w	r3, r1, r3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	3361      	adds	r3, #97	; 0x61
 8009c4e:	2206      	movs	r2, #6
 8009c50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	b2d2      	uxtb	r2, r2
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f009 fd8a 	bl	8013776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c6e:	461a      	mov	r2, r3
 8009c70:	2380      	movs	r3, #128	; 0x80
 8009c72:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c8a:	d122      	bne.n	8009cd2 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ca6:	f043 0302 	orr.w	r3, r3, #2
 8009caa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	b2d2      	uxtb	r2, r2
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f009 fd5d 	bl	8013776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cc8:	461a      	mov	r2, r3
 8009cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cce:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8009cd0:	e2ba      	b.n	800a248 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	f040 811b 	bne.w	8009f20 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d019      	beq.n	8009d26 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	212c      	movs	r1, #44	; 0x2c
 8009cf8:	fb01 f303 	mul.w	r3, r1, r3
 8009cfc:	4413      	add	r3, r2
 8009cfe:	3348      	adds	r3, #72	; 0x48
 8009d00:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	0159      	lsls	r1, r3, #5
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	440b      	add	r3, r1
 8009d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8009d14:	1ad2      	subs	r2, r2, r3
 8009d16:	6879      	ldr	r1, [r7, #4]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	202c      	movs	r0, #44	; 0x2c
 8009d1c:	fb00 f303 	mul.w	r3, r0, r3
 8009d20:	440b      	add	r3, r1
 8009d22:	3350      	adds	r3, #80	; 0x50
 8009d24:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	212c      	movs	r1, #44	; 0x2c
 8009d2c:	fb01 f303 	mul.w	r3, r1, r3
 8009d30:	4413      	add	r3, r2
 8009d32:	3361      	adds	r3, #97	; 0x61
 8009d34:	2201      	movs	r2, #1
 8009d36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	212c      	movs	r1, #44	; 0x2c
 8009d3e:	fb01 f303 	mul.w	r3, r1, r3
 8009d42:	4413      	add	r3, r2
 8009d44:	335c      	adds	r3, #92	; 0x5c
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d56:	461a      	mov	r2, r3
 8009d58:	2301      	movs	r3, #1
 8009d5a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	212c      	movs	r1, #44	; 0x2c
 8009d62:	fb01 f303 	mul.w	r3, r1, r3
 8009d66:	4413      	add	r3, r2
 8009d68:	333f      	adds	r3, #63	; 0x3f
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d009      	beq.n	8009d84 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	212c      	movs	r1, #44	; 0x2c
 8009d76:	fb01 f303 	mul.w	r3, r1, r3
 8009d7a:	4413      	add	r3, r2
 8009d7c:	333f      	adds	r3, #63	; 0x3f
 8009d7e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d121      	bne.n	8009dc8 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	0151      	lsls	r1, r2, #5
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	440a      	add	r2, r1
 8009d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d9e:	f043 0302 	orr.w	r3, r3, #2
 8009da2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	b2d2      	uxtb	r2, r2
 8009dac:	4611      	mov	r1, r2
 8009dae:	4618      	mov	r0, r3
 8009db0:	f009 fce1 	bl	8013776 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	2310      	movs	r3, #16
 8009dc4:	6093      	str	r3, [r2, #8]
 8009dc6:	e066      	b.n	8009e96 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	212c      	movs	r1, #44	; 0x2c
 8009dce:	fb01 f303 	mul.w	r3, r1, r3
 8009dd2:	4413      	add	r3, r2
 8009dd4:	333f      	adds	r3, #63	; 0x3f
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d127      	bne.n	8009e2c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	0151      	lsls	r1, r2, #5
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	440a      	add	r2, r1
 8009df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009dfa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	212c      	movs	r1, #44	; 0x2c
 8009e02:	fb01 f303 	mul.w	r3, r1, r3
 8009e06:	4413      	add	r3, r2
 8009e08:	3360      	adds	r3, #96	; 0x60
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	b2d9      	uxtb	r1, r3
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	202c      	movs	r0, #44	; 0x2c
 8009e18:	fb00 f303 	mul.w	r3, r0, r3
 8009e1c:	4413      	add	r3, r2
 8009e1e:	3360      	adds	r3, #96	; 0x60
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f00f f8f3 	bl	8019010 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009e2a:	e034      	b.n	8009e96 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	212c      	movs	r1, #44	; 0x2c
 8009e32:	fb01 f303 	mul.w	r3, r1, r3
 8009e36:	4413      	add	r3, r2
 8009e38:	333f      	adds	r3, #63	; 0x3f
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d12a      	bne.n	8009e96 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	212c      	movs	r1, #44	; 0x2c
 8009e46:	fb01 f303 	mul.w	r3, r1, r3
 8009e4a:	4413      	add	r3, r2
 8009e4c:	3360      	adds	r3, #96	; 0x60
 8009e4e:	2201      	movs	r2, #1
 8009e50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	212c      	movs	r1, #44	; 0x2c
 8009e58:	fb01 f303 	mul.w	r3, r1, r3
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3354      	adds	r3, #84	; 0x54
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	f083 0301 	eor.w	r3, r3, #1
 8009e66:	b2d8      	uxtb	r0, r3
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	212c      	movs	r1, #44	; 0x2c
 8009e6e:	fb01 f303 	mul.w	r3, r1, r3
 8009e72:	4413      	add	r3, r2
 8009e74:	3354      	adds	r3, #84	; 0x54
 8009e76:	4602      	mov	r2, r0
 8009e78:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	b2d9      	uxtb	r1, r3
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	202c      	movs	r0, #44	; 0x2c
 8009e84:	fb00 f303 	mul.w	r3, r0, r3
 8009e88:	4413      	add	r3, r2
 8009e8a:	3360      	adds	r3, #96	; 0x60
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f00f f8bd 	bl	8019010 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d12b      	bne.n	8009ef6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	212c      	movs	r1, #44	; 0x2c
 8009ea4:	fb01 f303 	mul.w	r3, r1, r3
 8009ea8:	4413      	add	r3, r2
 8009eaa:	3348      	adds	r3, #72	; 0x48
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6879      	ldr	r1, [r7, #4]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	202c      	movs	r0, #44	; 0x2c
 8009eb4:	fb00 f202 	mul.w	r2, r0, r2
 8009eb8:	440a      	add	r2, r1
 8009eba:	3240      	adds	r2, #64	; 0x40
 8009ebc:	8812      	ldrh	r2, [r2, #0]
 8009ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f000 81be 	beq.w	800a248 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	212c      	movs	r1, #44	; 0x2c
 8009ed2:	fb01 f303 	mul.w	r3, r1, r3
 8009ed6:	4413      	add	r3, r2
 8009ed8:	3354      	adds	r3, #84	; 0x54
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f083 0301 	eor.w	r3, r3, #1
 8009ee0:	b2d8      	uxtb	r0, r3
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	212c      	movs	r1, #44	; 0x2c
 8009ee8:	fb01 f303 	mul.w	r3, r1, r3
 8009eec:	4413      	add	r3, r2
 8009eee:	3354      	adds	r3, #84	; 0x54
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	701a      	strb	r2, [r3, #0]
}
 8009ef4:	e1a8      	b.n	800a248 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	212c      	movs	r1, #44	; 0x2c
 8009efc:	fb01 f303 	mul.w	r3, r1, r3
 8009f00:	4413      	add	r3, r2
 8009f02:	3354      	adds	r3, #84	; 0x54
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	f083 0301 	eor.w	r3, r3, #1
 8009f0a:	b2d8      	uxtb	r0, r3
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	212c      	movs	r1, #44	; 0x2c
 8009f12:	fb01 f303 	mul.w	r3, r1, r3
 8009f16:	4413      	add	r3, r2
 8009f18:	3354      	adds	r3, #84	; 0x54
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	701a      	strb	r2, [r3, #0]
}
 8009f1e:	e193      	b.n	800a248 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	f040 8106 	bne.w	800a144 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	0151      	lsls	r1, r2, #5
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	440a      	add	r2, r1
 8009f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f52:	f023 0302 	bic.w	r3, r3, #2
 8009f56:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	212c      	movs	r1, #44	; 0x2c
 8009f5e:	fb01 f303 	mul.w	r3, r1, r3
 8009f62:	4413      	add	r3, r2
 8009f64:	3361      	adds	r3, #97	; 0x61
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d109      	bne.n	8009f80 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	212c      	movs	r1, #44	; 0x2c
 8009f72:	fb01 f303 	mul.w	r3, r1, r3
 8009f76:	4413      	add	r3, r2
 8009f78:	3360      	adds	r3, #96	; 0x60
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	701a      	strb	r2, [r3, #0]
 8009f7e:	e0c9      	b.n	800a114 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	212c      	movs	r1, #44	; 0x2c
 8009f86:	fb01 f303 	mul.w	r3, r1, r3
 8009f8a:	4413      	add	r3, r2
 8009f8c:	3361      	adds	r3, #97	; 0x61
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b05      	cmp	r3, #5
 8009f92:	d109      	bne.n	8009fa8 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	212c      	movs	r1, #44	; 0x2c
 8009f9a:	fb01 f303 	mul.w	r3, r1, r3
 8009f9e:	4413      	add	r3, r2
 8009fa0:	3360      	adds	r3, #96	; 0x60
 8009fa2:	2205      	movs	r2, #5
 8009fa4:	701a      	strb	r2, [r3, #0]
 8009fa6:	e0b5      	b.n	800a114 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	212c      	movs	r1, #44	; 0x2c
 8009fae:	fb01 f303 	mul.w	r3, r1, r3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	3361      	adds	r3, #97	; 0x61
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b06      	cmp	r3, #6
 8009fba:	d009      	beq.n	8009fd0 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	212c      	movs	r1, #44	; 0x2c
 8009fc2:	fb01 f303 	mul.w	r3, r1, r3
 8009fc6:	4413      	add	r3, r2
 8009fc8:	3361      	adds	r3, #97	; 0x61
 8009fca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009fcc:	2b08      	cmp	r3, #8
 8009fce:	d150      	bne.n	800a072 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	212c      	movs	r1, #44	; 0x2c
 8009fd6:	fb01 f303 	mul.w	r3, r1, r3
 8009fda:	4413      	add	r3, r2
 8009fdc:	335c      	adds	r3, #92	; 0x5c
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	202c      	movs	r0, #44	; 0x2c
 8009fe8:	fb00 f303 	mul.w	r3, r0, r3
 8009fec:	440b      	add	r3, r1
 8009fee:	335c      	adds	r3, #92	; 0x5c
 8009ff0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	212c      	movs	r1, #44	; 0x2c
 8009ff8:	fb01 f303 	mul.w	r3, r1, r3
 8009ffc:	4413      	add	r3, r2
 8009ffe:	335c      	adds	r3, #92	; 0x5c
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b02      	cmp	r3, #2
 800a004:	d912      	bls.n	800a02c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	212c      	movs	r1, #44	; 0x2c
 800a00c:	fb01 f303 	mul.w	r3, r1, r3
 800a010:	4413      	add	r3, r2
 800a012:	335c      	adds	r3, #92	; 0x5c
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	212c      	movs	r1, #44	; 0x2c
 800a01e:	fb01 f303 	mul.w	r3, r1, r3
 800a022:	4413      	add	r3, r2
 800a024:	3360      	adds	r3, #96	; 0x60
 800a026:	2204      	movs	r2, #4
 800a028:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a02a:	e073      	b.n	800a114 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	212c      	movs	r1, #44	; 0x2c
 800a032:	fb01 f303 	mul.w	r3, r1, r3
 800a036:	4413      	add	r3, r2
 800a038:	3360      	adds	r3, #96	; 0x60
 800a03a:	2202      	movs	r2, #2
 800a03c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	4413      	add	r3, r2
 800a046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a054:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a05c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	015a      	lsls	r2, r3, #5
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	4413      	add	r3, r2
 800a066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a06a:	461a      	mov	r2, r3
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a070:	e050      	b.n	800a114 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	212c      	movs	r1, #44	; 0x2c
 800a078:	fb01 f303 	mul.w	r3, r1, r3
 800a07c:	4413      	add	r3, r2
 800a07e:	3361      	adds	r3, #97	; 0x61
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b03      	cmp	r3, #3
 800a084:	d122      	bne.n	800a0cc <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	212c      	movs	r1, #44	; 0x2c
 800a08c:	fb01 f303 	mul.w	r3, r1, r3
 800a090:	4413      	add	r3, r2
 800a092:	3360      	adds	r3, #96	; 0x60
 800a094:	2202      	movs	r2, #2
 800a096:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	e023      	b.n	800a114 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	212c      	movs	r1, #44	; 0x2c
 800a0d2:	fb01 f303 	mul.w	r3, r1, r3
 800a0d6:	4413      	add	r3, r2
 800a0d8:	3361      	adds	r3, #97	; 0x61
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b07      	cmp	r3, #7
 800a0de:	d119      	bne.n	800a114 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	212c      	movs	r1, #44	; 0x2c
 800a0e6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ea:	4413      	add	r3, r2
 800a0ec:	335c      	adds	r3, #92	; 0x5c
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	202c      	movs	r0, #44	; 0x2c
 800a0f8:	fb00 f303 	mul.w	r3, r0, r3
 800a0fc:	440b      	add	r3, r1
 800a0fe:	335c      	adds	r3, #92	; 0x5c
 800a100:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	212c      	movs	r1, #44	; 0x2c
 800a108:	fb01 f303 	mul.w	r3, r1, r3
 800a10c:	4413      	add	r3, r2
 800a10e:	3360      	adds	r3, #96	; 0x60
 800a110:	2204      	movs	r2, #4
 800a112:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	4413      	add	r3, r2
 800a11c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a120:	461a      	mov	r2, r3
 800a122:	2302      	movs	r3, #2
 800a124:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	b2d9      	uxtb	r1, r3
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	202c      	movs	r0, #44	; 0x2c
 800a130:	fb00 f303 	mul.w	r3, r0, r3
 800a134:	4413      	add	r3, r2
 800a136:	3360      	adds	r3, #96	; 0x60
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f00e ff67 	bl	8019010 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a142:	e081      	b.n	800a248 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	015a      	lsls	r2, r3, #5
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	4413      	add	r3, r2
 800a14c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f003 0310 	and.w	r3, r3, #16
 800a156:	2b10      	cmp	r3, #16
 800a158:	d176      	bne.n	800a248 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	212c      	movs	r1, #44	; 0x2c
 800a160:	fb01 f303 	mul.w	r3, r1, r3
 800a164:	4413      	add	r3, r2
 800a166:	333f      	adds	r3, #63	; 0x3f
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d121      	bne.n	800a1b2 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	212c      	movs	r1, #44	; 0x2c
 800a174:	fb01 f303 	mul.w	r3, r1, r3
 800a178:	4413      	add	r3, r2
 800a17a:	335c      	adds	r3, #92	; 0x5c
 800a17c:	2200      	movs	r2, #0
 800a17e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	4413      	add	r3, r2
 800a188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	0151      	lsls	r1, r2, #5
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	440a      	add	r2, r1
 800a196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a19a:	f043 0302 	orr.w	r3, r3, #2
 800a19e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f009 fae3 	bl	8013776 <USB_HC_Halt>
 800a1b0:	e041      	b.n	800a236 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	212c      	movs	r1, #44	; 0x2c
 800a1b8:	fb01 f303 	mul.w	r3, r1, r3
 800a1bc:	4413      	add	r3, r2
 800a1be:	333f      	adds	r3, #63	; 0x3f
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d009      	beq.n	800a1da <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	212c      	movs	r1, #44	; 0x2c
 800a1cc:	fb01 f303 	mul.w	r3, r1, r3
 800a1d0:	4413      	add	r3, r2
 800a1d2:	333f      	adds	r3, #63	; 0x3f
 800a1d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d12d      	bne.n	800a236 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	212c      	movs	r1, #44	; 0x2c
 800a1e0:	fb01 f303 	mul.w	r3, r1, r3
 800a1e4:	4413      	add	r3, r2
 800a1e6:	335c      	adds	r3, #92	; 0x5c
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d120      	bne.n	800a236 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	212c      	movs	r1, #44	; 0x2c
 800a1fa:	fb01 f303 	mul.w	r3, r1, r3
 800a1fe:	4413      	add	r3, r2
 800a200:	3361      	adds	r3, #97	; 0x61
 800a202:	2203      	movs	r2, #3
 800a204:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	0151      	lsls	r1, r2, #5
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	440a      	add	r2, r1
 800a21c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a220:	f043 0302 	orr.w	r3, r3, #2
 800a224:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	b2d2      	uxtb	r2, r2
 800a22e:	4611      	mov	r1, r2
 800a230:	4618      	mov	r0, r3
 800a232:	f009 faa0 	bl	8013776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a242:	461a      	mov	r2, r3
 800a244:	2310      	movs	r3, #16
 800a246:	6093      	str	r3, [r2, #8]
}
 800a248:	bf00      	nop
 800a24a:	3718      	adds	r7, #24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800a266:	78fb      	ldrb	r3, [r7, #3]
 800a268:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	4413      	add	r3, r2
 800a272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	d119      	bne.n	800a2b4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	4413      	add	r3, r2
 800a288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a28c:	461a      	mov	r2, r3
 800a28e:	2304      	movs	r3, #4
 800a290:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	015a      	lsls	r2, r3, #5
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	4413      	add	r3, r2
 800a29a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	0151      	lsls	r1, r2, #5
 800a2a4:	69ba      	ldr	r2, [r7, #24]
 800a2a6:	440a      	add	r2, r1
 800a2a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2ac:	f043 0302 	orr.w	r3, r3, #2
 800a2b0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800a2b2:	e3c6      	b.n	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b20      	cmp	r3, #32
 800a2c8:	d13e      	bne.n	800a348 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	2320      	movs	r3, #32
 800a2da:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	212c      	movs	r1, #44	; 0x2c
 800a2e2:	fb01 f303 	mul.w	r3, r1, r3
 800a2e6:	4413      	add	r3, r2
 800a2e8:	333d      	adds	r3, #61	; 0x3d
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	f040 83a8 	bne.w	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	212c      	movs	r1, #44	; 0x2c
 800a2f8:	fb01 f303 	mul.w	r3, r1, r3
 800a2fc:	4413      	add	r3, r2
 800a2fe:	333d      	adds	r3, #61	; 0x3d
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	212c      	movs	r1, #44	; 0x2c
 800a30a:	fb01 f303 	mul.w	r3, r1, r3
 800a30e:	4413      	add	r3, r2
 800a310:	3360      	adds	r3, #96	; 0x60
 800a312:	2202      	movs	r2, #2
 800a314:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	0151      	lsls	r1, r2, #5
 800a328:	69ba      	ldr	r2, [r7, #24]
 800a32a:	440a      	add	r2, r1
 800a32c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a330:	f043 0302 	orr.w	r3, r3, #2
 800a334:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	b2d2      	uxtb	r2, r2
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f009 fa18 	bl	8013776 <USB_HC_Halt>
}
 800a346:	e37c      	b.n	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a35a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a35e:	d122      	bne.n	800a3a6 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	4413      	add	r3, r2
 800a368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	0151      	lsls	r1, r2, #5
 800a372:	69ba      	ldr	r2, [r7, #24]
 800a374:	440a      	add	r2, r1
 800a376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a37a:	f043 0302 	orr.w	r3, r3, #2
 800a37e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	b2d2      	uxtb	r2, r2
 800a388:	4611      	mov	r1, r2
 800a38a:	4618      	mov	r0, r3
 800a38c:	f009 f9f3 	bl	8013776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	4413      	add	r3, r2
 800a398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a39c:	461a      	mov	r2, r3
 800a39e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3a2:	6093      	str	r3, [r2, #8]
}
 800a3a4:	e34d      	b.n	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d150      	bne.n	800a45e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	212c      	movs	r1, #44	; 0x2c
 800a3c2:	fb01 f303 	mul.w	r3, r1, r3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	335c      	adds	r3, #92	; 0x5c
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e0:	2b40      	cmp	r3, #64	; 0x40
 800a3e2:	d111      	bne.n	800a408 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	212c      	movs	r1, #44	; 0x2c
 800a3ea:	fb01 f303 	mul.w	r3, r1, r3
 800a3ee:	4413      	add	r3, r2
 800a3f0:	333d      	adds	r3, #61	; 0x3d
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a402:	461a      	mov	r2, r3
 800a404:	2340      	movs	r3, #64	; 0x40
 800a406:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	015a      	lsls	r2, r3, #5
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	0151      	lsls	r1, r2, #5
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	440a      	add	r2, r1
 800a41e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a422:	f043 0302 	orr.w	r3, r3, #2
 800a426:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	b2d2      	uxtb	r2, r2
 800a430:	4611      	mov	r1, r2
 800a432:	4618      	mov	r0, r3
 800a434:	f009 f99f 	bl	8013776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a444:	461a      	mov	r2, r3
 800a446:	2301      	movs	r3, #1
 800a448:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	212c      	movs	r1, #44	; 0x2c
 800a450:	fb01 f303 	mul.w	r3, r1, r3
 800a454:	4413      	add	r3, r2
 800a456:	3361      	adds	r3, #97	; 0x61
 800a458:	2201      	movs	r2, #1
 800a45a:	701a      	strb	r2, [r3, #0]
}
 800a45c:	e2f1      	b.n	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	4413      	add	r3, r2
 800a466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a470:	2b40      	cmp	r3, #64	; 0x40
 800a472:	d13c      	bne.n	800a4ee <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	212c      	movs	r1, #44	; 0x2c
 800a47a:	fb01 f303 	mul.w	r3, r1, r3
 800a47e:	4413      	add	r3, r2
 800a480:	3361      	adds	r3, #97	; 0x61
 800a482:	2204      	movs	r2, #4
 800a484:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	212c      	movs	r1, #44	; 0x2c
 800a48c:	fb01 f303 	mul.w	r3, r1, r3
 800a490:	4413      	add	r3, r2
 800a492:	333d      	adds	r3, #61	; 0x3d
 800a494:	2201      	movs	r2, #1
 800a496:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	212c      	movs	r1, #44	; 0x2c
 800a49e:	fb01 f303 	mul.w	r3, r1, r3
 800a4a2:	4413      	add	r3, r2
 800a4a4:	335c      	adds	r3, #92	; 0x5c
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	0151      	lsls	r1, r2, #5
 800a4bc:	69ba      	ldr	r2, [r7, #24]
 800a4be:	440a      	add	r2, r1
 800a4c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4c4:	f043 0302 	orr.w	r3, r3, #2
 800a4c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f009 f94e 	bl	8013776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	015a      	lsls	r2, r3, #5
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	2340      	movs	r3, #64	; 0x40
 800a4ea:	6093      	str	r3, [r2, #8]
}
 800a4ec:	e2a9      	b.n	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b08      	cmp	r3, #8
 800a502:	d12a      	bne.n	800a55a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a510:	461a      	mov	r2, r3
 800a512:	2308      	movs	r3, #8
 800a514:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	015a      	lsls	r2, r3, #5
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	4413      	add	r3, r2
 800a51e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	0151      	lsls	r1, r2, #5
 800a528:	69ba      	ldr	r2, [r7, #24]
 800a52a:	440a      	add	r2, r1
 800a52c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a530:	f043 0302 	orr.w	r3, r3, #2
 800a534:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	b2d2      	uxtb	r2, r2
 800a53e:	4611      	mov	r1, r2
 800a540:	4618      	mov	r0, r3
 800a542:	f009 f918 	bl	8013776 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	212c      	movs	r1, #44	; 0x2c
 800a54c:	fb01 f303 	mul.w	r3, r1, r3
 800a550:	4413      	add	r3, r2
 800a552:	3361      	adds	r3, #97	; 0x61
 800a554:	2205      	movs	r2, #5
 800a556:	701a      	strb	r2, [r3, #0]
}
 800a558:	e273      	b.n	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	4413      	add	r3, r2
 800a562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f003 0310 	and.w	r3, r3, #16
 800a56c:	2b10      	cmp	r3, #16
 800a56e:	d150      	bne.n	800a612 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	212c      	movs	r1, #44	; 0x2c
 800a576:	fb01 f303 	mul.w	r3, r1, r3
 800a57a:	4413      	add	r3, r2
 800a57c:	335c      	adds	r3, #92	; 0x5c
 800a57e:	2200      	movs	r2, #0
 800a580:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	212c      	movs	r1, #44	; 0x2c
 800a588:	fb01 f303 	mul.w	r3, r1, r3
 800a58c:	4413      	add	r3, r2
 800a58e:	3361      	adds	r3, #97	; 0x61
 800a590:	2203      	movs	r2, #3
 800a592:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	212c      	movs	r1, #44	; 0x2c
 800a59a:	fb01 f303 	mul.w	r3, r1, r3
 800a59e:	4413      	add	r3, r2
 800a5a0:	333d      	adds	r3, #61	; 0x3d
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d112      	bne.n	800a5ce <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	212c      	movs	r1, #44	; 0x2c
 800a5ae:	fb01 f303 	mul.w	r3, r1, r3
 800a5b2:	4413      	add	r3, r2
 800a5b4:	333c      	adds	r3, #60	; 0x3c
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d108      	bne.n	800a5ce <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	212c      	movs	r1, #44	; 0x2c
 800a5c2:	fb01 f303 	mul.w	r3, r1, r3
 800a5c6:	4413      	add	r3, r2
 800a5c8:	333d      	adds	r3, #61	; 0x3d
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	0151      	lsls	r1, r2, #5
 800a5e0:	69ba      	ldr	r2, [r7, #24]
 800a5e2:	440a      	add	r2, r1
 800a5e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5e8:	f043 0302 	orr.w	r3, r3, #2
 800a5ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	b2d2      	uxtb	r2, r2
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f009 f8bc 	bl	8013776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	015a      	lsls	r2, r3, #5
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	4413      	add	r3, r2
 800a606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a60a:	461a      	mov	r2, r3
 800a60c:	2310      	movs	r3, #16
 800a60e:	6093      	str	r3, [r2, #8]
}
 800a610:	e217      	b.n	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a624:	2b80      	cmp	r3, #128	; 0x80
 800a626:	d174      	bne.n	800a712 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d121      	bne.n	800a674 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	212c      	movs	r1, #44	; 0x2c
 800a636:	fb01 f303 	mul.w	r3, r1, r3
 800a63a:	4413      	add	r3, r2
 800a63c:	3361      	adds	r3, #97	; 0x61
 800a63e:	2206      	movs	r2, #6
 800a640:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	0151      	lsls	r1, r2, #5
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	440a      	add	r2, r1
 800a658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a65c:	f043 0302 	orr.w	r3, r3, #2
 800a660:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	b2d2      	uxtb	r2, r2
 800a66a:	4611      	mov	r1, r2
 800a66c:	4618      	mov	r0, r3
 800a66e:	f009 f882 	bl	8013776 <USB_HC_Halt>
 800a672:	e044      	b.n	800a6fe <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	212c      	movs	r1, #44	; 0x2c
 800a67a:	fb01 f303 	mul.w	r3, r1, r3
 800a67e:	4413      	add	r3, r2
 800a680:	335c      	adds	r3, #92	; 0x5c
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	1c5a      	adds	r2, r3, #1
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	202c      	movs	r0, #44	; 0x2c
 800a68c:	fb00 f303 	mul.w	r3, r0, r3
 800a690:	440b      	add	r3, r1
 800a692:	335c      	adds	r3, #92	; 0x5c
 800a694:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	212c      	movs	r1, #44	; 0x2c
 800a69c:	fb01 f303 	mul.w	r3, r1, r3
 800a6a0:	4413      	add	r3, r2
 800a6a2:	335c      	adds	r3, #92	; 0x5c
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d920      	bls.n	800a6ec <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	212c      	movs	r1, #44	; 0x2c
 800a6b0:	fb01 f303 	mul.w	r3, r1, r3
 800a6b4:	4413      	add	r3, r2
 800a6b6:	335c      	adds	r3, #92	; 0x5c
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	212c      	movs	r1, #44	; 0x2c
 800a6c2:	fb01 f303 	mul.w	r3, r1, r3
 800a6c6:	4413      	add	r3, r2
 800a6c8:	3360      	adds	r3, #96	; 0x60
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	b2d9      	uxtb	r1, r3
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	202c      	movs	r0, #44	; 0x2c
 800a6d8:	fb00 f303 	mul.w	r3, r0, r3
 800a6dc:	4413      	add	r3, r2
 800a6de:	3360      	adds	r3, #96	; 0x60
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f00e fc93 	bl	8019010 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a6ea:	e008      	b.n	800a6fe <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	212c      	movs	r1, #44	; 0x2c
 800a6f2:	fb01 f303 	mul.w	r3, r1, r3
 800a6f6:	4413      	add	r3, r2
 800a6f8:	3360      	adds	r3, #96	; 0x60
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	015a      	lsls	r2, r3, #5
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	4413      	add	r3, r2
 800a706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a70a:	461a      	mov	r2, r3
 800a70c:	2380      	movs	r3, #128	; 0x80
 800a70e:	6093      	str	r3, [r2, #8]
}
 800a710:	e197      	b.n	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a728:	d134      	bne.n	800a794 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	4413      	add	r3, r2
 800a732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	0151      	lsls	r1, r2, #5
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	440a      	add	r2, r1
 800a740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a744:	f043 0302 	orr.w	r3, r3, #2
 800a748:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	b2d2      	uxtb	r2, r2
 800a752:	4611      	mov	r1, r2
 800a754:	4618      	mov	r0, r3
 800a756:	f009 f80e 	bl	8013776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	4413      	add	r3, r2
 800a762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a766:	461a      	mov	r2, r3
 800a768:	2310      	movs	r3, #16
 800a76a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	4413      	add	r3, r2
 800a774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a778:	461a      	mov	r2, r3
 800a77a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a77e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	212c      	movs	r1, #44	; 0x2c
 800a786:	fb01 f303 	mul.w	r3, r1, r3
 800a78a:	4413      	add	r3, r2
 800a78c:	3361      	adds	r3, #97	; 0x61
 800a78e:	2208      	movs	r2, #8
 800a790:	701a      	strb	r2, [r3, #0]
}
 800a792:	e156      	b.n	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	f003 0302 	and.w	r3, r3, #2
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	f040 814b 	bne.w	800aa42 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	015a      	lsls	r2, r3, #5
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	0151      	lsls	r1, r2, #5
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	440a      	add	r2, r1
 800a7c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7c6:	f023 0302 	bic.w	r3, r3, #2
 800a7ca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	212c      	movs	r1, #44	; 0x2c
 800a7d2:	fb01 f303 	mul.w	r3, r1, r3
 800a7d6:	4413      	add	r3, r2
 800a7d8:	3361      	adds	r3, #97	; 0x61
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d179      	bne.n	800a8d4 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	212c      	movs	r1, #44	; 0x2c
 800a7e6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ea:	4413      	add	r3, r2
 800a7ec:	3360      	adds	r3, #96	; 0x60
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	212c      	movs	r1, #44	; 0x2c
 800a7f8:	fb01 f303 	mul.w	r3, r1, r3
 800a7fc:	4413      	add	r3, r2
 800a7fe:	333f      	adds	r3, #63	; 0x3f
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d00a      	beq.n	800a81c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	212c      	movs	r1, #44	; 0x2c
 800a80c:	fb01 f303 	mul.w	r3, r1, r3
 800a810:	4413      	add	r3, r2
 800a812:	333f      	adds	r3, #63	; 0x3f
 800a814:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800a816:	2b03      	cmp	r3, #3
 800a818:	f040 80fc 	bne.w	800aa14 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d142      	bne.n	800a8aa <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	212c      	movs	r1, #44	; 0x2c
 800a82a:	fb01 f303 	mul.w	r3, r1, r3
 800a82e:	4413      	add	r3, r2
 800a830:	334c      	adds	r3, #76	; 0x4c
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 80ed 	beq.w	800aa14 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	212c      	movs	r1, #44	; 0x2c
 800a840:	fb01 f303 	mul.w	r3, r1, r3
 800a844:	4413      	add	r3, r2
 800a846:	334c      	adds	r3, #76	; 0x4c
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6879      	ldr	r1, [r7, #4]
 800a84c:	697a      	ldr	r2, [r7, #20]
 800a84e:	202c      	movs	r0, #44	; 0x2c
 800a850:	fb00 f202 	mul.w	r2, r0, r2
 800a854:	440a      	add	r2, r1
 800a856:	3240      	adds	r2, #64	; 0x40
 800a858:	8812      	ldrh	r2, [r2, #0]
 800a85a:	4413      	add	r3, r2
 800a85c:	3b01      	subs	r3, #1
 800a85e:	6879      	ldr	r1, [r7, #4]
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	202c      	movs	r0, #44	; 0x2c
 800a864:	fb00 f202 	mul.w	r2, r0, r2
 800a868:	440a      	add	r2, r1
 800a86a:	3240      	adds	r2, #64	; 0x40
 800a86c:	8812      	ldrh	r2, [r2, #0]
 800a86e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a872:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 80ca 	beq.w	800aa14 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	212c      	movs	r1, #44	; 0x2c
 800a886:	fb01 f303 	mul.w	r3, r1, r3
 800a88a:	4413      	add	r3, r2
 800a88c:	3355      	adds	r3, #85	; 0x55
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	f083 0301 	eor.w	r3, r3, #1
 800a894:	b2d8      	uxtb	r0, r3
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	212c      	movs	r1, #44	; 0x2c
 800a89c:	fb01 f303 	mul.w	r3, r1, r3
 800a8a0:	4413      	add	r3, r2
 800a8a2:	3355      	adds	r3, #85	; 0x55
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	701a      	strb	r2, [r3, #0]
 800a8a8:	e0b4      	b.n	800aa14 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	212c      	movs	r1, #44	; 0x2c
 800a8b0:	fb01 f303 	mul.w	r3, r1, r3
 800a8b4:	4413      	add	r3, r2
 800a8b6:	3355      	adds	r3, #85	; 0x55
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f083 0301 	eor.w	r3, r3, #1
 800a8be:	b2d8      	uxtb	r0, r3
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	212c      	movs	r1, #44	; 0x2c
 800a8c6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ca:	4413      	add	r3, r2
 800a8cc:	3355      	adds	r3, #85	; 0x55
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	701a      	strb	r2, [r3, #0]
 800a8d2:	e09f      	b.n	800aa14 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	212c      	movs	r1, #44	; 0x2c
 800a8da:	fb01 f303 	mul.w	r3, r1, r3
 800a8de:	4413      	add	r3, r2
 800a8e0:	3361      	adds	r3, #97	; 0x61
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d109      	bne.n	800a8fc <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	212c      	movs	r1, #44	; 0x2c
 800a8ee:	fb01 f303 	mul.w	r3, r1, r3
 800a8f2:	4413      	add	r3, r2
 800a8f4:	3360      	adds	r3, #96	; 0x60
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	701a      	strb	r2, [r3, #0]
 800a8fa:	e08b      	b.n	800aa14 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	212c      	movs	r1, #44	; 0x2c
 800a902:	fb01 f303 	mul.w	r3, r1, r3
 800a906:	4413      	add	r3, r2
 800a908:	3361      	adds	r3, #97	; 0x61
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b04      	cmp	r3, #4
 800a90e:	d109      	bne.n	800a924 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	212c      	movs	r1, #44	; 0x2c
 800a916:	fb01 f303 	mul.w	r3, r1, r3
 800a91a:	4413      	add	r3, r2
 800a91c:	3360      	adds	r3, #96	; 0x60
 800a91e:	2202      	movs	r2, #2
 800a920:	701a      	strb	r2, [r3, #0]
 800a922:	e077      	b.n	800aa14 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	212c      	movs	r1, #44	; 0x2c
 800a92a:	fb01 f303 	mul.w	r3, r1, r3
 800a92e:	4413      	add	r3, r2
 800a930:	3361      	adds	r3, #97	; 0x61
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b05      	cmp	r3, #5
 800a936:	d109      	bne.n	800a94c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	212c      	movs	r1, #44	; 0x2c
 800a93e:	fb01 f303 	mul.w	r3, r1, r3
 800a942:	4413      	add	r3, r2
 800a944:	3360      	adds	r3, #96	; 0x60
 800a946:	2205      	movs	r2, #5
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	e063      	b.n	800aa14 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	212c      	movs	r1, #44	; 0x2c
 800a952:	fb01 f303 	mul.w	r3, r1, r3
 800a956:	4413      	add	r3, r2
 800a958:	3361      	adds	r3, #97	; 0x61
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	2b06      	cmp	r3, #6
 800a95e:	d009      	beq.n	800a974 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	212c      	movs	r1, #44	; 0x2c
 800a966:	fb01 f303 	mul.w	r3, r1, r3
 800a96a:	4413      	add	r3, r2
 800a96c:	3361      	adds	r3, #97	; 0x61
 800a96e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a970:	2b08      	cmp	r3, #8
 800a972:	d14f      	bne.n	800aa14 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	212c      	movs	r1, #44	; 0x2c
 800a97a:	fb01 f303 	mul.w	r3, r1, r3
 800a97e:	4413      	add	r3, r2
 800a980:	335c      	adds	r3, #92	; 0x5c
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	202c      	movs	r0, #44	; 0x2c
 800a98c:	fb00 f303 	mul.w	r3, r0, r3
 800a990:	440b      	add	r3, r1
 800a992:	335c      	adds	r3, #92	; 0x5c
 800a994:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	212c      	movs	r1, #44	; 0x2c
 800a99c:	fb01 f303 	mul.w	r3, r1, r3
 800a9a0:	4413      	add	r3, r2
 800a9a2:	335c      	adds	r3, #92	; 0x5c
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d912      	bls.n	800a9d0 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	212c      	movs	r1, #44	; 0x2c
 800a9b0:	fb01 f303 	mul.w	r3, r1, r3
 800a9b4:	4413      	add	r3, r2
 800a9b6:	335c      	adds	r3, #92	; 0x5c
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	212c      	movs	r1, #44	; 0x2c
 800a9c2:	fb01 f303 	mul.w	r3, r1, r3
 800a9c6:	4413      	add	r3, r2
 800a9c8:	3360      	adds	r3, #96	; 0x60
 800a9ca:	2204      	movs	r2, #4
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	e021      	b.n	800aa14 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	212c      	movs	r1, #44	; 0x2c
 800a9d6:	fb01 f303 	mul.w	r3, r1, r3
 800a9da:	4413      	add	r3, r2
 800a9dc:	3360      	adds	r3, #96	; 0x60
 800a9de:	2202      	movs	r2, #2
 800a9e0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9f8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa00:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa0e:	461a      	mov	r2, r3
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa20:	461a      	mov	r2, r3
 800aa22:	2302      	movs	r3, #2
 800aa24:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	b2d9      	uxtb	r1, r3
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	202c      	movs	r0, #44	; 0x2c
 800aa30:	fb00 f303 	mul.w	r3, r0, r3
 800aa34:	4413      	add	r3, r2
 800aa36:	3360      	adds	r3, #96	; 0x60
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f00e fae7 	bl	8019010 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800aa42:	bf00      	nop
 800aa44:	3720      	adds	r7, #32
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b08a      	sub	sp, #40	; 0x28
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	f003 030f 	and.w	r3, r3, #15
 800aa6a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	0c5b      	lsrs	r3, r3, #17
 800aa70:	f003 030f 	and.w	r3, r3, #15
 800aa74:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	091b      	lsrs	r3, r3, #4
 800aa7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa7e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d004      	beq.n	800aa90 <HCD_RXQLVL_IRQHandler+0x46>
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2b05      	cmp	r3, #5
 800aa8a:	f000 80a9 	beq.w	800abe0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800aa8e:	e0aa      	b.n	800abe6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 80a6 	beq.w	800abe4 <HCD_RXQLVL_IRQHandler+0x19a>
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	212c      	movs	r1, #44	; 0x2c
 800aa9e:	fb01 f303 	mul.w	r3, r1, r3
 800aaa2:	4413      	add	r3, r2
 800aaa4:	3344      	adds	r3, #68	; 0x44
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 809b 	beq.w	800abe4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	212c      	movs	r1, #44	; 0x2c
 800aab4:	fb01 f303 	mul.w	r3, r1, r3
 800aab8:	4413      	add	r3, r2
 800aaba:	3350      	adds	r3, #80	; 0x50
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	441a      	add	r2, r3
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	202c      	movs	r0, #44	; 0x2c
 800aac8:	fb00 f303 	mul.w	r3, r0, r3
 800aacc:	440b      	add	r3, r1
 800aace:	334c      	adds	r3, #76	; 0x4c
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d87a      	bhi.n	800abcc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	212c      	movs	r1, #44	; 0x2c
 800aae0:	fb01 f303 	mul.w	r3, r1, r3
 800aae4:	4413      	add	r3, r2
 800aae6:	3344      	adds	r3, #68	; 0x44
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	b292      	uxth	r2, r2
 800aaee:	4619      	mov	r1, r3
 800aaf0:	f008 f9eb 	bl	8012eca <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	212c      	movs	r1, #44	; 0x2c
 800aafa:	fb01 f303 	mul.w	r3, r1, r3
 800aafe:	4413      	add	r3, r2
 800ab00:	3344      	adds	r3, #68	; 0x44
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	441a      	add	r2, r3
 800ab08:	6879      	ldr	r1, [r7, #4]
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	202c      	movs	r0, #44	; 0x2c
 800ab0e:	fb00 f303 	mul.w	r3, r0, r3
 800ab12:	440b      	add	r3, r1
 800ab14:	3344      	adds	r3, #68	; 0x44
 800ab16:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	212c      	movs	r1, #44	; 0x2c
 800ab1e:	fb01 f303 	mul.w	r3, r1, r3
 800ab22:	4413      	add	r3, r2
 800ab24:	3350      	adds	r3, #80	; 0x50
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	441a      	add	r2, r3
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	202c      	movs	r0, #44	; 0x2c
 800ab32:	fb00 f303 	mul.w	r3, r0, r3
 800ab36:	440b      	add	r3, r1
 800ab38:	3350      	adds	r3, #80	; 0x50
 800ab3a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	0cdb      	lsrs	r3, r3, #19
 800ab4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab50:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	212c      	movs	r1, #44	; 0x2c
 800ab58:	fb01 f303 	mul.w	r3, r1, r3
 800ab5c:	4413      	add	r3, r2
 800ab5e:	3340      	adds	r3, #64	; 0x40
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d13c      	bne.n	800abe4 <HCD_RXQLVL_IRQHandler+0x19a>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d039      	beq.n	800abe4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab86:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab8e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	212c      	movs	r1, #44	; 0x2c
 800aba8:	fb01 f303 	mul.w	r3, r1, r3
 800abac:	4413      	add	r3, r2
 800abae:	3354      	adds	r3, #84	; 0x54
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	f083 0301 	eor.w	r3, r3, #1
 800abb6:	b2d8      	uxtb	r0, r3
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	212c      	movs	r1, #44	; 0x2c
 800abbe:	fb01 f303 	mul.w	r3, r1, r3
 800abc2:	4413      	add	r3, r2
 800abc4:	3354      	adds	r3, #84	; 0x54
 800abc6:	4602      	mov	r2, r0
 800abc8:	701a      	strb	r2, [r3, #0]
      break;
 800abca:	e00b      	b.n	800abe4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	212c      	movs	r1, #44	; 0x2c
 800abd2:	fb01 f303 	mul.w	r3, r1, r3
 800abd6:	4413      	add	r3, r2
 800abd8:	3360      	adds	r3, #96	; 0x60
 800abda:	2204      	movs	r2, #4
 800abdc:	701a      	strb	r2, [r3, #0]
      break;
 800abde:	e001      	b.n	800abe4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800abe0:	bf00      	nop
 800abe2:	e000      	b.n	800abe6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800abe4:	bf00      	nop
  }
}
 800abe6:	bf00      	nop
 800abe8:	3728      	adds	r7, #40	; 0x28
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b086      	sub	sp, #24
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ac1a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d10b      	bne.n	800ac3e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d102      	bne.n	800ac36 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f00e f9d1 	bl	8018fd8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	f043 0302 	orr.w	r3, r3, #2
 800ac3c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f003 0308 	and.w	r3, r3, #8
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d132      	bne.n	800acae <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f043 0308 	orr.w	r3, r3, #8
 800ac4e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f003 0304 	and.w	r3, r3, #4
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d126      	bne.n	800aca8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d113      	bne.n	800ac8a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800ac68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac6c:	d106      	bne.n	800ac7c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2102      	movs	r1, #2
 800ac74:	4618      	mov	r0, r3
 800ac76:	f008 fa57 	bl	8013128 <USB_InitFSLSPClkSel>
 800ac7a:	e011      	b.n	800aca0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2101      	movs	r1, #1
 800ac82:	4618      	mov	r0, r3
 800ac84:	f008 fa50 	bl	8013128 <USB_InitFSLSPClkSel>
 800ac88:	e00a      	b.n	800aca0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d106      	bne.n	800aca0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac98:	461a      	mov	r2, r3
 800ac9a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ac9e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f00e f9c7 	bl	8019034 <HAL_HCD_PortEnabled_Callback>
 800aca6:	e002      	b.n	800acae <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f00e f9d1 	bl	8019050 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f003 0320 	and.w	r3, r3, #32
 800acb4:	2b20      	cmp	r3, #32
 800acb6:	d103      	bne.n	800acc0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	f043 0320 	orr.w	r3, r3, #32
 800acbe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800acc6:	461a      	mov	r2, r3
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	6013      	str	r3, [r2, #0]
}
 800accc:	bf00      	nop
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d101      	bne.n	800ace6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e07f      	b.n	800ade6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d106      	bne.n	800ad00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7f8 f9e0 	bl	80030c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2224      	movs	r2, #36	; 0x24
 800ad04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f022 0201 	bic.w	r2, r2, #1
 800ad16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ad24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	689a      	ldr	r2, [r3, #8]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d107      	bne.n	800ad4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	689a      	ldr	r2, [r3, #8]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad4a:	609a      	str	r2, [r3, #8]
 800ad4c:	e006      	b.n	800ad5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	689a      	ldr	r2, [r3, #8]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ad5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d104      	bne.n	800ad6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6859      	ldr	r1, [r3, #4]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <HAL_I2C_Init+0x11c>)
 800ad7a:	430b      	orrs	r3, r1
 800ad7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68da      	ldr	r2, [r3, #12]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	691a      	ldr	r2, [r3, #16]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	ea42 0103 	orr.w	r1, r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	021a      	lsls	r2, r3, #8
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	430a      	orrs	r2, r1
 800ada6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	69d9      	ldr	r1, [r3, #28]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a1a      	ldr	r2, [r3, #32]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	430a      	orrs	r2, r1
 800adb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f042 0201 	orr.w	r2, r2, #1
 800adc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2220      	movs	r2, #32
 800add2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	02008000 	.word	0x02008000

0800adf4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e021      	b.n	800ae4a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2224      	movs	r2, #36	; 0x24
 800ae0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f022 0201 	bic.w	r2, r2, #1
 800ae1c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7f8 f9c6 	bl	80031b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
	...

0800ae54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af02      	add	r7, sp, #8
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	4611      	mov	r1, r2
 800ae60:	461a      	mov	r2, r3
 800ae62:	4603      	mov	r3, r0
 800ae64:	817b      	strh	r3, [r7, #10]
 800ae66:	460b      	mov	r3, r1
 800ae68:	813b      	strh	r3, [r7, #8]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b20      	cmp	r3, #32
 800ae78:	f040 80f9 	bne.w	800b06e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d002      	beq.n	800ae88 <HAL_I2C_Mem_Write+0x34>
 800ae82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d105      	bne.n	800ae94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e0ed      	b.n	800b070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d101      	bne.n	800aea2 <HAL_I2C_Mem_Write+0x4e>
 800ae9e:	2302      	movs	r3, #2
 800aea0:	e0e6      	b.n	800b070 <HAL_I2C_Mem_Write+0x21c>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aeaa:	f7fc f859 	bl	8006f60 <HAL_GetTick>
 800aeae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	2319      	movs	r3, #25
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f000 fac3 	bl	800b448 <I2C_WaitOnFlagUntilTimeout>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e0d1      	b.n	800b070 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2221      	movs	r2, #33	; 0x21
 800aed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2240      	movs	r2, #64	; 0x40
 800aed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6a3a      	ldr	r2, [r7, #32]
 800aee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aeec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aef4:	88f8      	ldrh	r0, [r7, #6]
 800aef6:	893a      	ldrh	r2, [r7, #8]
 800aef8:	8979      	ldrh	r1, [r7, #10]
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	4603      	mov	r3, r0
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f000 f9d3 	bl	800b2b0 <I2C_RequestMemoryWrite>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d005      	beq.n	800af1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e0a9      	b.n	800b070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af20:	b29b      	uxth	r3, r3
 800af22:	2bff      	cmp	r3, #255	; 0xff
 800af24:	d90e      	bls.n	800af44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	22ff      	movs	r2, #255	; 0xff
 800af2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af30:	b2da      	uxtb	r2, r3
 800af32:	8979      	ldrh	r1, [r7, #10]
 800af34:	2300      	movs	r3, #0
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f000 fba5 	bl	800b68c <I2C_TransferConfig>
 800af42:	e00f      	b.n	800af64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af48:	b29a      	uxth	r2, r3
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af52:	b2da      	uxtb	r2, r3
 800af54:	8979      	ldrh	r1, [r7, #10]
 800af56:	2300      	movs	r3, #0
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f000 fb94 	bl	800b68c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 faad 	bl	800b4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	e07b      	b.n	800b070 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7c:	781a      	ldrb	r2, [r3, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af92:	b29b      	uxth	r3, r3
 800af94:	3b01      	subs	r3, #1
 800af96:	b29a      	uxth	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afa0:	3b01      	subs	r3, #1
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afac:	b29b      	uxth	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d034      	beq.n	800b01c <HAL_I2C_Mem_Write+0x1c8>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d130      	bne.n	800b01c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc0:	2200      	movs	r2, #0
 800afc2:	2180      	movs	r1, #128	; 0x80
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 fa3f 	bl	800b448 <I2C_WaitOnFlagUntilTimeout>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e04d      	b.n	800b070 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afd8:	b29b      	uxth	r3, r3
 800afda:	2bff      	cmp	r3, #255	; 0xff
 800afdc:	d90e      	bls.n	800affc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	22ff      	movs	r2, #255	; 0xff
 800afe2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	8979      	ldrh	r1, [r7, #10]
 800afec:	2300      	movs	r3, #0
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f000 fb49 	bl	800b68c <I2C_TransferConfig>
 800affa:	e00f      	b.n	800b01c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b000:	b29a      	uxth	r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	8979      	ldrh	r1, [r7, #10]
 800b00e:	2300      	movs	r3, #0
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f000 fb38 	bl	800b68c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b020:	b29b      	uxth	r3, r3
 800b022:	2b00      	cmp	r3, #0
 800b024:	d19e      	bne.n	800af64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f000 fa8c 	bl	800b548 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e01a      	b.n	800b070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2220      	movs	r2, #32
 800b040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	6859      	ldr	r1, [r3, #4]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <HAL_I2C_Mem_Write+0x224>)
 800b04e:	400b      	ands	r3, r1
 800b050:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2220      	movs	r2, #32
 800b056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	e000      	b.n	800b070 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b06e:	2302      	movs	r3, #2
  }
}
 800b070:	4618      	mov	r0, r3
 800b072:	3718      	adds	r7, #24
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	fe00e800 	.word	0xfe00e800

0800b07c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b088      	sub	sp, #32
 800b080:	af02      	add	r7, sp, #8
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	4608      	mov	r0, r1
 800b086:	4611      	mov	r1, r2
 800b088:	461a      	mov	r2, r3
 800b08a:	4603      	mov	r3, r0
 800b08c:	817b      	strh	r3, [r7, #10]
 800b08e:	460b      	mov	r3, r1
 800b090:	813b      	strh	r3, [r7, #8]
 800b092:	4613      	mov	r3, r2
 800b094:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b20      	cmp	r3, #32
 800b0a0:	f040 80fd 	bne.w	800b29e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <HAL_I2C_Mem_Read+0x34>
 800b0aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d105      	bne.n	800b0bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e0f1      	b.n	800b2a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d101      	bne.n	800b0ca <HAL_I2C_Mem_Read+0x4e>
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e0ea      	b.n	800b2a0 <HAL_I2C_Mem_Read+0x224>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b0d2:	f7fb ff45 	bl	8006f60 <HAL_GetTick>
 800b0d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	2319      	movs	r3, #25
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 f9af 	bl	800b448 <I2C_WaitOnFlagUntilTimeout>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e0d5      	b.n	800b2a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2222      	movs	r2, #34	; 0x22
 800b0f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2240      	movs	r2, #64	; 0x40
 800b100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6a3a      	ldr	r2, [r7, #32]
 800b10e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b11c:	88f8      	ldrh	r0, [r7, #6]
 800b11e:	893a      	ldrh	r2, [r7, #8]
 800b120:	8979      	ldrh	r1, [r7, #10]
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	4603      	mov	r3, r0
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 f913 	bl	800b358 <I2C_RequestMemoryRead>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d005      	beq.n	800b144 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	e0ad      	b.n	800b2a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b148:	b29b      	uxth	r3, r3
 800b14a:	2bff      	cmp	r3, #255	; 0xff
 800b14c:	d90e      	bls.n	800b16c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	22ff      	movs	r2, #255	; 0xff
 800b152:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	8979      	ldrh	r1, [r7, #10]
 800b15c:	4b52      	ldr	r3, [pc, #328]	; (800b2a8 <HAL_I2C_Mem_Read+0x22c>)
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 fa91 	bl	800b68c <I2C_TransferConfig>
 800b16a:	e00f      	b.n	800b18c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b170:	b29a      	uxth	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	8979      	ldrh	r1, [r7, #10]
 800b17e:	4b4a      	ldr	r3, [pc, #296]	; (800b2a8 <HAL_I2C_Mem_Read+0x22c>)
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 fa80 	bl	800b68c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b192:	2200      	movs	r2, #0
 800b194:	2104      	movs	r1, #4
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f000 f956 	bl	800b448 <I2C_WaitOnFlagUntilTimeout>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e07c      	b.n	800b2a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	b2d2      	uxtb	r2, r2
 800b1b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	1c5a      	adds	r2, r3, #1
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d034      	beq.n	800b24c <HAL_I2C_Mem_Read+0x1d0>
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d130      	bne.n	800b24c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	2180      	movs	r1, #128	; 0x80
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f000 f927 	bl	800b448 <I2C_WaitOnFlagUntilTimeout>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d001      	beq.n	800b204 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	e04d      	b.n	800b2a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b208:	b29b      	uxth	r3, r3
 800b20a:	2bff      	cmp	r3, #255	; 0xff
 800b20c:	d90e      	bls.n	800b22c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	22ff      	movs	r2, #255	; 0xff
 800b212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	8979      	ldrh	r1, [r7, #10]
 800b21c:	2300      	movs	r3, #0
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f000 fa31 	bl	800b68c <I2C_TransferConfig>
 800b22a:	e00f      	b.n	800b24c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b230:	b29a      	uxth	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	8979      	ldrh	r1, [r7, #10]
 800b23e:	2300      	movs	r3, #0
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f000 fa20 	bl	800b68c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b250:	b29b      	uxth	r3, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	d19a      	bne.n	800b18c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b256:	697a      	ldr	r2, [r7, #20]
 800b258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 f974 	bl	800b548 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e01a      	b.n	800b2a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2220      	movs	r2, #32
 800b270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	6859      	ldr	r1, [r3, #4]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	4b0b      	ldr	r3, [pc, #44]	; (800b2ac <HAL_I2C_Mem_Read+0x230>)
 800b27e:	400b      	ands	r3, r1
 800b280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2220      	movs	r2, #32
 800b286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	e000      	b.n	800b2a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b29e:	2302      	movs	r3, #2
  }
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3718      	adds	r7, #24
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	80002400 	.word	0x80002400
 800b2ac:	fe00e800 	.word	0xfe00e800

0800b2b0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	461a      	mov	r2, r3
 800b2be:	4603      	mov	r3, r0
 800b2c0:	817b      	strh	r3, [r7, #10]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	813b      	strh	r3, [r7, #8]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b2ca:	88fb      	ldrh	r3, [r7, #6]
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	8979      	ldrh	r1, [r7, #10]
 800b2d0:	4b20      	ldr	r3, [pc, #128]	; (800b354 <I2C_RequestMemoryWrite+0xa4>)
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f000 f9d7 	bl	800b68c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2de:	69fa      	ldr	r2, [r7, #28]
 800b2e0:	69b9      	ldr	r1, [r7, #24]
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 f8f0 	bl	800b4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e02c      	b.n	800b34c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b2f2:	88fb      	ldrh	r3, [r7, #6]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d105      	bne.n	800b304 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b2f8:	893b      	ldrh	r3, [r7, #8]
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	629a      	str	r2, [r3, #40]	; 0x28
 800b302:	e015      	b.n	800b330 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b304:	893b      	ldrh	r3, [r7, #8]
 800b306:	0a1b      	lsrs	r3, r3, #8
 800b308:	b29b      	uxth	r3, r3
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b312:	69fa      	ldr	r2, [r7, #28]
 800b314:	69b9      	ldr	r1, [r7, #24]
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f000 f8d6 	bl	800b4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e012      	b.n	800b34c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b326:	893b      	ldrh	r3, [r7, #8]
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	2200      	movs	r2, #0
 800b338:	2180      	movs	r1, #128	; 0x80
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f000 f884 	bl	800b448 <I2C_WaitOnFlagUntilTimeout>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e000      	b.n	800b34c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	80002000 	.word	0x80002000

0800b358 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	af02      	add	r7, sp, #8
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	4608      	mov	r0, r1
 800b362:	4611      	mov	r1, r2
 800b364:	461a      	mov	r2, r3
 800b366:	4603      	mov	r3, r0
 800b368:	817b      	strh	r3, [r7, #10]
 800b36a:	460b      	mov	r3, r1
 800b36c:	813b      	strh	r3, [r7, #8]
 800b36e:	4613      	mov	r3, r2
 800b370:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b372:	88fb      	ldrh	r3, [r7, #6]
 800b374:	b2da      	uxtb	r2, r3
 800b376:	8979      	ldrh	r1, [r7, #10]
 800b378:	4b20      	ldr	r3, [pc, #128]	; (800b3fc <I2C_RequestMemoryRead+0xa4>)
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	2300      	movs	r3, #0
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f000 f984 	bl	800b68c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b384:	69fa      	ldr	r2, [r7, #28]
 800b386:	69b9      	ldr	r1, [r7, #24]
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f000 f89d 	bl	800b4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	e02c      	b.n	800b3f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b398:	88fb      	ldrh	r3, [r7, #6]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d105      	bne.n	800b3aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b39e:	893b      	ldrh	r3, [r7, #8]
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	629a      	str	r2, [r3, #40]	; 0x28
 800b3a8:	e015      	b.n	800b3d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b3aa:	893b      	ldrh	r3, [r7, #8]
 800b3ac:	0a1b      	lsrs	r3, r3, #8
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3b8:	69fa      	ldr	r2, [r7, #28]
 800b3ba:	69b9      	ldr	r1, [r7, #24]
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f000 f883 	bl	800b4c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e012      	b.n	800b3f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b3cc:	893b      	ldrh	r3, [r7, #8]
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2140      	movs	r1, #64	; 0x40
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 f831 	bl	800b448 <I2C_WaitOnFlagUntilTimeout>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e000      	b.n	800b3f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	80002000 	.word	0x80002000

0800b400 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	2b02      	cmp	r3, #2
 800b414:	d103      	bne.n	800b41e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2200      	movs	r2, #0
 800b41c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d007      	beq.n	800b43c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	699a      	ldr	r2, [r3, #24]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f042 0201 	orr.w	r2, r2, #1
 800b43a:	619a      	str	r2, [r3, #24]
  }
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	4613      	mov	r3, r2
 800b456:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b458:	e022      	b.n	800b4a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b460:	d01e      	beq.n	800b4a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b462:	f7fb fd7d 	bl	8006f60 <HAL_GetTick>
 800b466:	4602      	mov	r2, r0
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d302      	bcc.n	800b478 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d113      	bne.n	800b4a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b47c:	f043 0220 	orr.w	r2, r3, #32
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2220      	movs	r2, #32
 800b488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e00f      	b.n	800b4c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	699a      	ldr	r2, [r3, #24]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	bf0c      	ite	eq
 800b4b0:	2301      	moveq	r3, #1
 800b4b2:	2300      	movne	r3, #0
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d0cd      	beq.n	800b45a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b4d4:	e02c      	b.n	800b530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	68b9      	ldr	r1, [r7, #8]
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f000 f870 	bl	800b5c0 <I2C_IsAcknowledgeFailed>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e02a      	b.n	800b540 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4f0:	d01e      	beq.n	800b530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4f2:	f7fb fd35 	bl	8006f60 <HAL_GetTick>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d302      	bcc.n	800b508 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d113      	bne.n	800b530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b50c:	f043 0220 	orr.w	r2, r3, #32
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2220      	movs	r2, #32
 800b518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e007      	b.n	800b540 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	f003 0302 	and.w	r3, r3, #2
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d1cb      	bne.n	800b4d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b554:	e028      	b.n	800b5a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 f830 	bl	800b5c0 <I2C_IsAcknowledgeFailed>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	e026      	b.n	800b5b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b56a:	f7fb fcf9 	bl	8006f60 <HAL_GetTick>
 800b56e:	4602      	mov	r2, r0
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	429a      	cmp	r2, r3
 800b578:	d302      	bcc.n	800b580 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d113      	bne.n	800b5a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b584:	f043 0220 	orr.w	r2, r3, #32
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2220      	movs	r2, #32
 800b590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e007      	b.n	800b5b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	f003 0320 	and.w	r3, r3, #32
 800b5b2:	2b20      	cmp	r3, #32
 800b5b4:	d1cf      	bne.n	800b556 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	f003 0310 	and.w	r3, r3, #16
 800b5d6:	2b10      	cmp	r3, #16
 800b5d8:	d151      	bne.n	800b67e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5da:	e022      	b.n	800b622 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5e2:	d01e      	beq.n	800b622 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5e4:	f7fb fcbc 	bl	8006f60 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d302      	bcc.n	800b5fa <I2C_IsAcknowledgeFailed+0x3a>
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d113      	bne.n	800b622 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5fe:	f043 0220 	orr.w	r2, r3, #32
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2220      	movs	r2, #32
 800b60a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e02e      	b.n	800b680 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	f003 0320 	and.w	r3, r3, #32
 800b62c:	2b20      	cmp	r3, #32
 800b62e:	d1d5      	bne.n	800b5dc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2210      	movs	r2, #16
 800b636:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2220      	movs	r2, #32
 800b63e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f7ff fedd 	bl	800b400 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	6859      	ldr	r1, [r3, #4]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	4b0d      	ldr	r3, [pc, #52]	; (800b688 <I2C_IsAcknowledgeFailed+0xc8>)
 800b652:	400b      	ands	r3, r1
 800b654:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b65a:	f043 0204 	orr.w	r2, r3, #4
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2220      	movs	r2, #32
 800b666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e000      	b.n	800b680 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	fe00e800 	.word	0xfe00e800

0800b68c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	607b      	str	r3, [r7, #4]
 800b696:	460b      	mov	r3, r1
 800b698:	817b      	strh	r3, [r7, #10]
 800b69a:	4613      	mov	r3, r2
 800b69c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	685a      	ldr	r2, [r3, #4]
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	0d5b      	lsrs	r3, r3, #21
 800b6a8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b6ac:	4b0d      	ldr	r3, [pc, #52]	; (800b6e4 <I2C_TransferConfig+0x58>)
 800b6ae:	430b      	orrs	r3, r1
 800b6b0:	43db      	mvns	r3, r3
 800b6b2:	ea02 0103 	and.w	r1, r2, r3
 800b6b6:	897b      	ldrh	r3, [r7, #10]
 800b6b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b6bc:	7a7b      	ldrb	r3, [r7, #9]
 800b6be:	041b      	lsls	r3, r3, #16
 800b6c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b6c4:	431a      	orrs	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	431a      	orrs	r2, r3
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	430a      	orrs	r2, r1
 800b6d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b6d6:	bf00      	nop
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	03ff63ff 	.word	0x03ff63ff

0800b6e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d138      	bne.n	800b770 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b704:	2b01      	cmp	r3, #1
 800b706:	d101      	bne.n	800b70c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b708:	2302      	movs	r3, #2
 800b70a:	e032      	b.n	800b772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2224      	movs	r2, #36	; 0x24
 800b718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f022 0201 	bic.w	r2, r2, #1
 800b72a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b73a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6819      	ldr	r1, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	430a      	orrs	r2, r1
 800b74a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f042 0201 	orr.w	r2, r2, #1
 800b75a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2220      	movs	r2, #32
 800b760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	e000      	b.n	800b772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b770:	2302      	movs	r3, #2
  }
}
 800b772:	4618      	mov	r0, r3
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b77e:	b480      	push	{r7}
 800b780:	b085      	sub	sp, #20
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b20      	cmp	r3, #32
 800b792:	d139      	bne.n	800b808 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d101      	bne.n	800b7a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b79e:	2302      	movs	r3, #2
 800b7a0:	e033      	b.n	800b80a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2224      	movs	r2, #36	; 0x24
 800b7ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f022 0201 	bic.w	r2, r2, #1
 800b7c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b7d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	021b      	lsls	r3, r3, #8
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f042 0201 	orr.w	r2, r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b804:	2300      	movs	r3, #0
 800b806:	e000      	b.n	800b80a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b808:	2302      	movs	r3, #2
  }
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
	...

0800b818 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d101      	bne.n	800b82a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e0bf      	b.n	800b9aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d106      	bne.n	800b844 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7f7 fcf2 	bl	8003228 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2202      	movs	r2, #2
 800b848:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	699a      	ldr	r2, [r3, #24]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b85a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6999      	ldr	r1, [r3, #24]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b870:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	430a      	orrs	r2, r1
 800b87e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6899      	ldr	r1, [r3, #8]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	4b4a      	ldr	r3, [pc, #296]	; (800b9b4 <HAL_LTDC_Init+0x19c>)
 800b88c:	400b      	ands	r3, r1
 800b88e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	041b      	lsls	r3, r3, #16
 800b896:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	6899      	ldr	r1, [r3, #8]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	699a      	ldr	r2, [r3, #24]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	431a      	orrs	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68d9      	ldr	r1, [r3, #12]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	4b3e      	ldr	r3, [pc, #248]	; (800b9b4 <HAL_LTDC_Init+0x19c>)
 800b8ba:	400b      	ands	r3, r1
 800b8bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	041b      	lsls	r3, r3, #16
 800b8c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68d9      	ldr	r1, [r3, #12]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a1a      	ldr	r2, [r3, #32]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	431a      	orrs	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6919      	ldr	r1, [r3, #16]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	4b33      	ldr	r3, [pc, #204]	; (800b9b4 <HAL_LTDC_Init+0x19c>)
 800b8e8:	400b      	ands	r3, r1
 800b8ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f0:	041b      	lsls	r3, r3, #16
 800b8f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6919      	ldr	r1, [r3, #16]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	431a      	orrs	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	430a      	orrs	r2, r1
 800b908:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6959      	ldr	r1, [r3, #20]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	4b27      	ldr	r3, [pc, #156]	; (800b9b4 <HAL_LTDC_Init+0x19c>)
 800b916:	400b      	ands	r3, r1
 800b918:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91e:	041b      	lsls	r3, r3, #16
 800b920:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	6959      	ldr	r1, [r3, #20]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	431a      	orrs	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	430a      	orrs	r2, r1
 800b936:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b93e:	021b      	lsls	r3, r3, #8
 800b940:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b948:	041b      	lsls	r3, r3, #16
 800b94a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b95a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	4313      	orrs	r3, r2
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b96e:	431a      	orrs	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	430a      	orrs	r2, r1
 800b976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f042 0206 	orr.w	r2, r2, #6
 800b986:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	699a      	ldr	r2, [r3, #24]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f042 0201 	orr.w	r2, r2, #1
 800b996:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	f000f800 	.word	0xf000f800

0800b9b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b9b8:	b5b0      	push	{r4, r5, r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d101      	bne.n	800b9d2 <HAL_LTDC_ConfigLayer+0x1a>
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	e02c      	b.n	800ba2c <HAL_LTDC_ConfigLayer+0x74>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2202      	movs	r2, #2
 800b9de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2134      	movs	r1, #52	; 0x34
 800b9e8:	fb01 f303 	mul.w	r3, r1, r3
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	4614      	mov	r4, r2
 800b9f6:	461d      	mov	r5, r3
 800b9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 f847 	bl	800baa0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2201      	movs	r2, #1
 800ba18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bdb0      	pop	{r4, r5, r7, pc}

0800ba34 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d101      	bne.n	800ba4e <HAL_LTDC_SetAddress+0x1a>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	e024      	b.n	800ba98 <HAL_LTDC_SetAddress+0x64>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2202      	movs	r2, #2
 800ba5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2234      	movs	r2, #52	; 0x34
 800ba62:	fb02 f303 	mul.w	r3, r2, r3
 800ba66:	3338      	adds	r3, #56	; 0x38
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	6979      	ldr	r1, [r7, #20]
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 f811 	bl	800baa0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2201      	movs	r2, #1
 800ba84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b089      	sub	sp, #36	; 0x24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	685a      	ldr	r2, [r3, #4]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	0c1b      	lsrs	r3, r3, #16
 800bab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800babc:	4413      	add	r3, r2
 800babe:	041b      	lsls	r3, r3, #16
 800bac0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	461a      	mov	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	01db      	lsls	r3, r3, #7
 800bacc:	4413      	add	r3, r2
 800bace:	3384      	adds	r3, #132	; 0x84
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	6812      	ldr	r2, [r2, #0]
 800bad6:	4611      	mov	r1, r2
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	01d2      	lsls	r2, r2, #7
 800badc:	440a      	add	r2, r1
 800bade:	3284      	adds	r2, #132	; 0x84
 800bae0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bae4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	0c1b      	lsrs	r3, r3, #16
 800baf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800baf6:	4413      	add	r3, r2
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4619      	mov	r1, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	01db      	lsls	r3, r3, #7
 800bb04:	440b      	add	r3, r1
 800bb06:	3384      	adds	r3, #132	; 0x84
 800bb08:	4619      	mov	r1, r3
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	68da      	ldr	r2, [r3, #12]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb1e:	4413      	add	r3, r2
 800bb20:	041b      	lsls	r3, r3, #16
 800bb22:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	461a      	mov	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	01db      	lsls	r3, r3, #7
 800bb2e:	4413      	add	r3, r2
 800bb30:	3384      	adds	r3, #132	; 0x84
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	6812      	ldr	r2, [r2, #0]
 800bb38:	4611      	mov	r1, r2
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	01d2      	lsls	r2, r2, #7
 800bb3e:	440a      	add	r2, r1
 800bb40:	3284      	adds	r2, #132	; 0x84
 800bb42:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bb46:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb56:	4413      	add	r3, r2
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4619      	mov	r1, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	01db      	lsls	r3, r3, #7
 800bb64:	440b      	add	r3, r1
 800bb66:	3384      	adds	r3, #132	; 0x84
 800bb68:	4619      	mov	r1, r3
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	461a      	mov	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	01db      	lsls	r3, r3, #7
 800bb7a:	4413      	add	r3, r2
 800bb7c:	3384      	adds	r3, #132	; 0x84
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	6812      	ldr	r2, [r2, #0]
 800bb84:	4611      	mov	r1, r2
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	01d2      	lsls	r2, r2, #7
 800bb8a:	440a      	add	r2, r1
 800bb8c:	3284      	adds	r2, #132	; 0x84
 800bb8e:	f023 0307 	bic.w	r3, r3, #7
 800bb92:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	01db      	lsls	r3, r3, #7
 800bb9e:	4413      	add	r3, r2
 800bba0:	3384      	adds	r3, #132	; 0x84
 800bba2:	461a      	mov	r2, r3
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bbb0:	021b      	lsls	r3, r3, #8
 800bbb2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bbba:	041b      	lsls	r3, r3, #16
 800bbbc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	061b      	lsls	r3, r3, #24
 800bbc4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	01db      	lsls	r3, r3, #7
 800bbd0:	4413      	add	r3, r2
 800bbd2:	3384      	adds	r3, #132	; 0x84
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	01db      	lsls	r3, r3, #7
 800bbe0:	4413      	add	r3, r2
 800bbe2:	3384      	adds	r3, #132	; 0x84
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	431a      	orrs	r2, r3
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	431a      	orrs	r2, r3
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	01db      	lsls	r3, r3, #7
 800bc04:	440b      	add	r3, r1
 800bc06:	3384      	adds	r3, #132	; 0x84
 800bc08:	4619      	mov	r1, r3
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	461a      	mov	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	01db      	lsls	r3, r3, #7
 800bc1a:	4413      	add	r3, r2
 800bc1c:	3384      	adds	r3, #132	; 0x84
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	6812      	ldr	r2, [r2, #0]
 800bc24:	4611      	mov	r1, r2
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	01d2      	lsls	r2, r2, #7
 800bc2a:	440a      	add	r2, r1
 800bc2c:	3284      	adds	r2, #132	; 0x84
 800bc2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc32:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	01db      	lsls	r3, r3, #7
 800bc3e:	4413      	add	r3, r2
 800bc40:	3384      	adds	r3, #132	; 0x84
 800bc42:	461a      	mov	r2, r3
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	695b      	ldr	r3, [r3, #20]
 800bc48:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	01db      	lsls	r3, r3, #7
 800bc54:	4413      	add	r3, r2
 800bc56:	3384      	adds	r3, #132	; 0x84
 800bc58:	69da      	ldr	r2, [r3, #28]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	01db      	lsls	r3, r3, #7
 800bc64:	440b      	add	r3, r1
 800bc66:	3384      	adds	r3, #132	; 0x84
 800bc68:	4619      	mov	r1, r3
 800bc6a:	4b58      	ldr	r3, [pc, #352]	; (800bdcc <LTDC_SetConfig+0x32c>)
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	69da      	ldr	r2, [r3, #28]
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	68f9      	ldr	r1, [r7, #12]
 800bc7a:	6809      	ldr	r1, [r1, #0]
 800bc7c:	4608      	mov	r0, r1
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	01c9      	lsls	r1, r1, #7
 800bc82:	4401      	add	r1, r0
 800bc84:	3184      	adds	r1, #132	; 0x84
 800bc86:	4313      	orrs	r3, r2
 800bc88:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	01db      	lsls	r3, r3, #7
 800bc94:	4413      	add	r3, r2
 800bc96:	3384      	adds	r3, #132	; 0x84
 800bc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	01db      	lsls	r3, r3, #7
 800bca4:	4413      	add	r3, r2
 800bca6:	3384      	adds	r3, #132	; 0x84
 800bca8:	461a      	mov	r2, r3
 800bcaa:	2300      	movs	r3, #0
 800bcac:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	01db      	lsls	r3, r3, #7
 800bcb8:	4413      	add	r3, r2
 800bcba:	3384      	adds	r3, #132	; 0x84
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d102      	bne.n	800bcd2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800bccc:	2304      	movs	r3, #4
 800bcce:	61fb      	str	r3, [r7, #28]
 800bcd0:	e01b      	b.n	800bd0a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d102      	bne.n	800bce0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	61fb      	str	r3, [r7, #28]
 800bcde:	e014      	b.n	800bd0a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	d00b      	beq.n	800bd00 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d007      	beq.n	800bd00 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d003      	beq.n	800bd00 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bcfc:	2b07      	cmp	r3, #7
 800bcfe:	d102      	bne.n	800bd06 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800bd00:	2302      	movs	r3, #2
 800bd02:	61fb      	str	r3, [r7, #28]
 800bd04:	e001      	b.n	800bd0a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800bd06:	2301      	movs	r3, #1
 800bd08:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	01db      	lsls	r3, r3, #7
 800bd14:	4413      	add	r3, r2
 800bd16:	3384      	adds	r3, #132	; 0x84
 800bd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	6812      	ldr	r2, [r2, #0]
 800bd1e:	4611      	mov	r1, r2
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	01d2      	lsls	r2, r2, #7
 800bd24:	440a      	add	r2, r1
 800bd26:	3284      	adds	r2, #132	; 0x84
 800bd28:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800bd2c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd32:	69fa      	ldr	r2, [r7, #28]
 800bd34:	fb02 f303 	mul.w	r3, r2, r3
 800bd38:	041a      	lsls	r2, r3, #16
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	6859      	ldr	r1, [r3, #4]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	1acb      	subs	r3, r1, r3
 800bd44:	69f9      	ldr	r1, [r7, #28]
 800bd46:	fb01 f303 	mul.w	r3, r1, r3
 800bd4a:	3303      	adds	r3, #3
 800bd4c:	68f9      	ldr	r1, [r7, #12]
 800bd4e:	6809      	ldr	r1, [r1, #0]
 800bd50:	4608      	mov	r0, r1
 800bd52:	6879      	ldr	r1, [r7, #4]
 800bd54:	01c9      	lsls	r1, r1, #7
 800bd56:	4401      	add	r1, r0
 800bd58:	3184      	adds	r1, #132	; 0x84
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	01db      	lsls	r3, r3, #7
 800bd68:	4413      	add	r3, r2
 800bd6a:	3384      	adds	r3, #132	; 0x84
 800bd6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4619      	mov	r1, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	01db      	lsls	r3, r3, #7
 800bd78:	440b      	add	r3, r1
 800bd7a:	3384      	adds	r3, #132	; 0x84
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <LTDC_SetConfig+0x330>)
 800bd80:	4013      	ands	r3, r2
 800bd82:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	01db      	lsls	r3, r3, #7
 800bd8e:	4413      	add	r3, r2
 800bd90:	3384      	adds	r3, #132	; 0x84
 800bd92:	461a      	mov	r2, r3
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd98:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	01db      	lsls	r3, r3, #7
 800bda4:	4413      	add	r3, r2
 800bda6:	3384      	adds	r3, #132	; 0x84
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	4611      	mov	r1, r2
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	01d2      	lsls	r2, r2, #7
 800bdb4:	440a      	add	r2, r1
 800bdb6:	3284      	adds	r2, #132	; 0x84
 800bdb8:	f043 0301 	orr.w	r3, r3, #1
 800bdbc:	6013      	str	r3, [r2, #0]
}
 800bdbe:	bf00      	nop
 800bdc0:	3724      	adds	r7, #36	; 0x24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	fffff8f8 	.word	0xfffff8f8
 800bdd0:	fffff800 	.word	0xfffff800

0800bdd4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdd8:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a04      	ldr	r2, [pc, #16]	; (800bdf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bde2:	6013      	str	r3, [r2, #0]
}
 800bde4:	bf00      	nop
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	40007000 	.word	0x40007000

0800bdf4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bdfe:	4b23      	ldr	r3, [pc, #140]	; (800be8c <HAL_PWREx_EnableOverDrive+0x98>)
 800be00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be02:	4a22      	ldr	r2, [pc, #136]	; (800be8c <HAL_PWREx_EnableOverDrive+0x98>)
 800be04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be08:	6413      	str	r3, [r2, #64]	; 0x40
 800be0a:	4b20      	ldr	r3, [pc, #128]	; (800be8c <HAL_PWREx_EnableOverDrive+0x98>)
 800be0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be12:	603b      	str	r3, [r7, #0]
 800be14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800be16:	4b1e      	ldr	r3, [pc, #120]	; (800be90 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a1d      	ldr	r2, [pc, #116]	; (800be90 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be22:	f7fb f89d 	bl	8006f60 <HAL_GetTick>
 800be26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be28:	e009      	b.n	800be3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be2a:	f7fb f899 	bl	8006f60 <HAL_GetTick>
 800be2e:	4602      	mov	r2, r0
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be38:	d901      	bls.n	800be3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800be3a:	2303      	movs	r3, #3
 800be3c:	e022      	b.n	800be84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be3e:	4b14      	ldr	r3, [pc, #80]	; (800be90 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be4a:	d1ee      	bne.n	800be2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800be4c:	4b10      	ldr	r3, [pc, #64]	; (800be90 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a0f      	ldr	r2, [pc, #60]	; (800be90 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be58:	f7fb f882 	bl	8006f60 <HAL_GetTick>
 800be5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be5e:	e009      	b.n	800be74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be60:	f7fb f87e 	bl	8006f60 <HAL_GetTick>
 800be64:	4602      	mov	r2, r0
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be6e:	d901      	bls.n	800be74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800be70:	2303      	movs	r3, #3
 800be72:	e007      	b.n	800be84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be74:	4b06      	ldr	r3, [pc, #24]	; (800be90 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be80:	d1ee      	bne.n	800be60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	40023800 	.word	0x40023800
 800be90:	40007000 	.word	0x40007000

0800be94 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b086      	sub	sp, #24
 800be98:	af02      	add	r7, sp, #8
 800be9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800be9c:	f7fb f860 	bl	8006f60 <HAL_GetTick>
 800bea0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e067      	b.n	800bf7c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10b      	bne.n	800bed0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7f7 fa71 	bl	80033a8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800bec6:	f241 3188 	movw	r1, #5000	; 0x1388
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fda8 	bl	800ca20 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	3b01      	subs	r3, #1
 800bee0:	021a      	lsls	r2, r3, #8
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	430a      	orrs	r2, r1
 800bee8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	2120      	movs	r1, #32
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fdd3 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800befc:	4603      	mov	r3, r0
 800befe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800bf00:	7afb      	ldrb	r3, [r7, #11]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d135      	bne.n	800bf72 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	4b1d      	ldr	r3, [pc, #116]	; (800bf84 <HAL_QSPI_Init+0xf0>)
 800bf0e:	4013      	ands	r3, r2
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	6852      	ldr	r2, [r2, #4]
 800bf14:	0611      	lsls	r1, r2, #24
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	68d2      	ldr	r2, [r2, #12]
 800bf1a:	4311      	orrs	r1, r2
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	69d2      	ldr	r2, [r2, #28]
 800bf20:	4311      	orrs	r1, r2
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	6a12      	ldr	r2, [r2, #32]
 800bf26:	4311      	orrs	r1, r2
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	6812      	ldr	r2, [r2, #0]
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	685a      	ldr	r2, [r3, #4]
 800bf36:	4b14      	ldr	r3, [pc, #80]	; (800bf88 <HAL_QSPI_Init+0xf4>)
 800bf38:	4013      	ands	r3, r2
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	6912      	ldr	r2, [r2, #16]
 800bf3e:	0411      	lsls	r1, r2, #16
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	6952      	ldr	r2, [r2, #20]
 800bf44:	4311      	orrs	r1, r2
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	6992      	ldr	r2, [r2, #24]
 800bf4a:	4311      	orrs	r1, r2
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	6812      	ldr	r2, [r2, #0]
 800bf50:	430b      	orrs	r3, r1
 800bf52:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f042 0201 	orr.w	r2, r2, #1
 800bf62:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800bf7a:	7afb      	ldrb	r3, [r7, #11]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	00ffff2f 	.word	0x00ffff2f
 800bf88:	ffe0f8fe 	.word	0xffe0f8fe

0800bf8c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	f003 0304 	and.w	r3, r3, #4
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d064      	beq.n	800c078 <HAL_QSPI_IRQHandler+0xec>
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d05f      	beq.n	800c078 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3320      	adds	r3, #32
 800bfbe:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b12      	cmp	r3, #18
 800bfca:	d125      	bne.n	800c018 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800bfcc:	e01c      	b.n	800c008 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00f      	beq.n	800bff6 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfda:	781a      	ldrb	r2, [r3, #0]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe4:	1c5a      	adds	r2, r3, #1
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfee:	1e5a      	subs	r2, r3, #1
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	62da      	str	r2, [r3, #44]	; 0x2c
 800bff4:	e008      	b.n	800c008 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c004:	601a      	str	r2, [r3, #0]
          break;
 800c006:	e033      	b.n	800c070 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	f003 0304 	and.w	r3, r3, #4
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1db      	bne.n	800bfce <HAL_QSPI_IRQHandler+0x42>
 800c016:	e02b      	b.n	800c070 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	2b22      	cmp	r3, #34	; 0x22
 800c022:	d125      	bne.n	800c070 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c024:	e01d      	b.n	800c062 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d010      	beq.n	800c050 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	7812      	ldrb	r2, [r2, #0]
 800c036:	b2d2      	uxtb	r2, r2
 800c038:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c048:	1e5a      	subs	r2, r3, #1
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	639a      	str	r2, [r3, #56]	; 0x38
 800c04e:	e008      	b.n	800c062 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c05e:	601a      	str	r2, [r3, #0]
          break;
 800c060:	e006      	b.n	800c070 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	f003 0304 	and.w	r3, r3, #4
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1da      	bne.n	800c026 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fbed 	bl	800c850 <HAL_QSPI_FifoThresholdCallback>
 800c076:	e142      	b.n	800c2fe <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	f003 0302 	and.w	r3, r3, #2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 80b6 	beq.w	800c1f0 <HAL_QSPI_IRQHandler+0x264>
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f000 80b0 	beq.w	800c1f0 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2202      	movs	r2, #2
 800c096:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800c0a6:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	2b12      	cmp	r3, #18
 800c0b2:	d123      	bne.n	800c0fc <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0304 	and.w	r3, r3, #4
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d011      	beq.n	800c0e6 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f022 0204 	bic.w	r2, r2, #4
 800c0d0:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f022 0201 	bic.w	r2, r2, #1
 800c0e4:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fc3e 	bl	800c968 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fba1 	bl	800c83c <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c0fa:	e0fd      	b.n	800c2f8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c102:	b2db      	uxtb	r3, r3
 800c104:	2b22      	cmp	r3, #34	; 0x22
 800c106:	d146      	bne.n	800c196 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 0304 	and.w	r3, r3, #4
 800c112:	2b00      	cmp	r3, #0
 800c114:	d012      	beq.n	800c13c <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f022 0204 	bic.w	r2, r2, #4
 800c124:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f022 0201 	bic.w	r2, r2, #1
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	e021      	b.n	800c180 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3320      	adds	r3, #32
 800c142:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800c144:	e013      	b.n	800c16e <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d017      	beq.n	800c17e <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	7812      	ldrb	r2, [r2, #0]
 800c156:	b2d2      	uxtb	r2, r2
 800c158:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c168:	1e5a      	subs	r2, r3, #1
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1e4      	bne.n	800c146 <HAL_QSPI_IRQHandler+0x1ba>
 800c17c:	e000      	b.n	800c180 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800c17e:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fbf1 	bl	800c968 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fb4a 	bl	800c828 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c194:	e0b0      	b.n	800c2f8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	d107      	bne.n	800c1b2 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fb32 	bl	800c814 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c1b0:	e0a2      	b.n	800c2f8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b08      	cmp	r3, #8
 800c1bc:	f040 809c 	bne.w	800c2f8 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	695a      	ldr	r2, [r3, #20]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c1ce:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d103      	bne.n	800c1e8 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fb0d 	bl	800c800 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c1e6:	e087      	b.n	800c2f8 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 faff 	bl	800c7ec <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c1ee:	e083      	b.n	800c2f8 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	f003 0308 	and.w	r3, r3, #8
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d01f      	beq.n	800c23a <HAL_QSPI_IRQHandler+0x2ae>
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d01a      	beq.n	800c23a <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2208      	movs	r2, #8
 800c20a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00b      	beq.n	800c232 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800c228:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fb16 	bl	800c864 <HAL_QSPI_StatusMatchCallback>
 800c238:	e061      	b.n	800c2fe <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f003 0301 	and.w	r3, r3, #1
 800c240:	2b00      	cmp	r3, #0
 800c242:	d047      	beq.n	800c2d4 <HAL_QSPI_IRQHandler+0x348>
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d042      	beq.n	800c2d4 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2201      	movs	r2, #1
 800c254:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800c264:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c26a:	f043 0202 	orr.w	r2, r3, #2
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f003 0304 	and.w	r3, r3, #4
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d021      	beq.n	800c2c4 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f022 0204 	bic.w	r2, r2, #4
 800c28e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c294:	4a1c      	ldr	r2, [pc, #112]	; (800c308 <HAL_QSPI_IRQHandler+0x37c>)
 800c296:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fb fe59 	bl	8007f54 <HAL_DMA_Abort_IT>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d029      	beq.n	800c2fc <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ac:	f043 0204 	orr.w	r2, r3, #4
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 fa95 	bl	800c7ec <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c2c2:	e01b      	b.n	800c2fc <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fa8d 	bl	800c7ec <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c2d2:	e013      	b.n	800c2fc <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	f003 0310 	and.w	r3, r3, #16
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00f      	beq.n	800c2fe <HAL_QSPI_IRQHandler+0x372>
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00a      	beq.n	800c2fe <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2210      	movs	r2, #16
 800c2ee:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fac1 	bl	800c878 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800c2f6:	e002      	b.n	800c2fe <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c2f8:	bf00      	nop
 800c2fa:	e000      	b.n	800c2fe <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c2fc:	bf00      	nop
}
 800c2fe:	bf00      	nop
 800c300:	3718      	adds	r7, #24
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	0800ca3d 	.word	0x0800ca3d

0800c30c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af02      	add	r7, sp, #8
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c318:	f7fa fe22 	bl	8006f60 <HAL_GetTick>
 800c31c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b01      	cmp	r3, #1
 800c328:	d101      	bne.n	800c32e <HAL_QSPI_Command+0x22>
 800c32a:	2302      	movs	r3, #2
 800c32c:	e048      	b.n	800c3c0 <HAL_QSPI_Command+0xb4>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d137      	bne.n	800c3b2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2202      	movs	r2, #2
 800c34c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	2200      	movs	r2, #0
 800c358:	2120      	movs	r1, #32
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 fba1 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c360:	4603      	mov	r3, r0
 800c362:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d125      	bne.n	800c3b6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c36a:	2200      	movs	r2, #0
 800c36c:	68b9      	ldr	r1, [r7, #8]
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f000 fbce 	bl	800cb10 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d115      	bne.n	800c3a8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	2201      	movs	r2, #1
 800c384:	2102      	movs	r1, #2
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 fb8b 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c38c:	4603      	mov	r3, r0
 800c38e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c390:	7dfb      	ldrb	r3, [r7, #23]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10f      	bne.n	800c3b6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2202      	movs	r2, #2
 800c39c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3a6:	e006      	b.n	800c3b6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3b0:	e001      	b.n	800c3b6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08a      	sub	sp, #40	; 0x28
 800c3cc:	af02      	add	r7, sp, #8
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c3d8:	f7fa fdc2 	bl	8006f60 <HAL_GetTick>
 800c3dc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	3320      	adds	r3, #32
 800c3e4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d101      	bne.n	800c3f6 <HAL_QSPI_Transmit+0x2e>
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	e07b      	b.n	800c4ee <HAL_QSPI_Transmit+0x126>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b01      	cmp	r3, #1
 800c408:	d16a      	bne.n	800c4e0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2200      	movs	r2, #0
 800c40e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d05b      	beq.n	800c4ce <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2212      	movs	r2, #18
 800c41a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	695a      	ldr	r2, [r3, #20]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c44a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c44c:	e01b      	b.n	800c486 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	2201      	movs	r2, #1
 800c456:	2104      	movs	r1, #4
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 fb22 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c45e:	4603      	mov	r3, r0
 800c460:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c462:	7ffb      	ldrb	r3, [r7, #31]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d113      	bne.n	800c490 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46c:	781a      	ldrb	r2, [r3, #0]
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c480:	1e5a      	subs	r2, r3, #1
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1df      	bne.n	800c44e <HAL_QSPI_Transmit+0x86>
 800c48e:	e000      	b.n	800c492 <HAL_QSPI_Transmit+0xca>
          break;
 800c490:	bf00      	nop
      }

      if (status == HAL_OK)
 800c492:	7ffb      	ldrb	r3, [r7, #31]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d115      	bne.n	800c4c4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	2102      	movs	r1, #2
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	f000 fafd 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c4ac:	7ffb      	ldrb	r3, [r7, #31]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d108      	bne.n	800c4c4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f000 f9e6 	bl	800c88c <HAL_QSPI_Abort>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4cc:	e00a      	b.n	800c4e4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d2:	f043 0208 	orr.w	r2, r3, #8
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	77fb      	strb	r3, [r7, #31]
 800c4de:	e001      	b.n	800c4e4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c4ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3720      	adds	r7, #32
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b08a      	sub	sp, #40	; 0x28
 800c4fa:	af02      	add	r7, sp, #8
 800c4fc:	60f8      	str	r0, [r7, #12]
 800c4fe:	60b9      	str	r1, [r7, #8]
 800c500:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c506:	f7fa fd2b 	bl	8006f60 <HAL_GetTick>
 800c50a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3320      	adds	r3, #32
 800c51a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c522:	b2db      	uxtb	r3, r3
 800c524:	2b01      	cmp	r3, #1
 800c526:	d101      	bne.n	800c52c <HAL_QSPI_Receive+0x36>
 800c528:	2302      	movs	r3, #2
 800c52a:	e082      	b.n	800c632 <HAL_QSPI_Receive+0x13c>
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d171      	bne.n	800c624 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d062      	beq.n	800c612 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2222      	movs	r2, #34	; 0x22
 800c550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	1c5a      	adds	r2, r3, #1
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c584:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c58e:	e01c      	b.n	800c5ca <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	2201      	movs	r2, #1
 800c598:	2106      	movs	r1, #6
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f000 fa81 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c5a4:	7ffb      	ldrb	r3, [r7, #31]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d114      	bne.n	800c5d4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ae:	693a      	ldr	r2, [r7, #16]
 800c5b0:	7812      	ldrb	r2, [r2, #0]
 800c5b2:	b2d2      	uxtb	r2, r2
 800c5b4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c4:	1e5a      	subs	r2, r3, #1
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1de      	bne.n	800c590 <HAL_QSPI_Receive+0x9a>
 800c5d2:	e000      	b.n	800c5d6 <HAL_QSPI_Receive+0xe0>
          break;
 800c5d4:	bf00      	nop
      }

      if (status == HAL_OK)
 800c5d6:	7ffb      	ldrb	r3, [r7, #31]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d115      	bne.n	800c608 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	2102      	movs	r1, #2
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	f000 fa5b 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c5f0:	7ffb      	ldrb	r3, [r7, #31]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d108      	bne.n	800c608 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2202      	movs	r2, #2
 800c5fc:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f000 f944 	bl	800c88c <HAL_QSPI_Abort>
 800c604:	4603      	mov	r3, r0
 800c606:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c610:	e00a      	b.n	800c628 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c616:	f043 0208 	orr.w	r2, r3, #8
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	77fb      	strb	r3, [r7, #31]
 800c622:	e001      	b.n	800c628 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c624:	2302      	movs	r3, #2
 800c626:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c630:	7ffb      	ldrb	r3, [r7, #31]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3720      	adds	r7, #32
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b088      	sub	sp, #32
 800c63e:	af02      	add	r7, sp, #8
 800c640:	60f8      	str	r0, [r7, #12]
 800c642:	60b9      	str	r1, [r7, #8]
 800c644:	607a      	str	r2, [r7, #4]
 800c646:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c648:	f7fa fc8a 	bl	8006f60 <HAL_GetTick>
 800c64c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c654:	b2db      	uxtb	r3, r3
 800c656:	2b01      	cmp	r3, #1
 800c658:	d101      	bne.n	800c65e <HAL_QSPI_AutoPolling+0x24>
 800c65a:	2302      	movs	r3, #2
 800c65c:	e060      	b.n	800c720 <HAL_QSPI_AutoPolling+0xe6>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2201      	movs	r2, #1
 800c662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d14f      	bne.n	800c712 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2200      	movs	r2, #0
 800c676:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2242      	movs	r2, #66	; 0x42
 800c67c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	2200      	movs	r2, #0
 800c688:	2120      	movs	r1, #32
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f000 fa09 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c690:	4603      	mov	r3, r0
 800c692:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c694:	7dfb      	ldrb	r3, [r7, #23]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d13d      	bne.n	800c716 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	6812      	ldr	r2, [r2, #0]
 800c6a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	6852      	ldr	r2, [r2, #4]
 800c6ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	6892      	ldr	r2, [r2, #8]
 800c6b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c6d0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68da      	ldr	r2, [r3, #12]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c6da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c6de:	68b9      	ldr	r1, [r7, #8]
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 fa15 	bl	800cb10 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	2108      	movs	r1, #8
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f000 f9d6 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c6fa:	7dfb      	ldrb	r3, [r7, #23]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10a      	bne.n	800c716 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2208      	movs	r2, #8
 800c706:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c710:	e001      	b.n	800c716 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c712:	2302      	movs	r3, #2
 800c714:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c720:	4618      	mov	r0, r3
 800c722:	3718      	adds	r7, #24
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af02      	add	r7, sp, #8
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c734:	f7fa fc14 	bl	8006f60 <HAL_GetTick>
 800c738:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b01      	cmp	r3, #1
 800c744:	d101      	bne.n	800c74a <HAL_QSPI_MemoryMapped+0x22>
 800c746:	2302      	movs	r3, #2
 800c748:	e04c      	b.n	800c7e4 <HAL_QSPI_MemoryMapped+0xbc>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d13b      	bne.n	800c7d6 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2200      	movs	r2, #0
 800c762:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2282      	movs	r2, #130	; 0x82
 800c768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	2200      	movs	r2, #0
 800c776:	2120      	movs	r1, #32
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f000 f992 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c77e:	4603      	mov	r3, r0
 800c780:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c782:	7dfb      	ldrb	r3, [r7, #23]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d128      	bne.n	800c7da <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f023 0108 	bic.w	r1, r3, #8
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	430a      	orrs	r2, r1
 800c79c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	2b08      	cmp	r3, #8
 800c7a4:	d110      	bne.n	800c7c8 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	6812      	ldr	r2, [r2, #0]
 800c7ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2210      	movs	r2, #16
 800c7b6:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c7c6:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800c7c8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800c7cc:	68b9      	ldr	r1, [r7, #8]
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f000 f99e 	bl	800cb10 <QSPI_Config>
 800c7d4:	e001      	b.n	800c7da <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c7d6:	2302      	movs	r3, #2
 800c7d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c7e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800c7f4:	bf00      	nop
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800c808:	bf00      	nop
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800c844:	bf00      	nop
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af02      	add	r7, sp, #8
 800c892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800c898:	f7fa fb62 	bl	8006f60 <HAL_GetTick>
 800c89c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	f003 0302 	and.w	r3, r3, #2
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d056      	beq.n	800c95c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f003 0304 	and.w	r3, r3, #4
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d017      	beq.n	800c8f4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 0204 	bic.w	r2, r2, #4
 800c8d2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fb facb 	bl	8007e74 <HAL_DMA_Abort>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800c8e2:	7bfb      	ldrb	r3, [r7, #15]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d005      	beq.n	800c8f4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ec:	f043 0204 	orr.w	r2, r3, #4
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f042 0202 	orr.w	r2, r2, #2
 800c902:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	2201      	movs	r2, #1
 800c90e:	2102      	movs	r1, #2
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 f8c6 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c916:	4603      	mov	r3, r0
 800c918:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10e      	bne.n	800c93e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2202      	movs	r2, #2
 800c926:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	2200      	movs	r2, #0
 800c932:	2120      	movs	r1, #32
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 f8b4 	bl	800caa2 <QSPI_WaitFlagStateUntilTimeout>
 800c93a:	4603      	mov	r3, r0
 800c93c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c93e:	7bfb      	ldrb	r3, [r7, #15]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10b      	bne.n	800c95c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	695a      	ldr	r2, [r3, #20]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c952:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2201      	movs	r2, #1
 800c958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
	...

0800c968 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f003 0302 	and.w	r3, r3, #2
 800c980:	2b00      	cmp	r3, #0
 800c982:	d046      	beq.n	800ca12 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2208      	movs	r2, #8
 800c990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800c9a2:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f003 0304 	and.w	r3, r3, #4
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d01b      	beq.n	800c9ea <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f022 0204 	bic.w	r2, r2, #4
 800c9c0:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c6:	4a15      	ldr	r2, [pc, #84]	; (800ca1c <HAL_QSPI_Abort_IT+0xb4>)
 800c9c8:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fb fac0 	bl	8007f54 <HAL_DMA_Abort_IT>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d01b      	beq.n	800ca12 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff ff0c 	bl	800c800 <HAL_QSPI_AbortCpltCallback>
 800c9e8:	e013      	b.n	800ca12 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ca00:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f042 0202 	orr.w	r2, r2, #2
 800ca10:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800ca12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	0800ca3d 	.word	0x0800ca3d

0800ca20 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	683a      	ldr	r2, [r7, #0]
 800ca2e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca48:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2200      	movs	r2, #0
 800ca54:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	2b08      	cmp	r3, #8
 800ca60:	d114      	bne.n	800ca8c <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2202      	movs	r2, #2
 800ca68:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ca78:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f042 0202 	orr.w	r2, r2, #2
 800ca88:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800ca8a:	e006      	b.n	800ca9a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800ca94:	68f8      	ldr	r0, [r7, #12]
 800ca96:	f7ff fea9 	bl	800c7ec <HAL_QSPI_ErrorCallback>
}
 800ca9a:	bf00      	nop
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	603b      	str	r3, [r7, #0]
 800caae:	4613      	mov	r3, r2
 800cab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cab2:	e01a      	b.n	800caea <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caba:	d016      	beq.n	800caea <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cabc:	f7fa fa50 	bl	8006f60 <HAL_GetTick>
 800cac0:	4602      	mov	r2, r0
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	69ba      	ldr	r2, [r7, #24]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d302      	bcc.n	800cad2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10b      	bne.n	800caea <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2204      	movs	r2, #4
 800cad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cade:	f043 0201 	orr.w	r2, r3, #1
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e00e      	b.n	800cb08 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	689a      	ldr	r2, [r3, #8]
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	4013      	ands	r3, r2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	bf14      	ite	ne
 800caf8:	2301      	movne	r3, #1
 800cafa:	2300      	moveq	r3, #0
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	461a      	mov	r2, r3
 800cb00:	79fb      	ldrb	r3, [r7, #7]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d1d6      	bne.n	800cab4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d009      	beq.n	800cb38 <QSPI_Config+0x28>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cb2a:	d005      	beq.n	800cb38 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3a01      	subs	r2, #1
 800cb36:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 80b9 	beq.w	800ccb4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d05f      	beq.n	800cc0a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	6892      	ldr	r2, [r2, #8]
 800cb52:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	69db      	ldr	r3, [r3, #28]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d031      	beq.n	800cbc0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb64:	431a      	orrs	r2, r3
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb6a:	431a      	orrs	r2, r3
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb70:	431a      	orrs	r2, r3
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	049b      	lsls	r3, r3, #18
 800cb78:	431a      	orrs	r2, r3
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	431a      	orrs	r2, r3
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	6a1b      	ldr	r3, [r3, #32]
 800cb84:	431a      	orrs	r2, r3
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	431a      	orrs	r2, r3
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	69db      	ldr	r3, [r3, #28]
 800cb90:	431a      	orrs	r2, r3
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	431a      	orrs	r2, r3
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	ea42 0103 	orr.w	r1, r2, r3
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	430a      	orrs	r2, r1
 800cba8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cbb0:	f000 812e 	beq.w	800ce10 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	6852      	ldr	r2, [r2, #4]
 800cbbc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800cbbe:	e127      	b.n	800ce10 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc8:	431a      	orrs	r2, r3
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbce:	431a      	orrs	r2, r3
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd4:	431a      	orrs	r2, r3
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	695b      	ldr	r3, [r3, #20]
 800cbda:	049b      	lsls	r3, r3, #18
 800cbdc:	431a      	orrs	r2, r3
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	431a      	orrs	r2, r3
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	6a1b      	ldr	r3, [r3, #32]
 800cbe8:	431a      	orrs	r2, r3
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	69db      	ldr	r3, [r3, #28]
 800cbee:	431a      	orrs	r2, r3
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	699b      	ldr	r3, [r3, #24]
 800cbf4:	431a      	orrs	r2, r3
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	ea42 0103 	orr.w	r1, r2, r3
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	430a      	orrs	r2, r1
 800cc06:	615a      	str	r2, [r3, #20]
}
 800cc08:	e102      	b.n	800ce10 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	69db      	ldr	r3, [r3, #28]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d02e      	beq.n	800cc70 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc1a:	431a      	orrs	r2, r3
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc20:	431a      	orrs	r2, r3
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc26:	431a      	orrs	r2, r3
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	049b      	lsls	r3, r3, #18
 800cc2e:	431a      	orrs	r2, r3
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	431a      	orrs	r2, r3
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	431a      	orrs	r2, r3
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	69db      	ldr	r3, [r3, #28]
 800cc40:	431a      	orrs	r2, r3
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	431a      	orrs	r2, r3
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	ea42 0103 	orr.w	r1, r2, r3
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	430a      	orrs	r2, r1
 800cc58:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cc60:	f000 80d6 	beq.w	800ce10 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	6852      	ldr	r2, [r2, #4]
 800cc6c:	619a      	str	r2, [r3, #24]
}
 800cc6e:	e0cf      	b.n	800ce10 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc78:	431a      	orrs	r2, r3
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc7e:	431a      	orrs	r2, r3
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc84:	431a      	orrs	r2, r3
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	049b      	lsls	r3, r3, #18
 800cc8c:	431a      	orrs	r2, r3
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	6a1b      	ldr	r3, [r3, #32]
 800cc92:	431a      	orrs	r2, r3
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	69db      	ldr	r3, [r3, #28]
 800cc98:	431a      	orrs	r2, r3
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	699b      	ldr	r3, [r3, #24]
 800cc9e:	431a      	orrs	r2, r3
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	ea42 0103 	orr.w	r1, r2, r3
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	430a      	orrs	r2, r1
 800ccb0:	615a      	str	r2, [r3, #20]
}
 800ccb2:	e0ad      	b.n	800ce10 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	6a1b      	ldr	r3, [r3, #32]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d058      	beq.n	800cd6e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	6892      	ldr	r2, [r2, #8]
 800ccc4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d02d      	beq.n	800cd2a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccdc:	431a      	orrs	r2, r3
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce2:	431a      	orrs	r2, r3
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	695b      	ldr	r3, [r3, #20]
 800cce8:	049b      	lsls	r3, r3, #18
 800ccea:	431a      	orrs	r2, r3
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	431a      	orrs	r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	6a1b      	ldr	r3, [r3, #32]
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	431a      	orrs	r2, r3
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	431a      	orrs	r2, r3
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	ea42 0103 	orr.w	r1, r2, r3
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	430a      	orrs	r2, r1
 800cd14:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cd1c:	d078      	beq.n	800ce10 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68ba      	ldr	r2, [r7, #8]
 800cd24:	6852      	ldr	r2, [r2, #4]
 800cd26:	619a      	str	r2, [r3, #24]
}
 800cd28:	e072      	b.n	800ce10 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd32:	431a      	orrs	r2, r3
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3e:	431a      	orrs	r2, r3
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	695b      	ldr	r3, [r3, #20]
 800cd44:	049b      	lsls	r3, r3, #18
 800cd46:	431a      	orrs	r2, r3
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	431a      	orrs	r2, r3
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	6a1b      	ldr	r3, [r3, #32]
 800cd52:	431a      	orrs	r2, r3
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	69db      	ldr	r3, [r3, #28]
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	ea42 0103 	orr.w	r1, r2, r3
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	430a      	orrs	r2, r1
 800cd6a:	615a      	str	r2, [r3, #20]
}
 800cd6c:	e050      	b.n	800ce10 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	69db      	ldr	r3, [r3, #28]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d02a      	beq.n	800cdcc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7e:	431a      	orrs	r2, r3
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd84:	431a      	orrs	r2, r3
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	695b      	ldr	r3, [r3, #20]
 800cd90:	049b      	lsls	r3, r3, #18
 800cd92:	431a      	orrs	r2, r3
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	6a1b      	ldr	r3, [r3, #32]
 800cd98:	431a      	orrs	r2, r3
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	431a      	orrs	r2, r3
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	69db      	ldr	r3, [r3, #28]
 800cda4:	431a      	orrs	r2, r3
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	ea42 0103 	orr.w	r1, r2, r3
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	430a      	orrs	r2, r1
 800cdb6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cdbe:	d027      	beq.n	800ce10 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	6852      	ldr	r2, [r2, #4]
 800cdc8:	619a      	str	r2, [r3, #24]
}
 800cdca:	e021      	b.n	800ce10 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d01d      	beq.n	800ce10 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cddc:	431a      	orrs	r2, r3
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde2:	431a      	orrs	r2, r3
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde8:	431a      	orrs	r2, r3
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	049b      	lsls	r3, r3, #18
 800cdf0:	431a      	orrs	r2, r3
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	69db      	ldr	r3, [r3, #28]
 800cdfc:	431a      	orrs	r2, r3
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	ea42 0103 	orr.w	r1, r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	615a      	str	r2, [r3, #20]
}
 800ce10:	bf00      	nop
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b086      	sub	sp, #24
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ce24:	2300      	movs	r3, #0
 800ce26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e291      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 0301 	and.w	r3, r3, #1
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f000 8087 	beq.w	800cf4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ce40:	4b96      	ldr	r3, [pc, #600]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	f003 030c 	and.w	r3, r3, #12
 800ce48:	2b04      	cmp	r3, #4
 800ce4a:	d00c      	beq.n	800ce66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ce4c:	4b93      	ldr	r3, [pc, #588]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	f003 030c 	and.w	r3, r3, #12
 800ce54:	2b08      	cmp	r3, #8
 800ce56:	d112      	bne.n	800ce7e <HAL_RCC_OscConfig+0x62>
 800ce58:	4b90      	ldr	r3, [pc, #576]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce64:	d10b      	bne.n	800ce7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce66:	4b8d      	ldr	r3, [pc, #564]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d06c      	beq.n	800cf4c <HAL_RCC_OscConfig+0x130>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d168      	bne.n	800cf4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e26b      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce86:	d106      	bne.n	800ce96 <HAL_RCC_OscConfig+0x7a>
 800ce88:	4b84      	ldr	r3, [pc, #528]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a83      	ldr	r2, [pc, #524]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ce8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	e02e      	b.n	800cef4 <HAL_RCC_OscConfig+0xd8>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10c      	bne.n	800ceb8 <HAL_RCC_OscConfig+0x9c>
 800ce9e:	4b7f      	ldr	r3, [pc, #508]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a7e      	ldr	r2, [pc, #504]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cea8:	6013      	str	r3, [r2, #0]
 800ceaa:	4b7c      	ldr	r3, [pc, #496]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4a7b      	ldr	r2, [pc, #492]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ceb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ceb4:	6013      	str	r3, [r2, #0]
 800ceb6:	e01d      	b.n	800cef4 <HAL_RCC_OscConfig+0xd8>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cec0:	d10c      	bne.n	800cedc <HAL_RCC_OscConfig+0xc0>
 800cec2:	4b76      	ldr	r3, [pc, #472]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a75      	ldr	r2, [pc, #468]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	4b73      	ldr	r3, [pc, #460]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a72      	ldr	r2, [pc, #456]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ced4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ced8:	6013      	str	r3, [r2, #0]
 800ceda:	e00b      	b.n	800cef4 <HAL_RCC_OscConfig+0xd8>
 800cedc:	4b6f      	ldr	r3, [pc, #444]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a6e      	ldr	r2, [pc, #440]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	4b6c      	ldr	r3, [pc, #432]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a6b      	ldr	r2, [pc, #428]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800ceee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d013      	beq.n	800cf24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cefc:	f7fa f830 	bl	8006f60 <HAL_GetTick>
 800cf00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf02:	e008      	b.n	800cf16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf04:	f7fa f82c 	bl	8006f60 <HAL_GetTick>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	2b64      	cmp	r3, #100	; 0x64
 800cf10:	d901      	bls.n	800cf16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	e21f      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf16:	4b61      	ldr	r3, [pc, #388]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d0f0      	beq.n	800cf04 <HAL_RCC_OscConfig+0xe8>
 800cf22:	e014      	b.n	800cf4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf24:	f7fa f81c 	bl	8006f60 <HAL_GetTick>
 800cf28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf2a:	e008      	b.n	800cf3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf2c:	f7fa f818 	bl	8006f60 <HAL_GetTick>
 800cf30:	4602      	mov	r2, r0
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2b64      	cmp	r3, #100	; 0x64
 800cf38:	d901      	bls.n	800cf3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	e20b      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf3e:	4b57      	ldr	r3, [pc, #348]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1f0      	bne.n	800cf2c <HAL_RCC_OscConfig+0x110>
 800cf4a:	e000      	b.n	800cf4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 0302 	and.w	r3, r3, #2
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d069      	beq.n	800d02e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cf5a:	4b50      	ldr	r3, [pc, #320]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	f003 030c 	and.w	r3, r3, #12
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00b      	beq.n	800cf7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cf66:	4b4d      	ldr	r3, [pc, #308]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	f003 030c 	and.w	r3, r3, #12
 800cf6e:	2b08      	cmp	r3, #8
 800cf70:	d11c      	bne.n	800cfac <HAL_RCC_OscConfig+0x190>
 800cf72:	4b4a      	ldr	r3, [pc, #296]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d116      	bne.n	800cfac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf7e:	4b47      	ldr	r3, [pc, #284]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 0302 	and.w	r3, r3, #2
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d005      	beq.n	800cf96 <HAL_RCC_OscConfig+0x17a>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d001      	beq.n	800cf96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e1df      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf96:	4b41      	ldr	r3, [pc, #260]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	00db      	lsls	r3, r3, #3
 800cfa4:	493d      	ldr	r1, [pc, #244]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cfaa:	e040      	b.n	800d02e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d023      	beq.n	800cffc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cfb4:	4b39      	ldr	r3, [pc, #228]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a38      	ldr	r2, [pc, #224]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cfba:	f043 0301 	orr.w	r3, r3, #1
 800cfbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfc0:	f7f9 ffce 	bl	8006f60 <HAL_GetTick>
 800cfc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cfc6:	e008      	b.n	800cfda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cfc8:	f7f9 ffca 	bl	8006f60 <HAL_GetTick>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d901      	bls.n	800cfda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800cfd6:	2303      	movs	r3, #3
 800cfd8:	e1bd      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cfda:	4b30      	ldr	r3, [pc, #192]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f003 0302 	and.w	r3, r3, #2
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d0f0      	beq.n	800cfc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfe6:	4b2d      	ldr	r3, [pc, #180]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	00db      	lsls	r3, r3, #3
 800cff4:	4929      	ldr	r1, [pc, #164]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cff6:	4313      	orrs	r3, r2
 800cff8:	600b      	str	r3, [r1, #0]
 800cffa:	e018      	b.n	800d02e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cffc:	4b27      	ldr	r3, [pc, #156]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a26      	ldr	r2, [pc, #152]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800d002:	f023 0301 	bic.w	r3, r3, #1
 800d006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d008:	f7f9 ffaa 	bl	8006f60 <HAL_GetTick>
 800d00c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d00e:	e008      	b.n	800d022 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d010:	f7f9 ffa6 	bl	8006f60 <HAL_GetTick>
 800d014:	4602      	mov	r2, r0
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d901      	bls.n	800d022 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d01e:	2303      	movs	r3, #3
 800d020:	e199      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d022:	4b1e      	ldr	r3, [pc, #120]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f003 0302 	and.w	r3, r3, #2
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1f0      	bne.n	800d010 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f003 0308 	and.w	r3, r3, #8
 800d036:	2b00      	cmp	r3, #0
 800d038:	d038      	beq.n	800d0ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	695b      	ldr	r3, [r3, #20]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d019      	beq.n	800d076 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d042:	4b16      	ldr	r3, [pc, #88]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800d044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d046:	4a15      	ldr	r2, [pc, #84]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800d048:	f043 0301 	orr.w	r3, r3, #1
 800d04c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d04e:	f7f9 ff87 	bl	8006f60 <HAL_GetTick>
 800d052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d054:	e008      	b.n	800d068 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d056:	f7f9 ff83 	bl	8006f60 <HAL_GetTick>
 800d05a:	4602      	mov	r2, r0
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	2b02      	cmp	r3, #2
 800d062:	d901      	bls.n	800d068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d064:	2303      	movs	r3, #3
 800d066:	e176      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d068:	4b0c      	ldr	r3, [pc, #48]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800d06a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d06c:	f003 0302 	and.w	r3, r3, #2
 800d070:	2b00      	cmp	r3, #0
 800d072:	d0f0      	beq.n	800d056 <HAL_RCC_OscConfig+0x23a>
 800d074:	e01a      	b.n	800d0ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d076:	4b09      	ldr	r3, [pc, #36]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800d078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d07a:	4a08      	ldr	r2, [pc, #32]	; (800d09c <HAL_RCC_OscConfig+0x280>)
 800d07c:	f023 0301 	bic.w	r3, r3, #1
 800d080:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d082:	f7f9 ff6d 	bl	8006f60 <HAL_GetTick>
 800d086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d088:	e00a      	b.n	800d0a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d08a:	f7f9 ff69 	bl	8006f60 <HAL_GetTick>
 800d08e:	4602      	mov	r2, r0
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	2b02      	cmp	r3, #2
 800d096:	d903      	bls.n	800d0a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d098:	2303      	movs	r3, #3
 800d09a:	e15c      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
 800d09c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d0a0:	4b91      	ldr	r3, [pc, #580]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0a4:	f003 0302 	and.w	r3, r3, #2
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1ee      	bne.n	800d08a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f003 0304 	and.w	r3, r3, #4
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 80a4 	beq.w	800d202 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d0ba:	4b8b      	ldr	r3, [pc, #556]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d10d      	bne.n	800d0e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d0c6:	4b88      	ldr	r3, [pc, #544]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ca:	4a87      	ldr	r2, [pc, #540]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d0cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0d0:	6413      	str	r3, [r2, #64]	; 0x40
 800d0d2:	4b85      	ldr	r3, [pc, #532]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0da:	60bb      	str	r3, [r7, #8]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d0e2:	4b82      	ldr	r3, [pc, #520]	; (800d2ec <HAL_RCC_OscConfig+0x4d0>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d118      	bne.n	800d120 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d0ee:	4b7f      	ldr	r3, [pc, #508]	; (800d2ec <HAL_RCC_OscConfig+0x4d0>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a7e      	ldr	r2, [pc, #504]	; (800d2ec <HAL_RCC_OscConfig+0x4d0>)
 800d0f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d0fa:	f7f9 ff31 	bl	8006f60 <HAL_GetTick>
 800d0fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d100:	e008      	b.n	800d114 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d102:	f7f9 ff2d 	bl	8006f60 <HAL_GetTick>
 800d106:	4602      	mov	r2, r0
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	2b64      	cmp	r3, #100	; 0x64
 800d10e:	d901      	bls.n	800d114 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d110:	2303      	movs	r3, #3
 800d112:	e120      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d114:	4b75      	ldr	r3, [pc, #468]	; (800d2ec <HAL_RCC_OscConfig+0x4d0>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d0f0      	beq.n	800d102 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d106      	bne.n	800d136 <HAL_RCC_OscConfig+0x31a>
 800d128:	4b6f      	ldr	r3, [pc, #444]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d12c:	4a6e      	ldr	r2, [pc, #440]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d12e:	f043 0301 	orr.w	r3, r3, #1
 800d132:	6713      	str	r3, [r2, #112]	; 0x70
 800d134:	e02d      	b.n	800d192 <HAL_RCC_OscConfig+0x376>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10c      	bne.n	800d158 <HAL_RCC_OscConfig+0x33c>
 800d13e:	4b6a      	ldr	r3, [pc, #424]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d142:	4a69      	ldr	r2, [pc, #420]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d144:	f023 0301 	bic.w	r3, r3, #1
 800d148:	6713      	str	r3, [r2, #112]	; 0x70
 800d14a:	4b67      	ldr	r3, [pc, #412]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14e:	4a66      	ldr	r2, [pc, #408]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d150:	f023 0304 	bic.w	r3, r3, #4
 800d154:	6713      	str	r3, [r2, #112]	; 0x70
 800d156:	e01c      	b.n	800d192 <HAL_RCC_OscConfig+0x376>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	2b05      	cmp	r3, #5
 800d15e:	d10c      	bne.n	800d17a <HAL_RCC_OscConfig+0x35e>
 800d160:	4b61      	ldr	r3, [pc, #388]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d164:	4a60      	ldr	r2, [pc, #384]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d166:	f043 0304 	orr.w	r3, r3, #4
 800d16a:	6713      	str	r3, [r2, #112]	; 0x70
 800d16c:	4b5e      	ldr	r3, [pc, #376]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d170:	4a5d      	ldr	r2, [pc, #372]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d172:	f043 0301 	orr.w	r3, r3, #1
 800d176:	6713      	str	r3, [r2, #112]	; 0x70
 800d178:	e00b      	b.n	800d192 <HAL_RCC_OscConfig+0x376>
 800d17a:	4b5b      	ldr	r3, [pc, #364]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17e:	4a5a      	ldr	r2, [pc, #360]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d180:	f023 0301 	bic.w	r3, r3, #1
 800d184:	6713      	str	r3, [r2, #112]	; 0x70
 800d186:	4b58      	ldr	r3, [pc, #352]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d18a:	4a57      	ldr	r2, [pc, #348]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d18c:	f023 0304 	bic.w	r3, r3, #4
 800d190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d015      	beq.n	800d1c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d19a:	f7f9 fee1 	bl	8006f60 <HAL_GetTick>
 800d19e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1a0:	e00a      	b.n	800d1b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1a2:	f7f9 fedd 	bl	8006f60 <HAL_GetTick>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d901      	bls.n	800d1b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d1b4:	2303      	movs	r3, #3
 800d1b6:	e0ce      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1b8:	4b4b      	ldr	r3, [pc, #300]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1bc:	f003 0302 	and.w	r3, r3, #2
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d0ee      	beq.n	800d1a2 <HAL_RCC_OscConfig+0x386>
 800d1c4:	e014      	b.n	800d1f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1c6:	f7f9 fecb 	bl	8006f60 <HAL_GetTick>
 800d1ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d1cc:	e00a      	b.n	800d1e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1ce:	f7f9 fec7 	bl	8006f60 <HAL_GetTick>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d901      	bls.n	800d1e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d1e0:	2303      	movs	r3, #3
 800d1e2:	e0b8      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d1e4:	4b40      	ldr	r3, [pc, #256]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e8:	f003 0302 	and.w	r3, r3, #2
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1ee      	bne.n	800d1ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d1f0:	7dfb      	ldrb	r3, [r7, #23]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d105      	bne.n	800d202 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d1f6:	4b3c      	ldr	r3, [pc, #240]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1fa:	4a3b      	ldr	r2, [pc, #236]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d1fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d200:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	699b      	ldr	r3, [r3, #24]
 800d206:	2b00      	cmp	r3, #0
 800d208:	f000 80a4 	beq.w	800d354 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d20c:	4b36      	ldr	r3, [pc, #216]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	f003 030c 	and.w	r3, r3, #12
 800d214:	2b08      	cmp	r3, #8
 800d216:	d06b      	beq.n	800d2f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	699b      	ldr	r3, [r3, #24]
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d149      	bne.n	800d2b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d220:	4b31      	ldr	r3, [pc, #196]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a30      	ldr	r2, [pc, #192]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d22a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d22c:	f7f9 fe98 	bl	8006f60 <HAL_GetTick>
 800d230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d232:	e008      	b.n	800d246 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d234:	f7f9 fe94 	bl	8006f60 <HAL_GetTick>
 800d238:	4602      	mov	r2, r0
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	1ad3      	subs	r3, r2, r3
 800d23e:	2b02      	cmp	r3, #2
 800d240:	d901      	bls.n	800d246 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800d242:	2303      	movs	r3, #3
 800d244:	e087      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d246:	4b28      	ldr	r3, [pc, #160]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1f0      	bne.n	800d234 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	69da      	ldr	r2, [r3, #28]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	431a      	orrs	r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d260:	019b      	lsls	r3, r3, #6
 800d262:	431a      	orrs	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d268:	085b      	lsrs	r3, r3, #1
 800d26a:	3b01      	subs	r3, #1
 800d26c:	041b      	lsls	r3, r3, #16
 800d26e:	431a      	orrs	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d274:	061b      	lsls	r3, r3, #24
 800d276:	4313      	orrs	r3, r2
 800d278:	4a1b      	ldr	r2, [pc, #108]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d27a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d27e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d280:	4b19      	ldr	r3, [pc, #100]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a18      	ldr	r2, [pc, #96]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d28a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d28c:	f7f9 fe68 	bl	8006f60 <HAL_GetTick>
 800d290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d292:	e008      	b.n	800d2a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d294:	f7f9 fe64 	bl	8006f60 <HAL_GetTick>
 800d298:	4602      	mov	r2, r0
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	d901      	bls.n	800d2a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	e057      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d2a6:	4b10      	ldr	r3, [pc, #64]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0f0      	beq.n	800d294 <HAL_RCC_OscConfig+0x478>
 800d2b2:	e04f      	b.n	800d354 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d2b4:	4b0c      	ldr	r3, [pc, #48]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a0b      	ldr	r2, [pc, #44]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d2ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d2be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2c0:	f7f9 fe4e 	bl	8006f60 <HAL_GetTick>
 800d2c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d2c6:	e008      	b.n	800d2da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2c8:	f7f9 fe4a 	bl	8006f60 <HAL_GetTick>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	2b02      	cmp	r3, #2
 800d2d4:	d901      	bls.n	800d2da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800d2d6:	2303      	movs	r3, #3
 800d2d8:	e03d      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d2da:	4b03      	ldr	r3, [pc, #12]	; (800d2e8 <HAL_RCC_OscConfig+0x4cc>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1f0      	bne.n	800d2c8 <HAL_RCC_OscConfig+0x4ac>
 800d2e6:	e035      	b.n	800d354 <HAL_RCC_OscConfig+0x538>
 800d2e8:	40023800 	.word	0x40023800
 800d2ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d2f0:	4b1b      	ldr	r3, [pc, #108]	; (800d360 <HAL_RCC_OscConfig+0x544>)
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	699b      	ldr	r3, [r3, #24]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d028      	beq.n	800d350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d308:	429a      	cmp	r2, r3
 800d30a:	d121      	bne.n	800d350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d316:	429a      	cmp	r2, r3
 800d318:	d11a      	bne.n	800d350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d320:	4013      	ands	r3, r2
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d326:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d328:	4293      	cmp	r3, r2
 800d32a:	d111      	bne.n	800d350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d336:	085b      	lsrs	r3, r3, #1
 800d338:	3b01      	subs	r3, #1
 800d33a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d107      	bne.n	800d350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d001      	beq.n	800d354 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e000      	b.n	800d356 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	40023800 	.word	0x40023800

0800d364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d36e:	2300      	movs	r3, #0
 800d370:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d101      	bne.n	800d37c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	e0d0      	b.n	800d51e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d37c:	4b6a      	ldr	r3, [pc, #424]	; (800d528 <HAL_RCC_ClockConfig+0x1c4>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f003 030f 	and.w	r3, r3, #15
 800d384:	683a      	ldr	r2, [r7, #0]
 800d386:	429a      	cmp	r2, r3
 800d388:	d910      	bls.n	800d3ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d38a:	4b67      	ldr	r3, [pc, #412]	; (800d528 <HAL_RCC_ClockConfig+0x1c4>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f023 020f 	bic.w	r2, r3, #15
 800d392:	4965      	ldr	r1, [pc, #404]	; (800d528 <HAL_RCC_ClockConfig+0x1c4>)
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	4313      	orrs	r3, r2
 800d398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d39a:	4b63      	ldr	r3, [pc, #396]	; (800d528 <HAL_RCC_ClockConfig+0x1c4>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f003 030f 	and.w	r3, r3, #15
 800d3a2:	683a      	ldr	r2, [r7, #0]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d001      	beq.n	800d3ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e0b8      	b.n	800d51e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 0302 	and.w	r3, r3, #2
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d020      	beq.n	800d3fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f003 0304 	and.w	r3, r3, #4
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d005      	beq.n	800d3d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d3c4:	4b59      	ldr	r3, [pc, #356]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	4a58      	ldr	r2, [pc, #352]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d3ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d3ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f003 0308 	and.w	r3, r3, #8
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d005      	beq.n	800d3e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d3dc:	4b53      	ldr	r3, [pc, #332]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	4a52      	ldr	r2, [pc, #328]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d3e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d3e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d3e8:	4b50      	ldr	r3, [pc, #320]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	494d      	ldr	r1, [pc, #308]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f003 0301 	and.w	r3, r3, #1
 800d402:	2b00      	cmp	r3, #0
 800d404:	d040      	beq.n	800d488 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d107      	bne.n	800d41e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d40e:	4b47      	ldr	r3, [pc, #284]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d416:	2b00      	cmp	r3, #0
 800d418:	d115      	bne.n	800d446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e07f      	b.n	800d51e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	2b02      	cmp	r3, #2
 800d424:	d107      	bne.n	800d436 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d426:	4b41      	ldr	r3, [pc, #260]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d109      	bne.n	800d446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d432:	2301      	movs	r3, #1
 800d434:	e073      	b.n	800d51e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d436:	4b3d      	ldr	r3, [pc, #244]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f003 0302 	and.w	r3, r3, #2
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	e06b      	b.n	800d51e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d446:	4b39      	ldr	r3, [pc, #228]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	f023 0203 	bic.w	r2, r3, #3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	4936      	ldr	r1, [pc, #216]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d454:	4313      	orrs	r3, r2
 800d456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d458:	f7f9 fd82 	bl	8006f60 <HAL_GetTick>
 800d45c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d45e:	e00a      	b.n	800d476 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d460:	f7f9 fd7e 	bl	8006f60 <HAL_GetTick>
 800d464:	4602      	mov	r2, r0
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	1ad3      	subs	r3, r2, r3
 800d46a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d46e:	4293      	cmp	r3, r2
 800d470:	d901      	bls.n	800d476 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d472:	2303      	movs	r3, #3
 800d474:	e053      	b.n	800d51e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d476:	4b2d      	ldr	r3, [pc, #180]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	f003 020c 	and.w	r2, r3, #12
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	429a      	cmp	r2, r3
 800d486:	d1eb      	bne.n	800d460 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d488:	4b27      	ldr	r3, [pc, #156]	; (800d528 <HAL_RCC_ClockConfig+0x1c4>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f003 030f 	and.w	r3, r3, #15
 800d490:	683a      	ldr	r2, [r7, #0]
 800d492:	429a      	cmp	r2, r3
 800d494:	d210      	bcs.n	800d4b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d496:	4b24      	ldr	r3, [pc, #144]	; (800d528 <HAL_RCC_ClockConfig+0x1c4>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f023 020f 	bic.w	r2, r3, #15
 800d49e:	4922      	ldr	r1, [pc, #136]	; (800d528 <HAL_RCC_ClockConfig+0x1c4>)
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4a6:	4b20      	ldr	r3, [pc, #128]	; (800d528 <HAL_RCC_ClockConfig+0x1c4>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f003 030f 	and.w	r3, r3, #15
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d001      	beq.n	800d4b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	e032      	b.n	800d51e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f003 0304 	and.w	r3, r3, #4
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d008      	beq.n	800d4d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d4c4:	4b19      	ldr	r3, [pc, #100]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	4916      	ldr	r1, [pc, #88]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f003 0308 	and.w	r3, r3, #8
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d009      	beq.n	800d4f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d4e2:	4b12      	ldr	r3, [pc, #72]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d4e4:	689b      	ldr	r3, [r3, #8]
 800d4e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	691b      	ldr	r3, [r3, #16]
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	490e      	ldr	r1, [pc, #56]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d4f6:	f000 f821 	bl	800d53c <HAL_RCC_GetSysClockFreq>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	4b0b      	ldr	r3, [pc, #44]	; (800d52c <HAL_RCC_ClockConfig+0x1c8>)
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	091b      	lsrs	r3, r3, #4
 800d502:	f003 030f 	and.w	r3, r3, #15
 800d506:	490a      	ldr	r1, [pc, #40]	; (800d530 <HAL_RCC_ClockConfig+0x1cc>)
 800d508:	5ccb      	ldrb	r3, [r1, r3]
 800d50a:	fa22 f303 	lsr.w	r3, r2, r3
 800d50e:	4a09      	ldr	r2, [pc, #36]	; (800d534 <HAL_RCC_ClockConfig+0x1d0>)
 800d510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d512:	4b09      	ldr	r3, [pc, #36]	; (800d538 <HAL_RCC_ClockConfig+0x1d4>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4618      	mov	r0, r3
 800d518:	f7f6 fc2a 	bl	8003d70 <HAL_InitTick>

  return HAL_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	40023c00 	.word	0x40023c00
 800d52c:	40023800 	.word	0x40023800
 800d530:	0801c218 	.word	0x0801c218
 800d534:	20000008 	.word	0x20000008
 800d538:	20000030 	.word	0x20000030

0800d53c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d53c:	b5b0      	push	{r4, r5, r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800d542:	2100      	movs	r1, #0
 800d544:	6079      	str	r1, [r7, #4]
 800d546:	2100      	movs	r1, #0
 800d548:	60f9      	str	r1, [r7, #12]
 800d54a:	2100      	movs	r1, #0
 800d54c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800d54e:	2100      	movs	r1, #0
 800d550:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d552:	4952      	ldr	r1, [pc, #328]	; (800d69c <HAL_RCC_GetSysClockFreq+0x160>)
 800d554:	6889      	ldr	r1, [r1, #8]
 800d556:	f001 010c 	and.w	r1, r1, #12
 800d55a:	2908      	cmp	r1, #8
 800d55c:	d00d      	beq.n	800d57a <HAL_RCC_GetSysClockFreq+0x3e>
 800d55e:	2908      	cmp	r1, #8
 800d560:	f200 8094 	bhi.w	800d68c <HAL_RCC_GetSysClockFreq+0x150>
 800d564:	2900      	cmp	r1, #0
 800d566:	d002      	beq.n	800d56e <HAL_RCC_GetSysClockFreq+0x32>
 800d568:	2904      	cmp	r1, #4
 800d56a:	d003      	beq.n	800d574 <HAL_RCC_GetSysClockFreq+0x38>
 800d56c:	e08e      	b.n	800d68c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d56e:	4b4c      	ldr	r3, [pc, #304]	; (800d6a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800d570:	60bb      	str	r3, [r7, #8]
      break;
 800d572:	e08e      	b.n	800d692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d574:	4b4b      	ldr	r3, [pc, #300]	; (800d6a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800d576:	60bb      	str	r3, [r7, #8]
      break;
 800d578:	e08b      	b.n	800d692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d57a:	4948      	ldr	r1, [pc, #288]	; (800d69c <HAL_RCC_GetSysClockFreq+0x160>)
 800d57c:	6849      	ldr	r1, [r1, #4]
 800d57e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800d582:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d584:	4945      	ldr	r1, [pc, #276]	; (800d69c <HAL_RCC_GetSysClockFreq+0x160>)
 800d586:	6849      	ldr	r1, [r1, #4]
 800d588:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800d58c:	2900      	cmp	r1, #0
 800d58e:	d024      	beq.n	800d5da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d590:	4942      	ldr	r1, [pc, #264]	; (800d69c <HAL_RCC_GetSysClockFreq+0x160>)
 800d592:	6849      	ldr	r1, [r1, #4]
 800d594:	0989      	lsrs	r1, r1, #6
 800d596:	4608      	mov	r0, r1
 800d598:	f04f 0100 	mov.w	r1, #0
 800d59c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800d5a0:	f04f 0500 	mov.w	r5, #0
 800d5a4:	ea00 0204 	and.w	r2, r0, r4
 800d5a8:	ea01 0305 	and.w	r3, r1, r5
 800d5ac:	493d      	ldr	r1, [pc, #244]	; (800d6a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800d5ae:	fb01 f003 	mul.w	r0, r1, r3
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	fb01 f102 	mul.w	r1, r1, r2
 800d5b8:	1844      	adds	r4, r0, r1
 800d5ba:	493a      	ldr	r1, [pc, #232]	; (800d6a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800d5bc:	fba2 0101 	umull	r0, r1, r2, r1
 800d5c0:	1863      	adds	r3, r4, r1
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	f04f 0300 	mov.w	r3, #0
 800d5cc:	f7f3 fb84 	bl	8000cd8 <__aeabi_uldivmod>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	60fb      	str	r3, [r7, #12]
 800d5d8:	e04a      	b.n	800d670 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d5da:	4b30      	ldr	r3, [pc, #192]	; (800d69c <HAL_RCC_GetSysClockFreq+0x160>)
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	099b      	lsrs	r3, r3, #6
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	f04f 0300 	mov.w	r3, #0
 800d5e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d5ea:	f04f 0100 	mov.w	r1, #0
 800d5ee:	ea02 0400 	and.w	r4, r2, r0
 800d5f2:	ea03 0501 	and.w	r5, r3, r1
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f04f 0200 	mov.w	r2, #0
 800d5fe:	f04f 0300 	mov.w	r3, #0
 800d602:	014b      	lsls	r3, r1, #5
 800d604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d608:	0142      	lsls	r2, r0, #5
 800d60a:	4610      	mov	r0, r2
 800d60c:	4619      	mov	r1, r3
 800d60e:	1b00      	subs	r0, r0, r4
 800d610:	eb61 0105 	sbc.w	r1, r1, r5
 800d614:	f04f 0200 	mov.w	r2, #0
 800d618:	f04f 0300 	mov.w	r3, #0
 800d61c:	018b      	lsls	r3, r1, #6
 800d61e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800d622:	0182      	lsls	r2, r0, #6
 800d624:	1a12      	subs	r2, r2, r0
 800d626:	eb63 0301 	sbc.w	r3, r3, r1
 800d62a:	f04f 0000 	mov.w	r0, #0
 800d62e:	f04f 0100 	mov.w	r1, #0
 800d632:	00d9      	lsls	r1, r3, #3
 800d634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d638:	00d0      	lsls	r0, r2, #3
 800d63a:	4602      	mov	r2, r0
 800d63c:	460b      	mov	r3, r1
 800d63e:	1912      	adds	r2, r2, r4
 800d640:	eb45 0303 	adc.w	r3, r5, r3
 800d644:	f04f 0000 	mov.w	r0, #0
 800d648:	f04f 0100 	mov.w	r1, #0
 800d64c:	0299      	lsls	r1, r3, #10
 800d64e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800d652:	0290      	lsls	r0, r2, #10
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4610      	mov	r0, r2
 800d65a:	4619      	mov	r1, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	461a      	mov	r2, r3
 800d660:	f04f 0300 	mov.w	r3, #0
 800d664:	f7f3 fb38 	bl	8000cd8 <__aeabi_uldivmod>
 800d668:	4602      	mov	r2, r0
 800d66a:	460b      	mov	r3, r1
 800d66c:	4613      	mov	r3, r2
 800d66e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d670:	4b0a      	ldr	r3, [pc, #40]	; (800d69c <HAL_RCC_GetSysClockFreq+0x160>)
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	0c1b      	lsrs	r3, r3, #16
 800d676:	f003 0303 	and.w	r3, r3, #3
 800d67a:	3301      	adds	r3, #1
 800d67c:	005b      	lsls	r3, r3, #1
 800d67e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800d680:	68fa      	ldr	r2, [r7, #12]
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	fbb2 f3f3 	udiv	r3, r2, r3
 800d688:	60bb      	str	r3, [r7, #8]
      break;
 800d68a:	e002      	b.n	800d692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d68c:	4b04      	ldr	r3, [pc, #16]	; (800d6a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800d68e:	60bb      	str	r3, [r7, #8]
      break;
 800d690:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d692:	68bb      	ldr	r3, [r7, #8]
}
 800d694:	4618      	mov	r0, r3
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bdb0      	pop	{r4, r5, r7, pc}
 800d69c:	40023800 	.word	0x40023800
 800d6a0:	00f42400 	.word	0x00f42400
 800d6a4:	017d7840 	.word	0x017d7840

0800d6a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d6ac:	4b03      	ldr	r3, [pc, #12]	; (800d6bc <HAL_RCC_GetHCLKFreq+0x14>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	20000008 	.word	0x20000008

0800d6c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d6c4:	f7ff fff0 	bl	800d6a8 <HAL_RCC_GetHCLKFreq>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	4b05      	ldr	r3, [pc, #20]	; (800d6e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	0a9b      	lsrs	r3, r3, #10
 800d6d0:	f003 0307 	and.w	r3, r3, #7
 800d6d4:	4903      	ldr	r1, [pc, #12]	; (800d6e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d6d6:	5ccb      	ldrb	r3, [r1, r3]
 800d6d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	40023800 	.word	0x40023800
 800d6e4:	0801c228 	.word	0x0801c228

0800d6e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d6ec:	f7ff ffdc 	bl	800d6a8 <HAL_RCC_GetHCLKFreq>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	4b05      	ldr	r3, [pc, #20]	; (800d708 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	0b5b      	lsrs	r3, r3, #13
 800d6f8:	f003 0307 	and.w	r3, r3, #7
 800d6fc:	4903      	ldr	r1, [pc, #12]	; (800d70c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d6fe:	5ccb      	ldrb	r3, [r1, r3]
 800d700:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d704:	4618      	mov	r0, r3
 800d706:	bd80      	pop	{r7, pc}
 800d708:	40023800 	.word	0x40023800
 800d70c:	0801c228 	.word	0x0801c228

0800d710 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	220f      	movs	r2, #15
 800d71e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d720:	4b12      	ldr	r3, [pc, #72]	; (800d76c <HAL_RCC_GetClockConfig+0x5c>)
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	f003 0203 	and.w	r2, r3, #3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d72c:	4b0f      	ldr	r3, [pc, #60]	; (800d76c <HAL_RCC_GetClockConfig+0x5c>)
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d738:	4b0c      	ldr	r3, [pc, #48]	; (800d76c <HAL_RCC_GetClockConfig+0x5c>)
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d744:	4b09      	ldr	r3, [pc, #36]	; (800d76c <HAL_RCC_GetClockConfig+0x5c>)
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	08db      	lsrs	r3, r3, #3
 800d74a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d752:	4b07      	ldr	r3, [pc, #28]	; (800d770 <HAL_RCC_GetClockConfig+0x60>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f003 020f 	and.w	r2, r3, #15
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	601a      	str	r2, [r3, #0]
}
 800d75e:	bf00      	nop
 800d760:	370c      	adds	r7, #12
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	40023800 	.word	0x40023800
 800d770:	40023c00 	.word	0x40023c00

0800d774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b088      	sub	sp, #32
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800d780:	2300      	movs	r3, #0
 800d782:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800d784:	2300      	movs	r3, #0
 800d786:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800d788:	2300      	movs	r3, #0
 800d78a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f003 0301 	and.w	r3, r3, #1
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d012      	beq.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d79c:	4b69      	ldr	r3, [pc, #420]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	4a68      	ldr	r2, [pc, #416]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d7a6:	6093      	str	r3, [r2, #8]
 800d7a8:	4b66      	ldr	r3, [pc, #408]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7aa:	689a      	ldr	r2, [r3, #8]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b0:	4964      	ldr	r1, [pc, #400]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d101      	bne.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d017      	beq.n	800d7fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d7ce:	4b5d      	ldr	r3, [pc, #372]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7dc:	4959      	ldr	r1, [pc, #356]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7ec:	d101      	bne.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d101      	bne.n	800d7fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d806:	2b00      	cmp	r3, #0
 800d808:	d017      	beq.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d80a:	4b4e      	ldr	r3, [pc, #312]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d810:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d818:	494a      	ldr	r1, [pc, #296]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d81a:	4313      	orrs	r3, r2
 800d81c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d828:	d101      	bne.n	800d82e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800d82a:	2301      	movs	r3, #1
 800d82c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d832:	2b00      	cmp	r3, #0
 800d834:	d101      	bne.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800d836:	2301      	movs	r3, #1
 800d838:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d842:	2b00      	cmp	r3, #0
 800d844:	d001      	beq.n	800d84a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800d846:	2301      	movs	r3, #1
 800d848:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f003 0320 	and.w	r3, r3, #32
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 808b 	beq.w	800d96e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d858:	4b3a      	ldr	r3, [pc, #232]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85c:	4a39      	ldr	r2, [pc, #228]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d85e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d862:	6413      	str	r3, [r2, #64]	; 0x40
 800d864:	4b37      	ldr	r3, [pc, #220]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d86c:	60bb      	str	r3, [r7, #8]
 800d86e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d870:	4b35      	ldr	r3, [pc, #212]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a34      	ldr	r2, [pc, #208]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d87a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d87c:	f7f9 fb70 	bl	8006f60 <HAL_GetTick>
 800d880:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d882:	e008      	b.n	800d896 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d884:	f7f9 fb6c 	bl	8006f60 <HAL_GetTick>
 800d888:	4602      	mov	r2, r0
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	2b64      	cmp	r3, #100	; 0x64
 800d890:	d901      	bls.n	800d896 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d892:	2303      	movs	r3, #3
 800d894:	e357      	b.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d896:	4b2c      	ldr	r3, [pc, #176]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d0f0      	beq.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d8a2:	4b28      	ldr	r3, [pc, #160]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d035      	beq.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d02e      	beq.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d8c0:	4b20      	ldr	r3, [pc, #128]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d8ca:	4b1e      	ldr	r3, [pc, #120]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ce:	4a1d      	ldr	r2, [pc, #116]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d8d6:	4b1b      	ldr	r3, [pc, #108]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8da:	4a1a      	ldr	r2, [pc, #104]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d8e2:	4a18      	ldr	r2, [pc, #96]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d8e8:	4b16      	ldr	r3, [pc, #88]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d114      	bne.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8f4:	f7f9 fb34 	bl	8006f60 <HAL_GetTick>
 800d8f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d8fa:	e00a      	b.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d8fc:	f7f9 fb30 	bl	8006f60 <HAL_GetTick>
 800d900:	4602      	mov	r2, r0
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	1ad3      	subs	r3, r2, r3
 800d906:	f241 3288 	movw	r2, #5000	; 0x1388
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d901      	bls.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d90e:	2303      	movs	r3, #3
 800d910:	e319      	b.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d912:	4b0c      	ldr	r3, [pc, #48]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d916:	f003 0302 	and.w	r3, r3, #2
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d0ee      	beq.n	800d8fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d92a:	d111      	bne.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d92c:	4b05      	ldr	r3, [pc, #20]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d938:	4b04      	ldr	r3, [pc, #16]	; (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d93a:	400b      	ands	r3, r1
 800d93c:	4901      	ldr	r1, [pc, #4]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d93e:	4313      	orrs	r3, r2
 800d940:	608b      	str	r3, [r1, #8]
 800d942:	e00b      	b.n	800d95c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d944:	40023800 	.word	0x40023800
 800d948:	40007000 	.word	0x40007000
 800d94c:	0ffffcff 	.word	0x0ffffcff
 800d950:	4bb1      	ldr	r3, [pc, #708]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	4ab0      	ldr	r2, [pc, #704]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d956:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d95a:	6093      	str	r3, [r2, #8]
 800d95c:	4bae      	ldr	r3, [pc, #696]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d95e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d968:	49ab      	ldr	r1, [pc, #684]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d96a:	4313      	orrs	r3, r2
 800d96c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 0310 	and.w	r3, r3, #16
 800d976:	2b00      	cmp	r3, #0
 800d978:	d010      	beq.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d97a:	4ba7      	ldr	r3, [pc, #668]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d97c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d980:	4aa5      	ldr	r2, [pc, #660]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d986:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d98a:	4ba3      	ldr	r3, [pc, #652]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d98c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d994:	49a0      	ldr	r1, [pc, #640]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d996:	4313      	orrs	r3, r2
 800d998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00a      	beq.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d9a8:	4b9b      	ldr	r3, [pc, #620]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d9aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b6:	4998      	ldr	r1, [pc, #608]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00a      	beq.n	800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d9ca:	4b93      	ldr	r3, [pc, #588]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9d8:	498f      	ldr	r1, [pc, #572]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00a      	beq.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d9ec:	4b8a      	ldr	r3, [pc, #552]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9fa:	4987      	ldr	r1, [pc, #540]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00a      	beq.n	800da24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800da0e:	4b82      	ldr	r3, [pc, #520]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800da10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da1c:	497e      	ldr	r1, [pc, #504]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800da1e:	4313      	orrs	r3, r2
 800da20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d00a      	beq.n	800da46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800da30:	4b79      	ldr	r3, [pc, #484]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800da32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da36:	f023 0203 	bic.w	r2, r3, #3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da3e:	4976      	ldr	r1, [pc, #472]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800da40:	4313      	orrs	r3, r2
 800da42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d00a      	beq.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800da52:	4b71      	ldr	r3, [pc, #452]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800da54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da58:	f023 020c 	bic.w	r2, r3, #12
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da60:	496d      	ldr	r1, [pc, #436]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800da62:	4313      	orrs	r3, r2
 800da64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00a      	beq.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800da74:	4b68      	ldr	r3, [pc, #416]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800da76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da82:	4965      	ldr	r1, [pc, #404]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800da84:	4313      	orrs	r3, r2
 800da86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00a      	beq.n	800daac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800da96:	4b60      	ldr	r3, [pc, #384]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800da98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daa4:	495c      	ldr	r1, [pc, #368]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800daa6:	4313      	orrs	r3, r2
 800daa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d00a      	beq.n	800dace <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dab8:	4b57      	ldr	r3, [pc, #348]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800daba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dabe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dac6:	4954      	ldr	r1, [pc, #336]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800dac8:	4313      	orrs	r3, r2
 800daca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00a      	beq.n	800daf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800dada:	4b4f      	ldr	r3, [pc, #316]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800dadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dae0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dae8:	494b      	ldr	r1, [pc, #300]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800daea:	4313      	orrs	r3, r2
 800daec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00a      	beq.n	800db12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800dafc:	4b46      	ldr	r3, [pc, #280]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800dafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db0a:	4943      	ldr	r1, [pc, #268]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800db0c:	4313      	orrs	r3, r2
 800db0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00a      	beq.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800db1e:	4b3e      	ldr	r3, [pc, #248]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800db20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db2c:	493a      	ldr	r1, [pc, #232]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800db2e:	4313      	orrs	r3, r2
 800db30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00a      	beq.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800db40:	4b35      	ldr	r3, [pc, #212]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800db42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db4e:	4932      	ldr	r1, [pc, #200]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800db50:	4313      	orrs	r3, r2
 800db52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d011      	beq.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800db62:	4b2d      	ldr	r3, [pc, #180]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800db64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db70:	4929      	ldr	r1, [pc, #164]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800db72:	4313      	orrs	r3, r2
 800db74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db80:	d101      	bne.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800db82:	2301      	movs	r3, #1
 800db84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f003 0308 	and.w	r3, r3, #8
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d001      	beq.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800db92:	2301      	movs	r3, #1
 800db94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00a      	beq.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dba2:	4b1d      	ldr	r3, [pc, #116]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800dba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dba8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbb0:	4919      	ldr	r1, [pc, #100]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00b      	beq.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dbc4:	4b14      	ldr	r3, [pc, #80]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800dbc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbd4:	4910      	ldr	r1, [pc, #64]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d006      	beq.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f000 80d9 	beq.w	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800dbf0:	4b09      	ldr	r3, [pc, #36]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a08      	ldr	r2, [pc, #32]	; (800dc18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800dbf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dbfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbfc:	f7f9 f9b0 	bl	8006f60 <HAL_GetTick>
 800dc00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dc02:	e00b      	b.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dc04:	f7f9 f9ac 	bl	8006f60 <HAL_GetTick>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	2b64      	cmp	r3, #100	; 0x64
 800dc10:	d904      	bls.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dc12:	2303      	movs	r3, #3
 800dc14:	e197      	b.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800dc16:	bf00      	nop
 800dc18:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dc1c:	4b6c      	ldr	r3, [pc, #432]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1ed      	bne.n	800dc04 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f003 0301 	and.w	r3, r3, #1
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d021      	beq.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d11d      	bne.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dc3c:	4b64      	ldr	r3, [pc, #400]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dc3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc42:	0c1b      	lsrs	r3, r3, #16
 800dc44:	f003 0303 	and.w	r3, r3, #3
 800dc48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dc4a:	4b61      	ldr	r3, [pc, #388]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dc4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc50:	0e1b      	lsrs	r3, r3, #24
 800dc52:	f003 030f 	and.w	r3, r3, #15
 800dc56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	019a      	lsls	r2, r3, #6
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	041b      	lsls	r3, r3, #16
 800dc62:	431a      	orrs	r2, r3
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	061b      	lsls	r3, r3, #24
 800dc68:	431a      	orrs	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	071b      	lsls	r3, r3, #28
 800dc70:	4957      	ldr	r1, [pc, #348]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dc72:	4313      	orrs	r3, r2
 800dc74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d004      	beq.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc8c:	d00a      	beq.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d02e      	beq.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dca2:	d129      	bne.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dca4:	4b4a      	ldr	r3, [pc, #296]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcaa:	0c1b      	lsrs	r3, r3, #16
 800dcac:	f003 0303 	and.w	r3, r3, #3
 800dcb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dcb2:	4b47      	ldr	r3, [pc, #284]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dcb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcb8:	0f1b      	lsrs	r3, r3, #28
 800dcba:	f003 0307 	and.w	r3, r3, #7
 800dcbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	019a      	lsls	r2, r3, #6
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	041b      	lsls	r3, r3, #16
 800dcca:	431a      	orrs	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	061b      	lsls	r3, r3, #24
 800dcd2:	431a      	orrs	r2, r3
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	071b      	lsls	r3, r3, #28
 800dcd8:	493d      	ldr	r1, [pc, #244]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800dce0:	4b3b      	ldr	r3, [pc, #236]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dce6:	f023 021f 	bic.w	r2, r3, #31
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	4937      	ldr	r1, [pc, #220]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d01d      	beq.n	800dd40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dd04:	4b32      	ldr	r3, [pc, #200]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd0a:	0e1b      	lsrs	r3, r3, #24
 800dd0c:	f003 030f 	and.w	r3, r3, #15
 800dd10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dd12:	4b2f      	ldr	r3, [pc, #188]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd18:	0f1b      	lsrs	r3, r3, #28
 800dd1a:	f003 0307 	and.w	r3, r3, #7
 800dd1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	019a      	lsls	r2, r3, #6
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	041b      	lsls	r3, r3, #16
 800dd2c:	431a      	orrs	r2, r3
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	061b      	lsls	r3, r3, #24
 800dd32:	431a      	orrs	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	071b      	lsls	r3, r3, #28
 800dd38:	4925      	ldr	r1, [pc, #148]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d011      	beq.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	019a      	lsls	r2, r3, #6
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	041b      	lsls	r3, r3, #16
 800dd58:	431a      	orrs	r2, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	061b      	lsls	r3, r3, #24
 800dd60:	431a      	orrs	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	071b      	lsls	r3, r3, #28
 800dd68:	4919      	ldr	r1, [pc, #100]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800dd70:	4b17      	ldr	r3, [pc, #92]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a16      	ldr	r2, [pc, #88]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd7c:	f7f9 f8f0 	bl	8006f60 <HAL_GetTick>
 800dd80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dd82:	e008      	b.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dd84:	f7f9 f8ec 	bl	8006f60 <HAL_GetTick>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	2b64      	cmp	r3, #100	; 0x64
 800dd90:	d901      	bls.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dd92:	2303      	movs	r3, #3
 800dd94:	e0d7      	b.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dd96:	4b0e      	ldr	r3, [pc, #56]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d0f0      	beq.n	800dd84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800dda2:	69bb      	ldr	r3, [r7, #24]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	f040 80cd 	bne.w	800df44 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ddaa:	4b09      	ldr	r3, [pc, #36]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a08      	ldr	r2, [pc, #32]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ddb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ddb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddb6:	f7f9 f8d3 	bl	8006f60 <HAL_GetTick>
 800ddba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ddbc:	e00a      	b.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ddbe:	f7f9 f8cf 	bl	8006f60 <HAL_GetTick>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	2b64      	cmp	r3, #100	; 0x64
 800ddca:	d903      	bls.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ddcc:	2303      	movs	r3, #3
 800ddce:	e0ba      	b.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ddd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ddd4:	4b5e      	ldr	r3, [pc, #376]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dde0:	d0ed      	beq.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d009      	beq.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d02e      	beq.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de06:	2b00      	cmp	r3, #0
 800de08:	d12a      	bne.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800de0a:	4b51      	ldr	r3, [pc, #324]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de10:	0c1b      	lsrs	r3, r3, #16
 800de12:	f003 0303 	and.w	r3, r3, #3
 800de16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800de18:	4b4d      	ldr	r3, [pc, #308]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de1e:	0f1b      	lsrs	r3, r3, #28
 800de20:	f003 0307 	and.w	r3, r3, #7
 800de24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	695b      	ldr	r3, [r3, #20]
 800de2a:	019a      	lsls	r2, r3, #6
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	041b      	lsls	r3, r3, #16
 800de30:	431a      	orrs	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	061b      	lsls	r3, r3, #24
 800de38:	431a      	orrs	r2, r3
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	071b      	lsls	r3, r3, #28
 800de3e:	4944      	ldr	r1, [pc, #272]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de40:	4313      	orrs	r3, r2
 800de42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800de46:	4b42      	ldr	r3, [pc, #264]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de54:	3b01      	subs	r3, #1
 800de56:	021b      	lsls	r3, r3, #8
 800de58:	493d      	ldr	r1, [pc, #244]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de5a:	4313      	orrs	r3, r2
 800de5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d022      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de74:	d11d      	bne.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800de76:	4b36      	ldr	r3, [pc, #216]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de7c:	0e1b      	lsrs	r3, r3, #24
 800de7e:	f003 030f 	and.w	r3, r3, #15
 800de82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800de84:	4b32      	ldr	r3, [pc, #200]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800de86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de8a:	0f1b      	lsrs	r3, r3, #28
 800de8c:	f003 0307 	and.w	r3, r3, #7
 800de90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	695b      	ldr	r3, [r3, #20]
 800de96:	019a      	lsls	r2, r3, #6
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	041b      	lsls	r3, r3, #16
 800de9e:	431a      	orrs	r2, r3
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	061b      	lsls	r3, r3, #24
 800dea4:	431a      	orrs	r2, r3
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	071b      	lsls	r3, r3, #28
 800deaa:	4929      	ldr	r1, [pc, #164]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800deac:	4313      	orrs	r3, r2
 800deae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f003 0308 	and.w	r3, r3, #8
 800deba:	2b00      	cmp	r3, #0
 800debc:	d028      	beq.n	800df10 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800debe:	4b24      	ldr	r3, [pc, #144]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800dec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dec4:	0e1b      	lsrs	r3, r3, #24
 800dec6:	f003 030f 	and.w	r3, r3, #15
 800deca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800decc:	4b20      	ldr	r3, [pc, #128]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800dece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ded2:	0c1b      	lsrs	r3, r3, #16
 800ded4:	f003 0303 	and.w	r3, r3, #3
 800ded8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	019a      	lsls	r2, r3, #6
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	041b      	lsls	r3, r3, #16
 800dee4:	431a      	orrs	r2, r3
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	061b      	lsls	r3, r3, #24
 800deea:	431a      	orrs	r2, r3
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	69db      	ldr	r3, [r3, #28]
 800def0:	071b      	lsls	r3, r3, #28
 800def2:	4917      	ldr	r1, [pc, #92]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800def4:	4313      	orrs	r3, r2
 800def6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800defa:	4b15      	ldr	r3, [pc, #84]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800defc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df08:	4911      	ldr	r1, [pc, #68]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df0a:	4313      	orrs	r3, r2
 800df0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800df10:	4b0f      	ldr	r3, [pc, #60]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a0e      	ldr	r2, [pc, #56]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df1c:	f7f9 f820 	bl	8006f60 <HAL_GetTick>
 800df20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800df22:	e008      	b.n	800df36 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800df24:	f7f9 f81c 	bl	8006f60 <HAL_GetTick>
 800df28:	4602      	mov	r2, r0
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	1ad3      	subs	r3, r2, r3
 800df2e:	2b64      	cmp	r3, #100	; 0x64
 800df30:	d901      	bls.n	800df36 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800df32:	2303      	movs	r3, #3
 800df34:	e007      	b.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800df36:	4b06      	ldr	r3, [pc, #24]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df42:	d1ef      	bne.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3720      	adds	r7, #32
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	40023800 	.word	0x40023800

0800df54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800df54:	b480      	push	{r7}
 800df56:	b087      	sub	sp, #28
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800df5c:	2300      	movs	r3, #0
 800df5e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800df60:	2300      	movs	r3, #0
 800df62:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800df64:	2300      	movs	r3, #0
 800df66:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800df68:	2300      	movs	r3, #0
 800df6a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800df72:	f040 808c 	bne.w	800e08e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800df76:	4b95      	ldr	r3, [pc, #596]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800df78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df7c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800df84:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df8c:	d07c      	beq.n	800e088 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df94:	d87d      	bhi.n	800e092 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d004      	beq.n	800dfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfa2:	d039      	beq.n	800e018 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800dfa4:	e075      	b.n	800e092 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800dfa6:	4b89      	ldr	r3, [pc, #548]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d108      	bne.n	800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800dfb2:	4b86      	ldr	r3, [pc, #536]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dfba:	4a85      	ldr	r2, [pc, #532]	; (800e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800dfbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfc0:	613b      	str	r3, [r7, #16]
 800dfc2:	e007      	b.n	800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800dfc4:	4b81      	ldr	r3, [pc, #516]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dfcc:	4a81      	ldr	r2, [pc, #516]	; (800e1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800dfce:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfd2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800dfd4:	4b7d      	ldr	r3, [pc, #500]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dfd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfda:	0e1b      	lsrs	r3, r3, #24
 800dfdc:	f003 030f 	and.w	r3, r3, #15
 800dfe0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800dfe2:	4b7a      	ldr	r3, [pc, #488]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dfe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfe8:	099b      	lsrs	r3, r3, #6
 800dfea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfee:	693a      	ldr	r2, [r7, #16]
 800dff0:	fb02 f203 	mul.w	r2, r2, r3
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dffa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800dffc:	4b73      	ldr	r3, [pc, #460]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e002:	0a1b      	lsrs	r3, r3, #8
 800e004:	f003 031f 	and.w	r3, r3, #31
 800e008:	3301      	adds	r3, #1
 800e00a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e00c:	697a      	ldr	r2, [r7, #20]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	fbb2 f3f3 	udiv	r3, r2, r3
 800e014:	617b      	str	r3, [r7, #20]
        break;
 800e016:	e03d      	b.n	800e094 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e018:	4b6c      	ldr	r3, [pc, #432]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e020:	2b00      	cmp	r3, #0
 800e022:	d108      	bne.n	800e036 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e024:	4b69      	ldr	r3, [pc, #420]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e02c:	4a68      	ldr	r2, [pc, #416]	; (800e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e02e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e032:	613b      	str	r3, [r7, #16]
 800e034:	e007      	b.n	800e046 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e036:	4b65      	ldr	r3, [pc, #404]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e03e:	4a65      	ldr	r2, [pc, #404]	; (800e1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e040:	fbb2 f3f3 	udiv	r3, r2, r3
 800e044:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800e046:	4b61      	ldr	r3, [pc, #388]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e04c:	0e1b      	lsrs	r3, r3, #24
 800e04e:	f003 030f 	and.w	r3, r3, #15
 800e052:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800e054:	4b5d      	ldr	r3, [pc, #372]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e05a:	099b      	lsrs	r3, r3, #6
 800e05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	fb02 f203 	mul.w	r2, r2, r3
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	fbb2 f3f3 	udiv	r3, r2, r3
 800e06c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800e06e:	4b57      	ldr	r3, [pc, #348]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e074:	f003 031f 	and.w	r3, r3, #31
 800e078:	3301      	adds	r3, #1
 800e07a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e07c:	697a      	ldr	r2, [r7, #20]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	fbb2 f3f3 	udiv	r3, r2, r3
 800e084:	617b      	str	r3, [r7, #20]
        break;
 800e086:	e005      	b.n	800e094 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e088:	4b53      	ldr	r3, [pc, #332]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800e08a:	617b      	str	r3, [r7, #20]
        break;
 800e08c:	e002      	b.n	800e094 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800e08e:	bf00      	nop
 800e090:	e000      	b.n	800e094 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800e092:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e09a:	f040 808c 	bne.w	800e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800e09e:	4b4b      	ldr	r3, [pc, #300]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0a4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800e0ac:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e0b4:	d07c      	beq.n	800e1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e0bc:	d87d      	bhi.n	800e1ba <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d004      	beq.n	800e0ce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0ca:	d039      	beq.n	800e140 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800e0cc:	e075      	b.n	800e1ba <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e0ce:	4b3f      	ldr	r3, [pc, #252]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d108      	bne.n	800e0ec <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e0da:	4b3c      	ldr	r3, [pc, #240]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0e2:	4a3b      	ldr	r2, [pc, #236]	; (800e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0e8:	613b      	str	r3, [r7, #16]
 800e0ea:	e007      	b.n	800e0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e0ec:	4b37      	ldr	r3, [pc, #220]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0f4:	4a37      	ldr	r2, [pc, #220]	; (800e1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0fa:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800e0fc:	4b33      	ldr	r3, [pc, #204]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e102:	0e1b      	lsrs	r3, r3, #24
 800e104:	f003 030f 	and.w	r3, r3, #15
 800e108:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800e10a:	4b30      	ldr	r3, [pc, #192]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e110:	099b      	lsrs	r3, r3, #6
 800e112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e116:	693a      	ldr	r2, [r7, #16]
 800e118:	fb02 f203 	mul.w	r2, r2, r3
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e122:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800e124:	4b29      	ldr	r3, [pc, #164]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e12a:	0a1b      	lsrs	r3, r3, #8
 800e12c:	f003 031f 	and.w	r3, r3, #31
 800e130:	3301      	adds	r3, #1
 800e132:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e134:	697a      	ldr	r2, [r7, #20]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	fbb2 f3f3 	udiv	r3, r2, r3
 800e13c:	617b      	str	r3, [r7, #20]
        break;
 800e13e:	e03d      	b.n	800e1bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e140:	4b22      	ldr	r3, [pc, #136]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d108      	bne.n	800e15e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e14c:	4b1f      	ldr	r3, [pc, #124]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e154:	4a1e      	ldr	r2, [pc, #120]	; (800e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e156:	fbb2 f3f3 	udiv	r3, r2, r3
 800e15a:	613b      	str	r3, [r7, #16]
 800e15c:	e007      	b.n	800e16e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e15e:	4b1b      	ldr	r3, [pc, #108]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e166:	4a1b      	ldr	r2, [pc, #108]	; (800e1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e168:	fbb2 f3f3 	udiv	r3, r2, r3
 800e16c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800e16e:	4b17      	ldr	r3, [pc, #92]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e174:	0e1b      	lsrs	r3, r3, #24
 800e176:	f003 030f 	and.w	r3, r3, #15
 800e17a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800e17c:	4b13      	ldr	r3, [pc, #76]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e17e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e182:	099b      	lsrs	r3, r3, #6
 800e184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e188:	693a      	ldr	r2, [r7, #16]
 800e18a:	fb02 f203 	mul.w	r2, r2, r3
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	fbb2 f3f3 	udiv	r3, r2, r3
 800e194:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800e196:	4b0d      	ldr	r3, [pc, #52]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e19c:	f003 031f 	and.w	r3, r3, #31
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e1a4:	697a      	ldr	r2, [r7, #20]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ac:	617b      	str	r3, [r7, #20]
        break;
 800e1ae:	e005      	b.n	800e1bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e1b0:	4b09      	ldr	r3, [pc, #36]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800e1b2:	617b      	str	r3, [r7, #20]
        break;
 800e1b4:	e002      	b.n	800e1bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800e1b6:	bf00      	nop
 800e1b8:	e000      	b.n	800e1bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800e1ba:	bf00      	nop

  return frequency;
 800e1bc:	697b      	ldr	r3, [r7, #20]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	371c      	adds	r7, #28
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	40023800 	.word	0x40023800
 800e1d0:	00f42400 	.word	0x00f42400
 800e1d4:	017d7840 	.word	0x017d7840
 800e1d8:	00bb8000 	.word	0x00bb8000

0800e1dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d101      	bne.n	800e1ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e081      	b.n	800e2f2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	7f5b      	ldrb	r3, [r3, #29]
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d105      	bne.n	800e204 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7f5 f96a 	bl	80034d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2202      	movs	r2, #2
 800e208:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	22ca      	movs	r2, #202	; 0xca
 800e210:	625a      	str	r2, [r3, #36]	; 0x24
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2253      	movs	r2, #83	; 0x53
 800e218:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fb16 	bl	800e84c <RTC_EnterInitMode>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d008      	beq.n	800e238 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	22ff      	movs	r2, #255	; 0xff
 800e22c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2204      	movs	r2, #4
 800e232:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800e234:	2301      	movs	r3, #1
 800e236:	e05c      	b.n	800e2f2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	6899      	ldr	r1, [r3, #8]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	4b2e      	ldr	r3, [pc, #184]	; (800e2fc <HAL_RTC_Init+0x120>)
 800e244:	400b      	ands	r3, r1
 800e246:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	6899      	ldr	r1, [r3, #8]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	685a      	ldr	r2, [r3, #4]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	691b      	ldr	r3, [r3, #16]
 800e256:	431a      	orrs	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	695b      	ldr	r3, [r3, #20]
 800e25c:	431a      	orrs	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	430a      	orrs	r2, r1
 800e264:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	68d2      	ldr	r2, [r2, #12]
 800e26e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6919      	ldr	r1, [r3, #16]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	041a      	lsls	r2, r3, #16
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	430a      	orrs	r2, r1
 800e282:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	68da      	ldr	r2, [r3, #12]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e292:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	689b      	ldr	r3, [r3, #8]
 800e29a:	f003 0320 	and.w	r3, r3, #32
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d10e      	bne.n	800e2c0 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 faaa 	bl	800e7fc <HAL_RTC_WaitForSynchro>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d008      	beq.n	800e2c0 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	22ff      	movs	r2, #255	; 0xff
 800e2b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2204      	movs	r2, #4
 800e2ba:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	e018      	b.n	800e2f2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f022 0208 	bic.w	r2, r2, #8
 800e2ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	699a      	ldr	r2, [r3, #24]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	430a      	orrs	r2, r1
 800e2e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	22ff      	movs	r2, #255	; 0xff
 800e2e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800e2f0:	2300      	movs	r3, #0
  }
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	ff8fffbf 	.word	0xff8fffbf

0800e300 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e300:	b590      	push	{r4, r7, lr}
 800e302:	b087      	sub	sp, #28
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800e30c:	2300      	movs	r3, #0
 800e30e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	7f1b      	ldrb	r3, [r3, #28]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d101      	bne.n	800e31c <HAL_RTC_SetTime+0x1c>
 800e318:	2302      	movs	r3, #2
 800e31a:	e0a8      	b.n	800e46e <HAL_RTC_SetTime+0x16e>
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2201      	movs	r2, #1
 800e320:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2202      	movs	r2, #2
 800e326:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d126      	bne.n	800e37c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d102      	bne.n	800e342 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	2200      	movs	r2, #0
 800e340:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	4618      	mov	r0, r3
 800e348:	f000 faac 	bl	800e8a4 <RTC_ByteToBcd2>
 800e34c:	4603      	mov	r3, r0
 800e34e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	785b      	ldrb	r3, [r3, #1]
 800e354:	4618      	mov	r0, r3
 800e356:	f000 faa5 	bl	800e8a4 <RTC_ByteToBcd2>
 800e35a:	4603      	mov	r3, r0
 800e35c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800e35e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	789b      	ldrb	r3, [r3, #2]
 800e364:	4618      	mov	r0, r3
 800e366:	f000 fa9d 	bl	800e8a4 <RTC_ByteToBcd2>
 800e36a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800e36c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	7b1b      	ldrb	r3, [r3, #12]
 800e374:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800e376:	4313      	orrs	r3, r2
 800e378:	617b      	str	r3, [r7, #20]
 800e37a:	e018      	b.n	800e3ae <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e386:	2b00      	cmp	r3, #0
 800e388:	d102      	bne.n	800e390 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	2200      	movs	r2, #0
 800e38e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	785b      	ldrb	r3, [r3, #1]
 800e39a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800e39c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800e3a2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	7b1b      	ldrb	r3, [r3, #12]
 800e3a8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	22ca      	movs	r2, #202	; 0xca
 800e3b4:	625a      	str	r2, [r3, #36]	; 0x24
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2253      	movs	r2, #83	; 0x53
 800e3bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 fa44 	bl	800e84c <RTC_EnterInitMode>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00b      	beq.n	800e3e2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	22ff      	movs	r2, #255	; 0xff
 800e3d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2204      	movs	r2, #4
 800e3d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	e045      	b.n	800e46e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	6979      	ldr	r1, [r7, #20]
 800e3e8:	4b23      	ldr	r3, [pc, #140]	; (800e478 <HAL_RTC_SetTime+0x178>)
 800e3ea:	400b      	ands	r3, r1
 800e3ec:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	689a      	ldr	r2, [r3, #8]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e3fc:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	6899      	ldr	r1, [r3, #8]
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	691a      	ldr	r2, [r3, #16]
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	695b      	ldr	r3, [r3, #20]
 800e40c:	431a      	orrs	r2, r3
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	430a      	orrs	r2, r1
 800e414:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	68da      	ldr	r2, [r3, #12]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e424:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	f003 0320 	and.w	r3, r3, #32
 800e430:	2b00      	cmp	r3, #0
 800e432:	d111      	bne.n	800e458 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f000 f9e1 	bl	800e7fc <HAL_RTC_WaitForSynchro>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00b      	beq.n	800e458 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	22ff      	movs	r2, #255	; 0xff
 800e446:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2204      	movs	r2, #4
 800e44c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2200      	movs	r2, #0
 800e452:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800e454:	2301      	movs	r3, #1
 800e456:	e00a      	b.n	800e46e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	22ff      	movs	r2, #255	; 0xff
 800e45e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2201      	movs	r2, #1
 800e464:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2200      	movs	r2, #0
 800e46a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800e46c:	2300      	movs	r3, #0
  }
}
 800e46e:	4618      	mov	r0, r3
 800e470:	371c      	adds	r7, #28
 800e472:	46bd      	mov	sp, r7
 800e474:	bd90      	pop	{r4, r7, pc}
 800e476:	bf00      	nop
 800e478:	007f7f7f 	.word	0x007f7f7f

0800e47c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e47c:	b590      	push	{r4, r7, lr}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800e488:	2300      	movs	r3, #0
 800e48a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	7f1b      	ldrb	r3, [r3, #28]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d101      	bne.n	800e498 <HAL_RTC_SetDate+0x1c>
 800e494:	2302      	movs	r3, #2
 800e496:	e092      	b.n	800e5be <HAL_RTC_SetDate+0x142>
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2201      	movs	r2, #1
 800e49c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2202      	movs	r2, #2
 800e4a2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d10e      	bne.n	800e4c8 <HAL_RTC_SetDate+0x4c>
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	785b      	ldrb	r3, [r3, #1]
 800e4ae:	f003 0310 	and.w	r3, r3, #16
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d008      	beq.n	800e4c8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	785b      	ldrb	r3, [r3, #1]
 800e4ba:	f023 0310 	bic.w	r3, r3, #16
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	330a      	adds	r3, #10
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d11c      	bne.n	800e508 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	78db      	ldrb	r3, [r3, #3]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f000 f9e6 	bl	800e8a4 <RTC_ByteToBcd2>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	785b      	ldrb	r3, [r3, #1]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f000 f9df 	bl	800e8a4 <RTC_ByteToBcd2>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800e4ea:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	789b      	ldrb	r3, [r3, #2]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f000 f9d7 	bl	800e8a4 <RTC_ByteToBcd2>
 800e4f6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800e4f8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800e502:	4313      	orrs	r3, r2
 800e504:	617b      	str	r3, [r7, #20]
 800e506:	e00e      	b.n	800e526 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	78db      	ldrb	r3, [r3, #3]
 800e50c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	785b      	ldrb	r3, [r3, #1]
 800e512:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800e514:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800e516:	68ba      	ldr	r2, [r7, #8]
 800e518:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800e51a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800e522:	4313      	orrs	r3, r2
 800e524:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	22ca      	movs	r2, #202	; 0xca
 800e52c:	625a      	str	r2, [r3, #36]	; 0x24
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2253      	movs	r2, #83	; 0x53
 800e534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f000 f988 	bl	800e84c <RTC_EnterInitMode>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00b      	beq.n	800e55a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	22ff      	movs	r2, #255	; 0xff
 800e548:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2204      	movs	r2, #4
 800e54e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2200      	movs	r2, #0
 800e554:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	e031      	b.n	800e5be <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	6979      	ldr	r1, [r7, #20]
 800e560:	4b19      	ldr	r3, [pc, #100]	; (800e5c8 <HAL_RTC_SetDate+0x14c>)
 800e562:	400b      	ands	r3, r1
 800e564:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	68da      	ldr	r2, [r3, #12]
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e574:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	689b      	ldr	r3, [r3, #8]
 800e57c:	f003 0320 	and.w	r3, r3, #32
 800e580:	2b00      	cmp	r3, #0
 800e582:	d111      	bne.n	800e5a8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f000 f939 	bl	800e7fc <HAL_RTC_WaitForSynchro>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d00b      	beq.n	800e5a8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	22ff      	movs	r2, #255	; 0xff
 800e596:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2204      	movs	r2, #4
 800e59c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	e00a      	b.n	800e5be <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	22ff      	movs	r2, #255	; 0xff
 800e5ae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800e5bc:	2300      	movs	r3, #0
  }
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	371c      	adds	r7, #28
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd90      	pop	{r4, r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	00ffff3f 	.word	0x00ffff3f

0800e5cc <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800e5cc:	b590      	push	{r4, r7, lr}
 800e5ce:	b089      	sub	sp, #36	; 0x24
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	61fb      	str	r3, [r7, #28]
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	7f1b      	ldrb	r3, [r3, #28]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d101      	bne.n	800e5f0 <HAL_RTC_SetAlarm+0x24>
 800e5ec:	2302      	movs	r3, #2
 800e5ee:	e101      	b.n	800e7f4 <HAL_RTC_SetAlarm+0x228>
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d137      	bne.n	800e672 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d102      	bne.n	800e616 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	2200      	movs	r2, #0
 800e614:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f000 f942 	bl	800e8a4 <RTC_ByteToBcd2>
 800e620:	4603      	mov	r3, r0
 800e622:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	785b      	ldrb	r3, [r3, #1]
 800e628:	4618      	mov	r0, r3
 800e62a:	f000 f93b 	bl	800e8a4 <RTC_ByteToBcd2>
 800e62e:	4603      	mov	r3, r0
 800e630:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800e632:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	789b      	ldrb	r3, [r3, #2]
 800e638:	4618      	mov	r0, r3
 800e63a:	f000 f933 	bl	800e8a4 <RTC_ByteToBcd2>
 800e63e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800e640:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	7b1b      	ldrb	r3, [r3, #12]
 800e648:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800e64a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e654:	4618      	mov	r0, r3
 800e656:	f000 f925 	bl	800e8a4 <RTC_ByteToBcd2>
 800e65a:	4603      	mov	r3, r0
 800e65c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e65e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800e666:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800e66c:	4313      	orrs	r3, r2
 800e66e:	61fb      	str	r3, [r7, #28]
 800e670:	e023      	b.n	800e6ba <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d102      	bne.n	800e686 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	2200      	movs	r2, #0
 800e684:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	785b      	ldrb	r3, [r3, #1]
 800e690:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800e692:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800e694:	68ba      	ldr	r2, [r7, #8]
 800e696:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800e698:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	7b1b      	ldrb	r3, [r3, #12]
 800e69e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800e6a0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e6a8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800e6aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800e6b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	69db      	ldr	r3, [r3, #28]
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	22ca      	movs	r2, #202	; 0xca
 800e6cc:	625a      	str	r2, [r3, #36]	; 0x24
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2253      	movs	r2, #83	; 0x53
 800e6d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6de:	d13f      	bne.n	800e760 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	689a      	ldr	r2, [r3, #8]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e6ee:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	689a      	ldr	r2, [r3, #8]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e6fe:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e700:	f7f8 fc2e 	bl	8006f60 <HAL_GetTick>
 800e704:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800e706:	e013      	b.n	800e730 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e708:	f7f8 fc2a 	bl	8006f60 <HAL_GetTick>
 800e70c:	4602      	mov	r2, r0
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e716:	d90b      	bls.n	800e730 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	22ff      	movs	r2, #255	; 0xff
 800e71e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2203      	movs	r2, #3
 800e724:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2200      	movs	r2, #0
 800e72a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e72c:	2303      	movs	r3, #3
 800e72e:	e061      	b.n	800e7f4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	68db      	ldr	r3, [r3, #12]
 800e736:	f003 0301 	and.w	r3, r3, #1
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d0e4      	beq.n	800e708 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	69fa      	ldr	r2, [r7, #28]
 800e744:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	689a      	ldr	r2, [r3, #8]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e75c:	609a      	str	r2, [r3, #8]
 800e75e:	e03e      	b.n	800e7de <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	689a      	ldr	r2, [r3, #8]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e76e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	689a      	ldr	r2, [r3, #8]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e77e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e780:	f7f8 fbee 	bl	8006f60 <HAL_GetTick>
 800e784:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e786:	e013      	b.n	800e7b0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e788:	f7f8 fbea 	bl	8006f60 <HAL_GetTick>
 800e78c:	4602      	mov	r2, r0
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	1ad3      	subs	r3, r2, r3
 800e792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e796:	d90b      	bls.n	800e7b0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	22ff      	movs	r2, #255	; 0xff
 800e79e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2203      	movs	r2, #3
 800e7a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	e021      	b.n	800e7f4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	f003 0302 	and.w	r3, r3, #2
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d0e4      	beq.n	800e788 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	69fa      	ldr	r2, [r7, #28]
 800e7c4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	697a      	ldr	r2, [r7, #20]
 800e7cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	689a      	ldr	r2, [r3, #8]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	22ff      	movs	r2, #255	; 0xff
 800e7e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e7f2:	2300      	movs	r3, #0
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3724      	adds	r7, #36	; 0x24
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd90      	pop	{r4, r7, pc}

0800e7fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e804:	2300      	movs	r3, #0
 800e806:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	68da      	ldr	r2, [r3, #12]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e816:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e818:	f7f8 fba2 	bl	8006f60 <HAL_GetTick>
 800e81c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e81e:	e009      	b.n	800e834 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e820:	f7f8 fb9e 	bl	8006f60 <HAL_GetTick>
 800e824:	4602      	mov	r2, r0
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	1ad3      	subs	r3, r2, r3
 800e82a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e82e:	d901      	bls.n	800e834 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800e830:	2303      	movs	r3, #3
 800e832:	e007      	b.n	800e844 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	f003 0320 	and.w	r3, r3, #32
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d0ee      	beq.n	800e820 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800e842:	2300      	movs	r3, #0
}
 800e844:	4618      	mov	r0, r3
 800e846:	3710      	adds	r7, #16
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e854:	2300      	movs	r3, #0
 800e856:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e862:	2b00      	cmp	r3, #0
 800e864:	d119      	bne.n	800e89a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e86e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e870:	f7f8 fb76 	bl	8006f60 <HAL_GetTick>
 800e874:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e876:	e009      	b.n	800e88c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e878:	f7f8 fb72 	bl	8006f60 <HAL_GetTick>
 800e87c:	4602      	mov	r2, r0
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	1ad3      	subs	r3, r2, r3
 800e882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e886:	d901      	bls.n	800e88c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800e888:	2303      	movs	r3, #3
 800e88a:	e007      	b.n	800e89c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e896:	2b00      	cmp	r3, #0
 800e898:	d0ee      	beq.n	800e878 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3710      	adds	r7, #16
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b085      	sub	sp, #20
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800e8b2:	e005      	b.n	800e8c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800e8ba:	79fb      	ldrb	r3, [r7, #7]
 800e8bc:	3b0a      	subs	r3, #10
 800e8be:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800e8c0:	79fb      	ldrb	r3, [r7, #7]
 800e8c2:	2b09      	cmp	r3, #9
 800e8c4:	d8f6      	bhi.n	800e8b4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	011b      	lsls	r3, r3, #4
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	79fb      	ldrb	r3, [r7, #7]
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	b2db      	uxtb	r3, r3
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3714      	adds	r7, #20
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b087      	sub	sp, #28
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	7f1b      	ldrb	r3, [r3, #28]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d101      	bne.n	800e8fc <HAL_RTCEx_SetTimeStamp+0x1c>
 800e8f8:	2302      	movs	r3, #2
 800e8fa:	e03e      	b.n	800e97a <HAL_RTCEx_SetTimeStamp+0x9a>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2201      	movs	r2, #1
 800e900:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2202      	movs	r2, #2
 800e906:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	689a      	ldr	r2, [r3, #8]
 800e90e:	4b1e      	ldr	r3, [pc, #120]	; (800e988 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800e910:	4013      	ands	r3, r2
 800e912:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800e914:	697a      	ldr	r2, [r7, #20]
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	4313      	orrs	r3, r2
 800e91a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	22ca      	movs	r2, #202	; 0xca
 800e922:	625a      	str	r2, [r3, #36]	; 0x24
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2253      	movs	r2, #83	; 0x53
 800e92a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f022 0206 	bic.w	r2, r2, #6
 800e93a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	430a      	orrs	r2, r1
 800e94a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	697a      	ldr	r2, [r7, #20]
 800e952:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	689a      	ldr	r2, [r3, #8]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e962:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	22ff      	movs	r2, #255	; 0xff
 800e96a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2201      	movs	r2, #1
 800e970:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	371c      	adds	r7, #28
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	fffff7f7 	.word	0xfffff7f7

0800e98c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b088      	sub	sp, #32
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800e994:	2300      	movs	r3, #0
 800e996:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800e998:	2300      	movs	r3, #0
 800e99a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800e99c:	2300      	movs	r3, #0
 800e99e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d101      	bne.n	800e9aa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	e156      	b.n	800ec58 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d106      	bne.n	800e9c4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7f5 f8dc 	bl	8003b7c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2202      	movs	r2, #2
 800e9c8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 facf 	bl	800ef70 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	68db      	ldr	r3, [r3, #12]
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d00c      	beq.n	800e9f4 <HAL_SAI_Init+0x68>
 800e9da:	2b02      	cmp	r3, #2
 800e9dc:	d80d      	bhi.n	800e9fa <HAL_SAI_Init+0x6e>
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d002      	beq.n	800e9e8 <HAL_SAI_Init+0x5c>
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d003      	beq.n	800e9ee <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800e9e6:	e008      	b.n	800e9fa <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	61fb      	str	r3, [r7, #28]
      break;
 800e9ec:	e006      	b.n	800e9fc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e9ee:	2310      	movs	r3, #16
 800e9f0:	61fb      	str	r3, [r7, #28]
      break;
 800e9f2:	e003      	b.n	800e9fc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e9f4:	2320      	movs	r3, #32
 800e9f6:	61fb      	str	r3, [r7, #28]
      break;
 800e9f8:	e000      	b.n	800e9fc <HAL_SAI_Init+0x70>
      break;
 800e9fa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	2b03      	cmp	r3, #3
 800ea02:	d81e      	bhi.n	800ea42 <HAL_SAI_Init+0xb6>
 800ea04:	a201      	add	r2, pc, #4	; (adr r2, 800ea0c <HAL_SAI_Init+0x80>)
 800ea06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea0a:	bf00      	nop
 800ea0c:	0800ea1d 	.word	0x0800ea1d
 800ea10:	0800ea23 	.word	0x0800ea23
 800ea14:	0800ea2b 	.word	0x0800ea2b
 800ea18:	0800ea33 	.word	0x0800ea33
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	617b      	str	r3, [r7, #20]
    }
    break;
 800ea20:	e010      	b.n	800ea44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ea22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea26:	617b      	str	r3, [r7, #20]
    }
    break;
 800ea28:	e00c      	b.n	800ea44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ea2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea2e:	617b      	str	r3, [r7, #20]
    }
    break;
 800ea30:	e008      	b.n	800ea44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ea32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea36:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	f043 0301 	orr.w	r3, r3, #1
 800ea3e:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ea40:	e000      	b.n	800ea44 <HAL_SAI_Init+0xb8>
    default:
      break;
 800ea42:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4a85      	ldr	r2, [pc, #532]	; (800ec60 <HAL_SAI_Init+0x2d4>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d004      	beq.n	800ea58 <HAL_SAI_Init+0xcc>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	4a84      	ldr	r2, [pc, #528]	; (800ec64 <HAL_SAI_Init+0x2d8>)
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d103      	bne.n	800ea60 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800ea58:	4a83      	ldr	r2, [pc, #524]	; (800ec68 <HAL_SAI_Init+0x2dc>)
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	6013      	str	r3, [r2, #0]
 800ea5e:	e002      	b.n	800ea66 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ea60:	4a82      	ldr	r2, [pc, #520]	; (800ec6c <HAL_SAI_Init+0x2e0>)
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	69db      	ldr	r3, [r3, #28]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d04c      	beq.n	800eb08 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4a7a      	ldr	r2, [pc, #488]	; (800ec60 <HAL_SAI_Init+0x2d4>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d004      	beq.n	800ea86 <HAL_SAI_Init+0xfa>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a78      	ldr	r2, [pc, #480]	; (800ec64 <HAL_SAI_Init+0x2d8>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d104      	bne.n	800ea90 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ea86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ea8a:	f7ff fa63 	bl	800df54 <HAL_RCCEx_GetPeriphCLKFreq>
 800ea8e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a76      	ldr	r2, [pc, #472]	; (800ec70 <HAL_SAI_Init+0x2e4>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d004      	beq.n	800eaa4 <HAL_SAI_Init+0x118>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	4a75      	ldr	r2, [pc, #468]	; (800ec74 <HAL_SAI_Init+0x2e8>)
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d104      	bne.n	800eaae <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800eaa4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800eaa8:	f7ff fa54 	bl	800df54 <HAL_RCCEx_GetPeriphCLKFreq>
 800eaac:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800eaae:	693a      	ldr	r2, [r7, #16]
 800eab0:	4613      	mov	r3, r2
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	4413      	add	r3, r2
 800eab6:	005b      	lsls	r3, r3, #1
 800eab8:	461a      	mov	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	69db      	ldr	r3, [r3, #28]
 800eabe:	025b      	lsls	r3, r3, #9
 800eac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eac4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	4a6b      	ldr	r2, [pc, #428]	; (800ec78 <HAL_SAI_Init+0x2ec>)
 800eaca:	fba2 2303 	umull	r2, r3, r2, r3
 800eace:	08da      	lsrs	r2, r3, #3
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800ead4:	68f9      	ldr	r1, [r7, #12]
 800ead6:	4b68      	ldr	r3, [pc, #416]	; (800ec78 <HAL_SAI_Init+0x2ec>)
 800ead8:	fba3 2301 	umull	r2, r3, r3, r1
 800eadc:	08da      	lsrs	r2, r3, #3
 800eade:	4613      	mov	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	1aca      	subs	r2, r1, r3
 800eae8:	2a08      	cmp	r2, #8
 800eaea:	d904      	bls.n	800eaf6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6a1b      	ldr	r3, [r3, #32]
 800eaf0:	1c5a      	adds	r2, r3, #1
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eafa:	2b04      	cmp	r3, #4
 800eafc:	d104      	bne.n	800eb08 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a1b      	ldr	r3, [r3, #32]
 800eb02:	085a      	lsrs	r2, r3, #1
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d003      	beq.n	800eb18 <HAL_SAI_Init+0x18c>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d109      	bne.n	800eb2c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d101      	bne.n	800eb24 <HAL_SAI_Init+0x198>
 800eb20:	2300      	movs	r3, #0
 800eb22:	e001      	b.n	800eb28 <HAL_SAI_Init+0x19c>
 800eb24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb28:	61bb      	str	r3, [r7, #24]
 800eb2a:	e008      	b.n	800eb3e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d102      	bne.n	800eb3a <HAL_SAI_Init+0x1ae>
 800eb34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb38:	e000      	b.n	800eb3c <HAL_SAI_Init+0x1b0>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	6819      	ldr	r1, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	4b4c      	ldr	r3, [pc, #304]	; (800ec7c <HAL_SAI_Init+0x2f0>)
 800eb4a:	400b      	ands	r3, r1
 800eb4c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	6819      	ldr	r1, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685a      	ldr	r2, [r3, #4]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb5c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eb62:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb68:	431a      	orrs	r2, r3
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800eb76:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eb82:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6a1b      	ldr	r3, [r3, #32]
 800eb88:	051b      	lsls	r3, r3, #20
 800eb8a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	430a      	orrs	r2, r1
 800eb92:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6859      	ldr	r1, [r3, #4]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	4b38      	ldr	r3, [pc, #224]	; (800ec80 <HAL_SAI_Init+0x2f4>)
 800eba0:	400b      	ands	r3, r1
 800eba2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	6859      	ldr	r1, [r3, #4]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	699a      	ldr	r2, [r3, #24]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb2:	431a      	orrs	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb8:	431a      	orrs	r2, r3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	430a      	orrs	r2, r1
 800ebc0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	6899      	ldr	r1, [r3, #8]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	4b2d      	ldr	r3, [pc, #180]	; (800ec84 <HAL_SAI_Init+0x2f8>)
 800ebce:	400b      	ands	r3, r1
 800ebd0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	6899      	ldr	r1, [r3, #8]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebdc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ebe2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800ebe8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800ebee:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ebf8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	430a      	orrs	r2, r1
 800ec00:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68d9      	ldr	r1, [r3, #12]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ec10:	400b      	ands	r3, r1
 800ec12:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	68d9      	ldr	r1, [r3, #12]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec22:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec28:	041b      	lsls	r3, r3, #16
 800ec2a:	431a      	orrs	r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec30:	3b01      	subs	r3, #1
 800ec32:	021b      	lsls	r3, r3, #8
 800ec34:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	430a      	orrs	r2, r1
 800ec3c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2200      	movs	r2, #0
 800ec42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2201      	movs	r2, #1
 800ec4a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2200      	movs	r2, #0
 800ec52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ec56:	2300      	movs	r3, #0
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3720      	adds	r7, #32
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	40015804 	.word	0x40015804
 800ec64:	40015824 	.word	0x40015824
 800ec68:	40015800 	.word	0x40015800
 800ec6c:	40015c00 	.word	0x40015c00
 800ec70:	40015c04 	.word	0x40015c04
 800ec74:	40015c24 	.word	0x40015c24
 800ec78:	cccccccd 	.word	0xcccccccd
 800ec7c:	ff05c010 	.word	0xff05c010
 800ec80:	ffff1ff0 	.word	0xffff1ff0
 800ec84:	fff88000 	.word	0xfff88000

0800ec88 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b086      	sub	sp, #24
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	4613      	mov	r3, r2
 800ec94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800ec96:	f7f8 f963 	bl	8006f60 <HAL_GetTick>
 800ec9a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d002      	beq.n	800eca8 <HAL_SAI_Transmit_DMA+0x20>
 800eca2:	88fb      	ldrh	r3, [r7, #6]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d101      	bne.n	800ecac <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e093      	b.n	800edd4 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	f040 808c 	bne.w	800edd2 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d101      	bne.n	800ecc8 <HAL_SAI_Transmit_DMA+0x40>
 800ecc4:	2302      	movs	r3, #2
 800ecc6:	e085      	b.n	800edd4 <HAL_SAI_Transmit_DMA+0x14c>
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	68ba      	ldr	r2, [r7, #8]
 800ecd4:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	88fa      	ldrh	r2, [r7, #6]
 800ecda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	88fa      	ldrh	r2, [r7, #6]
 800ece2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2212      	movs	r2, #18
 800ecf2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecfa:	4a38      	ldr	r2, [pc, #224]	; (800eddc <HAL_SAI_Transmit_DMA+0x154>)
 800ecfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed02:	4a37      	ldr	r2, [pc, #220]	; (800ede0 <HAL_SAI_Transmit_DMA+0x158>)
 800ed04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed0a:	4a36      	ldr	r2, [pc, #216]	; (800ede4 <HAL_SAI_Transmit_DMA+0x15c>)
 800ed0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed12:	2200      	movs	r2, #0
 800ed14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed1e:	4619      	mov	r1, r3
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	331c      	adds	r3, #28
 800ed26:	461a      	mov	r2, r3
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ed2e:	f7f9 f841 	bl	8007db4 <HAL_DMA_Start_IT>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d005      	beq.n	800ed44 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800ed40:	2301      	movs	r3, #1
 800ed42:	e047      	b.n	800edd4 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ed44:	2100      	movs	r1, #0
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f000 f8dc 	bl	800ef04 <SAI_InterruptFlag>
 800ed4c:	4601      	mov	r1, r0
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	691a      	ldr	r2, [r3, #16]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	430a      	orrs	r2, r1
 800ed5a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ed6a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ed6c:	e015      	b.n	800ed9a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800ed6e:	f7f8 f8f7 	bl	8006f60 <HAL_GetTick>
 800ed72:	4602      	mov	r2, r0
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	1ad3      	subs	r3, r2, r3
 800ed78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed7c:	d90d      	bls.n	800ed9a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ed96:	2303      	movs	r3, #3
 800ed98:	e01c      	b.n	800edd4 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	695b      	ldr	r3, [r3, #20]
 800eda0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d0e2      	beq.n	800ed6e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d107      	bne.n	800edc6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800edc4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800edce:	2300      	movs	r3, #0
 800edd0:	e000      	b.n	800edd4 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800edd2:	2302      	movs	r3, #2
  }
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3718      	adds	r7, #24
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	0800f041 	.word	0x0800f041
 800ede0:	0800efe1 	.word	0x0800efe1
 800ede4:	0800f0d9 	.word	0x0800f0d9

0800ede8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	4613      	mov	r3, r2
 800edf4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d002      	beq.n	800ee02 <HAL_SAI_Receive_DMA+0x1a>
 800edfc:	88fb      	ldrh	r3, [r7, #6]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d101      	bne.n	800ee06 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800ee02:	2301      	movs	r3, #1
 800ee04:	e074      	b.n	800eef0 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d16d      	bne.n	800eeee <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d101      	bne.n	800ee20 <HAL_SAI_Receive_DMA+0x38>
 800ee1c:	2302      	movs	r3, #2
 800ee1e:	e067      	b.n	800eef0 <HAL_SAI_Receive_DMA+0x108>
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2201      	movs	r2, #1
 800ee24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	68ba      	ldr	r2, [r7, #8]
 800ee2c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	88fa      	ldrh	r2, [r7, #6]
 800ee32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	88fa      	ldrh	r2, [r7, #6]
 800ee3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2200      	movs	r2, #0
 800ee42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2222      	movs	r2, #34	; 0x22
 800ee4a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee52:	4a29      	ldr	r2, [pc, #164]	; (800eef8 <HAL_SAI_Receive_DMA+0x110>)
 800ee54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee5a:	4a28      	ldr	r2, [pc, #160]	; (800eefc <HAL_SAI_Receive_DMA+0x114>)
 800ee5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee62:	4a27      	ldr	r2, [pc, #156]	; (800ef00 <HAL_SAI_Receive_DMA+0x118>)
 800ee64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	331c      	adds	r3, #28
 800ee78:	4619      	mov	r1, r3
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee7e:	461a      	mov	r2, r3
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee86:	f7f8 ff95 	bl	8007db4 <HAL_DMA_Start_IT>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d005      	beq.n	800ee9c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2200      	movs	r2, #0
 800ee94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	e029      	b.n	800eef0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f000 f830 	bl	800ef04 <SAI_InterruptFlag>
 800eea4:	4601      	mov	r1, r0
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	691a      	ldr	r2, [r3, #16]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	430a      	orrs	r2, r1
 800eeb2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eec2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d107      	bne.n	800eee2 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eee0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800eeea:	2300      	movs	r3, #0
 800eeec:	e000      	b.n	800eef0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800eeee:	2302      	movs	r3, #2
  }
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3710      	adds	r7, #16
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	0800f0bd 	.word	0x0800f0bd
 800eefc:	0800f05d 	.word	0x0800f05d
 800ef00:	0800f0d9 	.word	0x0800f0d9

0800ef04 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b085      	sub	sp, #20
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d103      	bne.n	800ef20 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f043 0308 	orr.w	r3, r3, #8
 800ef1e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef24:	2b08      	cmp	r3, #8
 800ef26:	d10b      	bne.n	800ef40 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ef2c:	2b03      	cmp	r3, #3
 800ef2e:	d003      	beq.n	800ef38 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d103      	bne.n	800ef40 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f043 0310 	orr.w	r3, r3, #16
 800ef3e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	2b03      	cmp	r3, #3
 800ef46:	d003      	beq.n	800ef50 <SAI_InterruptFlag+0x4c>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	d104      	bne.n	800ef5a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ef56:	60fb      	str	r3, [r7, #12]
 800ef58:	e003      	b.n	800ef62 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f043 0304 	orr.w	r3, r3, #4
 800ef60:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ef62:	68fb      	ldr	r3, [r7, #12]
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3714      	adds	r7, #20
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b085      	sub	sp, #20
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800ef78:	4b17      	ldr	r3, [pc, #92]	; (800efd8 <SAI_Disable+0x68>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a17      	ldr	r2, [pc, #92]	; (800efdc <SAI_Disable+0x6c>)
 800ef7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ef82:	0b1b      	lsrs	r3, r3, #12
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ef9a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	1e5a      	subs	r2, r3, #1
 800efa0:	60fa      	str	r2, [r7, #12]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d10a      	bne.n	800efbc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800efb6:	2303      	movs	r3, #3
 800efb8:	72fb      	strb	r3, [r7, #11]
      break;
 800efba:	e006      	b.n	800efca <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1e8      	bne.n	800ef9c <SAI_Disable+0x2c>

  return status;
 800efca:	7afb      	ldrb	r3, [r7, #11]
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3714      	adds	r7, #20
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr
 800efd8:	20000008 	.word	0x20000008
 800efdc:	95cbec1b 	.word	0x95cbec1b

0800efe0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efec:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	69db      	ldr	r3, [r3, #28]
 800eff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eff6:	d01c      	beq.n	800f032 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2200      	movs	r2, #0
 800effc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f00e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f010:	2100      	movs	r1, #0
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f7ff ff76 	bl	800ef04 <SAI_InterruptFlag>
 800f018:	4603      	mov	r3, r0
 800f01a:	43d9      	mvns	r1, r3
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	691a      	ldr	r2, [r3, #16]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	400a      	ands	r2, r1
 800f028:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2201      	movs	r2, #1
 800f02e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f7f6 fa56 	bl	80054e4 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f038:	bf00      	nop
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f04c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f7f6 fa52 	bl	80054f8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f054:	bf00      	nop
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b084      	sub	sp, #16
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f068:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	69db      	ldr	r3, [r3, #28]
 800f06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f072:	d01c      	beq.n	800f0ae <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f082:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2200      	movs	r2, #0
 800f088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f08c:	2100      	movs	r1, #0
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f7ff ff38 	bl	800ef04 <SAI_InterruptFlag>
 800f094:	4603      	mov	r3, r0
 800f096:	43d9      	mvns	r1, r3
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	691a      	ldr	r2, [r3, #16]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	400a      	ands	r2, r1
 800f0a4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	f7f2 f8aa 	bl	8001208 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f0b4:	bf00      	nop
 800f0b6:	3710      	adds	r7, #16
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f7f2 f8ac 	bl	8001228 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f0d0:	bf00      	nop
 800f0d2:	3710      	adds	r7, #16
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d004      	beq.n	800f10a <SAI_DMAError+0x32>
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f106:	2b01      	cmp	r3, #1
 800f108:	d112      	bne.n	800f130 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f118:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	f7ff ff28 	bl	800ef70 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2201      	movs	r2, #1
 800f124:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2200      	movs	r2, #0
 800f12c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f130:	68f8      	ldr	r0, [r7, #12]
 800f132:	f7f6 f9eb 	bl	800550c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f136:	bf00      	nop
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b082      	sub	sp, #8
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f14c:	2301      	movs	r3, #1
 800f14e:	e022      	b.n	800f196 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f156:	b2db      	uxtb	r3, r3
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d105      	bne.n	800f168 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2200      	movs	r2, #0
 800f160:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f7f4 f9d2 	bl	800350c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2203      	movs	r2, #3
 800f16c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f000 f815 	bl	800f1a0 <HAL_SD_InitCard>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d001      	beq.n	800f180 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f17c:	2301      	movs	r3, #1
 800f17e:	e00a      	b.n	800f196 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2200      	movs	r2, #0
 800f184:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2201      	movs	r2, #1
 800f190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f194:	2300      	movs	r3, #0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
	...

0800f1a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f1a0:	b5b0      	push	{r4, r5, r7, lr}
 800f1a2:	b08e      	sub	sp, #56	; 0x38
 800f1a4:	af04      	add	r7, sp, #16
 800f1a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800f1bc:	2376      	movs	r3, #118	; 0x76
 800f1be:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681d      	ldr	r5, [r3, #0]
 800f1c4:	466c      	mov	r4, sp
 800f1c6:	f107 0314 	add.w	r3, r7, #20
 800f1ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f1d2:	f107 0308 	add.w	r3, r7, #8
 800f1d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f1d8:	4628      	mov	r0, r5
 800f1da:	f002 ffef 	bl	80121bc <SDMMC_Init>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800f1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d001      	beq.n	800f1f0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e056      	b.n	800f29e <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	685a      	ldr	r2, [r3, #4]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f1fe:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4618      	mov	r0, r3
 800f206:	f003 f812 	bl	801222e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	685a      	ldr	r2, [r3, #4]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f218:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 fe0e 	bl	800fe3c <SD_PowerON>
 800f220:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f222:	6a3b      	ldr	r3, [r7, #32]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00b      	beq.n	800f240 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2201      	movs	r2, #1
 800f22c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f234:	6a3b      	ldr	r3, [r7, #32]
 800f236:	431a      	orrs	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f23c:	2301      	movs	r3, #1
 800f23e:	e02e      	b.n	800f29e <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 fd2f 	bl	800fca4 <SD_InitCard>
 800f246:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f248:	6a3b      	ldr	r3, [r7, #32]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d00b      	beq.n	800f266 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2201      	movs	r2, #1
 800f252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f25a:	6a3b      	ldr	r3, [r7, #32]
 800f25c:	431a      	orrs	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f262:	2301      	movs	r3, #1
 800f264:	e01b      	b.n	800f29e <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f26e:	4618      	mov	r0, r3
 800f270:	f003 f870 	bl	8012354 <SDMMC_CmdBlockLength>
 800f274:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d00f      	beq.n	800f29c <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a09      	ldr	r2, [pc, #36]	; (800f2a8 <HAL_SD_InitCard+0x108>)
 800f282:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f288:	6a3b      	ldr	r3, [r7, #32]
 800f28a:	431a      	orrs	r2, r3
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2201      	movs	r2, #1
 800f294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f298:	2301      	movs	r3, #1
 800f29a:	e000      	b.n	800f29e <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3728      	adds	r7, #40	; 0x28
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	004005ff 	.word	0x004005ff

0800f2ac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b08c      	sub	sp, #48	; 0x30
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
 800f2b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d107      	bne.n	800f2d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e0c3      	b.n	800f45c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	f040 80bc 	bne.w	800f45a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f2e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	441a      	add	r2, r3
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d907      	bls.n	800f306 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f302:	2301      	movs	r3, #1
 800f304:	e0aa      	b.n	800f45c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2203      	movs	r2, #3
 800f30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2200      	movs	r2, #0
 800f314:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800f324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f32a:	4a4e      	ldr	r2, [pc, #312]	; (800f464 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800f32c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f332:	4a4d      	ldr	r2, [pc, #308]	; (800f468 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800f334:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f33a:	2200      	movs	r2, #0
 800f33c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f342:	2200      	movs	r2, #0
 800f344:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f356:	689a      	ldr	r2, [r3, #8]
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	430a      	orrs	r2, r1
 800f360:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	3380      	adds	r3, #128	; 0x80
 800f36c:	4619      	mov	r1, r3
 800f36e:	68ba      	ldr	r2, [r7, #8]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	025b      	lsls	r3, r3, #9
 800f374:	089b      	lsrs	r3, r3, #2
 800f376:	f7f8 fd1d 	bl	8007db4 <HAL_DMA_Start_IT>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d017      	beq.n	800f3b0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800f38e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4a35      	ldr	r2, [pc, #212]	; (800f46c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f396:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f39c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	e055      	b.n	800f45c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f042 0208 	orr.w	r2, r2, #8
 800f3be:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d002      	beq.n	800f3ce <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800f3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ca:	025b      	lsls	r3, r3, #9
 800f3cc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f3ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3d2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	025b      	lsls	r3, r3, #9
 800f3d8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f3da:	2390      	movs	r3, #144	; 0x90
 800f3dc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f3de:	2302      	movs	r3, #2
 800f3e0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f107 0210 	add.w	r2, r7, #16
 800f3f2:	4611      	mov	r1, r2
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f002 ff81 	bl	80122fc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d90a      	bls.n	800f416 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2282      	movs	r2, #130	; 0x82
 800f404:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f40c:	4618      	mov	r0, r3
 800f40e:	f002 ffe5 	bl	80123dc <SDMMC_CmdReadMultiBlock>
 800f412:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f414:	e009      	b.n	800f42a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2281      	movs	r2, #129	; 0x81
 800f41a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f422:	4618      	mov	r0, r3
 800f424:	f002 ffb8 	bl	8012398 <SDMMC_CmdReadSingleBlock>
 800f428:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800f42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d012      	beq.n	800f456 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4a0d      	ldr	r2, [pc, #52]	; (800f46c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f436:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43e:	431a      	orrs	r2, r3
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2201      	movs	r2, #1
 800f448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2200      	movs	r2, #0
 800f450:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800f452:	2301      	movs	r3, #1
 800f454:	e002      	b.n	800f45c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800f456:	2300      	movs	r3, #0
 800f458:	e000      	b.n	800f45c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800f45a:	2302      	movs	r3, #2
  }
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3730      	adds	r7, #48	; 0x30
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	0800fb8f 	.word	0x0800fb8f
 800f468:	0800fc01 	.word	0x0800fc01
 800f46c:	004005ff 	.word	0x004005ff

0800f470 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b08c      	sub	sp, #48	; 0x30
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	607a      	str	r2, [r7, #4]
 800f47c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d107      	bne.n	800f498 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f48c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f494:	2301      	movs	r3, #1
 800f496:	e0c6      	b.n	800f626 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	f040 80bf 	bne.w	800f624 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f4ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	441a      	add	r2, r3
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d907      	bls.n	800f4ca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	e0ad      	b.n	800f626 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2203      	movs	r2, #3
 800f4ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f042 021a 	orr.w	r2, r2, #26
 800f4e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4ee:	4a50      	ldr	r2, [pc, #320]	; (800f630 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800f4f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4f6:	4a4f      	ldr	r2, [pc, #316]	; (800f634 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800f4f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4fe:	2200      	movs	r2, #0
 800f500:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f506:	2b01      	cmp	r3, #1
 800f508:	d002      	beq.n	800f510 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800f50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50c:	025b      	lsls	r3, r3, #9
 800f50e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	2b01      	cmp	r3, #1
 800f514:	d90a      	bls.n	800f52c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	22a0      	movs	r2, #160	; 0xa0
 800f51a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f522:	4618      	mov	r0, r3
 800f524:	f002 ff9e 	bl	8012464 <SDMMC_CmdWriteMultiBlock>
 800f528:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f52a:	e009      	b.n	800f540 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2290      	movs	r2, #144	; 0x90
 800f530:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f538:	4618      	mov	r0, r3
 800f53a:	f002 ff71 	bl	8012420 <SDMMC_CmdWriteSingleBlock>
 800f53e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800f540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f542:	2b00      	cmp	r3, #0
 800f544:	d012      	beq.n	800f56c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4a3b      	ldr	r2, [pc, #236]	; (800f638 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f54c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f554:	431a      	orrs	r2, r3
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2201      	movs	r2, #1
 800f55e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2200      	movs	r2, #0
 800f566:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f568:	2301      	movs	r3, #1
 800f56a:	e05c      	b.n	800f626 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f042 0208 	orr.w	r2, r2, #8
 800f57a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f580:	2240      	movs	r2, #64	; 0x40
 800f582:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f594:	689a      	ldr	r2, [r3, #8]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	430a      	orrs	r2, r1
 800f59e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f5a4:	68b9      	ldr	r1, [r7, #8]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	3380      	adds	r3, #128	; 0x80
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	025b      	lsls	r3, r3, #9
 800f5b2:	089b      	lsrs	r3, r3, #2
 800f5b4:	f7f8 fbfe 	bl	8007db4 <HAL_DMA_Start_IT>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d01a      	beq.n	800f5f4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f022 021a 	bic.w	r2, r2, #26
 800f5cc:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4a19      	ldr	r2, [pc, #100]	; (800f638 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f5d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	e018      	b.n	800f626 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f5f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	025b      	lsls	r3, r3, #9
 800f5fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f600:	2390      	movs	r3, #144	; 0x90
 800f602:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f604:	2300      	movs	r3, #0
 800f606:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f608:	2300      	movs	r3, #0
 800f60a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f60c:	2301      	movs	r3, #1
 800f60e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f107 0210 	add.w	r2, r7, #16
 800f618:	4611      	mov	r1, r2
 800f61a:	4618      	mov	r0, r3
 800f61c:	f002 fe6e 	bl	80122fc <SDMMC_ConfigData>

      return HAL_OK;
 800f620:	2300      	movs	r3, #0
 800f622:	e000      	b.n	800f626 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800f624:	2302      	movs	r3, #2
  }
}
 800f626:	4618      	mov	r0, r3
 800f628:	3730      	adds	r7, #48	; 0x30
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	0800fb65 	.word	0x0800fb65
 800f634:	0800fc01 	.word	0x0800fc01
 800f638:	004005ff 	.word	0x004005ff

0800f63c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b083      	sub	sp, #12
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800f644:	bf00      	nop
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f65e:	0f9b      	lsrs	r3, r3, #30
 800f660:	b2da      	uxtb	r2, r3
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f66a:	0e9b      	lsrs	r3, r3, #26
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	f003 030f 	and.w	r3, r3, #15
 800f672:	b2da      	uxtb	r2, r3
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f67c:	0e1b      	lsrs	r3, r3, #24
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	f003 0303 	and.w	r3, r3, #3
 800f684:	b2da      	uxtb	r2, r3
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f68e:	0c1b      	lsrs	r3, r3, #16
 800f690:	b2da      	uxtb	r2, r3
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f69a:	0a1b      	lsrs	r3, r3, #8
 800f69c:	b2da      	uxtb	r2, r3
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6a6:	b2da      	uxtb	r2, r3
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6b0:	0d1b      	lsrs	r3, r3, #20
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6bc:	0c1b      	lsrs	r3, r3, #16
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	f003 030f 	and.w	r3, r3, #15
 800f6c4:	b2da      	uxtb	r2, r3
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6ce:	0bdb      	lsrs	r3, r3, #15
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	f003 0301 	and.w	r3, r3, #1
 800f6d6:	b2da      	uxtb	r2, r3
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6e0:	0b9b      	lsrs	r3, r3, #14
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	b2da      	uxtb	r2, r3
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6f2:	0b5b      	lsrs	r3, r3, #13
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	f003 0301 	and.w	r3, r3, #1
 800f6fa:	b2da      	uxtb	r2, r3
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f704:	0b1b      	lsrs	r3, r3, #12
 800f706:	b2db      	uxtb	r3, r3
 800f708:	f003 0301 	and.w	r3, r3, #1
 800f70c:	b2da      	uxtb	r2, r3
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	2200      	movs	r2, #0
 800f716:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d163      	bne.n	800f7e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f724:	009a      	lsls	r2, r3, #2
 800f726:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f72a:	4013      	ands	r3, r2
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800f730:	0f92      	lsrs	r2, r2, #30
 800f732:	431a      	orrs	r2, r3
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f73c:	0edb      	lsrs	r3, r3, #27
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	f003 0307 	and.w	r3, r3, #7
 800f744:	b2da      	uxtb	r2, r3
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f74e:	0e1b      	lsrs	r3, r3, #24
 800f750:	b2db      	uxtb	r3, r3
 800f752:	f003 0307 	and.w	r3, r3, #7
 800f756:	b2da      	uxtb	r2, r3
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f760:	0d5b      	lsrs	r3, r3, #21
 800f762:	b2db      	uxtb	r3, r3
 800f764:	f003 0307 	and.w	r3, r3, #7
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f772:	0c9b      	lsrs	r3, r3, #18
 800f774:	b2db      	uxtb	r3, r3
 800f776:	f003 0307 	and.w	r3, r3, #7
 800f77a:	b2da      	uxtb	r2, r3
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f784:	0bdb      	lsrs	r3, r3, #15
 800f786:	b2db      	uxtb	r3, r3
 800f788:	f003 0307 	and.w	r3, r3, #7
 800f78c:	b2da      	uxtb	r2, r3
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	691b      	ldr	r3, [r3, #16]
 800f796:	1c5a      	adds	r2, r3, #1
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	7e1b      	ldrb	r3, [r3, #24]
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	f003 0307 	and.w	r3, r3, #7
 800f7a6:	3302      	adds	r3, #2
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800f7ae:	687a      	ldr	r2, [r7, #4]
 800f7b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f7b2:	fb02 f203 	mul.w	r2, r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	7a1b      	ldrb	r3, [r3, #8]
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	f003 030f 	and.w	r3, r3, #15
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	409a      	lsls	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800f7d4:	0a52      	lsrs	r2, r2, #9
 800f7d6:	fb02 f203 	mul.w	r2, r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7e4:	661a      	str	r2, [r3, #96]	; 0x60
 800f7e6:	e031      	b.n	800f84c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d11d      	bne.n	800f82c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f7f4:	041b      	lsls	r3, r3, #16
 800f7f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7fe:	0c1b      	lsrs	r3, r3, #16
 800f800:	431a      	orrs	r2, r3
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	3301      	adds	r3, #1
 800f80c:	029a      	lsls	r2, r3, #10
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f820:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	661a      	str	r2, [r3, #96]	; 0x60
 800f82a:	e00f      	b.n	800f84c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4a58      	ldr	r2, [pc, #352]	; (800f994 <HAL_SD_GetCardCSD+0x344>)
 800f832:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2201      	movs	r2, #1
 800f844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f848:	2301      	movs	r3, #1
 800f84a:	e09d      	b.n	800f988 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f850:	0b9b      	lsrs	r3, r3, #14
 800f852:	b2db      	uxtb	r3, r3
 800f854:	f003 0301 	and.w	r3, r3, #1
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f862:	09db      	lsrs	r3, r3, #7
 800f864:	b2db      	uxtb	r3, r3
 800f866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f86a:	b2da      	uxtb	r2, r3
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f874:	b2db      	uxtb	r3, r3
 800f876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f87a:	b2da      	uxtb	r2, r3
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f884:	0fdb      	lsrs	r3, r3, #31
 800f886:	b2da      	uxtb	r2, r3
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f890:	0f5b      	lsrs	r3, r3, #29
 800f892:	b2db      	uxtb	r3, r3
 800f894:	f003 0303 	and.w	r3, r3, #3
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8a2:	0e9b      	lsrs	r3, r3, #26
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	f003 0307 	and.w	r3, r3, #7
 800f8aa:	b2da      	uxtb	r2, r3
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8b4:	0d9b      	lsrs	r3, r3, #22
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	f003 030f 	and.w	r3, r3, #15
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8c6:	0d5b      	lsrs	r3, r3, #21
 800f8c8:	b2db      	uxtb	r3, r3
 800f8ca:	f003 0301 	and.w	r3, r3, #1
 800f8ce:	b2da      	uxtb	r2, r3
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8e2:	0c1b      	lsrs	r3, r3, #16
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	f003 0301 	and.w	r3, r3, #1
 800f8ea:	b2da      	uxtb	r2, r3
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8f6:	0bdb      	lsrs	r3, r3, #15
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	f003 0301 	and.w	r3, r3, #1
 800f8fe:	b2da      	uxtb	r2, r3
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f90a:	0b9b      	lsrs	r3, r3, #14
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	f003 0301 	and.w	r3, r3, #1
 800f912:	b2da      	uxtb	r2, r3
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f91e:	0b5b      	lsrs	r3, r3, #13
 800f920:	b2db      	uxtb	r3, r3
 800f922:	f003 0301 	and.w	r3, r3, #1
 800f926:	b2da      	uxtb	r2, r3
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f932:	0b1b      	lsrs	r3, r3, #12
 800f934:	b2db      	uxtb	r3, r3
 800f936:	f003 0301 	and.w	r3, r3, #1
 800f93a:	b2da      	uxtb	r2, r3
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f946:	0a9b      	lsrs	r3, r3, #10
 800f948:	b2db      	uxtb	r3, r3
 800f94a:	f003 0303 	and.w	r3, r3, #3
 800f94e:	b2da      	uxtb	r2, r3
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f95a:	0a1b      	lsrs	r3, r3, #8
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	f003 0303 	and.w	r3, r3, #3
 800f962:	b2da      	uxtb	r2, r3
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f96e:	085b      	lsrs	r3, r3, #1
 800f970:	b2db      	uxtb	r3, r3
 800f972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f976:	b2da      	uxtb	r2, r3
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	2201      	movs	r2, #1
 800f982:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f986:	2300      	movs	r3, #0
}
 800f988:	4618      	mov	r0, r3
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr
 800f994:	004005ff 	.word	0x004005ff

0800f998 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f9e2:	2300      	movs	r3, #0
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f9f0:	b5b0      	push	{r4, r5, r7, lr}
 800f9f2:	b08e      	sub	sp, #56	; 0x38
 800f9f4:	af04      	add	r7, sp, #16
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2203      	movs	r2, #3
 800fa04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa0c:	2b03      	cmp	r3, #3
 800fa0e:	d02e      	beq.n	800fa6e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa16:	d106      	bne.n	800fa26 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	639a      	str	r2, [r3, #56]	; 0x38
 800fa24:	e029      	b.n	800fa7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa2c:	d10a      	bne.n	800fa44 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f000 faba 	bl	800ffa8 <SD_WideBus_Enable>
 800fa34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa3a:	6a3b      	ldr	r3, [r7, #32]
 800fa3c:	431a      	orrs	r2, r3
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	639a      	str	r2, [r3, #56]	; 0x38
 800fa42:	e01a      	b.n	800fa7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10a      	bne.n	800fa60 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 faf7 	bl	801003e <SD_WideBus_Disable>
 800fa50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa56:	6a3b      	ldr	r3, [r7, #32]
 800fa58:	431a      	orrs	r2, r3
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	639a      	str	r2, [r3, #56]	; 0x38
 800fa5e:	e00c      	b.n	800fa7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	639a      	str	r2, [r3, #56]	; 0x38
 800fa6c:	e005      	b.n	800fa7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00b      	beq.n	800fa9a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	4a26      	ldr	r2, [pc, #152]	; (800fb20 <HAL_SD_ConfigWideBusOperation+0x130>)
 800fa88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800fa92:	2301      	movs	r3, #1
 800fa94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa98:	e01f      	b.n	800fada <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	689b      	ldr	r3, [r3, #8]
 800faa4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	695b      	ldr	r3, [r3, #20]
 800fab4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	699b      	ldr	r3, [r3, #24]
 800faba:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681d      	ldr	r5, [r3, #0]
 800fac0:	466c      	mov	r4, sp
 800fac2:	f107 0314 	add.w	r3, r7, #20
 800fac6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800faca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800face:	f107 0308 	add.w	r3, r7, #8
 800fad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fad4:	4628      	mov	r0, r5
 800fad6:	f002 fb71 	bl	80121bc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fae2:	4618      	mov	r0, r3
 800fae4:	f002 fc36 	bl	8012354 <SDMMC_CmdBlockLength>
 800fae8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800faea:	6a3b      	ldr	r3, [r7, #32]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d00c      	beq.n	800fb0a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a0a      	ldr	r2, [pc, #40]	; (800fb20 <HAL_SD_ConfigWideBusOperation+0x130>)
 800faf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fafc:	6a3b      	ldr	r3, [r7, #32]
 800fafe:	431a      	orrs	r2, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800fb04:	2301      	movs	r3, #1
 800fb06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800fb12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3728      	adds	r7, #40	; 0x28
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bdb0      	pop	{r4, r5, r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	004005ff 	.word	0x004005ff

0800fb24 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b086      	sub	sp, #24
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800fb30:	f107 030c 	add.w	r3, r7, #12
 800fb34:	4619      	mov	r1, r3
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 fa0e 	bl	800ff58 <SD_SendStatus>
 800fb3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d005      	beq.n	800fb50 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	431a      	orrs	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	0a5b      	lsrs	r3, r3, #9
 800fb54:	f003 030f 	and.w	r3, r3, #15
 800fb58:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800fb5a:	693b      	ldr	r3, [r7, #16]
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3718      	adds	r7, #24
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b085      	sub	sp, #20
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb70:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fb80:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fb82:	bf00      	nop
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr

0800fb8e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b084      	sub	sp, #16
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fba0:	2b82      	cmp	r3, #130	; 0x82
 800fba2:	d111      	bne.n	800fbc8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f002 fc7d 	bl	80124a8 <SDMMC_CmdStopTransfer>
 800fbae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d008      	beq.n	800fbc8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	431a      	orrs	r2, r3
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f7ff fd3a 	bl	800f63c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f022 0208 	bic.w	r2, r2, #8
 800fbd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f240 523a 	movw	r2, #1338	; 0x53a
 800fbe0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2200      	movs	r2, #0
 800fbee:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800fbf0:	68f8      	ldr	r0, [r7, #12]
 800fbf2:	f004 f829 	bl	8013c48 <HAL_SD_RxCpltCallback>
#endif
}
 800fbf6:	bf00      	nop
 800fbf8:	3710      	adds	r7, #16
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
	...

0800fc00 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b086      	sub	sp, #24
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc0c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f7f8 fb4c 	bl	80082ac <HAL_DMA_GetError>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	d03e      	beq.n	800fc98 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc20:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc28:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d002      	beq.n	800fc36 <SD_DMAError+0x36>
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d12d      	bne.n	800fc92 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4a19      	ldr	r2, [pc, #100]	; (800fca0 <SD_DMAError+0xa0>)
 800fc3c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800fc4c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800fc5a:	6978      	ldr	r0, [r7, #20]
 800fc5c:	f7ff ff62 	bl	800fb24 <HAL_SD_GetCardState>
 800fc60:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	2b06      	cmp	r3, #6
 800fc66:	d002      	beq.n	800fc6e <SD_DMAError+0x6e>
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	2b05      	cmp	r3, #5
 800fc6c:	d10a      	bne.n	800fc84 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4618      	mov	r0, r3
 800fc74:	f002 fc18 	bl	80124a8 <SDMMC_CmdStopTransfer>
 800fc78:	4602      	mov	r2, r0
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc7e:	431a      	orrs	r2, r3
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	2201      	movs	r2, #1
 800fc88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800fc92:	6978      	ldr	r0, [r7, #20]
 800fc94:	f7ff fcd2 	bl	800f63c <HAL_SD_ErrorCallback>
#endif
  }
}
 800fc98:	bf00      	nop
 800fc9a:	3718      	adds	r7, #24
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	004005ff 	.word	0x004005ff

0800fca4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fca4:	b5b0      	push	{r4, r5, r7, lr}
 800fca6:	b094      	sub	sp, #80	; 0x50
 800fca8:	af04      	add	r7, sp, #16
 800fcaa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800fcac:	2301      	movs	r3, #1
 800fcae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f002 fac9 	bl	801224c <SDMMC_GetPowerState>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d102      	bne.n	800fcc6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fcc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800fcc4:	e0b6      	b.n	800fe34 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcca:	2b03      	cmp	r3, #3
 800fccc:	d02f      	beq.n	800fd2e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f002 fcf3 	bl	80126be <SDMMC_CmdSendCID>
 800fcd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fcda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d001      	beq.n	800fce4 <SD_InitCard+0x40>
    {
      return errorstate;
 800fce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fce2:	e0a7      	b.n	800fe34 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2100      	movs	r1, #0
 800fcea:	4618      	mov	r0, r3
 800fcec:	f002 faf3 	bl	80122d6 <SDMMC_GetResponse>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2104      	movs	r1, #4
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f002 faea 	bl	80122d6 <SDMMC_GetResponse>
 800fd02:	4602      	mov	r2, r0
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2108      	movs	r1, #8
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f002 fae1 	bl	80122d6 <SDMMC_GetResponse>
 800fd14:	4602      	mov	r2, r0
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	210c      	movs	r1, #12
 800fd20:	4618      	mov	r0, r3
 800fd22:	f002 fad8 	bl	80122d6 <SDMMC_GetResponse>
 800fd26:	4602      	mov	r2, r0
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd32:	2b03      	cmp	r3, #3
 800fd34:	d00d      	beq.n	800fd52 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f107 020e 	add.w	r2, r7, #14
 800fd3e:	4611      	mov	r1, r2
 800fd40:	4618      	mov	r0, r3
 800fd42:	f002 fcf9 	bl	8012738 <SDMMC_CmdSetRelAdd>
 800fd46:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fd48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <SD_InitCard+0xae>
    {
      return errorstate;
 800fd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd50:	e070      	b.n	800fe34 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd56:	2b03      	cmp	r3, #3
 800fd58:	d036      	beq.n	800fdc8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800fd5a:	89fb      	ldrh	r3, [r7, #14]
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd6a:	041b      	lsls	r3, r3, #16
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	4610      	mov	r0, r2
 800fd70:	f002 fcc3 	bl	80126fa <SDMMC_CmdSendCSD>
 800fd74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fd76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <SD_InitCard+0xdc>
    {
      return errorstate;
 800fd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd7e:	e059      	b.n	800fe34 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2100      	movs	r1, #0
 800fd86:	4618      	mov	r0, r3
 800fd88:	f002 faa5 	bl	80122d6 <SDMMC_GetResponse>
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2104      	movs	r1, #4
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f002 fa9c 	bl	80122d6 <SDMMC_GetResponse>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2108      	movs	r1, #8
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f002 fa93 	bl	80122d6 <SDMMC_GetResponse>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	210c      	movs	r1, #12
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f002 fa8a 	bl	80122d6 <SDMMC_GetResponse>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	2104      	movs	r1, #4
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f002 fa81 	bl	80122d6 <SDMMC_GetResponse>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	0d1a      	lsrs	r2, r3, #20
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800fddc:	f107 0310 	add.w	r3, r7, #16
 800fde0:	4619      	mov	r1, r3
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f7ff fc34 	bl	800f650 <HAL_SD_GetCardCSD>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d002      	beq.n	800fdf4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fdee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fdf2:	e01f      	b.n	800fe34 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6819      	ldr	r1, [r3, #0]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdfc:	041b      	lsls	r3, r3, #16
 800fdfe:	461a      	mov	r2, r3
 800fe00:	f04f 0300 	mov.w	r3, #0
 800fe04:	4608      	mov	r0, r1
 800fe06:	f002 fb71 	bl	80124ec <SDMMC_CmdSelDesel>
 800fe0a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800fe0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <SD_InitCard+0x172>
  {
    return errorstate;
 800fe12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe14:	e00e      	b.n	800fe34 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681d      	ldr	r5, [r3, #0]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	466c      	mov	r4, sp
 800fe1e:	f103 0210 	add.w	r2, r3, #16
 800fe22:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe28:	3304      	adds	r3, #4
 800fe2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f002 f9c5 	bl	80121bc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800fe32:	2300      	movs	r3, #0
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3740      	adds	r7, #64	; 0x40
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bdb0      	pop	{r4, r5, r7, pc}

0800fe3c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b086      	sub	sp, #24
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fe44:	2300      	movs	r3, #0
 800fe46:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	617b      	str	r3, [r7, #20]
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	4618      	mov	r0, r3
 800fe56:	f002 fb6c 	bl	8012532 <SDMMC_CmdGoIdleState>
 800fe5a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d001      	beq.n	800fe66 <SD_PowerON+0x2a>
  {
    return errorstate;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	e072      	b.n	800ff4c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f002 fb7f 	bl	801256e <SDMMC_CmdOperCond>
 800fe70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00d      	beq.n	800fe94 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	4618      	mov	r0, r3
 800fe84:	f002 fb55 	bl	8012532 <SDMMC_CmdGoIdleState>
 800fe88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d004      	beq.n	800fe9a <SD_PowerON+0x5e>
    {
      return errorstate;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	e05b      	b.n	800ff4c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2201      	movs	r2, #1
 800fe98:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	d137      	bne.n	800ff12 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	2100      	movs	r1, #0
 800fea8:	4618      	mov	r0, r3
 800feaa:	f002 fb7f 	bl	80125ac <SDMMC_CmdAppCommand>
 800feae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d02d      	beq.n	800ff12 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800feb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800feba:	e047      	b.n	800ff4c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2100      	movs	r1, #0
 800fec2:	4618      	mov	r0, r3
 800fec4:	f002 fb72 	bl	80125ac <SDMMC_CmdAppCommand>
 800fec8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <SD_PowerON+0x98>
    {
      return errorstate;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	e03b      	b.n	800ff4c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	491e      	ldr	r1, [pc, #120]	; (800ff54 <SD_PowerON+0x118>)
 800feda:	4618      	mov	r0, r3
 800fedc:	f002 fb88 	bl	80125f0 <SDMMC_CmdAppOperCommand>
 800fee0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d002      	beq.n	800feee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800feec:	e02e      	b.n	800ff4c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2100      	movs	r1, #0
 800fef4:	4618      	mov	r0, r3
 800fef6:	f002 f9ee 	bl	80122d6 <SDMMC_GetResponse>
 800fefa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	0fdb      	lsrs	r3, r3, #31
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d101      	bne.n	800ff08 <SD_PowerON+0xcc>
 800ff04:	2301      	movs	r3, #1
 800ff06:	e000      	b.n	800ff0a <SD_PowerON+0xce>
 800ff08:	2300      	movs	r3, #0
 800ff0a:	613b      	str	r3, [r7, #16]

    count++;
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d802      	bhi.n	800ff22 <SD_PowerON+0xe6>
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d0cc      	beq.n	800febc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	d902      	bls.n	800ff32 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ff2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ff30:	e00c      	b.n	800ff4c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d003      	beq.n	800ff44 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2201      	movs	r2, #1
 800ff40:	645a      	str	r2, [r3, #68]	; 0x44
 800ff42:	e002      	b.n	800ff4a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2200      	movs	r2, #0
 800ff48:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ff4a:	2300      	movs	r3, #0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3718      	adds	r7, #24
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	c1100000 	.word	0xc1100000

0800ff58 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d102      	bne.n	800ff6e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ff68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff6c:	e018      	b.n	800ffa0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681a      	ldr	r2, [r3, #0]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff76:	041b      	lsls	r3, r3, #16
 800ff78:	4619      	mov	r1, r3
 800ff7a:	4610      	mov	r0, r2
 800ff7c:	f002 fbfd 	bl	801277a <SDMMC_CmdSendStatus>
 800ff80:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d001      	beq.n	800ff8c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	e009      	b.n	800ffa0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2100      	movs	r1, #0
 800ff92:	4618      	mov	r0, r3
 800ff94:	f002 f99f 	bl	80122d6 <SDMMC_GetResponse>
 800ff98:	4602      	mov	r2, r0
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3710      	adds	r7, #16
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b086      	sub	sp, #24
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	60fb      	str	r3, [r7, #12]
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2100      	movs	r1, #0
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f002 f989 	bl	80122d6 <SDMMC_GetResponse>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ffca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ffce:	d102      	bne.n	800ffd6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ffd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ffd4:	e02f      	b.n	8010036 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ffd6:	f107 030c 	add.w	r3, r7, #12
 800ffda:	4619      	mov	r1, r3
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f000 f879 	bl	80100d4 <SD_FindSCR>
 800ffe2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d001      	beq.n	800ffee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	e023      	b.n	8010036 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d01c      	beq.n	8010032 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010000:	041b      	lsls	r3, r3, #16
 8010002:	4619      	mov	r1, r3
 8010004:	4610      	mov	r0, r2
 8010006:	f002 fad1 	bl	80125ac <SDMMC_CmdAppCommand>
 801000a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d001      	beq.n	8010016 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	e00f      	b.n	8010036 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2102      	movs	r1, #2
 801001c:	4618      	mov	r0, r3
 801001e:	f002 fb0b 	bl	8012638 <SDMMC_CmdBusWidth>
 8010022:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d001      	beq.n	801002e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	e003      	b.n	8010036 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801002e:	2300      	movs	r3, #0
 8010030:	e001      	b.n	8010036 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010032:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010036:	4618      	mov	r0, r3
 8010038:	3718      	adds	r7, #24
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b086      	sub	sp, #24
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010046:	2300      	movs	r3, #0
 8010048:	60fb      	str	r3, [r7, #12]
 801004a:	2300      	movs	r3, #0
 801004c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2100      	movs	r1, #0
 8010054:	4618      	mov	r0, r3
 8010056:	f002 f93e 	bl	80122d6 <SDMMC_GetResponse>
 801005a:	4603      	mov	r3, r0
 801005c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010064:	d102      	bne.n	801006c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801006a:	e02f      	b.n	80100cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801006c:	f107 030c 	add.w	r3, r7, #12
 8010070:	4619      	mov	r1, r3
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 f82e 	bl	80100d4 <SD_FindSCR>
 8010078:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d001      	beq.n	8010084 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	e023      	b.n	80100cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801008a:	2b00      	cmp	r3, #0
 801008c:	d01c      	beq.n	80100c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010096:	041b      	lsls	r3, r3, #16
 8010098:	4619      	mov	r1, r3
 801009a:	4610      	mov	r0, r2
 801009c:	f002 fa86 	bl	80125ac <SDMMC_CmdAppCommand>
 80100a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d001      	beq.n	80100ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	e00f      	b.n	80100cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2100      	movs	r1, #0
 80100b2:	4618      	mov	r0, r3
 80100b4:	f002 fac0 	bl	8012638 <SDMMC_CmdBusWidth>
 80100b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d001      	beq.n	80100c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	e003      	b.n	80100cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80100c4:	2300      	movs	r3, #0
 80100c6:	e001      	b.n	80100cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80100c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3718      	adds	r7, #24
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80100d4:	b590      	push	{r4, r7, lr}
 80100d6:	b08f      	sub	sp, #60	; 0x3c
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80100de:	f7f6 ff3f 	bl	8006f60 <HAL_GetTick>
 80100e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80100e4:	2300      	movs	r3, #0
 80100e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80100e8:	2300      	movs	r3, #0
 80100ea:	60bb      	str	r3, [r7, #8]
 80100ec:	2300      	movs	r3, #0
 80100ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2108      	movs	r1, #8
 80100fa:	4618      	mov	r0, r3
 80100fc:	f002 f92a 	bl	8012354 <SDMMC_CmdBlockLength>
 8010100:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010104:	2b00      	cmp	r3, #0
 8010106:	d001      	beq.n	801010c <SD_FindSCR+0x38>
  {
    return errorstate;
 8010108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801010a:	e0b2      	b.n	8010272 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010114:	041b      	lsls	r3, r3, #16
 8010116:	4619      	mov	r1, r3
 8010118:	4610      	mov	r0, r2
 801011a:	f002 fa47 	bl	80125ac <SDMMC_CmdAppCommand>
 801011e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010122:	2b00      	cmp	r3, #0
 8010124:	d001      	beq.n	801012a <SD_FindSCR+0x56>
  {
    return errorstate;
 8010126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010128:	e0a3      	b.n	8010272 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801012a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801012e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8010130:	2308      	movs	r3, #8
 8010132:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010134:	2330      	movs	r3, #48	; 0x30
 8010136:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010138:	2302      	movs	r3, #2
 801013a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801013c:	2300      	movs	r3, #0
 801013e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010140:	2301      	movs	r3, #1
 8010142:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f107 0210 	add.w	r2, r7, #16
 801014c:	4611      	mov	r1, r2
 801014e:	4618      	mov	r0, r3
 8010150:	f002 f8d4 	bl	80122fc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4618      	mov	r0, r3
 801015a:	f002 fa8f 	bl	801267c <SDMMC_CmdSendSCR>
 801015e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010162:	2b00      	cmp	r3, #0
 8010164:	d02a      	beq.n	80101bc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8010166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010168:	e083      	b.n	8010272 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00f      	beq.n	8010198 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6819      	ldr	r1, [r3, #0]
 801017c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	f107 0208 	add.w	r2, r7, #8
 8010184:	18d4      	adds	r4, r2, r3
 8010186:	4608      	mov	r0, r1
 8010188:	f002 f844 	bl	8012214 <SDMMC_ReadFIFO>
 801018c:	4603      	mov	r3, r0
 801018e:	6023      	str	r3, [r4, #0]
      index++;
 8010190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010192:	3301      	adds	r3, #1
 8010194:	637b      	str	r3, [r7, #52]	; 0x34
 8010196:	e006      	b.n	80101a6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801019e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d012      	beq.n	80101cc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80101a6:	f7f6 fedb 	bl	8006f60 <HAL_GetTick>
 80101aa:	4602      	mov	r2, r0
 80101ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ae:	1ad3      	subs	r3, r2, r3
 80101b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101b4:	d102      	bne.n	80101bc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80101b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80101ba:	e05a      	b.n	8010272 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101c2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d0cf      	beq.n	801016a <SD_FindSCR+0x96>
 80101ca:	e000      	b.n	80101ce <SD_FindSCR+0xfa>
      break;
 80101cc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101d4:	f003 0308 	and.w	r3, r3, #8
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d005      	beq.n	80101e8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2208      	movs	r2, #8
 80101e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80101e4:	2308      	movs	r3, #8
 80101e6:	e044      	b.n	8010272 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ee:	f003 0302 	and.w	r3, r3, #2
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d005      	beq.n	8010202 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2202      	movs	r2, #2
 80101fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80101fe:	2302      	movs	r3, #2
 8010200:	e037      	b.n	8010272 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010208:	f003 0320 	and.w	r3, r3, #32
 801020c:	2b00      	cmp	r3, #0
 801020e:	d005      	beq.n	801021c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2220      	movs	r2, #32
 8010216:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010218:	2320      	movs	r3, #32
 801021a:	e02a      	b.n	8010272 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f240 523a 	movw	r2, #1338	; 0x53a
 8010224:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	061a      	lsls	r2, r3, #24
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	021b      	lsls	r3, r3, #8
 801022e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010232:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	0a1b      	lsrs	r3, r3, #8
 8010238:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801023c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	0e1b      	lsrs	r3, r3, #24
 8010242:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010246:	601a      	str	r2, [r3, #0]
    scr++;
 8010248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024a:	3304      	adds	r3, #4
 801024c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	061a      	lsls	r2, r3, #24
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	021b      	lsls	r3, r3, #8
 8010256:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801025a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	0a1b      	lsrs	r3, r3, #8
 8010260:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010264:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	0e1b      	lsrs	r3, r3, #24
 801026a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8010270:	2300      	movs	r3, #0
}
 8010272:	4618      	mov	r0, r3
 8010274:	373c      	adds	r7, #60	; 0x3c
 8010276:	46bd      	mov	sp, r7
 8010278:	bd90      	pop	{r4, r7, pc}

0801027a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 801027a:	b580      	push	{r7, lr}
 801027c:	b082      	sub	sp, #8
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
 8010282:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d101      	bne.n	801028e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 801028a:	2301      	movs	r3, #1
 801028c:	e025      	b.n	80102da <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010294:	b2db      	uxtb	r3, r3
 8010296:	2b00      	cmp	r3, #0
 8010298:	d106      	bne.n	80102a8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2200      	movs	r2, #0
 801029e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f7f3 fc60 	bl	8003b68 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2202      	movs	r2, #2
 80102ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	3304      	adds	r3, #4
 80102b8:	4619      	mov	r1, r3
 80102ba:	4610      	mov	r0, r2
 80102bc:	f001 fe54 	bl	8011f68 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6818      	ldr	r0, [r3, #0]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	461a      	mov	r2, r3
 80102ca:	6839      	ldr	r1, [r7, #0]
 80102cc:	f001 febe 	bl	801204c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2201      	movs	r2, #1
 80102d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80102d8:	2300      	movs	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3708      	adds	r7, #8
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}

080102e2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80102e2:	b580      	push	{r7, lr}
 80102e4:	b084      	sub	sp, #16
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	60f8      	str	r0, [r7, #12]
 80102ea:	60b9      	str	r1, [r7, #8]
 80102ec:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	2b02      	cmp	r3, #2
 80102f8:	d101      	bne.n	80102fe <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80102fa:	2302      	movs	r3, #2
 80102fc:	e018      	b.n	8010330 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2202      	movs	r2, #2
 8010302:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	68b9      	ldr	r1, [r7, #8]
 801030e:	4618      	mov	r0, r3
 8010310:	f001 ff1c 	bl	801214c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2b02      	cmp	r3, #2
 801031a:	d104      	bne.n	8010326 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2205      	movs	r2, #5
 8010320:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8010324:	e003      	b.n	801032e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2201      	movs	r2, #1
 801032a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 801032e:	2300      	movs	r3, #0
}
 8010330:	4618      	mov	r0, r3
 8010332:	3710      	adds	r7, #16
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b02      	cmp	r3, #2
 801034c:	d101      	bne.n	8010352 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 801034e:	2302      	movs	r3, #2
 8010350:	e00e      	b.n	8010370 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2202      	movs	r2, #2
 8010356:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	6839      	ldr	r1, [r7, #0]
 8010360:	4618      	mov	r0, r3
 8010362:	f001 ff17 	bl	8012194 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2201      	movs	r2, #1
 801036a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 801036e:	2300      	movs	r3, #0
}
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d101      	bne.n	801038a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8010386:	2301      	movs	r3, #1
 8010388:	e04c      	b.n	8010424 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010390:	b2db      	uxtb	r3, r3
 8010392:	2b00      	cmp	r3, #0
 8010394:	d106      	bne.n	80103a4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2200      	movs	r2, #0
 801039a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7f3 f916 	bl	80035d0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2202      	movs	r2, #2
 80103a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	f022 0203 	bic.w	r2, r2, #3
 80103ba:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80103c4:	68fa      	ldr	r2, [r7, #12]
 80103c6:	4b19      	ldr	r3, [pc, #100]	; (801042c <HAL_SPDIFRX_Init+0xb4>)
 80103c8:	4013      	ands	r3, r2
 80103ca:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80103d4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80103da:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80103e0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80103e6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80103ec:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80103f2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80103f8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80103fe:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8010404:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	4313      	orrs	r3, r2
 801040a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	68fa      	ldr	r2, [r7, #12]
 8010412:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2201      	movs	r2, #1
 801041e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8010422:	2300      	movs	r3, #0
}
 8010424:	4618      	mov	r0, r3
 8010426:	3710      	adds	r7, #16
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	fff88407 	.word	0xfff88407

08010430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d101      	bne.n	8010442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801043e:	2301      	movs	r3, #1
 8010440:	e049      	b.n	80104d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010448:	b2db      	uxtb	r3, r3
 801044a:	2b00      	cmp	r3, #0
 801044c:	d106      	bne.n	801045c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2200      	movs	r2, #0
 8010452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	f7f3 f8fc 	bl	8003654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2202      	movs	r2, #2
 8010460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	3304      	adds	r3, #4
 801046c:	4619      	mov	r1, r3
 801046e:	4610      	mov	r0, r2
 8010470:	f000 fc22 	bl	8010cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2201      	movs	r2, #1
 8010478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2201      	movs	r2, #1
 8010480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2201      	movs	r2, #1
 8010488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2201      	movs	r2, #1
 8010490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2201      	movs	r2, #1
 8010498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2201      	movs	r2, #1
 80104a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2201      	movs	r2, #1
 80104a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2201      	movs	r2, #1
 80104b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2201      	movs	r2, #1
 80104b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2201      	movs	r2, #1
 80104c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2201      	movs	r2, #1
 80104c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2201      	movs	r2, #1
 80104d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80104d4:	2300      	movs	r3, #0
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3708      	adds	r7, #8
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
	...

080104e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b085      	sub	sp, #20
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d001      	beq.n	80104f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80104f4:	2301      	movs	r3, #1
 80104f6:	e054      	b.n	80105a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2202      	movs	r2, #2
 80104fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	68da      	ldr	r2, [r3, #12]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f042 0201 	orr.w	r2, r2, #1
 801050e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a26      	ldr	r2, [pc, #152]	; (80105b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d022      	beq.n	8010560 <HAL_TIM_Base_Start_IT+0x80>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010522:	d01d      	beq.n	8010560 <HAL_TIM_Base_Start_IT+0x80>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a22      	ldr	r2, [pc, #136]	; (80105b4 <HAL_TIM_Base_Start_IT+0xd4>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d018      	beq.n	8010560 <HAL_TIM_Base_Start_IT+0x80>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a21      	ldr	r2, [pc, #132]	; (80105b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d013      	beq.n	8010560 <HAL_TIM_Base_Start_IT+0x80>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4a1f      	ldr	r2, [pc, #124]	; (80105bc <HAL_TIM_Base_Start_IT+0xdc>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d00e      	beq.n	8010560 <HAL_TIM_Base_Start_IT+0x80>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4a1e      	ldr	r2, [pc, #120]	; (80105c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d009      	beq.n	8010560 <HAL_TIM_Base_Start_IT+0x80>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4a1c      	ldr	r2, [pc, #112]	; (80105c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d004      	beq.n	8010560 <HAL_TIM_Base_Start_IT+0x80>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4a1b      	ldr	r2, [pc, #108]	; (80105c8 <HAL_TIM_Base_Start_IT+0xe8>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d115      	bne.n	801058c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	689a      	ldr	r2, [r3, #8]
 8010566:	4b19      	ldr	r3, [pc, #100]	; (80105cc <HAL_TIM_Base_Start_IT+0xec>)
 8010568:	4013      	ands	r3, r2
 801056a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2b06      	cmp	r3, #6
 8010570:	d015      	beq.n	801059e <HAL_TIM_Base_Start_IT+0xbe>
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010578:	d011      	beq.n	801059e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f042 0201 	orr.w	r2, r2, #1
 8010588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801058a:	e008      	b.n	801059e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f042 0201 	orr.w	r2, r2, #1
 801059a:	601a      	str	r2, [r3, #0]
 801059c:	e000      	b.n	80105a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801059e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80105a0:	2300      	movs	r3, #0
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3714      	adds	r7, #20
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	40010000 	.word	0x40010000
 80105b4:	40000400 	.word	0x40000400
 80105b8:	40000800 	.word	0x40000800
 80105bc:	40000c00 	.word	0x40000c00
 80105c0:	40010400 	.word	0x40010400
 80105c4:	40014000 	.word	0x40014000
 80105c8:	40001800 	.word	0x40001800
 80105cc:	00010007 	.word	0x00010007

080105d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d101      	bne.n	80105e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80105de:	2301      	movs	r3, #1
 80105e0:	e049      	b.n	8010676 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d106      	bne.n	80105fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2200      	movs	r2, #0
 80105f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7f3 f89a 	bl	8003730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2202      	movs	r2, #2
 8010600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	3304      	adds	r3, #4
 801060c:	4619      	mov	r1, r3
 801060e:	4610      	mov	r0, r2
 8010610:	f000 fb52 	bl	8010cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2201      	movs	r2, #1
 8010618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2201      	movs	r2, #1
 8010620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2201      	movs	r2, #1
 8010628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2201      	movs	r2, #1
 8010630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2201      	movs	r2, #1
 8010638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2201      	movs	r2, #1
 8010640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2201      	movs	r2, #1
 8010648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2201      	movs	r2, #1
 8010650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2201      	movs	r2, #1
 8010658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2201      	movs	r2, #1
 8010660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2201      	movs	r2, #1
 8010668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2201      	movs	r2, #1
 8010670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b082      	sub	sp, #8
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	691b      	ldr	r3, [r3, #16]
 801068c:	f003 0302 	and.w	r3, r3, #2
 8010690:	2b02      	cmp	r3, #2
 8010692:	d122      	bne.n	80106da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	68db      	ldr	r3, [r3, #12]
 801069a:	f003 0302 	and.w	r3, r3, #2
 801069e:	2b02      	cmp	r3, #2
 80106a0:	d11b      	bne.n	80106da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f06f 0202 	mvn.w	r2, #2
 80106aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2201      	movs	r2, #1
 80106b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	699b      	ldr	r3, [r3, #24]
 80106b8:	f003 0303 	and.w	r3, r3, #3
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d003      	beq.n	80106c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f000 fadb 	bl	8010c7c <HAL_TIM_IC_CaptureCallback>
 80106c6:	e005      	b.n	80106d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f000 facd 	bl	8010c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 fade 	bl	8010c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	691b      	ldr	r3, [r3, #16]
 80106e0:	f003 0304 	and.w	r3, r3, #4
 80106e4:	2b04      	cmp	r3, #4
 80106e6:	d122      	bne.n	801072e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	f003 0304 	and.w	r3, r3, #4
 80106f2:	2b04      	cmp	r3, #4
 80106f4:	d11b      	bne.n	801072e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f06f 0204 	mvn.w	r2, #4
 80106fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2202      	movs	r2, #2
 8010704:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	699b      	ldr	r3, [r3, #24]
 801070c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010710:	2b00      	cmp	r3, #0
 8010712:	d003      	beq.n	801071c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 fab1 	bl	8010c7c <HAL_TIM_IC_CaptureCallback>
 801071a:	e005      	b.n	8010728 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f000 faa3 	bl	8010c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f000 fab4 	bl	8010c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2200      	movs	r2, #0
 801072c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	691b      	ldr	r3, [r3, #16]
 8010734:	f003 0308 	and.w	r3, r3, #8
 8010738:	2b08      	cmp	r3, #8
 801073a:	d122      	bne.n	8010782 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	f003 0308 	and.w	r3, r3, #8
 8010746:	2b08      	cmp	r3, #8
 8010748:	d11b      	bne.n	8010782 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f06f 0208 	mvn.w	r2, #8
 8010752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2204      	movs	r2, #4
 8010758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	69db      	ldr	r3, [r3, #28]
 8010760:	f003 0303 	and.w	r3, r3, #3
 8010764:	2b00      	cmp	r3, #0
 8010766:	d003      	beq.n	8010770 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 fa87 	bl	8010c7c <HAL_TIM_IC_CaptureCallback>
 801076e:	e005      	b.n	801077c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f000 fa79 	bl	8010c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 fa8a 	bl	8010c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2200      	movs	r2, #0
 8010780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	691b      	ldr	r3, [r3, #16]
 8010788:	f003 0310 	and.w	r3, r3, #16
 801078c:	2b10      	cmp	r3, #16
 801078e:	d122      	bne.n	80107d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	f003 0310 	and.w	r3, r3, #16
 801079a:	2b10      	cmp	r3, #16
 801079c:	d11b      	bne.n	80107d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f06f 0210 	mvn.w	r2, #16
 80107a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2208      	movs	r2, #8
 80107ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	69db      	ldr	r3, [r3, #28]
 80107b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d003      	beq.n	80107c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 fa5d 	bl	8010c7c <HAL_TIM_IC_CaptureCallback>
 80107c2:	e005      	b.n	80107d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 fa4f 	bl	8010c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f000 fa60 	bl	8010c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	691b      	ldr	r3, [r3, #16]
 80107dc:	f003 0301 	and.w	r3, r3, #1
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d10e      	bne.n	8010802 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	f003 0301 	and.w	r3, r3, #1
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	d107      	bne.n	8010802 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f06f 0201 	mvn.w	r2, #1
 80107fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f7f2 fa83 	bl	8002d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	691b      	ldr	r3, [r3, #16]
 8010808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801080c:	2b80      	cmp	r3, #128	; 0x80
 801080e:	d10e      	bne.n	801082e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801081a:	2b80      	cmp	r3, #128	; 0x80
 801081c:	d107      	bne.n	801082e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 fef3 	bl	8011614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	691b      	ldr	r3, [r3, #16]
 8010834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801083c:	d10e      	bne.n	801085c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010848:	2b80      	cmp	r3, #128	; 0x80
 801084a:	d107      	bne.n	801085c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f000 fee6 	bl	8011628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	691b      	ldr	r3, [r3, #16]
 8010862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010866:	2b40      	cmp	r3, #64	; 0x40
 8010868:	d10e      	bne.n	8010888 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	68db      	ldr	r3, [r3, #12]
 8010870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010874:	2b40      	cmp	r3, #64	; 0x40
 8010876:	d107      	bne.n	8010888 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f000 fa0e 	bl	8010ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	691b      	ldr	r3, [r3, #16]
 801088e:	f003 0320 	and.w	r3, r3, #32
 8010892:	2b20      	cmp	r3, #32
 8010894:	d10e      	bne.n	80108b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	f003 0320 	and.w	r3, r3, #32
 80108a0:	2b20      	cmp	r3, #32
 80108a2:	d107      	bne.n	80108b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f06f 0220 	mvn.w	r2, #32
 80108ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 fea6 	bl	8011600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80108b4:	bf00      	nop
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b084      	sub	sp, #16
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	60b9      	str	r1, [r7, #8]
 80108c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d101      	bne.n	80108d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80108d2:	2302      	movs	r3, #2
 80108d4:	e0fd      	b.n	8010ad2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2201      	movs	r2, #1
 80108da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2b14      	cmp	r3, #20
 80108e2:	f200 80f0 	bhi.w	8010ac6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80108e6:	a201      	add	r2, pc, #4	; (adr r2, 80108ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80108e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ec:	08010941 	.word	0x08010941
 80108f0:	08010ac7 	.word	0x08010ac7
 80108f4:	08010ac7 	.word	0x08010ac7
 80108f8:	08010ac7 	.word	0x08010ac7
 80108fc:	08010981 	.word	0x08010981
 8010900:	08010ac7 	.word	0x08010ac7
 8010904:	08010ac7 	.word	0x08010ac7
 8010908:	08010ac7 	.word	0x08010ac7
 801090c:	080109c3 	.word	0x080109c3
 8010910:	08010ac7 	.word	0x08010ac7
 8010914:	08010ac7 	.word	0x08010ac7
 8010918:	08010ac7 	.word	0x08010ac7
 801091c:	08010a03 	.word	0x08010a03
 8010920:	08010ac7 	.word	0x08010ac7
 8010924:	08010ac7 	.word	0x08010ac7
 8010928:	08010ac7 	.word	0x08010ac7
 801092c:	08010a45 	.word	0x08010a45
 8010930:	08010ac7 	.word	0x08010ac7
 8010934:	08010ac7 	.word	0x08010ac7
 8010938:	08010ac7 	.word	0x08010ac7
 801093c:	08010a85 	.word	0x08010a85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	68b9      	ldr	r1, [r7, #8]
 8010946:	4618      	mov	r0, r3
 8010948:	f000 fa56 	bl	8010df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	699a      	ldr	r2, [r3, #24]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f042 0208 	orr.w	r2, r2, #8
 801095a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	699a      	ldr	r2, [r3, #24]
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f022 0204 	bic.w	r2, r2, #4
 801096a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	6999      	ldr	r1, [r3, #24]
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	691a      	ldr	r2, [r3, #16]
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	430a      	orrs	r2, r1
 801097c:	619a      	str	r2, [r3, #24]
      break;
 801097e:	e0a3      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	68b9      	ldr	r1, [r7, #8]
 8010986:	4618      	mov	r0, r3
 8010988:	f000 faa8 	bl	8010edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	699a      	ldr	r2, [r3, #24]
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801099a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	699a      	ldr	r2, [r3, #24]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	6999      	ldr	r1, [r3, #24]
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	691b      	ldr	r3, [r3, #16]
 80109b6:	021a      	lsls	r2, r3, #8
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	430a      	orrs	r2, r1
 80109be:	619a      	str	r2, [r3, #24]
      break;
 80109c0:	e082      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	68b9      	ldr	r1, [r7, #8]
 80109c8:	4618      	mov	r0, r3
 80109ca:	f000 faff 	bl	8010fcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	69da      	ldr	r2, [r3, #28]
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f042 0208 	orr.w	r2, r2, #8
 80109dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	69da      	ldr	r2, [r3, #28]
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f022 0204 	bic.w	r2, r2, #4
 80109ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	69d9      	ldr	r1, [r3, #28]
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	691a      	ldr	r2, [r3, #16]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	430a      	orrs	r2, r1
 80109fe:	61da      	str	r2, [r3, #28]
      break;
 8010a00:	e062      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	68b9      	ldr	r1, [r7, #8]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f000 fb55 	bl	80110b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	69da      	ldr	r2, [r3, #28]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	69da      	ldr	r2, [r3, #28]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	69d9      	ldr	r1, [r3, #28]
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	691b      	ldr	r3, [r3, #16]
 8010a38:	021a      	lsls	r2, r3, #8
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	430a      	orrs	r2, r1
 8010a40:	61da      	str	r2, [r3, #28]
      break;
 8010a42:	e041      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	68b9      	ldr	r1, [r7, #8]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f000 fb8c 	bl	8011168 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	f042 0208 	orr.w	r2, r2, #8
 8010a5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f022 0204 	bic.w	r2, r2, #4
 8010a6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	691a      	ldr	r2, [r3, #16]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	430a      	orrs	r2, r1
 8010a80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010a82:	e021      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	68b9      	ldr	r1, [r7, #8]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f000 fbbe 	bl	801120c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010aae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	691b      	ldr	r3, [r3, #16]
 8010aba:	021a      	lsls	r2, r3, #8
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	430a      	orrs	r2, r1
 8010ac2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010ac4:	e000      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010ac6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010ad0:	2300      	movs	r3, #0
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3710      	adds	r7, #16
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop

08010adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b084      	sub	sp, #16
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	d101      	bne.n	8010af4 <HAL_TIM_ConfigClockSource+0x18>
 8010af0:	2302      	movs	r3, #2
 8010af2:	e0b3      	b.n	8010c5c <HAL_TIM_ConfigClockSource+0x180>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2201      	movs	r2, #1
 8010af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2202      	movs	r2, #2
 8010b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	689b      	ldr	r3, [r3, #8]
 8010b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	4b55      	ldr	r3, [pc, #340]	; (8010c64 <HAL_TIM_ConfigClockSource+0x188>)
 8010b10:	4013      	ands	r3, r2
 8010b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010b1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	68fa      	ldr	r2, [r7, #12]
 8010b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b2c:	d03e      	beq.n	8010bac <HAL_TIM_ConfigClockSource+0xd0>
 8010b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b32:	f200 8087 	bhi.w	8010c44 <HAL_TIM_ConfigClockSource+0x168>
 8010b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b3a:	f000 8085 	beq.w	8010c48 <HAL_TIM_ConfigClockSource+0x16c>
 8010b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b42:	d87f      	bhi.n	8010c44 <HAL_TIM_ConfigClockSource+0x168>
 8010b44:	2b70      	cmp	r3, #112	; 0x70
 8010b46:	d01a      	beq.n	8010b7e <HAL_TIM_ConfigClockSource+0xa2>
 8010b48:	2b70      	cmp	r3, #112	; 0x70
 8010b4a:	d87b      	bhi.n	8010c44 <HAL_TIM_ConfigClockSource+0x168>
 8010b4c:	2b60      	cmp	r3, #96	; 0x60
 8010b4e:	d050      	beq.n	8010bf2 <HAL_TIM_ConfigClockSource+0x116>
 8010b50:	2b60      	cmp	r3, #96	; 0x60
 8010b52:	d877      	bhi.n	8010c44 <HAL_TIM_ConfigClockSource+0x168>
 8010b54:	2b50      	cmp	r3, #80	; 0x50
 8010b56:	d03c      	beq.n	8010bd2 <HAL_TIM_ConfigClockSource+0xf6>
 8010b58:	2b50      	cmp	r3, #80	; 0x50
 8010b5a:	d873      	bhi.n	8010c44 <HAL_TIM_ConfigClockSource+0x168>
 8010b5c:	2b40      	cmp	r3, #64	; 0x40
 8010b5e:	d058      	beq.n	8010c12 <HAL_TIM_ConfigClockSource+0x136>
 8010b60:	2b40      	cmp	r3, #64	; 0x40
 8010b62:	d86f      	bhi.n	8010c44 <HAL_TIM_ConfigClockSource+0x168>
 8010b64:	2b30      	cmp	r3, #48	; 0x30
 8010b66:	d064      	beq.n	8010c32 <HAL_TIM_ConfigClockSource+0x156>
 8010b68:	2b30      	cmp	r3, #48	; 0x30
 8010b6a:	d86b      	bhi.n	8010c44 <HAL_TIM_ConfigClockSource+0x168>
 8010b6c:	2b20      	cmp	r3, #32
 8010b6e:	d060      	beq.n	8010c32 <HAL_TIM_ConfigClockSource+0x156>
 8010b70:	2b20      	cmp	r3, #32
 8010b72:	d867      	bhi.n	8010c44 <HAL_TIM_ConfigClockSource+0x168>
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d05c      	beq.n	8010c32 <HAL_TIM_ConfigClockSource+0x156>
 8010b78:	2b10      	cmp	r3, #16
 8010b7a:	d05a      	beq.n	8010c32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8010b7c:	e062      	b.n	8010c44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6818      	ldr	r0, [r3, #0]
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	6899      	ldr	r1, [r3, #8]
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	685a      	ldr	r2, [r3, #4]
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	68db      	ldr	r3, [r3, #12]
 8010b8e:	f000 fc0b 	bl	80113a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	689b      	ldr	r3, [r3, #8]
 8010b98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010ba0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	68fa      	ldr	r2, [r7, #12]
 8010ba8:	609a      	str	r2, [r3, #8]
      break;
 8010baa:	e04e      	b.n	8010c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6818      	ldr	r0, [r3, #0]
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	6899      	ldr	r1, [r3, #8]
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	685a      	ldr	r2, [r3, #4]
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	f000 fbf4 	bl	80113a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	689a      	ldr	r2, [r3, #8]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010bce:	609a      	str	r2, [r3, #8]
      break;
 8010bd0:	e03b      	b.n	8010c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6818      	ldr	r0, [r3, #0]
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	6859      	ldr	r1, [r3, #4]
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	461a      	mov	r2, r3
 8010be0:	f000 fb68 	bl	80112b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2150      	movs	r1, #80	; 0x50
 8010bea:	4618      	mov	r0, r3
 8010bec:	f000 fbc1 	bl	8011372 <TIM_ITRx_SetConfig>
      break;
 8010bf0:	e02b      	b.n	8010c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6818      	ldr	r0, [r3, #0]
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	6859      	ldr	r1, [r3, #4]
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	461a      	mov	r2, r3
 8010c00:	f000 fb87 	bl	8011312 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2160      	movs	r1, #96	; 0x60
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f000 fbb1 	bl	8011372 <TIM_ITRx_SetConfig>
      break;
 8010c10:	e01b      	b.n	8010c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6818      	ldr	r0, [r3, #0]
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	6859      	ldr	r1, [r3, #4]
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	461a      	mov	r2, r3
 8010c20:	f000 fb48 	bl	80112b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2140      	movs	r1, #64	; 0x40
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f000 fba1 	bl	8011372 <TIM_ITRx_SetConfig>
      break;
 8010c30:	e00b      	b.n	8010c4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	4610      	mov	r0, r2
 8010c3e:	f000 fb98 	bl	8011372 <TIM_ITRx_SetConfig>
        break;
 8010c42:	e002      	b.n	8010c4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010c44:	bf00      	nop
 8010c46:	e000      	b.n	8010c4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010c48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2200      	movs	r2, #0
 8010c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010c5a:	2300      	movs	r3, #0
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	fffeff88 	.word	0xfffeff88

08010c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010c70:	bf00      	nop
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010c84:	bf00      	nop
 8010c86:	370c      	adds	r7, #12
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr

08010c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010c98:	bf00      	nop
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b083      	sub	sp, #12
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010cac:	bf00      	nop
 8010cae:	370c      	adds	r7, #12
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr

08010cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b085      	sub	sp, #20
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	4a40      	ldr	r2, [pc, #256]	; (8010dcc <TIM_Base_SetConfig+0x114>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d013      	beq.n	8010cf8 <TIM_Base_SetConfig+0x40>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010cd6:	d00f      	beq.n	8010cf8 <TIM_Base_SetConfig+0x40>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	4a3d      	ldr	r2, [pc, #244]	; (8010dd0 <TIM_Base_SetConfig+0x118>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d00b      	beq.n	8010cf8 <TIM_Base_SetConfig+0x40>
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	4a3c      	ldr	r2, [pc, #240]	; (8010dd4 <TIM_Base_SetConfig+0x11c>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d007      	beq.n	8010cf8 <TIM_Base_SetConfig+0x40>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4a3b      	ldr	r2, [pc, #236]	; (8010dd8 <TIM_Base_SetConfig+0x120>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d003      	beq.n	8010cf8 <TIM_Base_SetConfig+0x40>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	4a3a      	ldr	r2, [pc, #232]	; (8010ddc <TIM_Base_SetConfig+0x124>)
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d108      	bne.n	8010d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	68fa      	ldr	r2, [r7, #12]
 8010d06:	4313      	orrs	r3, r2
 8010d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	4a2f      	ldr	r2, [pc, #188]	; (8010dcc <TIM_Base_SetConfig+0x114>)
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d02b      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d18:	d027      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	4a2c      	ldr	r2, [pc, #176]	; (8010dd0 <TIM_Base_SetConfig+0x118>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d023      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	4a2b      	ldr	r2, [pc, #172]	; (8010dd4 <TIM_Base_SetConfig+0x11c>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d01f      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	4a2a      	ldr	r2, [pc, #168]	; (8010dd8 <TIM_Base_SetConfig+0x120>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d01b      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	4a29      	ldr	r2, [pc, #164]	; (8010ddc <TIM_Base_SetConfig+0x124>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d017      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	4a28      	ldr	r2, [pc, #160]	; (8010de0 <TIM_Base_SetConfig+0x128>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d013      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	4a27      	ldr	r2, [pc, #156]	; (8010de4 <TIM_Base_SetConfig+0x12c>)
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d00f      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	4a26      	ldr	r2, [pc, #152]	; (8010de8 <TIM_Base_SetConfig+0x130>)
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d00b      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	4a25      	ldr	r2, [pc, #148]	; (8010dec <TIM_Base_SetConfig+0x134>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d007      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	4a24      	ldr	r2, [pc, #144]	; (8010df0 <TIM_Base_SetConfig+0x138>)
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d003      	beq.n	8010d6a <TIM_Base_SetConfig+0xb2>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	4a23      	ldr	r2, [pc, #140]	; (8010df4 <TIM_Base_SetConfig+0x13c>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d108      	bne.n	8010d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	695b      	ldr	r3, [r3, #20]
 8010d86:	4313      	orrs	r3, r2
 8010d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	68fa      	ldr	r2, [r7, #12]
 8010d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	689a      	ldr	r2, [r3, #8]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4a0a      	ldr	r2, [pc, #40]	; (8010dcc <TIM_Base_SetConfig+0x114>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d003      	beq.n	8010db0 <TIM_Base_SetConfig+0xf8>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4a0c      	ldr	r2, [pc, #48]	; (8010ddc <TIM_Base_SetConfig+0x124>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d103      	bne.n	8010db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	691a      	ldr	r2, [r3, #16]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2201      	movs	r2, #1
 8010dbc:	615a      	str	r2, [r3, #20]
}
 8010dbe:	bf00      	nop
 8010dc0:	3714      	adds	r7, #20
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc8:	4770      	bx	lr
 8010dca:	bf00      	nop
 8010dcc:	40010000 	.word	0x40010000
 8010dd0:	40000400 	.word	0x40000400
 8010dd4:	40000800 	.word	0x40000800
 8010dd8:	40000c00 	.word	0x40000c00
 8010ddc:	40010400 	.word	0x40010400
 8010de0:	40014000 	.word	0x40014000
 8010de4:	40014400 	.word	0x40014400
 8010de8:	40014800 	.word	0x40014800
 8010dec:	40001800 	.word	0x40001800
 8010df0:	40001c00 	.word	0x40001c00
 8010df4:	40002000 	.word	0x40002000

08010df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b087      	sub	sp, #28
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6a1b      	ldr	r3, [r3, #32]
 8010e06:	f023 0201 	bic.w	r2, r3, #1
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6a1b      	ldr	r3, [r3, #32]
 8010e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	699b      	ldr	r3, [r3, #24]
 8010e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010e20:	68fa      	ldr	r2, [r7, #12]
 8010e22:	4b2b      	ldr	r3, [pc, #172]	; (8010ed0 <TIM_OC1_SetConfig+0xd8>)
 8010e24:	4013      	ands	r3, r2
 8010e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f023 0303 	bic.w	r3, r3, #3
 8010e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	4313      	orrs	r3, r2
 8010e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	f023 0302 	bic.w	r3, r3, #2
 8010e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	689b      	ldr	r3, [r3, #8]
 8010e46:	697a      	ldr	r2, [r7, #20]
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4a21      	ldr	r2, [pc, #132]	; (8010ed4 <TIM_OC1_SetConfig+0xdc>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d003      	beq.n	8010e5c <TIM_OC1_SetConfig+0x64>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	4a20      	ldr	r2, [pc, #128]	; (8010ed8 <TIM_OC1_SetConfig+0xe0>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d10c      	bne.n	8010e76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	f023 0308 	bic.w	r3, r3, #8
 8010e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	68db      	ldr	r3, [r3, #12]
 8010e68:	697a      	ldr	r2, [r7, #20]
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	f023 0304 	bic.w	r3, r3, #4
 8010e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4a16      	ldr	r2, [pc, #88]	; (8010ed4 <TIM_OC1_SetConfig+0xdc>)
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d003      	beq.n	8010e86 <TIM_OC1_SetConfig+0x8e>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4a15      	ldr	r2, [pc, #84]	; (8010ed8 <TIM_OC1_SetConfig+0xe0>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d111      	bne.n	8010eaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	695b      	ldr	r3, [r3, #20]
 8010e9a:	693a      	ldr	r2, [r7, #16]
 8010e9c:	4313      	orrs	r3, r2
 8010e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	699b      	ldr	r3, [r3, #24]
 8010ea4:	693a      	ldr	r2, [r7, #16]
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	693a      	ldr	r2, [r7, #16]
 8010eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	68fa      	ldr	r2, [r7, #12]
 8010eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	685a      	ldr	r2, [r3, #4]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	697a      	ldr	r2, [r7, #20]
 8010ec2:	621a      	str	r2, [r3, #32]
}
 8010ec4:	bf00      	nop
 8010ec6:	371c      	adds	r7, #28
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr
 8010ed0:	fffeff8f 	.word	0xfffeff8f
 8010ed4:	40010000 	.word	0x40010000
 8010ed8:	40010400 	.word	0x40010400

08010edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010edc:	b480      	push	{r7}
 8010ede:	b087      	sub	sp, #28
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6a1b      	ldr	r3, [r3, #32]
 8010eea:	f023 0210 	bic.w	r2, r3, #16
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6a1b      	ldr	r3, [r3, #32]
 8010ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	699b      	ldr	r3, [r3, #24]
 8010f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	4b2e      	ldr	r3, [pc, #184]	; (8010fc0 <TIM_OC2_SetConfig+0xe4>)
 8010f08:	4013      	ands	r3, r2
 8010f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	021b      	lsls	r3, r3, #8
 8010f1a:	68fa      	ldr	r2, [r7, #12]
 8010f1c:	4313      	orrs	r3, r2
 8010f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	f023 0320 	bic.w	r3, r3, #32
 8010f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	689b      	ldr	r3, [r3, #8]
 8010f2c:	011b      	lsls	r3, r3, #4
 8010f2e:	697a      	ldr	r2, [r7, #20]
 8010f30:	4313      	orrs	r3, r2
 8010f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	4a23      	ldr	r2, [pc, #140]	; (8010fc4 <TIM_OC2_SetConfig+0xe8>)
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d003      	beq.n	8010f44 <TIM_OC2_SetConfig+0x68>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4a22      	ldr	r2, [pc, #136]	; (8010fc8 <TIM_OC2_SetConfig+0xec>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d10d      	bne.n	8010f60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	011b      	lsls	r3, r3, #4
 8010f52:	697a      	ldr	r2, [r7, #20]
 8010f54:	4313      	orrs	r3, r2
 8010f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	4a18      	ldr	r2, [pc, #96]	; (8010fc4 <TIM_OC2_SetConfig+0xe8>)
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d003      	beq.n	8010f70 <TIM_OC2_SetConfig+0x94>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	4a17      	ldr	r2, [pc, #92]	; (8010fc8 <TIM_OC2_SetConfig+0xec>)
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	d113      	bne.n	8010f98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	695b      	ldr	r3, [r3, #20]
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	693a      	ldr	r2, [r7, #16]
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	699b      	ldr	r3, [r3, #24]
 8010f90:	009b      	lsls	r3, r3, #2
 8010f92:	693a      	ldr	r2, [r7, #16]
 8010f94:	4313      	orrs	r3, r2
 8010f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	693a      	ldr	r2, [r7, #16]
 8010f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	685a      	ldr	r2, [r3, #4]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	697a      	ldr	r2, [r7, #20]
 8010fb0:	621a      	str	r2, [r3, #32]
}
 8010fb2:	bf00      	nop
 8010fb4:	371c      	adds	r7, #28
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	feff8fff 	.word	0xfeff8fff
 8010fc4:	40010000 	.word	0x40010000
 8010fc8:	40010400 	.word	0x40010400

08010fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b087      	sub	sp, #28
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6a1b      	ldr	r3, [r3, #32]
 8010fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6a1b      	ldr	r3, [r3, #32]
 8010fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	69db      	ldr	r3, [r3, #28]
 8010ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010ff4:	68fa      	ldr	r2, [r7, #12]
 8010ff6:	4b2d      	ldr	r3, [pc, #180]	; (80110ac <TIM_OC3_SetConfig+0xe0>)
 8010ff8:	4013      	ands	r3, r2
 8010ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f023 0303 	bic.w	r3, r3, #3
 8011002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	68fa      	ldr	r2, [r7, #12]
 801100a:	4313      	orrs	r3, r2
 801100c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	689b      	ldr	r3, [r3, #8]
 801101a:	021b      	lsls	r3, r3, #8
 801101c:	697a      	ldr	r2, [r7, #20]
 801101e:	4313      	orrs	r3, r2
 8011020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4a22      	ldr	r2, [pc, #136]	; (80110b0 <TIM_OC3_SetConfig+0xe4>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d003      	beq.n	8011032 <TIM_OC3_SetConfig+0x66>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4a21      	ldr	r2, [pc, #132]	; (80110b4 <TIM_OC3_SetConfig+0xe8>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d10d      	bne.n	801104e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	021b      	lsls	r3, r3, #8
 8011040:	697a      	ldr	r2, [r7, #20]
 8011042:	4313      	orrs	r3, r2
 8011044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801104c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	4a17      	ldr	r2, [pc, #92]	; (80110b0 <TIM_OC3_SetConfig+0xe4>)
 8011052:	4293      	cmp	r3, r2
 8011054:	d003      	beq.n	801105e <TIM_OC3_SetConfig+0x92>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	4a16      	ldr	r2, [pc, #88]	; (80110b4 <TIM_OC3_SetConfig+0xe8>)
 801105a:	4293      	cmp	r3, r2
 801105c:	d113      	bne.n	8011086 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801106c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	695b      	ldr	r3, [r3, #20]
 8011072:	011b      	lsls	r3, r3, #4
 8011074:	693a      	ldr	r2, [r7, #16]
 8011076:	4313      	orrs	r3, r2
 8011078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	699b      	ldr	r3, [r3, #24]
 801107e:	011b      	lsls	r3, r3, #4
 8011080:	693a      	ldr	r2, [r7, #16]
 8011082:	4313      	orrs	r3, r2
 8011084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	693a      	ldr	r2, [r7, #16]
 801108a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	68fa      	ldr	r2, [r7, #12]
 8011090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	685a      	ldr	r2, [r3, #4]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	697a      	ldr	r2, [r7, #20]
 801109e:	621a      	str	r2, [r3, #32]
}
 80110a0:	bf00      	nop
 80110a2:	371c      	adds	r7, #28
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr
 80110ac:	fffeff8f 	.word	0xfffeff8f
 80110b0:	40010000 	.word	0x40010000
 80110b4:	40010400 	.word	0x40010400

080110b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b087      	sub	sp, #28
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6a1b      	ldr	r3, [r3, #32]
 80110c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6a1b      	ldr	r3, [r3, #32]
 80110d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	685b      	ldr	r3, [r3, #4]
 80110d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	69db      	ldr	r3, [r3, #28]
 80110de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80110e0:	68fa      	ldr	r2, [r7, #12]
 80110e2:	4b1e      	ldr	r3, [pc, #120]	; (801115c <TIM_OC4_SetConfig+0xa4>)
 80110e4:	4013      	ands	r3, r2
 80110e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	021b      	lsls	r3, r3, #8
 80110f6:	68fa      	ldr	r2, [r7, #12]
 80110f8:	4313      	orrs	r3, r2
 80110fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	689b      	ldr	r3, [r3, #8]
 8011108:	031b      	lsls	r3, r3, #12
 801110a:	693a      	ldr	r2, [r7, #16]
 801110c:	4313      	orrs	r3, r2
 801110e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	4a13      	ldr	r2, [pc, #76]	; (8011160 <TIM_OC4_SetConfig+0xa8>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d003      	beq.n	8011120 <TIM_OC4_SetConfig+0x68>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	4a12      	ldr	r2, [pc, #72]	; (8011164 <TIM_OC4_SetConfig+0xac>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d109      	bne.n	8011134 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	695b      	ldr	r3, [r3, #20]
 801112c:	019b      	lsls	r3, r3, #6
 801112e:	697a      	ldr	r2, [r7, #20]
 8011130:	4313      	orrs	r3, r2
 8011132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	697a      	ldr	r2, [r7, #20]
 8011138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	68fa      	ldr	r2, [r7, #12]
 801113e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	685a      	ldr	r2, [r3, #4]
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	693a      	ldr	r2, [r7, #16]
 801114c:	621a      	str	r2, [r3, #32]
}
 801114e:	bf00      	nop
 8011150:	371c      	adds	r7, #28
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr
 801115a:	bf00      	nop
 801115c:	feff8fff 	.word	0xfeff8fff
 8011160:	40010000 	.word	0x40010000
 8011164:	40010400 	.word	0x40010400

08011168 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011168:	b480      	push	{r7}
 801116a:	b087      	sub	sp, #28
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6a1b      	ldr	r3, [r3, #32]
 8011176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6a1b      	ldr	r3, [r3, #32]
 8011182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801118e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011190:	68fa      	ldr	r2, [r7, #12]
 8011192:	4b1b      	ldr	r3, [pc, #108]	; (8011200 <TIM_OC5_SetConfig+0x98>)
 8011194:	4013      	ands	r3, r2
 8011196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	68fa      	ldr	r2, [r7, #12]
 801119e:	4313      	orrs	r3, r2
 80111a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80111a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	689b      	ldr	r3, [r3, #8]
 80111ae:	041b      	lsls	r3, r3, #16
 80111b0:	693a      	ldr	r2, [r7, #16]
 80111b2:	4313      	orrs	r3, r2
 80111b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4a12      	ldr	r2, [pc, #72]	; (8011204 <TIM_OC5_SetConfig+0x9c>)
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d003      	beq.n	80111c6 <TIM_OC5_SetConfig+0x5e>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	4a11      	ldr	r2, [pc, #68]	; (8011208 <TIM_OC5_SetConfig+0xa0>)
 80111c2:	4293      	cmp	r3, r2
 80111c4:	d109      	bne.n	80111da <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80111cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	695b      	ldr	r3, [r3, #20]
 80111d2:	021b      	lsls	r3, r3, #8
 80111d4:	697a      	ldr	r2, [r7, #20]
 80111d6:	4313      	orrs	r3, r2
 80111d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	697a      	ldr	r2, [r7, #20]
 80111de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	68fa      	ldr	r2, [r7, #12]
 80111e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	685a      	ldr	r2, [r3, #4]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	693a      	ldr	r2, [r7, #16]
 80111f2:	621a      	str	r2, [r3, #32]
}
 80111f4:	bf00      	nop
 80111f6:	371c      	adds	r7, #28
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr
 8011200:	fffeff8f 	.word	0xfffeff8f
 8011204:	40010000 	.word	0x40010000
 8011208:	40010400 	.word	0x40010400

0801120c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801120c:	b480      	push	{r7}
 801120e:	b087      	sub	sp, #28
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6a1b      	ldr	r3, [r3, #32]
 801121a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6a1b      	ldr	r3, [r3, #32]
 8011226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011234:	68fa      	ldr	r2, [r7, #12]
 8011236:	4b1c      	ldr	r3, [pc, #112]	; (80112a8 <TIM_OC6_SetConfig+0x9c>)
 8011238:	4013      	ands	r3, r2
 801123a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	021b      	lsls	r3, r3, #8
 8011242:	68fa      	ldr	r2, [r7, #12]
 8011244:	4313      	orrs	r3, r2
 8011246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801124e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	689b      	ldr	r3, [r3, #8]
 8011254:	051b      	lsls	r3, r3, #20
 8011256:	693a      	ldr	r2, [r7, #16]
 8011258:	4313      	orrs	r3, r2
 801125a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	4a13      	ldr	r2, [pc, #76]	; (80112ac <TIM_OC6_SetConfig+0xa0>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d003      	beq.n	801126c <TIM_OC6_SetConfig+0x60>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	4a12      	ldr	r2, [pc, #72]	; (80112b0 <TIM_OC6_SetConfig+0xa4>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d109      	bne.n	8011280 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011272:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	695b      	ldr	r3, [r3, #20]
 8011278:	029b      	lsls	r3, r3, #10
 801127a:	697a      	ldr	r2, [r7, #20]
 801127c:	4313      	orrs	r3, r2
 801127e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	697a      	ldr	r2, [r7, #20]
 8011284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	685a      	ldr	r2, [r3, #4]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	693a      	ldr	r2, [r7, #16]
 8011298:	621a      	str	r2, [r3, #32]
}
 801129a:	bf00      	nop
 801129c:	371c      	adds	r7, #28
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr
 80112a6:	bf00      	nop
 80112a8:	feff8fff 	.word	0xfeff8fff
 80112ac:	40010000 	.word	0x40010000
 80112b0:	40010400 	.word	0x40010400

080112b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b087      	sub	sp, #28
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	60f8      	str	r0, [r7, #12]
 80112bc:	60b9      	str	r1, [r7, #8]
 80112be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	6a1b      	ldr	r3, [r3, #32]
 80112c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	6a1b      	ldr	r3, [r3, #32]
 80112ca:	f023 0201 	bic.w	r2, r3, #1
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	699b      	ldr	r3, [r3, #24]
 80112d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80112de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	011b      	lsls	r3, r3, #4
 80112e4:	693a      	ldr	r2, [r7, #16]
 80112e6:	4313      	orrs	r3, r2
 80112e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	f023 030a 	bic.w	r3, r3, #10
 80112f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80112f2:	697a      	ldr	r2, [r7, #20]
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	4313      	orrs	r3, r2
 80112f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	693a      	ldr	r2, [r7, #16]
 80112fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	697a      	ldr	r2, [r7, #20]
 8011304:	621a      	str	r2, [r3, #32]
}
 8011306:	bf00      	nop
 8011308:	371c      	adds	r7, #28
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr

08011312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011312:	b480      	push	{r7}
 8011314:	b087      	sub	sp, #28
 8011316:	af00      	add	r7, sp, #0
 8011318:	60f8      	str	r0, [r7, #12]
 801131a:	60b9      	str	r1, [r7, #8]
 801131c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	6a1b      	ldr	r3, [r3, #32]
 8011322:	f023 0210 	bic.w	r2, r3, #16
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	699b      	ldr	r3, [r3, #24]
 801132e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	6a1b      	ldr	r3, [r3, #32]
 8011334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801133c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	031b      	lsls	r3, r3, #12
 8011342:	697a      	ldr	r2, [r7, #20]
 8011344:	4313      	orrs	r3, r2
 8011346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801134e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	011b      	lsls	r3, r3, #4
 8011354:	693a      	ldr	r2, [r7, #16]
 8011356:	4313      	orrs	r3, r2
 8011358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	697a      	ldr	r2, [r7, #20]
 801135e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	693a      	ldr	r2, [r7, #16]
 8011364:	621a      	str	r2, [r3, #32]
}
 8011366:	bf00      	nop
 8011368:	371c      	adds	r7, #28
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr

08011372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011372:	b480      	push	{r7}
 8011374:	b085      	sub	sp, #20
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
 801137a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	689b      	ldr	r3, [r3, #8]
 8011380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801138a:	683a      	ldr	r2, [r7, #0]
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	4313      	orrs	r3, r2
 8011390:	f043 0307 	orr.w	r3, r3, #7
 8011394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	68fa      	ldr	r2, [r7, #12]
 801139a:	609a      	str	r2, [r3, #8]
}
 801139c:	bf00      	nop
 801139e:	3714      	adds	r7, #20
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b087      	sub	sp, #28
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	607a      	str	r2, [r7, #4]
 80113b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80113c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	021a      	lsls	r2, r3, #8
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	431a      	orrs	r2, r3
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	4313      	orrs	r3, r2
 80113d0:	697a      	ldr	r2, [r7, #20]
 80113d2:	4313      	orrs	r3, r2
 80113d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	697a      	ldr	r2, [r7, #20]
 80113da:	609a      	str	r2, [r3, #8]
}
 80113dc:	bf00      	nop
 80113de:	371c      	adds	r7, #28
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80113f8:	2b01      	cmp	r3, #1
 80113fa:	d101      	bne.n	8011400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80113fc:	2302      	movs	r3, #2
 80113fe:	e06d      	b.n	80114dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2201      	movs	r2, #1
 8011404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2202      	movs	r2, #2
 801140c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	689b      	ldr	r3, [r3, #8]
 801141e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	4a30      	ldr	r2, [pc, #192]	; (80114e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d004      	beq.n	8011434 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	4a2f      	ldr	r2, [pc, #188]	; (80114ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d108      	bne.n	8011446 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801143a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	68fa      	ldr	r2, [r7, #12]
 8011442:	4313      	orrs	r3, r2
 8011444:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801144c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	68fa      	ldr	r2, [r7, #12]
 8011454:	4313      	orrs	r3, r2
 8011456:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	68fa      	ldr	r2, [r7, #12]
 801145e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4a20      	ldr	r2, [pc, #128]	; (80114e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d022      	beq.n	80114b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011472:	d01d      	beq.n	80114b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	4a1d      	ldr	r2, [pc, #116]	; (80114f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d018      	beq.n	80114b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	4a1c      	ldr	r2, [pc, #112]	; (80114f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d013      	beq.n	80114b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a1a      	ldr	r2, [pc, #104]	; (80114f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d00e      	beq.n	80114b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	4a15      	ldr	r2, [pc, #84]	; (80114ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d009      	beq.n	80114b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4a16      	ldr	r2, [pc, #88]	; (80114fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80114a2:	4293      	cmp	r3, r2
 80114a4:	d004      	beq.n	80114b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	4a15      	ldr	r2, [pc, #84]	; (8011500 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80114ac:	4293      	cmp	r3, r2
 80114ae:	d10c      	bne.n	80114ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	689b      	ldr	r3, [r3, #8]
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	4313      	orrs	r3, r2
 80114c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	68ba      	ldr	r2, [r7, #8]
 80114c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2201      	movs	r2, #1
 80114ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2200      	movs	r2, #0
 80114d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80114da:	2300      	movs	r3, #0
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3714      	adds	r7, #20
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr
 80114e8:	40010000 	.word	0x40010000
 80114ec:	40010400 	.word	0x40010400
 80114f0:	40000400 	.word	0x40000400
 80114f4:	40000800 	.word	0x40000800
 80114f8:	40000c00 	.word	0x40000c00
 80114fc:	40014000 	.word	0x40014000
 8011500:	40001800 	.word	0x40001800

08011504 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011504:	b480      	push	{r7}
 8011506:	b085      	sub	sp, #20
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801150e:	2300      	movs	r3, #0
 8011510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011518:	2b01      	cmp	r3, #1
 801151a:	d101      	bne.n	8011520 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801151c:	2302      	movs	r3, #2
 801151e:	e065      	b.n	80115ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2201      	movs	r2, #1
 8011524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	4313      	orrs	r3, r2
 8011534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	689b      	ldr	r3, [r3, #8]
 8011540:	4313      	orrs	r3, r2
 8011542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	4313      	orrs	r3, r2
 8011550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4313      	orrs	r3, r2
 801155e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	691b      	ldr	r3, [r3, #16]
 801156a:	4313      	orrs	r3, r2
 801156c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	695b      	ldr	r3, [r3, #20]
 8011578:	4313      	orrs	r3, r2
 801157a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011586:	4313      	orrs	r3, r2
 8011588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	699b      	ldr	r3, [r3, #24]
 8011594:	041b      	lsls	r3, r3, #16
 8011596:	4313      	orrs	r3, r2
 8011598:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	4a16      	ldr	r2, [pc, #88]	; (80115f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d004      	beq.n	80115ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	4a14      	ldr	r2, [pc, #80]	; (80115fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d115      	bne.n	80115da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b8:	051b      	lsls	r3, r3, #20
 80115ba:	4313      	orrs	r3, r2
 80115bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	69db      	ldr	r3, [r3, #28]
 80115c8:	4313      	orrs	r3, r2
 80115ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	6a1b      	ldr	r3, [r3, #32]
 80115d6:	4313      	orrs	r3, r2
 80115d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	68fa      	ldr	r2, [r7, #12]
 80115e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2200      	movs	r2, #0
 80115e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80115ea:	2300      	movs	r3, #0
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3714      	adds	r7, #20
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr
 80115f8:	40010000 	.word	0x40010000
 80115fc:	40010400 	.word	0x40010400

08011600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011608:	bf00      	nop
 801160a:	370c      	adds	r7, #12
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr

08011614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011614:	b480      	push	{r7}
 8011616:	b083      	sub	sp, #12
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801161c:	bf00      	nop
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr

08011628 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011628:	b480      	push	{r7}
 801162a:	b083      	sub	sp, #12
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011630:	bf00      	nop
 8011632:	370c      	adds	r7, #12
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr

0801163c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d101      	bne.n	801164e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801164a:	2301      	movs	r3, #1
 801164c:	e040      	b.n	80116d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011652:	2b00      	cmp	r3, #0
 8011654:	d106      	bne.n	8011664 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2200      	movs	r2, #0
 801165a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7f2 f954 	bl	800390c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2224      	movs	r2, #36	; 0x24
 8011668:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f022 0201 	bic.w	r2, r2, #1
 8011678:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f000 f8c0 	bl	8011800 <UART_SetConfig>
 8011680:	4603      	mov	r3, r0
 8011682:	2b01      	cmp	r3, #1
 8011684:	d101      	bne.n	801168a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011686:	2301      	movs	r3, #1
 8011688:	e022      	b.n	80116d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801168e:	2b00      	cmp	r3, #0
 8011690:	d002      	beq.n	8011698 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f000 fb16 	bl	8011cc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	685a      	ldr	r2, [r3, #4]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80116a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	689a      	ldr	r2, [r3, #8]
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80116b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f042 0201 	orr.w	r2, r2, #1
 80116c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f000 fb9d 	bl	8011e08 <UART_CheckIdleState>
 80116ce:	4603      	mov	r3, r0
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}

080116d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b08a      	sub	sp, #40	; 0x28
 80116dc:	af02      	add	r7, sp, #8
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	603b      	str	r3, [r7, #0]
 80116e4:	4613      	mov	r3, r2
 80116e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116ec:	2b20      	cmp	r3, #32
 80116ee:	f040 8081 	bne.w	80117f4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d002      	beq.n	80116fe <HAL_UART_Transmit+0x26>
 80116f8:	88fb      	ldrh	r3, [r7, #6]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d101      	bne.n	8011702 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80116fe:	2301      	movs	r3, #1
 8011700:	e079      	b.n	80117f6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011708:	2b01      	cmp	r3, #1
 801170a:	d101      	bne.n	8011710 <HAL_UART_Transmit+0x38>
 801170c:	2302      	movs	r3, #2
 801170e:	e072      	b.n	80117f6 <HAL_UART_Transmit+0x11e>
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2201      	movs	r2, #1
 8011714:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2200      	movs	r2, #0
 801171c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2221      	movs	r2, #33	; 0x21
 8011724:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011726:	f7f5 fc1b 	bl	8006f60 <HAL_GetTick>
 801172a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	88fa      	ldrh	r2, [r7, #6]
 8011730:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	88fa      	ldrh	r2, [r7, #6]
 8011738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	689b      	ldr	r3, [r3, #8]
 8011740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011744:	d108      	bne.n	8011758 <HAL_UART_Transmit+0x80>
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	691b      	ldr	r3, [r3, #16]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d104      	bne.n	8011758 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 801174e:	2300      	movs	r3, #0
 8011750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	61bb      	str	r3, [r7, #24]
 8011756:	e003      	b.n	8011760 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801175c:	2300      	movs	r3, #0
 801175e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2200      	movs	r2, #0
 8011764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8011768:	e02c      	b.n	80117c4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	9300      	str	r3, [sp, #0]
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	2200      	movs	r2, #0
 8011772:	2180      	movs	r1, #128	; 0x80
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f000 fb7a 	bl	8011e6e <UART_WaitOnFlagUntilTimeout>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d001      	beq.n	8011784 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8011780:	2303      	movs	r3, #3
 8011782:	e038      	b.n	80117f6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d10b      	bne.n	80117a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	881b      	ldrh	r3, [r3, #0]
 801178e:	461a      	mov	r2, r3
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011798:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801179a:	69bb      	ldr	r3, [r7, #24]
 801179c:	3302      	adds	r3, #2
 801179e:	61bb      	str	r3, [r7, #24]
 80117a0:	e007      	b.n	80117b2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80117a2:	69fb      	ldr	r3, [r7, #28]
 80117a4:	781a      	ldrb	r2, [r3, #0]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80117ac:	69fb      	ldr	r3, [r7, #28]
 80117ae:	3301      	adds	r3, #1
 80117b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	3b01      	subs	r3, #1
 80117bc:	b29a      	uxth	r2, r3
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d1cc      	bne.n	801176a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	9300      	str	r3, [sp, #0]
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	2200      	movs	r2, #0
 80117d8:	2140      	movs	r1, #64	; 0x40
 80117da:	68f8      	ldr	r0, [r7, #12]
 80117dc:	f000 fb47 	bl	8011e6e <UART_WaitOnFlagUntilTimeout>
 80117e0:	4603      	mov	r3, r0
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d001      	beq.n	80117ea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80117e6:	2303      	movs	r3, #3
 80117e8:	e005      	b.n	80117f6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	2220      	movs	r2, #32
 80117ee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80117f0:	2300      	movs	r3, #0
 80117f2:	e000      	b.n	80117f6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80117f4:	2302      	movs	r3, #2
  }
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3720      	adds	r7, #32
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
	...

08011800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b088      	sub	sp, #32
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011808:	2300      	movs	r3, #0
 801180a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	689a      	ldr	r2, [r3, #8]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	691b      	ldr	r3, [r3, #16]
 8011814:	431a      	orrs	r2, r3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	695b      	ldr	r3, [r3, #20]
 801181a:	431a      	orrs	r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	69db      	ldr	r3, [r3, #28]
 8011820:	4313      	orrs	r3, r2
 8011822:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	681a      	ldr	r2, [r3, #0]
 801182a:	4ba7      	ldr	r3, [pc, #668]	; (8011ac8 <UART_SetConfig+0x2c8>)
 801182c:	4013      	ands	r3, r2
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	6812      	ldr	r2, [r2, #0]
 8011832:	6979      	ldr	r1, [r7, #20]
 8011834:	430b      	orrs	r3, r1
 8011836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	68da      	ldr	r2, [r3, #12]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	430a      	orrs	r2, r1
 801184c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	699b      	ldr	r3, [r3, #24]
 8011852:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6a1b      	ldr	r3, [r3, #32]
 8011858:	697a      	ldr	r2, [r7, #20]
 801185a:	4313      	orrs	r3, r2
 801185c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	689b      	ldr	r3, [r3, #8]
 8011864:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	697a      	ldr	r2, [r7, #20]
 801186e:	430a      	orrs	r2, r1
 8011870:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	4a95      	ldr	r2, [pc, #596]	; (8011acc <UART_SetConfig+0x2cc>)
 8011878:	4293      	cmp	r3, r2
 801187a:	d120      	bne.n	80118be <UART_SetConfig+0xbe>
 801187c:	4b94      	ldr	r3, [pc, #592]	; (8011ad0 <UART_SetConfig+0x2d0>)
 801187e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011882:	f003 0303 	and.w	r3, r3, #3
 8011886:	2b03      	cmp	r3, #3
 8011888:	d816      	bhi.n	80118b8 <UART_SetConfig+0xb8>
 801188a:	a201      	add	r2, pc, #4	; (adr r2, 8011890 <UART_SetConfig+0x90>)
 801188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011890:	080118a1 	.word	0x080118a1
 8011894:	080118ad 	.word	0x080118ad
 8011898:	080118a7 	.word	0x080118a7
 801189c:	080118b3 	.word	0x080118b3
 80118a0:	2301      	movs	r3, #1
 80118a2:	77fb      	strb	r3, [r7, #31]
 80118a4:	e14f      	b.n	8011b46 <UART_SetConfig+0x346>
 80118a6:	2302      	movs	r3, #2
 80118a8:	77fb      	strb	r3, [r7, #31]
 80118aa:	e14c      	b.n	8011b46 <UART_SetConfig+0x346>
 80118ac:	2304      	movs	r3, #4
 80118ae:	77fb      	strb	r3, [r7, #31]
 80118b0:	e149      	b.n	8011b46 <UART_SetConfig+0x346>
 80118b2:	2308      	movs	r3, #8
 80118b4:	77fb      	strb	r3, [r7, #31]
 80118b6:	e146      	b.n	8011b46 <UART_SetConfig+0x346>
 80118b8:	2310      	movs	r3, #16
 80118ba:	77fb      	strb	r3, [r7, #31]
 80118bc:	e143      	b.n	8011b46 <UART_SetConfig+0x346>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	4a84      	ldr	r2, [pc, #528]	; (8011ad4 <UART_SetConfig+0x2d4>)
 80118c4:	4293      	cmp	r3, r2
 80118c6:	d132      	bne.n	801192e <UART_SetConfig+0x12e>
 80118c8:	4b81      	ldr	r3, [pc, #516]	; (8011ad0 <UART_SetConfig+0x2d0>)
 80118ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118ce:	f003 030c 	and.w	r3, r3, #12
 80118d2:	2b0c      	cmp	r3, #12
 80118d4:	d828      	bhi.n	8011928 <UART_SetConfig+0x128>
 80118d6:	a201      	add	r2, pc, #4	; (adr r2, 80118dc <UART_SetConfig+0xdc>)
 80118d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118dc:	08011911 	.word	0x08011911
 80118e0:	08011929 	.word	0x08011929
 80118e4:	08011929 	.word	0x08011929
 80118e8:	08011929 	.word	0x08011929
 80118ec:	0801191d 	.word	0x0801191d
 80118f0:	08011929 	.word	0x08011929
 80118f4:	08011929 	.word	0x08011929
 80118f8:	08011929 	.word	0x08011929
 80118fc:	08011917 	.word	0x08011917
 8011900:	08011929 	.word	0x08011929
 8011904:	08011929 	.word	0x08011929
 8011908:	08011929 	.word	0x08011929
 801190c:	08011923 	.word	0x08011923
 8011910:	2300      	movs	r3, #0
 8011912:	77fb      	strb	r3, [r7, #31]
 8011914:	e117      	b.n	8011b46 <UART_SetConfig+0x346>
 8011916:	2302      	movs	r3, #2
 8011918:	77fb      	strb	r3, [r7, #31]
 801191a:	e114      	b.n	8011b46 <UART_SetConfig+0x346>
 801191c:	2304      	movs	r3, #4
 801191e:	77fb      	strb	r3, [r7, #31]
 8011920:	e111      	b.n	8011b46 <UART_SetConfig+0x346>
 8011922:	2308      	movs	r3, #8
 8011924:	77fb      	strb	r3, [r7, #31]
 8011926:	e10e      	b.n	8011b46 <UART_SetConfig+0x346>
 8011928:	2310      	movs	r3, #16
 801192a:	77fb      	strb	r3, [r7, #31]
 801192c:	e10b      	b.n	8011b46 <UART_SetConfig+0x346>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	4a69      	ldr	r2, [pc, #420]	; (8011ad8 <UART_SetConfig+0x2d8>)
 8011934:	4293      	cmp	r3, r2
 8011936:	d120      	bne.n	801197a <UART_SetConfig+0x17a>
 8011938:	4b65      	ldr	r3, [pc, #404]	; (8011ad0 <UART_SetConfig+0x2d0>)
 801193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801193e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011942:	2b30      	cmp	r3, #48	; 0x30
 8011944:	d013      	beq.n	801196e <UART_SetConfig+0x16e>
 8011946:	2b30      	cmp	r3, #48	; 0x30
 8011948:	d814      	bhi.n	8011974 <UART_SetConfig+0x174>
 801194a:	2b20      	cmp	r3, #32
 801194c:	d009      	beq.n	8011962 <UART_SetConfig+0x162>
 801194e:	2b20      	cmp	r3, #32
 8011950:	d810      	bhi.n	8011974 <UART_SetConfig+0x174>
 8011952:	2b00      	cmp	r3, #0
 8011954:	d002      	beq.n	801195c <UART_SetConfig+0x15c>
 8011956:	2b10      	cmp	r3, #16
 8011958:	d006      	beq.n	8011968 <UART_SetConfig+0x168>
 801195a:	e00b      	b.n	8011974 <UART_SetConfig+0x174>
 801195c:	2300      	movs	r3, #0
 801195e:	77fb      	strb	r3, [r7, #31]
 8011960:	e0f1      	b.n	8011b46 <UART_SetConfig+0x346>
 8011962:	2302      	movs	r3, #2
 8011964:	77fb      	strb	r3, [r7, #31]
 8011966:	e0ee      	b.n	8011b46 <UART_SetConfig+0x346>
 8011968:	2304      	movs	r3, #4
 801196a:	77fb      	strb	r3, [r7, #31]
 801196c:	e0eb      	b.n	8011b46 <UART_SetConfig+0x346>
 801196e:	2308      	movs	r3, #8
 8011970:	77fb      	strb	r3, [r7, #31]
 8011972:	e0e8      	b.n	8011b46 <UART_SetConfig+0x346>
 8011974:	2310      	movs	r3, #16
 8011976:	77fb      	strb	r3, [r7, #31]
 8011978:	e0e5      	b.n	8011b46 <UART_SetConfig+0x346>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	4a57      	ldr	r2, [pc, #348]	; (8011adc <UART_SetConfig+0x2dc>)
 8011980:	4293      	cmp	r3, r2
 8011982:	d120      	bne.n	80119c6 <UART_SetConfig+0x1c6>
 8011984:	4b52      	ldr	r3, [pc, #328]	; (8011ad0 <UART_SetConfig+0x2d0>)
 8011986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801198a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801198e:	2bc0      	cmp	r3, #192	; 0xc0
 8011990:	d013      	beq.n	80119ba <UART_SetConfig+0x1ba>
 8011992:	2bc0      	cmp	r3, #192	; 0xc0
 8011994:	d814      	bhi.n	80119c0 <UART_SetConfig+0x1c0>
 8011996:	2b80      	cmp	r3, #128	; 0x80
 8011998:	d009      	beq.n	80119ae <UART_SetConfig+0x1ae>
 801199a:	2b80      	cmp	r3, #128	; 0x80
 801199c:	d810      	bhi.n	80119c0 <UART_SetConfig+0x1c0>
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d002      	beq.n	80119a8 <UART_SetConfig+0x1a8>
 80119a2:	2b40      	cmp	r3, #64	; 0x40
 80119a4:	d006      	beq.n	80119b4 <UART_SetConfig+0x1b4>
 80119a6:	e00b      	b.n	80119c0 <UART_SetConfig+0x1c0>
 80119a8:	2300      	movs	r3, #0
 80119aa:	77fb      	strb	r3, [r7, #31]
 80119ac:	e0cb      	b.n	8011b46 <UART_SetConfig+0x346>
 80119ae:	2302      	movs	r3, #2
 80119b0:	77fb      	strb	r3, [r7, #31]
 80119b2:	e0c8      	b.n	8011b46 <UART_SetConfig+0x346>
 80119b4:	2304      	movs	r3, #4
 80119b6:	77fb      	strb	r3, [r7, #31]
 80119b8:	e0c5      	b.n	8011b46 <UART_SetConfig+0x346>
 80119ba:	2308      	movs	r3, #8
 80119bc:	77fb      	strb	r3, [r7, #31]
 80119be:	e0c2      	b.n	8011b46 <UART_SetConfig+0x346>
 80119c0:	2310      	movs	r3, #16
 80119c2:	77fb      	strb	r3, [r7, #31]
 80119c4:	e0bf      	b.n	8011b46 <UART_SetConfig+0x346>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	4a45      	ldr	r2, [pc, #276]	; (8011ae0 <UART_SetConfig+0x2e0>)
 80119cc:	4293      	cmp	r3, r2
 80119ce:	d125      	bne.n	8011a1c <UART_SetConfig+0x21c>
 80119d0:	4b3f      	ldr	r3, [pc, #252]	; (8011ad0 <UART_SetConfig+0x2d0>)
 80119d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80119da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80119de:	d017      	beq.n	8011a10 <UART_SetConfig+0x210>
 80119e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80119e4:	d817      	bhi.n	8011a16 <UART_SetConfig+0x216>
 80119e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119ea:	d00b      	beq.n	8011a04 <UART_SetConfig+0x204>
 80119ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119f0:	d811      	bhi.n	8011a16 <UART_SetConfig+0x216>
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d003      	beq.n	80119fe <UART_SetConfig+0x1fe>
 80119f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119fa:	d006      	beq.n	8011a0a <UART_SetConfig+0x20a>
 80119fc:	e00b      	b.n	8011a16 <UART_SetConfig+0x216>
 80119fe:	2300      	movs	r3, #0
 8011a00:	77fb      	strb	r3, [r7, #31]
 8011a02:	e0a0      	b.n	8011b46 <UART_SetConfig+0x346>
 8011a04:	2302      	movs	r3, #2
 8011a06:	77fb      	strb	r3, [r7, #31]
 8011a08:	e09d      	b.n	8011b46 <UART_SetConfig+0x346>
 8011a0a:	2304      	movs	r3, #4
 8011a0c:	77fb      	strb	r3, [r7, #31]
 8011a0e:	e09a      	b.n	8011b46 <UART_SetConfig+0x346>
 8011a10:	2308      	movs	r3, #8
 8011a12:	77fb      	strb	r3, [r7, #31]
 8011a14:	e097      	b.n	8011b46 <UART_SetConfig+0x346>
 8011a16:	2310      	movs	r3, #16
 8011a18:	77fb      	strb	r3, [r7, #31]
 8011a1a:	e094      	b.n	8011b46 <UART_SetConfig+0x346>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	4a30      	ldr	r2, [pc, #192]	; (8011ae4 <UART_SetConfig+0x2e4>)
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d125      	bne.n	8011a72 <UART_SetConfig+0x272>
 8011a26:	4b2a      	ldr	r3, [pc, #168]	; (8011ad0 <UART_SetConfig+0x2d0>)
 8011a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011a34:	d017      	beq.n	8011a66 <UART_SetConfig+0x266>
 8011a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011a3a:	d817      	bhi.n	8011a6c <UART_SetConfig+0x26c>
 8011a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a40:	d00b      	beq.n	8011a5a <UART_SetConfig+0x25a>
 8011a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a46:	d811      	bhi.n	8011a6c <UART_SetConfig+0x26c>
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d003      	beq.n	8011a54 <UART_SetConfig+0x254>
 8011a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a50:	d006      	beq.n	8011a60 <UART_SetConfig+0x260>
 8011a52:	e00b      	b.n	8011a6c <UART_SetConfig+0x26c>
 8011a54:	2301      	movs	r3, #1
 8011a56:	77fb      	strb	r3, [r7, #31]
 8011a58:	e075      	b.n	8011b46 <UART_SetConfig+0x346>
 8011a5a:	2302      	movs	r3, #2
 8011a5c:	77fb      	strb	r3, [r7, #31]
 8011a5e:	e072      	b.n	8011b46 <UART_SetConfig+0x346>
 8011a60:	2304      	movs	r3, #4
 8011a62:	77fb      	strb	r3, [r7, #31]
 8011a64:	e06f      	b.n	8011b46 <UART_SetConfig+0x346>
 8011a66:	2308      	movs	r3, #8
 8011a68:	77fb      	strb	r3, [r7, #31]
 8011a6a:	e06c      	b.n	8011b46 <UART_SetConfig+0x346>
 8011a6c:	2310      	movs	r3, #16
 8011a6e:	77fb      	strb	r3, [r7, #31]
 8011a70:	e069      	b.n	8011b46 <UART_SetConfig+0x346>
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	4a1c      	ldr	r2, [pc, #112]	; (8011ae8 <UART_SetConfig+0x2e8>)
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	d137      	bne.n	8011aec <UART_SetConfig+0x2ec>
 8011a7c:	4b14      	ldr	r3, [pc, #80]	; (8011ad0 <UART_SetConfig+0x2d0>)
 8011a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011a86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011a8a:	d017      	beq.n	8011abc <UART_SetConfig+0x2bc>
 8011a8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011a90:	d817      	bhi.n	8011ac2 <UART_SetConfig+0x2c2>
 8011a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a96:	d00b      	beq.n	8011ab0 <UART_SetConfig+0x2b0>
 8011a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a9c:	d811      	bhi.n	8011ac2 <UART_SetConfig+0x2c2>
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d003      	beq.n	8011aaa <UART_SetConfig+0x2aa>
 8011aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011aa6:	d006      	beq.n	8011ab6 <UART_SetConfig+0x2b6>
 8011aa8:	e00b      	b.n	8011ac2 <UART_SetConfig+0x2c2>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	77fb      	strb	r3, [r7, #31]
 8011aae:	e04a      	b.n	8011b46 <UART_SetConfig+0x346>
 8011ab0:	2302      	movs	r3, #2
 8011ab2:	77fb      	strb	r3, [r7, #31]
 8011ab4:	e047      	b.n	8011b46 <UART_SetConfig+0x346>
 8011ab6:	2304      	movs	r3, #4
 8011ab8:	77fb      	strb	r3, [r7, #31]
 8011aba:	e044      	b.n	8011b46 <UART_SetConfig+0x346>
 8011abc:	2308      	movs	r3, #8
 8011abe:	77fb      	strb	r3, [r7, #31]
 8011ac0:	e041      	b.n	8011b46 <UART_SetConfig+0x346>
 8011ac2:	2310      	movs	r3, #16
 8011ac4:	77fb      	strb	r3, [r7, #31]
 8011ac6:	e03e      	b.n	8011b46 <UART_SetConfig+0x346>
 8011ac8:	efff69f3 	.word	0xefff69f3
 8011acc:	40011000 	.word	0x40011000
 8011ad0:	40023800 	.word	0x40023800
 8011ad4:	40004400 	.word	0x40004400
 8011ad8:	40004800 	.word	0x40004800
 8011adc:	40004c00 	.word	0x40004c00
 8011ae0:	40005000 	.word	0x40005000
 8011ae4:	40011400 	.word	0x40011400
 8011ae8:	40007800 	.word	0x40007800
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	4a71      	ldr	r2, [pc, #452]	; (8011cb8 <UART_SetConfig+0x4b8>)
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d125      	bne.n	8011b42 <UART_SetConfig+0x342>
 8011af6:	4b71      	ldr	r3, [pc, #452]	; (8011cbc <UART_SetConfig+0x4bc>)
 8011af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011b00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011b04:	d017      	beq.n	8011b36 <UART_SetConfig+0x336>
 8011b06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011b0a:	d817      	bhi.n	8011b3c <UART_SetConfig+0x33c>
 8011b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b10:	d00b      	beq.n	8011b2a <UART_SetConfig+0x32a>
 8011b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b16:	d811      	bhi.n	8011b3c <UART_SetConfig+0x33c>
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d003      	beq.n	8011b24 <UART_SetConfig+0x324>
 8011b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b20:	d006      	beq.n	8011b30 <UART_SetConfig+0x330>
 8011b22:	e00b      	b.n	8011b3c <UART_SetConfig+0x33c>
 8011b24:	2300      	movs	r3, #0
 8011b26:	77fb      	strb	r3, [r7, #31]
 8011b28:	e00d      	b.n	8011b46 <UART_SetConfig+0x346>
 8011b2a:	2302      	movs	r3, #2
 8011b2c:	77fb      	strb	r3, [r7, #31]
 8011b2e:	e00a      	b.n	8011b46 <UART_SetConfig+0x346>
 8011b30:	2304      	movs	r3, #4
 8011b32:	77fb      	strb	r3, [r7, #31]
 8011b34:	e007      	b.n	8011b46 <UART_SetConfig+0x346>
 8011b36:	2308      	movs	r3, #8
 8011b38:	77fb      	strb	r3, [r7, #31]
 8011b3a:	e004      	b.n	8011b46 <UART_SetConfig+0x346>
 8011b3c:	2310      	movs	r3, #16
 8011b3e:	77fb      	strb	r3, [r7, #31]
 8011b40:	e001      	b.n	8011b46 <UART_SetConfig+0x346>
 8011b42:	2310      	movs	r3, #16
 8011b44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	69db      	ldr	r3, [r3, #28]
 8011b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b4e:	d15b      	bne.n	8011c08 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8011b50:	7ffb      	ldrb	r3, [r7, #31]
 8011b52:	2b08      	cmp	r3, #8
 8011b54:	d827      	bhi.n	8011ba6 <UART_SetConfig+0x3a6>
 8011b56:	a201      	add	r2, pc, #4	; (adr r2, 8011b5c <UART_SetConfig+0x35c>)
 8011b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b5c:	08011b81 	.word	0x08011b81
 8011b60:	08011b89 	.word	0x08011b89
 8011b64:	08011b91 	.word	0x08011b91
 8011b68:	08011ba7 	.word	0x08011ba7
 8011b6c:	08011b97 	.word	0x08011b97
 8011b70:	08011ba7 	.word	0x08011ba7
 8011b74:	08011ba7 	.word	0x08011ba7
 8011b78:	08011ba7 	.word	0x08011ba7
 8011b7c:	08011b9f 	.word	0x08011b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b80:	f7fb fd9e 	bl	800d6c0 <HAL_RCC_GetPCLK1Freq>
 8011b84:	61b8      	str	r0, [r7, #24]
        break;
 8011b86:	e013      	b.n	8011bb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011b88:	f7fb fdae 	bl	800d6e8 <HAL_RCC_GetPCLK2Freq>
 8011b8c:	61b8      	str	r0, [r7, #24]
        break;
 8011b8e:	e00f      	b.n	8011bb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011b90:	4b4b      	ldr	r3, [pc, #300]	; (8011cc0 <UART_SetConfig+0x4c0>)
 8011b92:	61bb      	str	r3, [r7, #24]
        break;
 8011b94:	e00c      	b.n	8011bb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011b96:	f7fb fcd1 	bl	800d53c <HAL_RCC_GetSysClockFreq>
 8011b9a:	61b8      	str	r0, [r7, #24]
        break;
 8011b9c:	e008      	b.n	8011bb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ba2:	61bb      	str	r3, [r7, #24]
        break;
 8011ba4:	e004      	b.n	8011bb0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011baa:	2301      	movs	r3, #1
 8011bac:	77bb      	strb	r3, [r7, #30]
        break;
 8011bae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d074      	beq.n	8011ca0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011bb6:	69bb      	ldr	r3, [r7, #24]
 8011bb8:	005a      	lsls	r2, r3, #1
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	085b      	lsrs	r3, r3, #1
 8011bc0:	441a      	add	r2, r3
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	2b0f      	cmp	r3, #15
 8011bd2:	d916      	bls.n	8011c02 <UART_SetConfig+0x402>
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bda:	d212      	bcs.n	8011c02 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	f023 030f 	bic.w	r3, r3, #15
 8011be4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	085b      	lsrs	r3, r3, #1
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	f003 0307 	and.w	r3, r3, #7
 8011bf0:	b29a      	uxth	r2, r3
 8011bf2:	89fb      	ldrh	r3, [r7, #14]
 8011bf4:	4313      	orrs	r3, r2
 8011bf6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	89fa      	ldrh	r2, [r7, #14]
 8011bfe:	60da      	str	r2, [r3, #12]
 8011c00:	e04e      	b.n	8011ca0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8011c02:	2301      	movs	r3, #1
 8011c04:	77bb      	strb	r3, [r7, #30]
 8011c06:	e04b      	b.n	8011ca0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c08:	7ffb      	ldrb	r3, [r7, #31]
 8011c0a:	2b08      	cmp	r3, #8
 8011c0c:	d827      	bhi.n	8011c5e <UART_SetConfig+0x45e>
 8011c0e:	a201      	add	r2, pc, #4	; (adr r2, 8011c14 <UART_SetConfig+0x414>)
 8011c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c14:	08011c39 	.word	0x08011c39
 8011c18:	08011c41 	.word	0x08011c41
 8011c1c:	08011c49 	.word	0x08011c49
 8011c20:	08011c5f 	.word	0x08011c5f
 8011c24:	08011c4f 	.word	0x08011c4f
 8011c28:	08011c5f 	.word	0x08011c5f
 8011c2c:	08011c5f 	.word	0x08011c5f
 8011c30:	08011c5f 	.word	0x08011c5f
 8011c34:	08011c57 	.word	0x08011c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c38:	f7fb fd42 	bl	800d6c0 <HAL_RCC_GetPCLK1Freq>
 8011c3c:	61b8      	str	r0, [r7, #24]
        break;
 8011c3e:	e013      	b.n	8011c68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c40:	f7fb fd52 	bl	800d6e8 <HAL_RCC_GetPCLK2Freq>
 8011c44:	61b8      	str	r0, [r7, #24]
        break;
 8011c46:	e00f      	b.n	8011c68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011c48:	4b1d      	ldr	r3, [pc, #116]	; (8011cc0 <UART_SetConfig+0x4c0>)
 8011c4a:	61bb      	str	r3, [r7, #24]
        break;
 8011c4c:	e00c      	b.n	8011c68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011c4e:	f7fb fc75 	bl	800d53c <HAL_RCC_GetSysClockFreq>
 8011c52:	61b8      	str	r0, [r7, #24]
        break;
 8011c54:	e008      	b.n	8011c68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c5a:	61bb      	str	r3, [r7, #24]
        break;
 8011c5c:	e004      	b.n	8011c68 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011c62:	2301      	movs	r3, #1
 8011c64:	77bb      	strb	r3, [r7, #30]
        break;
 8011c66:	bf00      	nop
    }

    if (pclk != 0U)
 8011c68:	69bb      	ldr	r3, [r7, #24]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d018      	beq.n	8011ca0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	085a      	lsrs	r2, r3, #1
 8011c74:	69bb      	ldr	r3, [r7, #24]
 8011c76:	441a      	add	r2, r3
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	2b0f      	cmp	r3, #15
 8011c88:	d908      	bls.n	8011c9c <UART_SetConfig+0x49c>
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c90:	d204      	bcs.n	8011c9c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	693a      	ldr	r2, [r7, #16]
 8011c98:	60da      	str	r2, [r3, #12]
 8011c9a:	e001      	b.n	8011ca0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8011cac:	7fbb      	ldrb	r3, [r7, #30]
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3720      	adds	r7, #32
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	40007c00 	.word	0x40007c00
 8011cbc:	40023800 	.word	0x40023800
 8011cc0:	00f42400 	.word	0x00f42400

08011cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd0:	f003 0301 	and.w	r3, r3, #1
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d00a      	beq.n	8011cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	430a      	orrs	r2, r1
 8011cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cf2:	f003 0302 	and.w	r3, r3, #2
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d00a      	beq.n	8011d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	430a      	orrs	r2, r1
 8011d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d14:	f003 0304 	and.w	r3, r3, #4
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d00a      	beq.n	8011d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	430a      	orrs	r2, r1
 8011d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d36:	f003 0308 	and.w	r3, r3, #8
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d00a      	beq.n	8011d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	430a      	orrs	r2, r1
 8011d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d58:	f003 0310 	and.w	r3, r3, #16
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d00a      	beq.n	8011d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	689b      	ldr	r3, [r3, #8]
 8011d66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	430a      	orrs	r2, r1
 8011d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d7a:	f003 0320 	and.w	r3, r3, #32
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d00a      	beq.n	8011d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	430a      	orrs	r2, r1
 8011d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d01a      	beq.n	8011dda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	430a      	orrs	r2, r1
 8011db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011dc2:	d10a      	bne.n	8011dda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	430a      	orrs	r2, r1
 8011dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d00a      	beq.n	8011dfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	430a      	orrs	r2, r1
 8011dfa:	605a      	str	r2, [r3, #4]
  }
}
 8011dfc:	bf00      	nop
 8011dfe:	370c      	adds	r7, #12
 8011e00:	46bd      	mov	sp, r7
 8011e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e06:	4770      	bx	lr

08011e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b086      	sub	sp, #24
 8011e0c:	af02      	add	r7, sp, #8
 8011e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011e18:	f7f5 f8a2 	bl	8006f60 <HAL_GetTick>
 8011e1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	f003 0308 	and.w	r3, r3, #8
 8011e28:	2b08      	cmp	r3, #8
 8011e2a:	d10e      	bne.n	8011e4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011e30:	9300      	str	r3, [sp, #0]
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2200      	movs	r2, #0
 8011e36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f817 	bl	8011e6e <UART_WaitOnFlagUntilTimeout>
 8011e40:	4603      	mov	r3, r0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d001      	beq.n	8011e4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e46:	2303      	movs	r3, #3
 8011e48:	e00d      	b.n	8011e66 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2220      	movs	r2, #32
 8011e4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2220      	movs	r2, #32
 8011e54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8011e64:	2300      	movs	r3, #0
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3710      	adds	r7, #16
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}

08011e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011e6e:	b580      	push	{r7, lr}
 8011e70:	b084      	sub	sp, #16
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	60f8      	str	r0, [r7, #12]
 8011e76:	60b9      	str	r1, [r7, #8]
 8011e78:	603b      	str	r3, [r7, #0]
 8011e7a:	4613      	mov	r3, r2
 8011e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e7e:	e05e      	b.n	8011f3e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e80:	69bb      	ldr	r3, [r7, #24]
 8011e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e86:	d05a      	beq.n	8011f3e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e88:	f7f5 f86a 	bl	8006f60 <HAL_GetTick>
 8011e8c:	4602      	mov	r2, r0
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	69ba      	ldr	r2, [r7, #24]
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d302      	bcc.n	8011e9e <UART_WaitOnFlagUntilTimeout+0x30>
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d11b      	bne.n	8011ed6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	681a      	ldr	r2, [r3, #0]
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011eac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	689a      	ldr	r2, [r3, #8]
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	f022 0201 	bic.w	r2, r2, #1
 8011ebc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	2220      	movs	r2, #32
 8011ec2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	2220      	movs	r2, #32
 8011ec8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8011ed2:	2303      	movs	r3, #3
 8011ed4:	e043      	b.n	8011f5e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f003 0304 	and.w	r3, r3, #4
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d02c      	beq.n	8011f3e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	69db      	ldr	r3, [r3, #28]
 8011eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ef2:	d124      	bne.n	8011f3e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011efc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011f0c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	689a      	ldr	r2, [r3, #8]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f022 0201 	bic.w	r2, r2, #1
 8011f1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2220      	movs	r2, #32
 8011f22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	2220      	movs	r2, #32
 8011f28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2220      	movs	r2, #32
 8011f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	2200      	movs	r2, #0
 8011f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8011f3a:	2303      	movs	r3, #3
 8011f3c:	e00f      	b.n	8011f5e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	69da      	ldr	r2, [r3, #28]
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	4013      	ands	r3, r2
 8011f48:	68ba      	ldr	r2, [r7, #8]
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	bf0c      	ite	eq
 8011f4e:	2301      	moveq	r3, #1
 8011f50:	2300      	movne	r3, #0
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	461a      	mov	r2, r3
 8011f56:	79fb      	ldrb	r3, [r7, #7]
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d091      	beq.n	8011e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011f5c:	2300      	movs	r3, #0
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
	...

08011f68 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b085      	sub	sp, #20
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8011f72:	2300      	movs	r3, #0
 8011f74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8011f76:	2300      	movs	r3, #0
 8011f78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	d027      	beq.n	8011fd2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011f88:	68fa      	ldr	r2, [r7, #12]
 8011f8a:	4b2f      	ldr	r3, [pc, #188]	; (8012048 <FMC_SDRAM_Init+0xe0>)
 8011f8c:	4013      	ands	r3, r2
 8011f8e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011f98:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8011f9e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8011fa4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8011faa:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8011fb0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8011fb6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8011fbc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011fc2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011fc4:	68fa      	ldr	r2, [r7, #12]
 8011fc6:	4313      	orrs	r3, r2
 8011fc8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	68fa      	ldr	r2, [r7, #12]
 8011fce:	601a      	str	r2, [r3, #0]
 8011fd0:	e032      	b.n	8012038 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011fde:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011fe8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011fee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011ff0:	68fa      	ldr	r2, [r7, #12]
 8011ff2:	4313      	orrs	r3, r2
 8011ff4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011ffc:	68ba      	ldr	r2, [r7, #8]
 8011ffe:	4b12      	ldr	r3, [pc, #72]	; (8012048 <FMC_SDRAM_Init+0xe0>)
 8012000:	4013      	ands	r3, r2
 8012002:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801200c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8012012:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8012018:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 801201e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8012024:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012026:	68ba      	ldr	r2, [r7, #8]
 8012028:	4313      	orrs	r3, r2
 801202a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	68fa      	ldr	r2, [r7, #12]
 8012030:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	68ba      	ldr	r2, [r7, #8]
 8012036:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8012038:	2300      	movs	r3, #0
}
 801203a:	4618      	mov	r0, r3
 801203c:	3714      	adds	r7, #20
 801203e:	46bd      	mov	sp, r7
 8012040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012044:	4770      	bx	lr
 8012046:	bf00      	nop
 8012048:	ffff8000 	.word	0xffff8000

0801204c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801204c:	b480      	push	{r7}
 801204e:	b087      	sub	sp, #28
 8012050:	af00      	add	r7, sp, #0
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	60b9      	str	r1, [r7, #8]
 8012056:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8012058:	2300      	movs	r3, #0
 801205a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 801205c:	2300      	movs	r3, #0
 801205e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2b01      	cmp	r3, #1
 8012064:	d02e      	beq.n	80120c4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	689b      	ldr	r3, [r3, #8]
 801206a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012072:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	3b01      	subs	r3, #1
 8012080:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012082:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	689b      	ldr	r3, [r3, #8]
 8012088:	3b01      	subs	r3, #1
 801208a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 801208c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	3b01      	subs	r3, #1
 8012094:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8012096:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	691b      	ldr	r3, [r3, #16]
 801209c:	3b01      	subs	r3, #1
 801209e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80120a0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	695b      	ldr	r3, [r3, #20]
 80120a6:	3b01      	subs	r3, #1
 80120a8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80120aa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	699b      	ldr	r3, [r3, #24]
 80120b0:	3b01      	subs	r3, #1
 80120b2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80120b4:	4313      	orrs	r3, r2
 80120b6:	697a      	ldr	r2, [r7, #20]
 80120b8:	4313      	orrs	r3, r2
 80120ba:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	697a      	ldr	r2, [r7, #20]
 80120c0:	609a      	str	r2, [r3, #8]
 80120c2:	e039      	b.n	8012138 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	689b      	ldr	r3, [r3, #8]
 80120c8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80120ca:	697a      	ldr	r2, [r7, #20]
 80120cc:	4b1e      	ldr	r3, [pc, #120]	; (8012148 <FMC_SDRAM_Timing_Init+0xfc>)
 80120ce:	4013      	ands	r3, r2
 80120d0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	68db      	ldr	r3, [r3, #12]
 80120d6:	3b01      	subs	r3, #1
 80120d8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	695b      	ldr	r3, [r3, #20]
 80120de:	3b01      	subs	r3, #1
 80120e0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80120e2:	4313      	orrs	r3, r2
 80120e4:	697a      	ldr	r2, [r7, #20]
 80120e6:	4313      	orrs	r3, r2
 80120e8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	68db      	ldr	r3, [r3, #12]
 80120ee:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80120f6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	3b01      	subs	r3, #1
 8012104:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012106:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	689b      	ldr	r3, [r3, #8]
 801210c:	3b01      	subs	r3, #1
 801210e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8012110:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	691b      	ldr	r3, [r3, #16]
 8012116:	3b01      	subs	r3, #1
 8012118:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 801211a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	699b      	ldr	r3, [r3, #24]
 8012120:	3b01      	subs	r3, #1
 8012122:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012124:	4313      	orrs	r3, r2
 8012126:	693a      	ldr	r2, [r7, #16]
 8012128:	4313      	orrs	r3, r2
 801212a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	697a      	ldr	r2, [r7, #20]
 8012130:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	693a      	ldr	r2, [r7, #16]
 8012136:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8012138:	2300      	movs	r3, #0
}
 801213a:	4618      	mov	r0, r3
 801213c:	371c      	adds	r7, #28
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	ff0f0fff 	.word	0xff0f0fff

0801214c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 801214c:	b480      	push	{r7}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	60f8      	str	r0, [r7, #12]
 8012154:	60b9      	str	r1, [r7, #8]
 8012156:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	691a      	ldr	r2, [r3, #16]
 801215c:	4b0c      	ldr	r3, [pc, #48]	; (8012190 <FMC_SDRAM_SendCommand+0x44>)
 801215e:	4013      	ands	r3, r2
 8012160:	68ba      	ldr	r2, [r7, #8]
 8012162:	6811      	ldr	r1, [r2, #0]
 8012164:	68ba      	ldr	r2, [r7, #8]
 8012166:	6852      	ldr	r2, [r2, #4]
 8012168:	4311      	orrs	r1, r2
 801216a:	68ba      	ldr	r2, [r7, #8]
 801216c:	6892      	ldr	r2, [r2, #8]
 801216e:	3a01      	subs	r2, #1
 8012170:	0152      	lsls	r2, r2, #5
 8012172:	4311      	orrs	r1, r2
 8012174:	68ba      	ldr	r2, [r7, #8]
 8012176:	68d2      	ldr	r2, [r2, #12]
 8012178:	0252      	lsls	r2, r2, #9
 801217a:	430a      	orrs	r2, r1
 801217c:	431a      	orrs	r2, r3
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8012182:	2300      	movs	r3, #0
}
 8012184:	4618      	mov	r0, r3
 8012186:	3714      	adds	r7, #20
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr
 8012190:	ffc00000 	.word	0xffc00000

08012194 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8012194:	b480      	push	{r7}
 8012196:	b083      	sub	sp, #12
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	695a      	ldr	r2, [r3, #20]
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	005b      	lsls	r3, r3, #1
 80121a6:	431a      	orrs	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80121ac:	2300      	movs	r3, #0
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	370c      	adds	r7, #12
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr
	...

080121bc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80121bc:	b084      	sub	sp, #16
 80121be:	b480      	push	{r7}
 80121c0:	b085      	sub	sp, #20
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
 80121c6:	f107 001c 	add.w	r0, r7, #28
 80121ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80121ce:	2300      	movs	r3, #0
 80121d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80121d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80121d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80121d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80121d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80121da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80121dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80121de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80121e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80121e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80121e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80121e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80121e8:	68fa      	ldr	r2, [r7, #12]
 80121ea:	4313      	orrs	r3, r2
 80121ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	685a      	ldr	r2, [r3, #4]
 80121f2:	4b07      	ldr	r3, [pc, #28]	; (8012210 <SDMMC_Init+0x54>)
 80121f4:	4013      	ands	r3, r2
 80121f6:	68fa      	ldr	r2, [r7, #12]
 80121f8:	431a      	orrs	r2, r3
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80121fe:	2300      	movs	r3, #0
}
 8012200:	4618      	mov	r0, r3
 8012202:	3714      	adds	r7, #20
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	b004      	add	sp, #16
 801220c:	4770      	bx	lr
 801220e:	bf00      	nop
 8012210:	ffff8100 	.word	0xffff8100

08012214 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012214:	b480      	push	{r7}
 8012216:	b083      	sub	sp, #12
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012222:	4618      	mov	r0, r3
 8012224:	370c      	adds	r7, #12
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr

0801222e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 801222e:	b580      	push	{r7, lr}
 8012230:	b082      	sub	sp, #8
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2203      	movs	r2, #3
 801223a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801223c:	2002      	movs	r0, #2
 801223e:	f7f4 fe9b 	bl	8006f78 <HAL_Delay>
  
  return HAL_OK;
 8012242:	2300      	movs	r3, #0
}
 8012244:	4618      	mov	r0, r3
 8012246:	3708      	adds	r7, #8
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	f003 0303 	and.w	r3, r3, #3
}
 801225c:	4618      	mov	r0, r3
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012268:	b480      	push	{r7}
 801226a:	b085      	sub	sp, #20
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	681a      	ldr	r2, [r3, #0]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012286:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801228c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012292:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012294:	68fa      	ldr	r2, [r7, #12]
 8012296:	4313      	orrs	r3, r2
 8012298:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	68da      	ldr	r2, [r3, #12]
 801229e:	4b06      	ldr	r3, [pc, #24]	; (80122b8 <SDMMC_SendCommand+0x50>)
 80122a0:	4013      	ands	r3, r2
 80122a2:	68fa      	ldr	r2, [r7, #12]
 80122a4:	431a      	orrs	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80122aa:	2300      	movs	r3, #0
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3714      	adds	r7, #20
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr
 80122b8:	fffff000 	.word	0xfffff000

080122bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	691b      	ldr	r3, [r3, #16]
 80122c8:	b2db      	uxtb	r3, r3
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	370c      	adds	r7, #12
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr

080122d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80122d6:	b480      	push	{r7}
 80122d8:	b085      	sub	sp, #20
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
 80122de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	3314      	adds	r3, #20
 80122e4:	461a      	mov	r2, r3
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	4413      	add	r3, r2
 80122ea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681b      	ldr	r3, [r3, #0]
}  
 80122f0:	4618      	mov	r0, r3
 80122f2:	3714      	adds	r7, #20
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80122fc:	b480      	push	{r7}
 80122fe:	b085      	sub	sp, #20
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012306:	2300      	movs	r3, #0
 8012308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	685a      	ldr	r2, [r3, #4]
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012322:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012328:	431a      	orrs	r2, r3
                       Data->DPSM);
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801232e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012330:	68fa      	ldr	r2, [r7, #12]
 8012332:	4313      	orrs	r3, r2
 8012334:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801233a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	431a      	orrs	r2, r3
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012346:	2300      	movs	r3, #0

}
 8012348:	4618      	mov	r0, r3
 801234a:	3714      	adds	r7, #20
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b088      	sub	sp, #32
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012362:	2310      	movs	r3, #16
 8012364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012366:	2340      	movs	r3, #64	; 0x40
 8012368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801236a:	2300      	movs	r3, #0
 801236c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801236e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012372:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012374:	f107 0308 	add.w	r3, r7, #8
 8012378:	4619      	mov	r1, r3
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f7ff ff74 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012380:	f241 3288 	movw	r2, #5000	; 0x1388
 8012384:	2110      	movs	r1, #16
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f000 fa46 	bl	8012818 <SDMMC_GetCmdResp1>
 801238c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801238e:	69fb      	ldr	r3, [r7, #28]
}
 8012390:	4618      	mov	r0, r3
 8012392:	3720      	adds	r7, #32
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}

08012398 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b088      	sub	sp, #32
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80123a6:	2311      	movs	r3, #17
 80123a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123aa:	2340      	movs	r3, #64	; 0x40
 80123ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123ae:	2300      	movs	r3, #0
 80123b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123b8:	f107 0308 	add.w	r3, r7, #8
 80123bc:	4619      	mov	r1, r3
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f7ff ff52 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80123c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80123c8:	2111      	movs	r1, #17
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 fa24 	bl	8012818 <SDMMC_GetCmdResp1>
 80123d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123d2:	69fb      	ldr	r3, [r7, #28]
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3720      	adds	r7, #32
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b088      	sub	sp, #32
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80123ea:	2312      	movs	r3, #18
 80123ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123ee:	2340      	movs	r3, #64	; 0x40
 80123f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123f2:	2300      	movs	r3, #0
 80123f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123fc:	f107 0308 	add.w	r3, r7, #8
 8012400:	4619      	mov	r1, r3
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f7ff ff30 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012408:	f241 3288 	movw	r2, #5000	; 0x1388
 801240c:	2112      	movs	r1, #18
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f000 fa02 	bl	8012818 <SDMMC_GetCmdResp1>
 8012414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012416:	69fb      	ldr	r3, [r7, #28]
}
 8012418:	4618      	mov	r0, r3
 801241a:	3720      	adds	r7, #32
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}

08012420 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b088      	sub	sp, #32
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801242e:	2318      	movs	r3, #24
 8012430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012432:	2340      	movs	r3, #64	; 0x40
 8012434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012436:	2300      	movs	r3, #0
 8012438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801243a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801243e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012440:	f107 0308 	add.w	r3, r7, #8
 8012444:	4619      	mov	r1, r3
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f7ff ff0e 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012450:	2118      	movs	r1, #24
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f9e0 	bl	8012818 <SDMMC_GetCmdResp1>
 8012458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801245a:	69fb      	ldr	r3, [r7, #28]
}
 801245c:	4618      	mov	r0, r3
 801245e:	3720      	adds	r7, #32
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b088      	sub	sp, #32
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012472:	2319      	movs	r3, #25
 8012474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012476:	2340      	movs	r3, #64	; 0x40
 8012478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801247a:	2300      	movs	r3, #0
 801247c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801247e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012482:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012484:	f107 0308 	add.w	r3, r7, #8
 8012488:	4619      	mov	r1, r3
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f7ff feec 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012490:	f241 3288 	movw	r2, #5000	; 0x1388
 8012494:	2119      	movs	r1, #25
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f000 f9be 	bl	8012818 <SDMMC_GetCmdResp1>
 801249c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801249e:	69fb      	ldr	r3, [r7, #28]
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3720      	adds	r7, #32
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}

080124a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b088      	sub	sp, #32
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80124b0:	2300      	movs	r3, #0
 80124b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80124b4:	230c      	movs	r3, #12
 80124b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124b8:	2340      	movs	r3, #64	; 0x40
 80124ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124bc:	2300      	movs	r3, #0
 80124be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124c6:	f107 0308 	add.w	r3, r7, #8
 80124ca:	4619      	mov	r1, r3
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f7ff fecb 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80124d2:	4a05      	ldr	r2, [pc, #20]	; (80124e8 <SDMMC_CmdStopTransfer+0x40>)
 80124d4:	210c      	movs	r1, #12
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f000 f99e 	bl	8012818 <SDMMC_GetCmdResp1>
 80124dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124de:	69fb      	ldr	r3, [r7, #28]
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3720      	adds	r7, #32
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	05f5e100 	.word	0x05f5e100

080124ec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b08a      	sub	sp, #40	; 0x28
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80124fc:	2307      	movs	r3, #7
 80124fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012500:	2340      	movs	r3, #64	; 0x40
 8012502:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012504:	2300      	movs	r3, #0
 8012506:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801250c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801250e:	f107 0310 	add.w	r3, r7, #16
 8012512:	4619      	mov	r1, r3
 8012514:	68f8      	ldr	r0, [r7, #12]
 8012516:	f7ff fea7 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801251a:	f241 3288 	movw	r2, #5000	; 0x1388
 801251e:	2107      	movs	r1, #7
 8012520:	68f8      	ldr	r0, [r7, #12]
 8012522:	f000 f979 	bl	8012818 <SDMMC_GetCmdResp1>
 8012526:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801252a:	4618      	mov	r0, r3
 801252c:	3728      	adds	r7, #40	; 0x28
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}

08012532 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012532:	b580      	push	{r7, lr}
 8012534:	b088      	sub	sp, #32
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801253a:	2300      	movs	r3, #0
 801253c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801253e:	2300      	movs	r3, #0
 8012540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012542:	2300      	movs	r3, #0
 8012544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012546:	2300      	movs	r3, #0
 8012548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801254a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801254e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012550:	f107 0308 	add.w	r3, r7, #8
 8012554:	4619      	mov	r1, r3
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f7ff fe86 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f000 f92f 	bl	80127c0 <SDMMC_GetCmdError>
 8012562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012564:	69fb      	ldr	r3, [r7, #28]
}
 8012566:	4618      	mov	r0, r3
 8012568:	3720      	adds	r7, #32
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801256e:	b580      	push	{r7, lr}
 8012570:	b088      	sub	sp, #32
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012576:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801257a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801257c:	2308      	movs	r3, #8
 801257e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012580:	2340      	movs	r3, #64	; 0x40
 8012582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012584:	2300      	movs	r3, #0
 8012586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801258c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801258e:	f107 0308 	add.w	r3, r7, #8
 8012592:	4619      	mov	r1, r3
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f7ff fe67 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 fb26 	bl	8012bec <SDMMC_GetCmdResp7>
 80125a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125a2:	69fb      	ldr	r3, [r7, #28]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3720      	adds	r7, #32
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b088      	sub	sp, #32
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80125ba:	2337      	movs	r3, #55	; 0x37
 80125bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125be:	2340      	movs	r3, #64	; 0x40
 80125c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125c2:	2300      	movs	r3, #0
 80125c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125cc:	f107 0308 	add.w	r3, r7, #8
 80125d0:	4619      	mov	r1, r3
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f7ff fe48 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80125d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80125dc:	2137      	movs	r1, #55	; 0x37
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f000 f91a 	bl	8012818 <SDMMC_GetCmdResp1>
 80125e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125e6:	69fb      	ldr	r3, [r7, #28]
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3720      	adds	r7, #32
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}

080125f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b088      	sub	sp, #32
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80125fa:	683a      	ldr	r2, [r7, #0]
 80125fc:	4b0d      	ldr	r3, [pc, #52]	; (8012634 <SDMMC_CmdAppOperCommand+0x44>)
 80125fe:	4313      	orrs	r3, r2
 8012600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012602:	2329      	movs	r3, #41	; 0x29
 8012604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012606:	2340      	movs	r3, #64	; 0x40
 8012608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801260a:	2300      	movs	r3, #0
 801260c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801260e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012612:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012614:	f107 0308 	add.w	r3, r7, #8
 8012618:	4619      	mov	r1, r3
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f7ff fe24 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 fa2f 	bl	8012a84 <SDMMC_GetCmdResp3>
 8012626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012628:	69fb      	ldr	r3, [r7, #28]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3720      	adds	r7, #32
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	80100000 	.word	0x80100000

08012638 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b088      	sub	sp, #32
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012646:	2306      	movs	r3, #6
 8012648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801264a:	2340      	movs	r3, #64	; 0x40
 801264c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801264e:	2300      	movs	r3, #0
 8012650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012656:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012658:	f107 0308 	add.w	r3, r7, #8
 801265c:	4619      	mov	r1, r3
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f7ff fe02 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012664:	f241 3288 	movw	r2, #5000	; 0x1388
 8012668:	2106      	movs	r1, #6
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f000 f8d4 	bl	8012818 <SDMMC_GetCmdResp1>
 8012670:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012672:	69fb      	ldr	r3, [r7, #28]
}
 8012674:	4618      	mov	r0, r3
 8012676:	3720      	adds	r7, #32
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b088      	sub	sp, #32
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012684:	2300      	movs	r3, #0
 8012686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012688:	2333      	movs	r3, #51	; 0x33
 801268a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801268c:	2340      	movs	r3, #64	; 0x40
 801268e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012690:	2300      	movs	r3, #0
 8012692:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012698:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801269a:	f107 0308 	add.w	r3, r7, #8
 801269e:	4619      	mov	r1, r3
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f7ff fde1 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80126a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80126aa:	2133      	movs	r1, #51	; 0x33
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 f8b3 	bl	8012818 <SDMMC_GetCmdResp1>
 80126b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126b4:	69fb      	ldr	r3, [r7, #28]
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3720      	adds	r7, #32
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}

080126be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80126be:	b580      	push	{r7, lr}
 80126c0:	b088      	sub	sp, #32
 80126c2:	af00      	add	r7, sp, #0
 80126c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80126c6:	2300      	movs	r3, #0
 80126c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80126ca:	2302      	movs	r3, #2
 80126cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80126ce:	23c0      	movs	r3, #192	; 0xc0
 80126d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126d2:	2300      	movs	r3, #0
 80126d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126dc:	f107 0308 	add.w	r3, r7, #8
 80126e0:	4619      	mov	r1, r3
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f7ff fdc0 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f000 f983 	bl	80129f4 <SDMMC_GetCmdResp2>
 80126ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126f0:	69fb      	ldr	r3, [r7, #28]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3720      	adds	r7, #32
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}

080126fa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80126fa:	b580      	push	{r7, lr}
 80126fc:	b088      	sub	sp, #32
 80126fe:	af00      	add	r7, sp, #0
 8012700:	6078      	str	r0, [r7, #4]
 8012702:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012708:	2309      	movs	r3, #9
 801270a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801270c:	23c0      	movs	r3, #192	; 0xc0
 801270e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012710:	2300      	movs	r3, #0
 8012712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012718:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801271a:	f107 0308 	add.w	r3, r7, #8
 801271e:	4619      	mov	r1, r3
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7ff fda1 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f000 f964 	bl	80129f4 <SDMMC_GetCmdResp2>
 801272c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801272e:	69fb      	ldr	r3, [r7, #28]
}
 8012730:	4618      	mov	r0, r3
 8012732:	3720      	adds	r7, #32
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b088      	sub	sp, #32
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012742:	2300      	movs	r3, #0
 8012744:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012746:	2303      	movs	r3, #3
 8012748:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801274a:	2340      	movs	r3, #64	; 0x40
 801274c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801274e:	2300      	movs	r3, #0
 8012750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012756:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012758:	f107 0308 	add.w	r3, r7, #8
 801275c:	4619      	mov	r1, r3
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f7ff fd82 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012764:	683a      	ldr	r2, [r7, #0]
 8012766:	2103      	movs	r1, #3
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f000 f9c9 	bl	8012b00 <SDMMC_GetCmdResp6>
 801276e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012770:	69fb      	ldr	r3, [r7, #28]
}
 8012772:	4618      	mov	r0, r3
 8012774:	3720      	adds	r7, #32
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}

0801277a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801277a:	b580      	push	{r7, lr}
 801277c:	b088      	sub	sp, #32
 801277e:	af00      	add	r7, sp, #0
 8012780:	6078      	str	r0, [r7, #4]
 8012782:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012788:	230d      	movs	r3, #13
 801278a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801278c:	2340      	movs	r3, #64	; 0x40
 801278e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012790:	2300      	movs	r3, #0
 8012792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012798:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801279a:	f107 0308 	add.w	r3, r7, #8
 801279e:	4619      	mov	r1, r3
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7ff fd61 	bl	8012268 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80127a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80127aa:	210d      	movs	r1, #13
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f000 f833 	bl	8012818 <SDMMC_GetCmdResp1>
 80127b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127b4:	69fb      	ldr	r3, [r7, #28]
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	3720      	adds	r7, #32
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
	...

080127c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80127c0:	b480      	push	{r7}
 80127c2:	b085      	sub	sp, #20
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80127c8:	4b11      	ldr	r3, [pc, #68]	; (8012810 <SDMMC_GetCmdError+0x50>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	4a11      	ldr	r2, [pc, #68]	; (8012814 <SDMMC_GetCmdError+0x54>)
 80127ce:	fba2 2303 	umull	r2, r3, r2, r3
 80127d2:	0a5b      	lsrs	r3, r3, #9
 80127d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80127d8:	fb02 f303 	mul.w	r3, r2, r3
 80127dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	1e5a      	subs	r2, r3, #1
 80127e2:	60fa      	str	r2, [r7, #12]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d102      	bne.n	80127ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127ec:	e009      	b.n	8012802 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d0f1      	beq.n	80127de <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	22c5      	movs	r2, #197	; 0xc5
 80127fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012800:	2300      	movs	r3, #0
}
 8012802:	4618      	mov	r0, r3
 8012804:	3714      	adds	r7, #20
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop
 8012810:	20000008 	.word	0x20000008
 8012814:	10624dd3 	.word	0x10624dd3

08012818 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b088      	sub	sp, #32
 801281c:	af00      	add	r7, sp, #0
 801281e:	60f8      	str	r0, [r7, #12]
 8012820:	460b      	mov	r3, r1
 8012822:	607a      	str	r2, [r7, #4]
 8012824:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012826:	4b70      	ldr	r3, [pc, #448]	; (80129e8 <SDMMC_GetCmdResp1+0x1d0>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	4a70      	ldr	r2, [pc, #448]	; (80129ec <SDMMC_GetCmdResp1+0x1d4>)
 801282c:	fba2 2303 	umull	r2, r3, r2, r3
 8012830:	0a5a      	lsrs	r2, r3, #9
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	fb02 f303 	mul.w	r3, r2, r3
 8012838:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	1e5a      	subs	r2, r3, #1
 801283e:	61fa      	str	r2, [r7, #28]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d102      	bne.n	801284a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012844:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012848:	e0c9      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801284e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012850:	69bb      	ldr	r3, [r7, #24]
 8012852:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012856:	2b00      	cmp	r3, #0
 8012858:	d0ef      	beq.n	801283a <SDMMC_GetCmdResp1+0x22>
 801285a:	69bb      	ldr	r3, [r7, #24]
 801285c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012860:	2b00      	cmp	r3, #0
 8012862:	d1ea      	bne.n	801283a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012868:	f003 0304 	and.w	r3, r3, #4
 801286c:	2b00      	cmp	r3, #0
 801286e:	d004      	beq.n	801287a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	2204      	movs	r2, #4
 8012874:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012876:	2304      	movs	r3, #4
 8012878:	e0b1      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801287e:	f003 0301 	and.w	r3, r3, #1
 8012882:	2b00      	cmp	r3, #0
 8012884:	d004      	beq.n	8012890 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2201      	movs	r2, #1
 801288a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801288c:	2301      	movs	r3, #1
 801288e:	e0a6      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	22c5      	movs	r2, #197	; 0xc5
 8012894:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012896:	68f8      	ldr	r0, [r7, #12]
 8012898:	f7ff fd10 	bl	80122bc <SDMMC_GetCommandResponse>
 801289c:	4603      	mov	r3, r0
 801289e:	461a      	mov	r2, r3
 80128a0:	7afb      	ldrb	r3, [r7, #11]
 80128a2:	4293      	cmp	r3, r2
 80128a4:	d001      	beq.n	80128aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128a6:	2301      	movs	r3, #1
 80128a8:	e099      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80128aa:	2100      	movs	r1, #0
 80128ac:	68f8      	ldr	r0, [r7, #12]
 80128ae:	f7ff fd12 	bl	80122d6 <SDMMC_GetResponse>
 80128b2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80128b4:	697a      	ldr	r2, [r7, #20]
 80128b6:	4b4e      	ldr	r3, [pc, #312]	; (80129f0 <SDMMC_GetCmdResp1+0x1d8>)
 80128b8:	4013      	ands	r3, r2
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d101      	bne.n	80128c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80128be:	2300      	movs	r3, #0
 80128c0:	e08d      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	da02      	bge.n	80128ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80128c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80128cc:	e087      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80128ce:	697b      	ldr	r3, [r7, #20]
 80128d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d001      	beq.n	80128dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80128d8:	2340      	movs	r3, #64	; 0x40
 80128da:	e080      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d001      	beq.n	80128ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80128e6:	2380      	movs	r3, #128	; 0x80
 80128e8:	e079      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d002      	beq.n	80128fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80128f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128f8:	e071      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012900:	2b00      	cmp	r3, #0
 8012902:	d002      	beq.n	801290a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012908:	e069      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012910:	2b00      	cmp	r3, #0
 8012912:	d002      	beq.n	801291a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012918:	e061      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012920:	2b00      	cmp	r3, #0
 8012922:	d002      	beq.n	801292a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012928:	e059      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012930:	2b00      	cmp	r3, #0
 8012932:	d002      	beq.n	801293a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012938:	e051      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012940:	2b00      	cmp	r3, #0
 8012942:	d002      	beq.n	801294a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012948:	e049      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012950:	2b00      	cmp	r3, #0
 8012952:	d002      	beq.n	801295a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012954:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012958:	e041      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012960:	2b00      	cmp	r3, #0
 8012962:	d002      	beq.n	801296a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012968:	e039      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012970:	2b00      	cmp	r3, #0
 8012972:	d002      	beq.n	801297a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012978:	e031      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012980:	2b00      	cmp	r3, #0
 8012982:	d002      	beq.n	801298a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012984:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012988:	e029      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012990:	2b00      	cmp	r3, #0
 8012992:	d002      	beq.n	801299a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012994:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012998:	e021      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d002      	beq.n	80129aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80129a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80129a8:	e019      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d002      	beq.n	80129ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80129b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80129b8:	e011      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d002      	beq.n	80129ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80129c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80129c8:	e009      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	f003 0308 	and.w	r3, r3, #8
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d002      	beq.n	80129da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80129d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80129d8:	e001      	b.n	80129de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80129da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3720      	adds	r7, #32
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
 80129e6:	bf00      	nop
 80129e8:	20000008 	.word	0x20000008
 80129ec:	10624dd3 	.word	0x10624dd3
 80129f0:	fdffe008 	.word	0xfdffe008

080129f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80129fc:	4b1f      	ldr	r3, [pc, #124]	; (8012a7c <SDMMC_GetCmdResp2+0x88>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	4a1f      	ldr	r2, [pc, #124]	; (8012a80 <SDMMC_GetCmdResp2+0x8c>)
 8012a02:	fba2 2303 	umull	r2, r3, r2, r3
 8012a06:	0a5b      	lsrs	r3, r3, #9
 8012a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a0c:	fb02 f303 	mul.w	r3, r2, r3
 8012a10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	1e5a      	subs	r2, r3, #1
 8012a16:	60fa      	str	r2, [r7, #12]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d102      	bne.n	8012a22 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a20:	e026      	b.n	8012a70 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d0ef      	beq.n	8012a12 <SDMMC_GetCmdResp2+0x1e>
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d1ea      	bne.n	8012a12 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a40:	f003 0304 	and.w	r3, r3, #4
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d004      	beq.n	8012a52 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2204      	movs	r2, #4
 8012a4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a4e:	2304      	movs	r3, #4
 8012a50:	e00e      	b.n	8012a70 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a56:	f003 0301 	and.w	r3, r3, #1
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d004      	beq.n	8012a68 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2201      	movs	r2, #1
 8012a62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a64:	2301      	movs	r3, #1
 8012a66:	e003      	b.n	8012a70 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	22c5      	movs	r2, #197	; 0xc5
 8012a6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012a6e:	2300      	movs	r3, #0
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3714      	adds	r7, #20
 8012a74:	46bd      	mov	sp, r7
 8012a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7a:	4770      	bx	lr
 8012a7c:	20000008 	.word	0x20000008
 8012a80:	10624dd3 	.word	0x10624dd3

08012a84 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012a84:	b480      	push	{r7}
 8012a86:	b085      	sub	sp, #20
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012a8c:	4b1a      	ldr	r3, [pc, #104]	; (8012af8 <SDMMC_GetCmdResp3+0x74>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	4a1a      	ldr	r2, [pc, #104]	; (8012afc <SDMMC_GetCmdResp3+0x78>)
 8012a92:	fba2 2303 	umull	r2, r3, r2, r3
 8012a96:	0a5b      	lsrs	r3, r3, #9
 8012a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a9c:	fb02 f303 	mul.w	r3, r2, r3
 8012aa0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	1e5a      	subs	r2, r3, #1
 8012aa6:	60fa      	str	r2, [r7, #12]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d102      	bne.n	8012ab2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012aac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012ab0:	e01b      	b.n	8012aea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ab6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d0ef      	beq.n	8012aa2 <SDMMC_GetCmdResp3+0x1e>
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d1ea      	bne.n	8012aa2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ad0:	f003 0304 	and.w	r3, r3, #4
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d004      	beq.n	8012ae2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2204      	movs	r2, #4
 8012adc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012ade:	2304      	movs	r3, #4
 8012ae0:	e003      	b.n	8012aea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	22c5      	movs	r2, #197	; 0xc5
 8012ae6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012ae8:	2300      	movs	r3, #0
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	3714      	adds	r7, #20
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr
 8012af6:	bf00      	nop
 8012af8:	20000008 	.word	0x20000008
 8012afc:	10624dd3 	.word	0x10624dd3

08012b00 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b088      	sub	sp, #32
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	460b      	mov	r3, r1
 8012b0a:	607a      	str	r2, [r7, #4]
 8012b0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012b0e:	4b35      	ldr	r3, [pc, #212]	; (8012be4 <SDMMC_GetCmdResp6+0xe4>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4a35      	ldr	r2, [pc, #212]	; (8012be8 <SDMMC_GetCmdResp6+0xe8>)
 8012b14:	fba2 2303 	umull	r2, r3, r2, r3
 8012b18:	0a5b      	lsrs	r3, r3, #9
 8012b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b1e:	fb02 f303 	mul.w	r3, r2, r3
 8012b22:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	1e5a      	subs	r2, r3, #1
 8012b28:	61fa      	str	r2, [r7, #28]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d102      	bne.n	8012b34 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b32:	e052      	b.n	8012bda <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b38:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b3a:	69bb      	ldr	r3, [r7, #24]
 8012b3c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d0ef      	beq.n	8012b24 <SDMMC_GetCmdResp6+0x24>
 8012b44:	69bb      	ldr	r3, [r7, #24]
 8012b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d1ea      	bne.n	8012b24 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b52:	f003 0304 	and.w	r3, r3, #4
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d004      	beq.n	8012b64 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	2204      	movs	r2, #4
 8012b5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b60:	2304      	movs	r3, #4
 8012b62:	e03a      	b.n	8012bda <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b68:	f003 0301 	and.w	r3, r3, #1
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d004      	beq.n	8012b7a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2201      	movs	r2, #1
 8012b74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b76:	2301      	movs	r3, #1
 8012b78:	e02f      	b.n	8012bda <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012b7a:	68f8      	ldr	r0, [r7, #12]
 8012b7c:	f7ff fb9e 	bl	80122bc <SDMMC_GetCommandResponse>
 8012b80:	4603      	mov	r3, r0
 8012b82:	461a      	mov	r2, r3
 8012b84:	7afb      	ldrb	r3, [r7, #11]
 8012b86:	4293      	cmp	r3, r2
 8012b88:	d001      	beq.n	8012b8e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e025      	b.n	8012bda <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	22c5      	movs	r2, #197	; 0xc5
 8012b92:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012b94:	2100      	movs	r1, #0
 8012b96:	68f8      	ldr	r0, [r7, #12]
 8012b98:	f7ff fb9d 	bl	80122d6 <SDMMC_GetResponse>
 8012b9c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d106      	bne.n	8012bb6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	0c1b      	lsrs	r3, r3, #16
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	e011      	b.n	8012bda <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d002      	beq.n	8012bc6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012bc4:	e009      	b.n	8012bda <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d002      	beq.n	8012bd6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bd4:	e001      	b.n	8012bda <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3720      	adds	r7, #32
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	20000008 	.word	0x20000008
 8012be8:	10624dd3 	.word	0x10624dd3

08012bec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012bec:	b480      	push	{r7}
 8012bee:	b085      	sub	sp, #20
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012bf4:	4b22      	ldr	r3, [pc, #136]	; (8012c80 <SDMMC_GetCmdResp7+0x94>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	4a22      	ldr	r2, [pc, #136]	; (8012c84 <SDMMC_GetCmdResp7+0x98>)
 8012bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8012bfe:	0a5b      	lsrs	r3, r3, #9
 8012c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c04:	fb02 f303 	mul.w	r3, r2, r3
 8012c08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	1e5a      	subs	r2, r3, #1
 8012c0e:	60fa      	str	r2, [r7, #12]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d102      	bne.n	8012c1a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c18:	e02c      	b.n	8012c74 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d0ef      	beq.n	8012c0a <SDMMC_GetCmdResp7+0x1e>
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d1ea      	bne.n	8012c0a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c38:	f003 0304 	and.w	r3, r3, #4
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d004      	beq.n	8012c4a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2204      	movs	r2, #4
 8012c44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c46:	2304      	movs	r3, #4
 8012c48:	e014      	b.n	8012c74 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c4e:	f003 0301 	and.w	r3, r3, #1
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d004      	beq.n	8012c60 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2201      	movs	r2, #1
 8012c5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	e009      	b.n	8012c74 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d002      	beq.n	8012c72 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2240      	movs	r2, #64	; 0x40
 8012c70:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012c72:	2300      	movs	r3, #0
  
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3714      	adds	r7, #20
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr
 8012c80:	20000008 	.word	0x20000008
 8012c84:	10624dd3 	.word	0x10624dd3

08012c88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012c88:	b084      	sub	sp, #16
 8012c8a:	b580      	push	{r7, lr}
 8012c8c:	b084      	sub	sp, #16
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	6078      	str	r0, [r7, #4]
 8012c92:	f107 001c 	add.w	r0, r7, #28
 8012c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d120      	bne.n	8012ce2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ca4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	68da      	ldr	r2, [r3, #12]
 8012cb0:	4b20      	ldr	r3, [pc, #128]	; (8012d34 <USB_CoreInit+0xac>)
 8012cb2:	4013      	ands	r3, r2
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cc6:	2b01      	cmp	r3, #1
 8012cc8:	d105      	bne.n	8012cd6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	68db      	ldr	r3, [r3, #12]
 8012cce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f000 f942 	bl	8012f60 <USB_CoreReset>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	73fb      	strb	r3, [r7, #15]
 8012ce0:	e010      	b.n	8012d04 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f000 f936 	bl	8012f60 <USB_CoreReset>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cfc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8012d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d06:	2b01      	cmp	r3, #1
 8012d08:	d10b      	bne.n	8012d22 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	689b      	ldr	r3, [r3, #8]
 8012d0e:	f043 0206 	orr.w	r2, r3, #6
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	f043 0220 	orr.w	r2, r3, #32
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	3710      	adds	r7, #16
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012d2e:	b004      	add	sp, #16
 8012d30:	4770      	bx	lr
 8012d32:	bf00      	nop
 8012d34:	ffbdffbf 	.word	0xffbdffbf

08012d38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b083      	sub	sp, #12
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	689b      	ldr	r3, [r3, #8]
 8012d44:	f043 0201 	orr.w	r2, r3, #1
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d4c:	2300      	movs	r3, #0
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	370c      	adds	r7, #12
 8012d52:	46bd      	mov	sp, r7
 8012d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d58:	4770      	bx	lr

08012d5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012d5a:	b480      	push	{r7}
 8012d5c:	b083      	sub	sp, #12
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	689b      	ldr	r3, [r3, #8]
 8012d66:	f023 0201 	bic.w	r2, r3, #1
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d6e:	2300      	movs	r3, #0
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	370c      	adds	r7, #12
 8012d74:	46bd      	mov	sp, r7
 8012d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7a:	4770      	bx	lr

08012d7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	460b      	mov	r3, r1
 8012d86:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012d94:	78fb      	ldrb	r3, [r7, #3]
 8012d96:	2b01      	cmp	r3, #1
 8012d98:	d106      	bne.n	8012da8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	68db      	ldr	r3, [r3, #12]
 8012d9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	60da      	str	r2, [r3, #12]
 8012da6:	e00b      	b.n	8012dc0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8012da8:	78fb      	ldrb	r3, [r7, #3]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d106      	bne.n	8012dbc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	68db      	ldr	r3, [r3, #12]
 8012db2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	60da      	str	r2, [r3, #12]
 8012dba:	e001      	b.n	8012dc0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	e003      	b.n	8012dc8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8012dc0:	2032      	movs	r0, #50	; 0x32
 8012dc2:	f7f4 f8d9 	bl	8006f78 <HAL_Delay>

  return HAL_OK;
 8012dc6:	2300      	movs	r3, #0
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3708      	adds	r7, #8
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b085      	sub	sp, #20
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	019b      	lsls	r3, r3, #6
 8012de2:	f043 0220 	orr.w	r2, r3, #32
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	3301      	adds	r3, #1
 8012dee:	60fb      	str	r3, [r7, #12]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	4a09      	ldr	r2, [pc, #36]	; (8012e18 <USB_FlushTxFifo+0x48>)
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d901      	bls.n	8012dfc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012df8:	2303      	movs	r3, #3
 8012dfa:	e006      	b.n	8012e0a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	691b      	ldr	r3, [r3, #16]
 8012e00:	f003 0320 	and.w	r3, r3, #32
 8012e04:	2b20      	cmp	r3, #32
 8012e06:	d0f0      	beq.n	8012dea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012e08:	2300      	movs	r3, #0
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	3714      	adds	r7, #20
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e14:	4770      	bx	lr
 8012e16:	bf00      	nop
 8012e18:	00030d40 	.word	0x00030d40

08012e1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b085      	sub	sp, #20
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012e24:	2300      	movs	r3, #0
 8012e26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2210      	movs	r2, #16
 8012e2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	3301      	adds	r3, #1
 8012e32:	60fb      	str	r3, [r7, #12]
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	4a09      	ldr	r2, [pc, #36]	; (8012e5c <USB_FlushRxFifo+0x40>)
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d901      	bls.n	8012e40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012e3c:	2303      	movs	r3, #3
 8012e3e:	e006      	b.n	8012e4e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	691b      	ldr	r3, [r3, #16]
 8012e44:	f003 0310 	and.w	r3, r3, #16
 8012e48:	2b10      	cmp	r3, #16
 8012e4a:	d0f0      	beq.n	8012e2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012e4c:	2300      	movs	r3, #0
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3714      	adds	r7, #20
 8012e52:	46bd      	mov	sp, r7
 8012e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop
 8012e5c:	00030d40 	.word	0x00030d40

08012e60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012e60:	b480      	push	{r7}
 8012e62:	b089      	sub	sp, #36	; 0x24
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	4611      	mov	r1, r2
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	460b      	mov	r3, r1
 8012e70:	71fb      	strb	r3, [r7, #7]
 8012e72:	4613      	mov	r3, r2
 8012e74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d11a      	bne.n	8012ebc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012e86:	88bb      	ldrh	r3, [r7, #4]
 8012e88:	3303      	adds	r3, #3
 8012e8a:	089b      	lsrs	r3, r3, #2
 8012e8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012e8e:	2300      	movs	r3, #0
 8012e90:	61bb      	str	r3, [r7, #24]
 8012e92:	e00f      	b.n	8012eb4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012e94:	79fb      	ldrb	r3, [r7, #7]
 8012e96:	031a      	lsls	r2, r3, #12
 8012e98:	697b      	ldr	r3, [r7, #20]
 8012e9a:	4413      	add	r3, r2
 8012e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012ea0:	461a      	mov	r2, r3
 8012ea2:	69fb      	ldr	r3, [r7, #28]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012ea8:	69fb      	ldr	r3, [r7, #28]
 8012eaa:	3304      	adds	r3, #4
 8012eac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012eae:	69bb      	ldr	r3, [r7, #24]
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	61bb      	str	r3, [r7, #24]
 8012eb4:	69ba      	ldr	r2, [r7, #24]
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d3eb      	bcc.n	8012e94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012ebc:	2300      	movs	r3, #0
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3724      	adds	r7, #36	; 0x24
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr

08012eca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012eca:	b480      	push	{r7}
 8012ecc:	b089      	sub	sp, #36	; 0x24
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	60f8      	str	r0, [r7, #12]
 8012ed2:	60b9      	str	r1, [r7, #8]
 8012ed4:	4613      	mov	r3, r2
 8012ed6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012ee0:	88fb      	ldrh	r3, [r7, #6]
 8012ee2:	3303      	adds	r3, #3
 8012ee4:	089b      	lsrs	r3, r3, #2
 8012ee6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012ee8:	2300      	movs	r3, #0
 8012eea:	61bb      	str	r3, [r7, #24]
 8012eec:	e00b      	b.n	8012f06 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	69fb      	ldr	r3, [r7, #28]
 8012ef8:	601a      	str	r2, [r3, #0]
    pDest++;
 8012efa:	69fb      	ldr	r3, [r7, #28]
 8012efc:	3304      	adds	r3, #4
 8012efe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012f00:	69bb      	ldr	r3, [r7, #24]
 8012f02:	3301      	adds	r3, #1
 8012f04:	61bb      	str	r3, [r7, #24]
 8012f06:	69ba      	ldr	r2, [r7, #24]
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d3ef      	bcc.n	8012eee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012f0e:	69fb      	ldr	r3, [r7, #28]
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3724      	adds	r7, #36	; 0x24
 8012f14:	46bd      	mov	sp, r7
 8012f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1a:	4770      	bx	lr

08012f1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b085      	sub	sp, #20
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	695b      	ldr	r3, [r3, #20]
 8012f28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	699b      	ldr	r3, [r3, #24]
 8012f2e:	68fa      	ldr	r2, [r7, #12]
 8012f30:	4013      	ands	r3, r2
 8012f32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012f34:	68fb      	ldr	r3, [r7, #12]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3714      	adds	r7, #20
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr

08012f42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012f42:	b480      	push	{r7}
 8012f44:	b083      	sub	sp, #12
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	695b      	ldr	r3, [r3, #20]
 8012f4e:	f003 0301 	and.w	r3, r3, #1
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	370c      	adds	r7, #12
 8012f56:	46bd      	mov	sp, r7
 8012f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5c:	4770      	bx	lr
	...

08012f60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b085      	sub	sp, #20
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	3301      	adds	r3, #1
 8012f70:	60fb      	str	r3, [r7, #12]
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	4a13      	ldr	r2, [pc, #76]	; (8012fc4 <USB_CoreReset+0x64>)
 8012f76:	4293      	cmp	r3, r2
 8012f78:	d901      	bls.n	8012f7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012f7a:	2303      	movs	r3, #3
 8012f7c:	e01b      	b.n	8012fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	daf2      	bge.n	8012f6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012f86:	2300      	movs	r3, #0
 8012f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	691b      	ldr	r3, [r3, #16]
 8012f8e:	f043 0201 	orr.w	r2, r3, #1
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	3301      	adds	r3, #1
 8012f9a:	60fb      	str	r3, [r7, #12]
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	4a09      	ldr	r2, [pc, #36]	; (8012fc4 <USB_CoreReset+0x64>)
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d901      	bls.n	8012fa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012fa4:	2303      	movs	r3, #3
 8012fa6:	e006      	b.n	8012fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	691b      	ldr	r3, [r3, #16]
 8012fac:	f003 0301 	and.w	r3, r3, #1
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d0f0      	beq.n	8012f96 <USB_CoreReset+0x36>

  return HAL_OK;
 8012fb4:	2300      	movs	r3, #0
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3714      	adds	r7, #20
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc0:	4770      	bx	lr
 8012fc2:	bf00      	nop
 8012fc4:	00030d40 	.word	0x00030d40

08012fc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012fc8:	b084      	sub	sp, #16
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b084      	sub	sp, #16
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	6078      	str	r0, [r7, #4]
 8012fd2:	f107 001c 	add.w	r0, r7, #28
 8012fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d018      	beq.n	8013034 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8013002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013004:	2b01      	cmp	r3, #1
 8013006:	d10a      	bne.n	801301e <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	68ba      	ldr	r2, [r7, #8]
 8013012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013016:	f043 0304 	orr.w	r3, r3, #4
 801301a:	6013      	str	r3, [r2, #0]
 801301c:	e014      	b.n	8013048 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	68ba      	ldr	r2, [r7, #8]
 8013028:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801302c:	f023 0304 	bic.w	r3, r3, #4
 8013030:	6013      	str	r3, [r2, #0]
 8013032:	e009      	b.n	8013048 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	68ba      	ldr	r2, [r7, #8]
 801303e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013042:	f023 0304 	bic.w	r3, r3, #4
 8013046:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8013048:	2110      	movs	r1, #16
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f7ff fec0 	bl	8012dd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f7ff fee3 	bl	8012e1c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8013056:	2300      	movs	r3, #0
 8013058:	60fb      	str	r3, [r7, #12]
 801305a:	e015      	b.n	8013088 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	015a      	lsls	r2, r3, #5
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	4413      	add	r3, r2
 8013064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013068:	461a      	mov	r2, r3
 801306a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801306e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	015a      	lsls	r2, r3, #5
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	4413      	add	r3, r2
 8013078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801307c:	461a      	mov	r2, r3
 801307e:	2300      	movs	r3, #0
 8013080:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	3301      	adds	r3, #1
 8013086:	60fb      	str	r3, [r7, #12]
 8013088:	6a3b      	ldr	r3, [r7, #32]
 801308a:	68fa      	ldr	r2, [r7, #12]
 801308c:	429a      	cmp	r2, r3
 801308e:	d3e5      	bcc.n	801305c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8013090:	2101      	movs	r1, #1
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f000 f8ac 	bl	80131f0 <USB_DriveVbus>

  HAL_Delay(200U);
 8013098:	20c8      	movs	r0, #200	; 0xc8
 801309a:	f7f3 ff6d 	bl	8006f78 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	2200      	movs	r2, #0
 80130a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80130aa:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d00b      	beq.n	80130d0 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80130be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	4a14      	ldr	r2, [pc, #80]	; (8013114 <USB_HostInit+0x14c>)
 80130c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	4a13      	ldr	r2, [pc, #76]	; (8013118 <USB_HostInit+0x150>)
 80130ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80130ce:	e009      	b.n	80130e4 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2280      	movs	r2, #128	; 0x80
 80130d4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	4a10      	ldr	r2, [pc, #64]	; (801311c <USB_HostInit+0x154>)
 80130da:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	4a10      	ldr	r2, [pc, #64]	; (8013120 <USB_HostInit+0x158>)
 80130e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80130e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d105      	bne.n	80130f6 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	699b      	ldr	r3, [r3, #24]
 80130ee:	f043 0210 	orr.w	r2, r3, #16
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	699a      	ldr	r2, [r3, #24]
 80130fa:	4b0a      	ldr	r3, [pc, #40]	; (8013124 <USB_HostInit+0x15c>)
 80130fc:	4313      	orrs	r3, r2
 80130fe:	687a      	ldr	r2, [r7, #4]
 8013100:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8013102:	2300      	movs	r3, #0
}
 8013104:	4618      	mov	r0, r3
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801310e:	b004      	add	sp, #16
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop
 8013114:	01000200 	.word	0x01000200
 8013118:	00e00300 	.word	0x00e00300
 801311c:	00600080 	.word	0x00600080
 8013120:	004000e0 	.word	0x004000e0
 8013124:	a3200008 	.word	0xa3200008

08013128 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8013128:	b480      	push	{r7}
 801312a:	b085      	sub	sp, #20
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	460b      	mov	r3, r1
 8013132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	68fa      	ldr	r2, [r7, #12]
 8013142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013146:	f023 0303 	bic.w	r3, r3, #3
 801314a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	78fb      	ldrb	r3, [r7, #3]
 8013156:	f003 0303 	and.w	r3, r3, #3
 801315a:	68f9      	ldr	r1, [r7, #12]
 801315c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013160:	4313      	orrs	r3, r2
 8013162:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8013164:	78fb      	ldrb	r3, [r7, #3]
 8013166:	2b01      	cmp	r3, #1
 8013168:	d107      	bne.n	801317a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013170:	461a      	mov	r2, r3
 8013172:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8013176:	6053      	str	r3, [r2, #4]
 8013178:	e009      	b.n	801318e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801317a:	78fb      	ldrb	r3, [r7, #3]
 801317c:	2b02      	cmp	r3, #2
 801317e:	d106      	bne.n	801318e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013186:	461a      	mov	r2, r3
 8013188:	f241 7370 	movw	r3, #6000	; 0x1770
 801318c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 801318e:	2300      	movs	r3, #0
}
 8013190:	4618      	mov	r0, r3
 8013192:	3714      	adds	r7, #20
 8013194:	46bd      	mov	sp, r7
 8013196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319a:	4770      	bx	lr

0801319c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80131a8:	2300      	movs	r3, #0
 80131aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80131bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	68fa      	ldr	r2, [r7, #12]
 80131c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80131c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80131ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80131cc:	2064      	movs	r0, #100	; 0x64
 80131ce:	f7f3 fed3 	bl	8006f78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	68fa      	ldr	r2, [r7, #12]
 80131d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80131da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80131de:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80131e0:	200a      	movs	r0, #10
 80131e2:	f7f3 fec9 	bl	8006f78 <HAL_Delay>

  return HAL_OK;
 80131e6:	2300      	movs	r3, #0
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3710      	adds	r7, #16
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80131f0:	b480      	push	{r7}
 80131f2:	b085      	sub	sp, #20
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	460b      	mov	r3, r1
 80131fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8013200:	2300      	movs	r3, #0
 8013202:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8013214:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801321c:	2b00      	cmp	r3, #0
 801321e:	d109      	bne.n	8013234 <USB_DriveVbus+0x44>
 8013220:	78fb      	ldrb	r3, [r7, #3]
 8013222:	2b01      	cmp	r3, #1
 8013224:	d106      	bne.n	8013234 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	68fa      	ldr	r2, [r7, #12]
 801322a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801322e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013232:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801323e:	d109      	bne.n	8013254 <USB_DriveVbus+0x64>
 8013240:	78fb      	ldrb	r3, [r7, #3]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d106      	bne.n	8013254 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	68fa      	ldr	r2, [r7, #12]
 801324a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801324e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013252:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8013254:	2300      	movs	r3, #0
}
 8013256:	4618      	mov	r0, r3
 8013258:	3714      	adds	r7, #20
 801325a:	46bd      	mov	sp, r7
 801325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013260:	4770      	bx	lr

08013262 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013262:	b480      	push	{r7}
 8013264:	b085      	sub	sp, #20
 8013266:	af00      	add	r7, sp, #0
 8013268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801326e:	2300      	movs	r3, #0
 8013270:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	0c5b      	lsrs	r3, r3, #17
 8013280:	f003 0303 	and.w	r3, r3, #3
}
 8013284:	4618      	mov	r0, r3
 8013286:	3714      	adds	r7, #20
 8013288:	46bd      	mov	sp, r7
 801328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328e:	4770      	bx	lr

08013290 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8013290:	b480      	push	{r7}
 8013292:	b085      	sub	sp, #20
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80132a2:	689b      	ldr	r3, [r3, #8]
 80132a4:	b29b      	uxth	r3, r3
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3714      	adds	r7, #20
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr
	...

080132b4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b088      	sub	sp, #32
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
 80132bc:	4608      	mov	r0, r1
 80132be:	4611      	mov	r1, r2
 80132c0:	461a      	mov	r2, r3
 80132c2:	4603      	mov	r3, r0
 80132c4:	70fb      	strb	r3, [r7, #3]
 80132c6:	460b      	mov	r3, r1
 80132c8:	70bb      	strb	r3, [r7, #2]
 80132ca:	4613      	mov	r3, r2
 80132cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80132ce:	2300      	movs	r3, #0
 80132d0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80132d6:	78fb      	ldrb	r3, [r7, #3]
 80132d8:	015a      	lsls	r2, r3, #5
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	4413      	add	r3, r2
 80132de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80132e2:	461a      	mov	r2, r3
 80132e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132e8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80132ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80132ee:	2b03      	cmp	r3, #3
 80132f0:	d87e      	bhi.n	80133f0 <USB_HC_Init+0x13c>
 80132f2:	a201      	add	r2, pc, #4	; (adr r2, 80132f8 <USB_HC_Init+0x44>)
 80132f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132f8:	08013309 	.word	0x08013309
 80132fc:	080133b3 	.word	0x080133b3
 8013300:	08013309 	.word	0x08013309
 8013304:	08013375 	.word	0x08013375
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013308:	78fb      	ldrb	r3, [r7, #3]
 801330a:	015a      	lsls	r2, r3, #5
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	4413      	add	r3, r2
 8013310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013314:	461a      	mov	r2, r3
 8013316:	f240 439d 	movw	r3, #1181	; 0x49d
 801331a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801331c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013320:	2b00      	cmp	r3, #0
 8013322:	da10      	bge.n	8013346 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013324:	78fb      	ldrb	r3, [r7, #3]
 8013326:	015a      	lsls	r2, r3, #5
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	4413      	add	r3, r2
 801332c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013330:	68db      	ldr	r3, [r3, #12]
 8013332:	78fa      	ldrb	r2, [r7, #3]
 8013334:	0151      	lsls	r1, r2, #5
 8013336:	693a      	ldr	r2, [r7, #16]
 8013338:	440a      	add	r2, r1
 801333a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801333e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013342:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8013344:	e057      	b.n	80133f6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801334e:	2b00      	cmp	r3, #0
 8013350:	d051      	beq.n	80133f6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8013352:	78fb      	ldrb	r3, [r7, #3]
 8013354:	015a      	lsls	r2, r3, #5
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	4413      	add	r3, r2
 801335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	78fa      	ldrb	r2, [r7, #3]
 8013362:	0151      	lsls	r1, r2, #5
 8013364:	693a      	ldr	r2, [r7, #16]
 8013366:	440a      	add	r2, r1
 8013368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801336c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013370:	60d3      	str	r3, [r2, #12]
      break;
 8013372:	e040      	b.n	80133f6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013374:	78fb      	ldrb	r3, [r7, #3]
 8013376:	015a      	lsls	r2, r3, #5
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	4413      	add	r3, r2
 801337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013380:	461a      	mov	r2, r3
 8013382:	f240 639d 	movw	r3, #1693	; 0x69d
 8013386:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8013388:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801338c:	2b00      	cmp	r3, #0
 801338e:	da34      	bge.n	80133fa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013390:	78fb      	ldrb	r3, [r7, #3]
 8013392:	015a      	lsls	r2, r3, #5
 8013394:	693b      	ldr	r3, [r7, #16]
 8013396:	4413      	add	r3, r2
 8013398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801339c:	68db      	ldr	r3, [r3, #12]
 801339e:	78fa      	ldrb	r2, [r7, #3]
 80133a0:	0151      	lsls	r1, r2, #5
 80133a2:	693a      	ldr	r2, [r7, #16]
 80133a4:	440a      	add	r2, r1
 80133a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80133aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80133ae:	60d3      	str	r3, [r2, #12]
      }

      break;
 80133b0:	e023      	b.n	80133fa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80133b2:	78fb      	ldrb	r3, [r7, #3]
 80133b4:	015a      	lsls	r2, r3, #5
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	4413      	add	r3, r2
 80133ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133be:	461a      	mov	r2, r3
 80133c0:	f240 2325 	movw	r3, #549	; 0x225
 80133c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80133c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	da17      	bge.n	80133fe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80133ce:	78fb      	ldrb	r3, [r7, #3]
 80133d0:	015a      	lsls	r2, r3, #5
 80133d2:	693b      	ldr	r3, [r7, #16]
 80133d4:	4413      	add	r3, r2
 80133d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	78fa      	ldrb	r2, [r7, #3]
 80133de:	0151      	lsls	r1, r2, #5
 80133e0:	693a      	ldr	r2, [r7, #16]
 80133e2:	440a      	add	r2, r1
 80133e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80133e8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80133ec:	60d3      	str	r3, [r2, #12]
      }
      break;
 80133ee:	e006      	b.n	80133fe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80133f0:	2301      	movs	r3, #1
 80133f2:	77fb      	strb	r3, [r7, #31]
      break;
 80133f4:	e004      	b.n	8013400 <USB_HC_Init+0x14c>
      break;
 80133f6:	bf00      	nop
 80133f8:	e002      	b.n	8013400 <USB_HC_Init+0x14c>
      break;
 80133fa:	bf00      	nop
 80133fc:	e000      	b.n	8013400 <USB_HC_Init+0x14c>
      break;
 80133fe:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013406:	699a      	ldr	r2, [r3, #24]
 8013408:	78fb      	ldrb	r3, [r7, #3]
 801340a:	f003 030f 	and.w	r3, r3, #15
 801340e:	2101      	movs	r1, #1
 8013410:	fa01 f303 	lsl.w	r3, r1, r3
 8013414:	6939      	ldr	r1, [r7, #16]
 8013416:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801341a:	4313      	orrs	r3, r2
 801341c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	699b      	ldr	r3, [r3, #24]
 8013422:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801342a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801342e:	2b00      	cmp	r3, #0
 8013430:	da03      	bge.n	801343a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8013432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013436:	61bb      	str	r3, [r7, #24]
 8013438:	e001      	b.n	801343e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 801343a:	2300      	movs	r3, #0
 801343c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f7ff ff0f 	bl	8013262 <USB_GetHostSpeed>
 8013444:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8013446:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801344a:	2b02      	cmp	r3, #2
 801344c:	d106      	bne.n	801345c <USB_HC_Init+0x1a8>
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2b02      	cmp	r3, #2
 8013452:	d003      	beq.n	801345c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8013454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013458:	617b      	str	r3, [r7, #20]
 801345a:	e001      	b.n	8013460 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801345c:	2300      	movs	r3, #0
 801345e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013460:	787b      	ldrb	r3, [r7, #1]
 8013462:	059b      	lsls	r3, r3, #22
 8013464:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8013468:	78bb      	ldrb	r3, [r7, #2]
 801346a:	02db      	lsls	r3, r3, #11
 801346c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013470:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8013472:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013476:	049b      	lsls	r3, r3, #18
 8013478:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801347c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801347e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013480:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8013484:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801348a:	78fb      	ldrb	r3, [r7, #3]
 801348c:	0159      	lsls	r1, r3, #5
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	440b      	add	r3, r1
 8013492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013496:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801349c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 801349e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80134a2:	2b03      	cmp	r3, #3
 80134a4:	d10f      	bne.n	80134c6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80134a6:	78fb      	ldrb	r3, [r7, #3]
 80134a8:	015a      	lsls	r2, r3, #5
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	4413      	add	r3, r2
 80134ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	78fa      	ldrb	r2, [r7, #3]
 80134b6:	0151      	lsls	r1, r2, #5
 80134b8:	693a      	ldr	r2, [r7, #16]
 80134ba:	440a      	add	r2, r1
 80134bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80134c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80134c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80134c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3720      	adds	r7, #32
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b08c      	sub	sp, #48	; 0x30
 80134d4:	af02      	add	r7, sp, #8
 80134d6:	60f8      	str	r0, [r7, #12]
 80134d8:	60b9      	str	r1, [r7, #8]
 80134da:	4613      	mov	r3, r2
 80134dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	785b      	ldrb	r3, [r3, #1]
 80134e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80134e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134ec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d02d      	beq.n	8013556 <USB_HC_StartXfer+0x86>
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	791b      	ldrb	r3, [r3, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d129      	bne.n	8013556 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8013502:	79fb      	ldrb	r3, [r7, #7]
 8013504:	2b01      	cmp	r3, #1
 8013506:	d117      	bne.n	8013538 <USB_HC_StartXfer+0x68>
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	79db      	ldrb	r3, [r3, #7]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d003      	beq.n	8013518 <USB_HC_StartXfer+0x48>
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	79db      	ldrb	r3, [r3, #7]
 8013514:	2b02      	cmp	r3, #2
 8013516:	d10f      	bne.n	8013538 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	015a      	lsls	r2, r3, #5
 801351c:	6a3b      	ldr	r3, [r7, #32]
 801351e:	4413      	add	r3, r2
 8013520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013524:	68db      	ldr	r3, [r3, #12]
 8013526:	69fa      	ldr	r2, [r7, #28]
 8013528:	0151      	lsls	r1, r2, #5
 801352a:	6a3a      	ldr	r2, [r7, #32]
 801352c:	440a      	add	r2, r1
 801352e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013536:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8013538:	79fb      	ldrb	r3, [r7, #7]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d10b      	bne.n	8013556 <USB_HC_StartXfer+0x86>
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	795b      	ldrb	r3, [r3, #5]
 8013542:	2b01      	cmp	r3, #1
 8013544:	d107      	bne.n	8013556 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	785b      	ldrb	r3, [r3, #1]
 801354a:	4619      	mov	r1, r3
 801354c:	68f8      	ldr	r0, [r7, #12]
 801354e:	f000 fa2f 	bl	80139b0 <USB_DoPing>
      return HAL_OK;
 8013552:	2300      	movs	r3, #0
 8013554:	e0f8      	b.n	8013748 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	695b      	ldr	r3, [r3, #20]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d018      	beq.n	8013590 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	695b      	ldr	r3, [r3, #20]
 8013562:	68ba      	ldr	r2, [r7, #8]
 8013564:	8912      	ldrh	r2, [r2, #8]
 8013566:	4413      	add	r3, r2
 8013568:	3b01      	subs	r3, #1
 801356a:	68ba      	ldr	r2, [r7, #8]
 801356c:	8912      	ldrh	r2, [r2, #8]
 801356e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013572:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8013574:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013576:	8b7b      	ldrh	r3, [r7, #26]
 8013578:	429a      	cmp	r2, r3
 801357a:	d90b      	bls.n	8013594 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 801357c:	8b7b      	ldrh	r3, [r7, #26]
 801357e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8013580:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013582:	68ba      	ldr	r2, [r7, #8]
 8013584:	8912      	ldrh	r2, [r2, #8]
 8013586:	fb02 f203 	mul.w	r2, r2, r3
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	611a      	str	r2, [r3, #16]
 801358e:	e001      	b.n	8013594 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8013590:	2301      	movs	r3, #1
 8013592:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	78db      	ldrb	r3, [r3, #3]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d007      	beq.n	80135ac <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801359c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801359e:	68ba      	ldr	r2, [r7, #8]
 80135a0:	8912      	ldrh	r2, [r2, #8]
 80135a2:	fb02 f203 	mul.w	r2, r2, r3
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	611a      	str	r2, [r3, #16]
 80135aa:	e003      	b.n	80135b4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	695a      	ldr	r2, [r3, #20]
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	691b      	ldr	r3, [r3, #16]
 80135b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80135bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80135be:	04d9      	lsls	r1, r3, #19
 80135c0:	4b63      	ldr	r3, [pc, #396]	; (8013750 <USB_HC_StartXfer+0x280>)
 80135c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80135c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	7a9b      	ldrb	r3, [r3, #10]
 80135ca:	075b      	lsls	r3, r3, #29
 80135cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80135d0:	69f9      	ldr	r1, [r7, #28]
 80135d2:	0148      	lsls	r0, r1, #5
 80135d4:	6a39      	ldr	r1, [r7, #32]
 80135d6:	4401      	add	r1, r0
 80135d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80135dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80135de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80135e0:	79fb      	ldrb	r3, [r7, #7]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d009      	beq.n	80135fa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	68d9      	ldr	r1, [r3, #12]
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	015a      	lsls	r2, r3, #5
 80135ee:	6a3b      	ldr	r3, [r7, #32]
 80135f0:	4413      	add	r3, r2
 80135f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80135f6:	460a      	mov	r2, r1
 80135f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80135fa:	6a3b      	ldr	r3, [r7, #32]
 80135fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013600:	689b      	ldr	r3, [r3, #8]
 8013602:	f003 0301 	and.w	r3, r3, #1
 8013606:	2b00      	cmp	r3, #0
 8013608:	bf0c      	ite	eq
 801360a:	2301      	moveq	r3, #1
 801360c:	2300      	movne	r3, #0
 801360e:	b2db      	uxtb	r3, r3
 8013610:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8013612:	69fb      	ldr	r3, [r7, #28]
 8013614:	015a      	lsls	r2, r3, #5
 8013616:	6a3b      	ldr	r3, [r7, #32]
 8013618:	4413      	add	r3, r2
 801361a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	69fa      	ldr	r2, [r7, #28]
 8013622:	0151      	lsls	r1, r2, #5
 8013624:	6a3a      	ldr	r2, [r7, #32]
 8013626:	440a      	add	r2, r1
 8013628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801362c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013630:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8013632:	69fb      	ldr	r3, [r7, #28]
 8013634:	015a      	lsls	r2, r3, #5
 8013636:	6a3b      	ldr	r3, [r7, #32]
 8013638:	4413      	add	r3, r2
 801363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801363e:	681a      	ldr	r2, [r3, #0]
 8013640:	7e7b      	ldrb	r3, [r7, #25]
 8013642:	075b      	lsls	r3, r3, #29
 8013644:	69f9      	ldr	r1, [r7, #28]
 8013646:	0148      	lsls	r0, r1, #5
 8013648:	6a39      	ldr	r1, [r7, #32]
 801364a:	4401      	add	r1, r0
 801364c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8013650:	4313      	orrs	r3, r2
 8013652:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8013654:	69fb      	ldr	r3, [r7, #28]
 8013656:	015a      	lsls	r2, r3, #5
 8013658:	6a3b      	ldr	r3, [r7, #32]
 801365a:	4413      	add	r3, r2
 801365c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8013664:	693b      	ldr	r3, [r7, #16]
 8013666:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801366a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	78db      	ldrb	r3, [r3, #3]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d004      	beq.n	801367e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801367a:	613b      	str	r3, [r7, #16]
 801367c:	e003      	b.n	8013686 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801367e:	693b      	ldr	r3, [r7, #16]
 8013680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013684:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801368c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801368e:	69fb      	ldr	r3, [r7, #28]
 8013690:	015a      	lsls	r2, r3, #5
 8013692:	6a3b      	ldr	r3, [r7, #32]
 8013694:	4413      	add	r3, r2
 8013696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801369a:	461a      	mov	r2, r3
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80136a0:	79fb      	ldrb	r3, [r7, #7]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d001      	beq.n	80136aa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80136a6:	2300      	movs	r3, #0
 80136a8:	e04e      	b.n	8013748 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	78db      	ldrb	r3, [r3, #3]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d149      	bne.n	8013746 <USB_HC_StartXfer+0x276>
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	695b      	ldr	r3, [r3, #20]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d045      	beq.n	8013746 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	79db      	ldrb	r3, [r3, #7]
 80136be:	2b03      	cmp	r3, #3
 80136c0:	d830      	bhi.n	8013724 <USB_HC_StartXfer+0x254>
 80136c2:	a201      	add	r2, pc, #4	; (adr r2, 80136c8 <USB_HC_StartXfer+0x1f8>)
 80136c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136c8:	080136d9 	.word	0x080136d9
 80136cc:	080136fd 	.word	0x080136fd
 80136d0:	080136d9 	.word	0x080136d9
 80136d4:	080136fd 	.word	0x080136fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	695b      	ldr	r3, [r3, #20]
 80136dc:	3303      	adds	r3, #3
 80136de:	089b      	lsrs	r3, r3, #2
 80136e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80136e2:	8afa      	ldrh	r2, [r7, #22]
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d91c      	bls.n	8013728 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	699b      	ldr	r3, [r3, #24]
 80136f2:	f043 0220 	orr.w	r2, r3, #32
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80136fa:	e015      	b.n	8013728 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	695b      	ldr	r3, [r3, #20]
 8013700:	3303      	adds	r3, #3
 8013702:	089b      	lsrs	r3, r3, #2
 8013704:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8013706:	8afa      	ldrh	r2, [r7, #22]
 8013708:	6a3b      	ldr	r3, [r7, #32]
 801370a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801370e:	691b      	ldr	r3, [r3, #16]
 8013710:	b29b      	uxth	r3, r3
 8013712:	429a      	cmp	r2, r3
 8013714:	d90a      	bls.n	801372c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	699b      	ldr	r3, [r3, #24]
 801371a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	619a      	str	r2, [r3, #24]
        }
        break;
 8013722:	e003      	b.n	801372c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8013724:	bf00      	nop
 8013726:	e002      	b.n	801372e <USB_HC_StartXfer+0x25e>
        break;
 8013728:	bf00      	nop
 801372a:	e000      	b.n	801372e <USB_HC_StartXfer+0x25e>
        break;
 801372c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	68d9      	ldr	r1, [r3, #12]
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	785a      	ldrb	r2, [r3, #1]
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	695b      	ldr	r3, [r3, #20]
 801373a:	b29b      	uxth	r3, r3
 801373c:	2000      	movs	r0, #0
 801373e:	9000      	str	r0, [sp, #0]
 8013740:	68f8      	ldr	r0, [r7, #12]
 8013742:	f7ff fb8d 	bl	8012e60 <USB_WritePacket>
  }

  return HAL_OK;
 8013746:	2300      	movs	r3, #0
}
 8013748:	4618      	mov	r0, r3
 801374a:	3728      	adds	r7, #40	; 0x28
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}
 8013750:	1ff80000 	.word	0x1ff80000

08013754 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013754:	b480      	push	{r7}
 8013756:	b085      	sub	sp, #20
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013766:	695b      	ldr	r3, [r3, #20]
 8013768:	b29b      	uxth	r3, r3
}
 801376a:	4618      	mov	r0, r3
 801376c:	3714      	adds	r7, #20
 801376e:	46bd      	mov	sp, r7
 8013770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013774:	4770      	bx	lr

08013776 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8013776:	b480      	push	{r7}
 8013778:	b089      	sub	sp, #36	; 0x24
 801377a:	af00      	add	r7, sp, #0
 801377c:	6078      	str	r0, [r7, #4]
 801377e:	460b      	mov	r3, r1
 8013780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8013786:	78fb      	ldrb	r3, [r7, #3]
 8013788:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 801378a:	2300      	movs	r3, #0
 801378c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	015a      	lsls	r2, r3, #5
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	4413      	add	r3, r2
 8013796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	0c9b      	lsrs	r3, r3, #18
 801379e:	f003 0303 	and.w	r3, r3, #3
 80137a2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	015a      	lsls	r2, r3, #5
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	4413      	add	r3, r2
 80137ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	0fdb      	lsrs	r3, r3, #31
 80137b4:	f003 0301 	and.w	r3, r3, #1
 80137b8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	689b      	ldr	r3, [r3, #8]
 80137be:	f003 0320 	and.w	r3, r3, #32
 80137c2:	2b20      	cmp	r3, #32
 80137c4:	d104      	bne.n	80137d0 <USB_HC_Halt+0x5a>
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d101      	bne.n	80137d0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80137cc:	2300      	movs	r3, #0
 80137ce:	e0e8      	b.n	80139a2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80137d0:	693b      	ldr	r3, [r7, #16]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d002      	beq.n	80137dc <USB_HC_Halt+0x66>
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	2b02      	cmp	r3, #2
 80137da:	d173      	bne.n	80138c4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	015a      	lsls	r2, r3, #5
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	4413      	add	r3, r2
 80137e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	697a      	ldr	r2, [r7, #20]
 80137ec:	0151      	lsls	r1, r2, #5
 80137ee:	69ba      	ldr	r2, [r7, #24]
 80137f0:	440a      	add	r2, r1
 80137f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80137f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80137fa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	689b      	ldr	r3, [r3, #8]
 8013800:	f003 0320 	and.w	r3, r3, #32
 8013804:	2b00      	cmp	r3, #0
 8013806:	f040 80cb 	bne.w	80139a0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801380e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013812:	2b00      	cmp	r3, #0
 8013814:	d143      	bne.n	801389e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	015a      	lsls	r2, r3, #5
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	4413      	add	r3, r2
 801381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	697a      	ldr	r2, [r7, #20]
 8013826:	0151      	lsls	r1, r2, #5
 8013828:	69ba      	ldr	r2, [r7, #24]
 801382a:	440a      	add	r2, r1
 801382c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013834:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	015a      	lsls	r2, r3, #5
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	4413      	add	r3, r2
 801383e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	697a      	ldr	r2, [r7, #20]
 8013846:	0151      	lsls	r1, r2, #5
 8013848:	69ba      	ldr	r2, [r7, #24]
 801384a:	440a      	add	r2, r1
 801384c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013850:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013854:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	015a      	lsls	r2, r3, #5
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	4413      	add	r3, r2
 801385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	697a      	ldr	r2, [r7, #20]
 8013866:	0151      	lsls	r1, r2, #5
 8013868:	69ba      	ldr	r2, [r7, #24]
 801386a:	440a      	add	r2, r1
 801386c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013870:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013874:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	3301      	adds	r3, #1
 801387a:	61fb      	str	r3, [r7, #28]
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013882:	d81d      	bhi.n	80138c0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	015a      	lsls	r2, r3, #5
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	4413      	add	r3, r2
 801388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801389a:	d0ec      	beq.n	8013876 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801389c:	e080      	b.n	80139a0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	015a      	lsls	r2, r3, #5
 80138a2:	69bb      	ldr	r3, [r7, #24]
 80138a4:	4413      	add	r3, r2
 80138a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	697a      	ldr	r2, [r7, #20]
 80138ae:	0151      	lsls	r1, r2, #5
 80138b0:	69ba      	ldr	r2, [r7, #24]
 80138b2:	440a      	add	r2, r1
 80138b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80138b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80138bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80138be:	e06f      	b.n	80139a0 <USB_HC_Halt+0x22a>
            break;
 80138c0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80138c2:	e06d      	b.n	80139a0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	015a      	lsls	r2, r3, #5
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	4413      	add	r3, r2
 80138cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	697a      	ldr	r2, [r7, #20]
 80138d4:	0151      	lsls	r1, r2, #5
 80138d6:	69ba      	ldr	r2, [r7, #24]
 80138d8:	440a      	add	r2, r1
 80138da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80138de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80138e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80138e4:	69bb      	ldr	r3, [r7, #24]
 80138e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80138ea:	691b      	ldr	r3, [r3, #16]
 80138ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d143      	bne.n	801397c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	015a      	lsls	r2, r3, #5
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	4413      	add	r3, r2
 80138fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	697a      	ldr	r2, [r7, #20]
 8013904:	0151      	lsls	r1, r2, #5
 8013906:	69ba      	ldr	r2, [r7, #24]
 8013908:	440a      	add	r2, r1
 801390a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801390e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013912:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	015a      	lsls	r2, r3, #5
 8013918:	69bb      	ldr	r3, [r7, #24]
 801391a:	4413      	add	r3, r2
 801391c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	697a      	ldr	r2, [r7, #20]
 8013924:	0151      	lsls	r1, r2, #5
 8013926:	69ba      	ldr	r2, [r7, #24]
 8013928:	440a      	add	r2, r1
 801392a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801392e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013932:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	015a      	lsls	r2, r3, #5
 8013938:	69bb      	ldr	r3, [r7, #24]
 801393a:	4413      	add	r3, r2
 801393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	697a      	ldr	r2, [r7, #20]
 8013944:	0151      	lsls	r1, r2, #5
 8013946:	69ba      	ldr	r2, [r7, #24]
 8013948:	440a      	add	r2, r1
 801394a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801394e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013952:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8013954:	69fb      	ldr	r3, [r7, #28]
 8013956:	3301      	adds	r3, #1
 8013958:	61fb      	str	r3, [r7, #28]
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013960:	d81d      	bhi.n	801399e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	015a      	lsls	r2, r3, #5
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	4413      	add	r3, r2
 801396a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013978:	d0ec      	beq.n	8013954 <USB_HC_Halt+0x1de>
 801397a:	e011      	b.n	80139a0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	015a      	lsls	r2, r3, #5
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	4413      	add	r3, r2
 8013984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	697a      	ldr	r2, [r7, #20]
 801398c:	0151      	lsls	r1, r2, #5
 801398e:	69ba      	ldr	r2, [r7, #24]
 8013990:	440a      	add	r2, r1
 8013992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801399a:	6013      	str	r3, [r2, #0]
 801399c:	e000      	b.n	80139a0 <USB_HC_Halt+0x22a>
          break;
 801399e:	bf00      	nop
    }
  }

  return HAL_OK;
 80139a0:	2300      	movs	r3, #0
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3724      	adds	r7, #36	; 0x24
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr
	...

080139b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80139b0:	b480      	push	{r7}
 80139b2:	b087      	sub	sp, #28
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	460b      	mov	r3, r1
 80139ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80139c0:	78fb      	ldrb	r3, [r7, #3]
 80139c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80139c4:	2301      	movs	r3, #1
 80139c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	04da      	lsls	r2, r3, #19
 80139cc:	4b15      	ldr	r3, [pc, #84]	; (8013a24 <USB_DoPing+0x74>)
 80139ce:	4013      	ands	r3, r2
 80139d0:	693a      	ldr	r2, [r7, #16]
 80139d2:	0151      	lsls	r1, r2, #5
 80139d4:	697a      	ldr	r2, [r7, #20]
 80139d6:	440a      	add	r2, r1
 80139d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80139dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80139e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	015a      	lsls	r2, r3, #5
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	4413      	add	r3, r2
 80139ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80139f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80139fa:	68bb      	ldr	r3, [r7, #8]
 80139fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013a00:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	015a      	lsls	r2, r3, #5
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	4413      	add	r3, r2
 8013a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a0e:	461a      	mov	r2, r3
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8013a14:	2300      	movs	r3, #0
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	371c      	adds	r7, #28
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a20:	4770      	bx	lr
 8013a22:	bf00      	nop
 8013a24:	1ff80000 	.word	0x1ff80000

08013a28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b086      	sub	sp, #24
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8013a34:	2300      	movs	r3, #0
 8013a36:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f7ff f98e 	bl	8012d5a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8013a3e:	2110      	movs	r1, #16
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f7ff f9c5 	bl	8012dd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f7ff f9e8 	bl	8012e1c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	613b      	str	r3, [r7, #16]
 8013a50:	e01f      	b.n	8013a92 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	015a      	lsls	r2, r3, #5
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	4413      	add	r3, r2
 8013a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a70:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013a78:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	015a      	lsls	r2, r3, #5
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	4413      	add	r3, r2
 8013a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a86:	461a      	mov	r2, r3
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8013a8c:	693b      	ldr	r3, [r7, #16]
 8013a8e:	3301      	adds	r3, #1
 8013a90:	613b      	str	r3, [r7, #16]
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	2b0f      	cmp	r3, #15
 8013a96:	d9dc      	bls.n	8013a52 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8013a98:	2300      	movs	r3, #0
 8013a9a:	613b      	str	r3, [r7, #16]
 8013a9c:	e034      	b.n	8013b08 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	015a      	lsls	r2, r3, #5
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	4413      	add	r3, r2
 8013aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ab4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013abc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013ac4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8013ac6:	693b      	ldr	r3, [r7, #16]
 8013ac8:	015a      	lsls	r2, r3, #5
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	4413      	add	r3, r2
 8013ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	3301      	adds	r3, #1
 8013adc:	617b      	str	r3, [r7, #20]
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013ae4:	d80c      	bhi.n	8013b00 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	015a      	lsls	r2, r3, #5
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	4413      	add	r3, r2
 8013aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013afc:	d0ec      	beq.n	8013ad8 <USB_StopHost+0xb0>
 8013afe:	e000      	b.n	8013b02 <USB_StopHost+0xda>
        break;
 8013b00:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	3301      	adds	r3, #1
 8013b06:	613b      	str	r3, [r7, #16]
 8013b08:	693b      	ldr	r3, [r7, #16]
 8013b0a:	2b0f      	cmp	r3, #15
 8013b0c:	d9c7      	bls.n	8013a9e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013b14:	461a      	mov	r2, r3
 8013b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b1a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b22:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8013b24:	6878      	ldr	r0, [r7, #4]
 8013b26:	f7ff f907 	bl	8012d38 <USB_EnableGlobalInt>

  return HAL_OK;
 8013b2a:	2300      	movs	r3, #0
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3718      	adds	r7, #24
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}

08013b34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013b38:	4904      	ldr	r1, [pc, #16]	; (8013b4c <MX_FATFS_Init+0x18>)
 8013b3a:	4805      	ldr	r0, [pc, #20]	; (8013b50 <MX_FATFS_Init+0x1c>)
 8013b3c:	f002 fbf0 	bl	8016320 <FATFS_LinkDriver>
 8013b40:	4603      	mov	r3, r0
 8013b42:	461a      	mov	r2, r3
 8013b44:	4b03      	ldr	r3, [pc, #12]	; (8013b54 <MX_FATFS_Init+0x20>)
 8013b46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013b48:	bf00      	nop
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	2004a4d0 	.word	0x2004a4d0
 8013b50:	0801ed44 	.word	0x0801ed44
 8013b54:	2004a4cc 	.word	0x2004a4cc

08013b58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013b62:	f000 f87b 	bl	8013c5c <BSP_SD_IsDetected>
 8013b66:	4603      	mov	r3, r0
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d001      	beq.n	8013b70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013b6c:	2302      	movs	r3, #2
 8013b6e:	e012      	b.n	8013b96 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013b70:	480b      	ldr	r0, [pc, #44]	; (8013ba0 <BSP_SD_Init+0x48>)
 8013b72:	f7fb fae4 	bl	800f13e <HAL_SD_Init>
 8013b76:	4603      	mov	r3, r0
 8013b78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013b7a:	79fb      	ldrb	r3, [r7, #7]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d109      	bne.n	8013b94 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013b84:	4806      	ldr	r0, [pc, #24]	; (8013ba0 <BSP_SD_Init+0x48>)
 8013b86:	f7fb ff33 	bl	800f9f0 <HAL_SD_ConfigWideBusOperation>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d001      	beq.n	8013b94 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013b90:	2301      	movs	r3, #1
 8013b92:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013b94:	79fb      	ldrb	r3, [r7, #7]
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3708      	adds	r7, #8
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	2000a2ec 	.word	0x2000a2ec

08013ba4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	68ba      	ldr	r2, [r7, #8]
 8013bb8:	68f9      	ldr	r1, [r7, #12]
 8013bba:	4806      	ldr	r0, [pc, #24]	; (8013bd4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013bbc:	f7fb fb76 	bl	800f2ac <HAL_SD_ReadBlocks_DMA>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d001      	beq.n	8013bca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3718      	adds	r7, #24
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}
 8013bd4:	2000a2ec 	.word	0x2000a2ec

08013bd8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b086      	sub	sp, #24
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	60b9      	str	r1, [r7, #8]
 8013be2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013be4:	2300      	movs	r3, #0
 8013be6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	68ba      	ldr	r2, [r7, #8]
 8013bec:	68f9      	ldr	r1, [r7, #12]
 8013bee:	4806      	ldr	r0, [pc, #24]	; (8013c08 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013bf0:	f7fb fc3e 	bl	800f470 <HAL_SD_WriteBlocks_DMA>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d001      	beq.n	8013bfe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3718      	adds	r7, #24
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	2000a2ec 	.word	0x2000a2ec

08013c0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013c10:	4805      	ldr	r0, [pc, #20]	; (8013c28 <BSP_SD_GetCardState+0x1c>)
 8013c12:	f7fb ff87 	bl	800fb24 <HAL_SD_GetCardState>
 8013c16:	4603      	mov	r3, r0
 8013c18:	2b04      	cmp	r3, #4
 8013c1a:	bf14      	ite	ne
 8013c1c:	2301      	movne	r3, #1
 8013c1e:	2300      	moveq	r3, #0
 8013c20:	b2db      	uxtb	r3, r3
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	bd80      	pop	{r7, pc}
 8013c26:	bf00      	nop
 8013c28:	2000a2ec 	.word	0x2000a2ec

08013c2c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b082      	sub	sp, #8
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8013c34:	6879      	ldr	r1, [r7, #4]
 8013c36:	4803      	ldr	r0, [pc, #12]	; (8013c44 <BSP_SD_GetCardInfo+0x18>)
 8013c38:	f7fb feae 	bl	800f998 <HAL_SD_GetCardInfo>
}
 8013c3c:	bf00      	nop
 8013c3e:	3708      	adds	r7, #8
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	2000a2ec 	.word	0x2000a2ec

08013c48 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013c50:	f000 f9b2 	bl	8013fb8 <BSP_SD_ReadCpltCallback>
}
 8013c54:	bf00      	nop
 8013c56:	3708      	adds	r7, #8
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013c62:	2301      	movs	r3, #1
 8013c64:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013c66:	f000 f80b 	bl	8013c80 <BSP_PlatformIsDetected>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d101      	bne.n	8013c74 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013c70:	2300      	movs	r3, #0
 8013c72:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013c74:	79fb      	ldrb	r3, [r7, #7]
 8013c76:	b2db      	uxtb	r3, r3
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3708      	adds	r7, #8
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b082      	sub	sp, #8
 8013c84:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013c86:	2301      	movs	r3, #1
 8013c88:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013c8e:	4806      	ldr	r0, [pc, #24]	; (8013ca8 <BSP_PlatformIsDetected+0x28>)
 8013c90:	f7f5 fa4c 	bl	800912c <HAL_GPIO_ReadPin>
 8013c94:	4603      	mov	r3, r0
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d001      	beq.n	8013c9e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3708      	adds	r7, #8
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	40020800 	.word	0x40020800

08013cac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b084      	sub	sp, #16
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8013cb4:	f002 fb80 	bl	80163b8 <osKernelSysTick>
 8013cb8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8013cba:	e006      	b.n	8013cca <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013cbc:	f7ff ffa6 	bl	8013c0c <BSP_SD_GetCardState>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d101      	bne.n	8013cca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	e009      	b.n	8013cde <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8013cca:	f002 fb75 	bl	80163b8 <osKernelSysTick>
 8013cce:	4602      	mov	r2, r0
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	1ad3      	subs	r3, r2, r3
 8013cd4:	687a      	ldr	r2, [r7, #4]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d8f0      	bhi.n	8013cbc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3710      	adds	r7, #16
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}
	...

08013ce8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	4603      	mov	r3, r0
 8013cf0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013cf2:	4b0b      	ldr	r3, [pc, #44]	; (8013d20 <SD_CheckStatus+0x38>)
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013cf8:	f7ff ff88 	bl	8013c0c <BSP_SD_GetCardState>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d107      	bne.n	8013d12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013d02:	4b07      	ldr	r3, [pc, #28]	; (8013d20 <SD_CheckStatus+0x38>)
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	b2db      	uxtb	r3, r3
 8013d08:	f023 0301 	bic.w	r3, r3, #1
 8013d0c:	b2da      	uxtb	r2, r3
 8013d0e:	4b04      	ldr	r3, [pc, #16]	; (8013d20 <SD_CheckStatus+0x38>)
 8013d10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013d12:	4b03      	ldr	r3, [pc, #12]	; (8013d20 <SD_CheckStatus+0x38>)
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	b2db      	uxtb	r3, r3
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3708      	adds	r7, #8
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	20000035 	.word	0x20000035

08013d24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013d24:	b590      	push	{r4, r7, lr}
 8013d26:	b087      	sub	sp, #28
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8013d2e:	4b20      	ldr	r3, [pc, #128]	; (8013db0 <SD_initialize+0x8c>)
 8013d30:	2201      	movs	r2, #1
 8013d32:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8013d34:	f002 fb34 	bl	80163a0 <osKernelRunning>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d030      	beq.n	8013da0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8013d3e:	f7ff ff0b 	bl	8013b58 <BSP_SD_Init>
 8013d42:	4603      	mov	r3, r0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d107      	bne.n	8013d58 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8013d48:	79fb      	ldrb	r3, [r7, #7]
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7ff ffcc 	bl	8013ce8 <SD_CheckStatus>
 8013d50:	4603      	mov	r3, r0
 8013d52:	461a      	mov	r2, r3
 8013d54:	4b16      	ldr	r3, [pc, #88]	; (8013db0 <SD_initialize+0x8c>)
 8013d56:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8013d58:	4b15      	ldr	r3, [pc, #84]	; (8013db0 <SD_initialize+0x8c>)
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	b2db      	uxtb	r3, r3
 8013d5e:	2b01      	cmp	r3, #1
 8013d60:	d01e      	beq.n	8013da0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8013d62:	4b14      	ldr	r3, [pc, #80]	; (8013db4 <SD_initialize+0x90>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d10e      	bne.n	8013d88 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8013d6a:	4b13      	ldr	r3, [pc, #76]	; (8013db8 <SD_initialize+0x94>)
 8013d6c:	f107 0408 	add.w	r4, r7, #8
 8013d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8013d76:	f107 0308 	add.w	r3, r7, #8
 8013d7a:	2100      	movs	r1, #0
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f002 fc17 	bl	80165b0 <osMessageCreate>
 8013d82:	4603      	mov	r3, r0
 8013d84:	4a0b      	ldr	r2, [pc, #44]	; (8013db4 <SD_initialize+0x90>)
 8013d86:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8013d88:	4b0a      	ldr	r3, [pc, #40]	; (8013db4 <SD_initialize+0x90>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d107      	bne.n	8013da0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8013d90:	4b07      	ldr	r3, [pc, #28]	; (8013db0 <SD_initialize+0x8c>)
 8013d92:	781b      	ldrb	r3, [r3, #0]
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	f043 0301 	orr.w	r3, r3, #1
 8013d9a:	b2da      	uxtb	r2, r3
 8013d9c:	4b04      	ldr	r3, [pc, #16]	; (8013db0 <SD_initialize+0x8c>)
 8013d9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8013da0:	4b03      	ldr	r3, [pc, #12]	; (8013db0 <SD_initialize+0x8c>)
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	b2db      	uxtb	r3, r3
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	371c      	adds	r7, #28
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd90      	pop	{r4, r7, pc}
 8013dae:	bf00      	nop
 8013db0:	20000035 	.word	0x20000035
 8013db4:	200003d4 	.word	0x200003d4
 8013db8:	0801c1c4 	.word	0x0801c1c4

08013dbc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013dc6:	79fb      	ldrb	r3, [r7, #7]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7ff ff8d 	bl	8013ce8 <SD_CheckStatus>
 8013dce:	4603      	mov	r3, r0
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b08a      	sub	sp, #40	; 0x28
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	60b9      	str	r1, [r7, #8]
 8013de0:	607a      	str	r2, [r7, #4]
 8013de2:	603b      	str	r3, [r7, #0]
 8013de4:	4603      	mov	r3, r0
 8013de6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013de8:	2301      	movs	r3, #1
 8013dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013dee:	f247 5030 	movw	r0, #30000	; 0x7530
 8013df2:	f7ff ff5b 	bl	8013cac <SD_CheckStatusWithTimeout>
 8013df6:	4603      	mov	r3, r0
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	da02      	bge.n	8013e02 <SD_read+0x2a>
  {
    return res;
 8013dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e00:	e032      	b.n	8013e68 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8013e02:	683a      	ldr	r2, [r7, #0]
 8013e04:	6879      	ldr	r1, [r7, #4]
 8013e06:	68b8      	ldr	r0, [r7, #8]
 8013e08:	f7ff fecc 	bl	8013ba4 <BSP_SD_ReadBlocks_DMA>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8013e12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d124      	bne.n	8013e64 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8013e1a:	4b15      	ldr	r3, [pc, #84]	; (8013e70 <SD_read+0x98>)
 8013e1c:	6819      	ldr	r1, [r3, #0]
 8013e1e:	f107 0314 	add.w	r3, r7, #20
 8013e22:	f247 5230 	movw	r2, #30000	; 0x7530
 8013e26:	4618      	mov	r0, r3
 8013e28:	f002 fc2a 	bl	8016680 <osMessageGet>

    if (event.status == osEventMessage)
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	2b10      	cmp	r3, #16
 8013e30:	d118      	bne.n	8013e64 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8013e32:	69bb      	ldr	r3, [r7, #24]
 8013e34:	2b01      	cmp	r3, #1
 8013e36:	d115      	bne.n	8013e64 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8013e38:	f002 fabe 	bl	80163b8 <osKernelSysTick>
 8013e3c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8013e3e:	e008      	b.n	8013e52 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013e40:	f7ff fee4 	bl	8013c0c <BSP_SD_GetCardState>
 8013e44:	4603      	mov	r3, r0
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d103      	bne.n	8013e52 <SD_read+0x7a>
              {
                res = RES_OK;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8013e50:	e008      	b.n	8013e64 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8013e52:	f002 fab1 	bl	80163b8 <osKernelSysTick>
 8013e56:	4602      	mov	r2, r0
 8013e58:	6a3b      	ldr	r3, [r7, #32]
 8013e5a:	1ad3      	subs	r3, r2, r3
 8013e5c:	f247 522f 	movw	r2, #29999	; 0x752f
 8013e60:	4293      	cmp	r3, r2
 8013e62:	d9ed      	bls.n	8013e40 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8013e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3728      	adds	r7, #40	; 0x28
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	200003d4 	.word	0x200003d4

08013e74 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b08a      	sub	sp, #40	; 0x28
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	60b9      	str	r1, [r7, #8]
 8013e7c:	607a      	str	r2, [r7, #4]
 8013e7e:	603b      	str	r3, [r7, #0]
 8013e80:	4603      	mov	r3, r0
 8013e82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013e84:	2301      	movs	r3, #1
 8013e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013e8a:	f247 5030 	movw	r0, #30000	; 0x7530
 8013e8e:	f7ff ff0d 	bl	8013cac <SD_CheckStatusWithTimeout>
 8013e92:	4603      	mov	r3, r0
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	da02      	bge.n	8013e9e <SD_write+0x2a>
  {
    return res;
 8013e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e9c:	e02e      	b.n	8013efc <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013e9e:	683a      	ldr	r2, [r7, #0]
 8013ea0:	6879      	ldr	r1, [r7, #4]
 8013ea2:	68b8      	ldr	r0, [r7, #8]
 8013ea4:	f7ff fe98 	bl	8013bd8 <BSP_SD_WriteBlocks_DMA>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d124      	bne.n	8013ef8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8013eae:	4b15      	ldr	r3, [pc, #84]	; (8013f04 <SD_write+0x90>)
 8013eb0:	6819      	ldr	r1, [r3, #0]
 8013eb2:	f107 0314 	add.w	r3, r7, #20
 8013eb6:	f247 5230 	movw	r2, #30000	; 0x7530
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f002 fbe0 	bl	8016680 <osMessageGet>

    if (event.status == osEventMessage)
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	2b10      	cmp	r3, #16
 8013ec4:	d118      	bne.n	8013ef8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8013ec6:	69bb      	ldr	r3, [r7, #24]
 8013ec8:	2b02      	cmp	r3, #2
 8013eca:	d115      	bne.n	8013ef8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8013ecc:	f002 fa74 	bl	80163b8 <osKernelSysTick>
 8013ed0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8013ed2:	e008      	b.n	8013ee6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013ed4:	f7ff fe9a 	bl	8013c0c <BSP_SD_GetCardState>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d103      	bne.n	8013ee6 <SD_write+0x72>
          {
            res = RES_OK;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8013ee4:	e008      	b.n	8013ef8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8013ee6:	f002 fa67 	bl	80163b8 <osKernelSysTick>
 8013eea:	4602      	mov	r2, r0
 8013eec:	6a3b      	ldr	r3, [r7, #32]
 8013eee:	1ad3      	subs	r3, r2, r3
 8013ef0:	f247 522f 	movw	r2, #29999	; 0x752f
 8013ef4:	4293      	cmp	r3, r2
 8013ef6:	d9ed      	bls.n	8013ed4 <SD_write+0x60>
    }

  }
#endif

  return res;
 8013ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3728      	adds	r7, #40	; 0x28
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}
 8013f04:	200003d4 	.word	0x200003d4

08013f08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b08c      	sub	sp, #48	; 0x30
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	4603      	mov	r3, r0
 8013f10:	603a      	str	r2, [r7, #0]
 8013f12:	71fb      	strb	r3, [r7, #7]
 8013f14:	460b      	mov	r3, r1
 8013f16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013f18:	2301      	movs	r3, #1
 8013f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013f1e:	4b25      	ldr	r3, [pc, #148]	; (8013fb4 <SD_ioctl+0xac>)
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	f003 0301 	and.w	r3, r3, #1
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d001      	beq.n	8013f30 <SD_ioctl+0x28>
 8013f2c:	2303      	movs	r3, #3
 8013f2e:	e03c      	b.n	8013faa <SD_ioctl+0xa2>

  switch (cmd)
 8013f30:	79bb      	ldrb	r3, [r7, #6]
 8013f32:	2b03      	cmp	r3, #3
 8013f34:	d834      	bhi.n	8013fa0 <SD_ioctl+0x98>
 8013f36:	a201      	add	r2, pc, #4	; (adr r2, 8013f3c <SD_ioctl+0x34>)
 8013f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f3c:	08013f4d 	.word	0x08013f4d
 8013f40:	08013f55 	.word	0x08013f55
 8013f44:	08013f6d 	.word	0x08013f6d
 8013f48:	08013f87 	.word	0x08013f87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013f52:	e028      	b.n	8013fa6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013f54:	f107 030c 	add.w	r3, r7, #12
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7ff fe67 	bl	8013c2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013f64:	2300      	movs	r3, #0
 8013f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013f6a:	e01c      	b.n	8013fa6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013f6c:	f107 030c 	add.w	r3, r7, #12
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7ff fe5b 	bl	8013c2c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f78:	b29a      	uxth	r2, r3
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013f84:	e00f      	b.n	8013fa6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013f86:	f107 030c 	add.w	r3, r7, #12
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7ff fe4e 	bl	8013c2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f92:	0a5a      	lsrs	r2, r3, #9
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013f98:	2300      	movs	r3, #0
 8013f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013f9e:	e002      	b.n	8013fa6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013fa0:	2304      	movs	r3, #4
 8013fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3730      	adds	r7, #48	; 0x30
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	20000035 	.word	0x20000035

08013fb8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8013fbc:	4b04      	ldr	r3, [pc, #16]	; (8013fd0 <BSP_SD_ReadCpltCallback+0x18>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	2101      	movs	r1, #1
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f002 fb1b 	bl	8016600 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8013fca:	bf00      	nop
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	200003d4 	.word	0x200003d4

08013fd4 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8013fd8:	bf00      	nop
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe0:	4770      	bx	lr

08013fe2 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8013fe2:	b590      	push	{r4, r7, lr}
 8013fe4:	b089      	sub	sp, #36	; 0x24
 8013fe6:	af04      	add	r7, sp, #16
 8013fe8:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8013fea:	2301      	movs	r3, #1
 8013fec:	2202      	movs	r2, #2
 8013fee:	2102      	movs	r1, #2
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f000 fcb9 	bl	8014968 <USBH_FindInterface>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8013ffa:	7bfb      	ldrb	r3, [r7, #15]
 8013ffc:	2bff      	cmp	r3, #255	; 0xff
 8013ffe:	d002      	beq.n	8014006 <USBH_CDC_InterfaceInit+0x24>
 8014000:	7bfb      	ldrb	r3, [r7, #15]
 8014002:	2b01      	cmp	r3, #1
 8014004:	d901      	bls.n	801400a <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8014006:	2302      	movs	r3, #2
 8014008:	e13d      	b.n	8014286 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 801400a:	7bfb      	ldrb	r3, [r7, #15]
 801400c:	4619      	mov	r1, r3
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f000 fc8e 	bl	8014930 <USBH_SelectInterface>
 8014014:	4603      	mov	r3, r0
 8014016:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8014018:	7bbb      	ldrb	r3, [r7, #14]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d001      	beq.n	8014022 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801401e:	2302      	movs	r3, #2
 8014020:	e131      	b.n	8014286 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8014028:	2050      	movs	r0, #80	; 0x50
 801402a:	f006 fb2f 	bl	801a68c <malloc>
 801402e:	4603      	mov	r3, r0
 8014030:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014038:	69db      	ldr	r3, [r3, #28]
 801403a:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d101      	bne.n	8014046 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8014042:	2302      	movs	r3, #2
 8014044:	e11f      	b.n	8014286 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8014046:	2250      	movs	r2, #80	; 0x50
 8014048:	2100      	movs	r1, #0
 801404a:	68b8      	ldr	r0, [r7, #8]
 801404c:	f006 fb3c 	bl	801a6c8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8014050:	7bfb      	ldrb	r3, [r7, #15]
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	211a      	movs	r1, #26
 8014056:	fb01 f303 	mul.w	r3, r1, r3
 801405a:	4413      	add	r3, r2
 801405c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	b25b      	sxtb	r3, r3
 8014064:	2b00      	cmp	r3, #0
 8014066:	da15      	bge.n	8014094 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014068:	7bfb      	ldrb	r3, [r7, #15]
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	211a      	movs	r1, #26
 801406e:	fb01 f303 	mul.w	r3, r1, r3
 8014072:	4413      	add	r3, r2
 8014074:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014078:	781a      	ldrb	r2, [r3, #0]
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801407e:	7bfb      	ldrb	r3, [r7, #15]
 8014080:	687a      	ldr	r2, [r7, #4]
 8014082:	211a      	movs	r1, #26
 8014084:	fb01 f303 	mul.w	r3, r1, r3
 8014088:	4413      	add	r3, r2
 801408a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801408e:	881a      	ldrh	r2, [r3, #0]
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	785b      	ldrb	r3, [r3, #1]
 8014098:	4619      	mov	r1, r3
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f002 f891 	bl	80161c2 <USBH_AllocPipe>
 80140a0:	4603      	mov	r3, r0
 80140a2:	461a      	mov	r2, r3
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	7819      	ldrb	r1, [r3, #0]
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	7858      	ldrb	r0, [r3, #1]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80140bc:	68ba      	ldr	r2, [r7, #8]
 80140be:	8952      	ldrh	r2, [r2, #10]
 80140c0:	9202      	str	r2, [sp, #8]
 80140c2:	2203      	movs	r2, #3
 80140c4:	9201      	str	r2, [sp, #4]
 80140c6:	9300      	str	r3, [sp, #0]
 80140c8:	4623      	mov	r3, r4
 80140ca:	4602      	mov	r2, r0
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f002 f849 	bl	8016164 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	781b      	ldrb	r3, [r3, #0]
 80140d6:	2200      	movs	r2, #0
 80140d8:	4619      	mov	r1, r3
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f005 f936 	bl	801934c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80140e0:	2300      	movs	r3, #0
 80140e2:	2200      	movs	r2, #0
 80140e4:	210a      	movs	r1, #10
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f000 fc3e 	bl	8014968 <USBH_FindInterface>
 80140ec:	4603      	mov	r3, r0
 80140ee:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80140f0:	7bfb      	ldrb	r3, [r7, #15]
 80140f2:	2bff      	cmp	r3, #255	; 0xff
 80140f4:	d002      	beq.n	80140fc <USBH_CDC_InterfaceInit+0x11a>
 80140f6:	7bfb      	ldrb	r3, [r7, #15]
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d901      	bls.n	8014100 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80140fc:	2302      	movs	r3, #2
 80140fe:	e0c2      	b.n	8014286 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8014100:	7bfb      	ldrb	r3, [r7, #15]
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	211a      	movs	r1, #26
 8014106:	fb01 f303 	mul.w	r3, r1, r3
 801410a:	4413      	add	r3, r2
 801410c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	b25b      	sxtb	r3, r3
 8014114:	2b00      	cmp	r3, #0
 8014116:	da16      	bge.n	8014146 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014118:	7bfb      	ldrb	r3, [r7, #15]
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	211a      	movs	r1, #26
 801411e:	fb01 f303 	mul.w	r3, r1, r3
 8014122:	4413      	add	r3, r2
 8014124:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014128:	781a      	ldrb	r2, [r3, #0]
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801412e:	7bfb      	ldrb	r3, [r7, #15]
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	211a      	movs	r1, #26
 8014134:	fb01 f303 	mul.w	r3, r1, r3
 8014138:	4413      	add	r3, r2
 801413a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801413e:	881a      	ldrh	r2, [r3, #0]
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	835a      	strh	r2, [r3, #26]
 8014144:	e015      	b.n	8014172 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014146:	7bfb      	ldrb	r3, [r7, #15]
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	211a      	movs	r1, #26
 801414c:	fb01 f303 	mul.w	r3, r1, r3
 8014150:	4413      	add	r3, r2
 8014152:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014156:	781a      	ldrb	r2, [r3, #0]
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801415c:	7bfb      	ldrb	r3, [r7, #15]
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	211a      	movs	r1, #26
 8014162:	fb01 f303 	mul.w	r3, r1, r3
 8014166:	4413      	add	r3, r2
 8014168:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801416c:	881a      	ldrh	r2, [r3, #0]
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8014172:	7bfb      	ldrb	r3, [r7, #15]
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	211a      	movs	r1, #26
 8014178:	fb01 f303 	mul.w	r3, r1, r3
 801417c:	4413      	add	r3, r2
 801417e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	b25b      	sxtb	r3, r3
 8014186:	2b00      	cmp	r3, #0
 8014188:	da16      	bge.n	80141b8 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801418a:	7bfb      	ldrb	r3, [r7, #15]
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	211a      	movs	r1, #26
 8014190:	fb01 f303 	mul.w	r3, r1, r3
 8014194:	4413      	add	r3, r2
 8014196:	f203 3356 	addw	r3, r3, #854	; 0x356
 801419a:	781a      	ldrb	r2, [r3, #0]
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80141a0:	7bfb      	ldrb	r3, [r7, #15]
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	211a      	movs	r1, #26
 80141a6:	fb01 f303 	mul.w	r3, r1, r3
 80141aa:	4413      	add	r3, r2
 80141ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80141b0:	881a      	ldrh	r2, [r3, #0]
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	835a      	strh	r2, [r3, #26]
 80141b6:	e015      	b.n	80141e4 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80141b8:	7bfb      	ldrb	r3, [r7, #15]
 80141ba:	687a      	ldr	r2, [r7, #4]
 80141bc:	211a      	movs	r1, #26
 80141be:	fb01 f303 	mul.w	r3, r1, r3
 80141c2:	4413      	add	r3, r2
 80141c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80141c8:	781a      	ldrb	r2, [r3, #0]
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80141ce:	7bfb      	ldrb	r3, [r7, #15]
 80141d0:	687a      	ldr	r2, [r7, #4]
 80141d2:	211a      	movs	r1, #26
 80141d4:	fb01 f303 	mul.w	r3, r1, r3
 80141d8:	4413      	add	r3, r2
 80141da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80141de:	881a      	ldrh	r2, [r3, #0]
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	7b9b      	ldrb	r3, [r3, #14]
 80141e8:	4619      	mov	r1, r3
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f001 ffe9 	bl	80161c2 <USBH_AllocPipe>
 80141f0:	4603      	mov	r3, r0
 80141f2:	461a      	mov	r2, r3
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	7bdb      	ldrb	r3, [r3, #15]
 80141fc:	4619      	mov	r1, r3
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f001 ffdf 	bl	80161c2 <USBH_AllocPipe>
 8014204:	4603      	mov	r3, r0
 8014206:	461a      	mov	r2, r3
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	7b59      	ldrb	r1, [r3, #13]
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	7b98      	ldrb	r0, [r3, #14]
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014220:	68ba      	ldr	r2, [r7, #8]
 8014222:	8b12      	ldrh	r2, [r2, #24]
 8014224:	9202      	str	r2, [sp, #8]
 8014226:	2202      	movs	r2, #2
 8014228:	9201      	str	r2, [sp, #4]
 801422a:	9300      	str	r3, [sp, #0]
 801422c:	4623      	mov	r3, r4
 801422e:	4602      	mov	r2, r0
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f001 ff97 	bl	8016164 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	7b19      	ldrb	r1, [r3, #12]
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	7bd8      	ldrb	r0, [r3, #15]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801424a:	68ba      	ldr	r2, [r7, #8]
 801424c:	8b52      	ldrh	r2, [r2, #26]
 801424e:	9202      	str	r2, [sp, #8]
 8014250:	2202      	movs	r2, #2
 8014252:	9201      	str	r2, [sp, #4]
 8014254:	9300      	str	r3, [sp, #0]
 8014256:	4623      	mov	r3, r4
 8014258:	4602      	mov	r2, r0
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f001 ff82 	bl	8016164 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	2200      	movs	r2, #0
 8014264:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	7b5b      	ldrb	r3, [r3, #13]
 801426c:	2200      	movs	r2, #0
 801426e:	4619      	mov	r1, r3
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f005 f86b 	bl	801934c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	7b1b      	ldrb	r3, [r3, #12]
 801427a:	2200      	movs	r2, #0
 801427c:	4619      	mov	r1, r3
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f005 f864 	bl	801934c <USBH_LL_SetToggle>

  return USBH_OK;
 8014284:	2300      	movs	r3, #0
}
 8014286:	4618      	mov	r0, r3
 8014288:	3714      	adds	r7, #20
 801428a:	46bd      	mov	sp, r7
 801428c:	bd90      	pop	{r4, r7, pc}

0801428e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 801428e:	b580      	push	{r7, lr}
 8014290:	b084      	sub	sp, #16
 8014292:	af00      	add	r7, sp, #0
 8014294:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801429c:	69db      	ldr	r3, [r3, #28]
 801429e:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00e      	beq.n	80142c6 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	781b      	ldrb	r3, [r3, #0]
 80142ac:	4619      	mov	r1, r3
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f001 ff77 	bl	80161a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	4619      	mov	r1, r3
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f001 ffa2 	bl	8016204 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	2200      	movs	r2, #0
 80142c4:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	7b1b      	ldrb	r3, [r3, #12]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d00e      	beq.n	80142ec <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	7b1b      	ldrb	r3, [r3, #12]
 80142d2:	4619      	mov	r1, r3
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f001 ff64 	bl	80161a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	7b1b      	ldrb	r3, [r3, #12]
 80142de:	4619      	mov	r1, r3
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f001 ff8f 	bl	8016204 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	2200      	movs	r2, #0
 80142ea:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	7b5b      	ldrb	r3, [r3, #13]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d00e      	beq.n	8014312 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	7b5b      	ldrb	r3, [r3, #13]
 80142f8:	4619      	mov	r1, r3
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f001 ff51 	bl	80161a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	7b5b      	ldrb	r3, [r3, #13]
 8014304:	4619      	mov	r1, r3
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f001 ff7c 	bl	8016204 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	2200      	movs	r2, #0
 8014310:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014318:	69db      	ldr	r3, [r3, #28]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d00b      	beq.n	8014336 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014324:	69db      	ldr	r3, [r3, #28]
 8014326:	4618      	mov	r0, r3
 8014328:	f006 f9b8 	bl	801a69c <free>
    phost->pActiveClass->pData = 0U;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014332:	2200      	movs	r2, #0
 8014334:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8014336:	2300      	movs	r3, #0
}
 8014338:	4618      	mov	r0, r3
 801433a:	3710      	adds	r7, #16
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}

08014340 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b084      	sub	sp, #16
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801434e:	69db      	ldr	r3, [r3, #28]
 8014350:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	3340      	adds	r3, #64	; 0x40
 8014356:	4619      	mov	r1, r3
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f000 f8b2 	bl	80144c2 <GetLineCoding>
 801435e:	4603      	mov	r3, r0
 8014360:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8014362:	7afb      	ldrb	r3, [r7, #11]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d105      	bne.n	8014374 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801436e:	2102      	movs	r1, #2
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8014374:	7afb      	ldrb	r3, [r7, #11]
}
 8014376:	4618      	mov	r0, r3
 8014378:	3710      	adds	r7, #16
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
	...

08014380 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b084      	sub	sp, #16
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8014388:	2301      	movs	r3, #1
 801438a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 801438c:	2300      	movs	r3, #0
 801438e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014396:	69db      	ldr	r3, [r3, #28]
 8014398:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80143a0:	2b04      	cmp	r3, #4
 80143a2:	d877      	bhi.n	8014494 <USBH_CDC_Process+0x114>
 80143a4:	a201      	add	r2, pc, #4	; (adr r2, 80143ac <USBH_CDC_Process+0x2c>)
 80143a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143aa:	bf00      	nop
 80143ac:	080143c1 	.word	0x080143c1
 80143b0:	080143c7 	.word	0x080143c7
 80143b4:	080143f7 	.word	0x080143f7
 80143b8:	0801446b 	.word	0x0801446b
 80143bc:	08014479 	.word	0x08014479
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80143c0:	2300      	movs	r3, #0
 80143c2:	73fb      	strb	r3, [r7, #15]
      break;
 80143c4:	e06d      	b.n	80144a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143ca:	4619      	mov	r1, r3
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f000 f897 	bl	8014500 <SetLineCoding>
 80143d2:	4603      	mov	r3, r0
 80143d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80143d6:	7bbb      	ldrb	r3, [r7, #14]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d104      	bne.n	80143e6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	2202      	movs	r2, #2
 80143e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80143e4:	e058      	b.n	8014498 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80143e6:	7bbb      	ldrb	r3, [r7, #14]
 80143e8:	2b01      	cmp	r3, #1
 80143ea:	d055      	beq.n	8014498 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	2204      	movs	r2, #4
 80143f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80143f4:	e050      	b.n	8014498 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	3340      	adds	r3, #64	; 0x40
 80143fa:	4619      	mov	r1, r3
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f000 f860 	bl	80144c2 <GetLineCoding>
 8014402:	4603      	mov	r3, r0
 8014404:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014406:	7bbb      	ldrb	r3, [r7, #14]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d126      	bne.n	801445a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	2200      	movs	r2, #0
 8014410:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801441e:	791b      	ldrb	r3, [r3, #4]
 8014420:	429a      	cmp	r2, r3
 8014422:	d13b      	bne.n	801449c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801442e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8014430:	429a      	cmp	r2, r3
 8014432:	d133      	bne.n	801449c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801443e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8014440:	429a      	cmp	r2, r3
 8014442:	d12b      	bne.n	801449c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801444c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801444e:	429a      	cmp	r2, r3
 8014450:	d124      	bne.n	801449c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f000 f982 	bl	801475c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8014458:	e020      	b.n	801449c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 801445a:	7bbb      	ldrb	r3, [r7, #14]
 801445c:	2b01      	cmp	r3, #1
 801445e:	d01d      	beq.n	801449c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	2204      	movs	r2, #4
 8014464:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8014468:	e018      	b.n	801449c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f000 f867 	bl	801453e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f000 f8f6 	bl	8014662 <CDC_ProcessReception>
      break;
 8014476:	e014      	b.n	80144a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8014478:	2100      	movs	r1, #0
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f001 f951 	bl	8015722 <USBH_ClrFeature>
 8014480:	4603      	mov	r3, r0
 8014482:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014484:	7bbb      	ldrb	r3, [r7, #14]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d10a      	bne.n	80144a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2200      	movs	r2, #0
 801448e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8014492:	e005      	b.n	80144a0 <USBH_CDC_Process+0x120>

    default:
      break;
 8014494:	bf00      	nop
 8014496:	e004      	b.n	80144a2 <USBH_CDC_Process+0x122>
      break;
 8014498:	bf00      	nop
 801449a:	e002      	b.n	80144a2 <USBH_CDC_Process+0x122>
      break;
 801449c:	bf00      	nop
 801449e:	e000      	b.n	80144a2 <USBH_CDC_Process+0x122>
      break;
 80144a0:	bf00      	nop

  }

  return status;
 80144a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80144a4:	4618      	mov	r0, r3
 80144a6:	3710      	adds	r7, #16
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}

080144ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80144ac:	b480      	push	{r7}
 80144ae:	b083      	sub	sp, #12
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80144b4:	2300      	movs	r3, #0
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	370c      	adds	r7, #12
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr

080144c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80144c2:	b580      	push	{r7, lr}
 80144c4:	b082      	sub	sp, #8
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6078      	str	r0, [r7, #4]
 80144ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	22a1      	movs	r2, #161	; 0xa1
 80144d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2221      	movs	r2, #33	; 0x21
 80144d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2200      	movs	r2, #0
 80144dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2200      	movs	r2, #0
 80144e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2207      	movs	r2, #7
 80144e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	2207      	movs	r2, #7
 80144ee:	4619      	mov	r1, r3
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f001 faf6 	bl	8015ae2 <USBH_CtlReq>
 80144f6:	4603      	mov	r3, r0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2221      	movs	r2, #33	; 0x21
 801450e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2220      	movs	r2, #32
 8014514:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2200      	movs	r2, #0
 801451a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2200      	movs	r2, #0
 8014520:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	2207      	movs	r2, #7
 8014526:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	2207      	movs	r2, #7
 801452c:	4619      	mov	r1, r3
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f001 fad7 	bl	8015ae2 <USBH_CtlReq>
 8014534:	4603      	mov	r3, r0
}
 8014536:	4618      	mov	r0, r3
 8014538:	3708      	adds	r7, #8
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}

0801453e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 801453e:	b580      	push	{r7, lr}
 8014540:	b086      	sub	sp, #24
 8014542:	af02      	add	r7, sp, #8
 8014544:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801454c:	69db      	ldr	r3, [r3, #28]
 801454e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014550:	2300      	movs	r3, #0
 8014552:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801455a:	2b01      	cmp	r3, #1
 801455c:	d002      	beq.n	8014564 <CDC_ProcessTransmission+0x26>
 801455e:	2b02      	cmp	r3, #2
 8014560:	d023      	beq.n	80145aa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8014562:	e07a      	b.n	801465a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014568:	68fa      	ldr	r2, [r7, #12]
 801456a:	8b12      	ldrh	r2, [r2, #24]
 801456c:	4293      	cmp	r3, r2
 801456e:	d90b      	bls.n	8014588 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	69d9      	ldr	r1, [r3, #28]
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	8b1a      	ldrh	r2, [r3, #24]
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	7b5b      	ldrb	r3, [r3, #13]
 801457c:	2001      	movs	r0, #1
 801457e:	9000      	str	r0, [sp, #0]
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f001 fdac 	bl	80160de <USBH_BulkSendData>
 8014586:	e00b      	b.n	80145a0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8014590:	b29a      	uxth	r2, r3
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	7b5b      	ldrb	r3, [r3, #13]
 8014596:	2001      	movs	r0, #1
 8014598:	9000      	str	r0, [sp, #0]
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f001 fd9f 	bl	80160de <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	2202      	movs	r2, #2
 80145a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80145a8:	e057      	b.n	801465a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	7b5b      	ldrb	r3, [r3, #13]
 80145ae:	4619      	mov	r1, r3
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f004 fea1 	bl	80192f8 <USBH_LL_GetURBState>
 80145b6:	4603      	mov	r3, r0
 80145b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80145ba:	7afb      	ldrb	r3, [r7, #11]
 80145bc:	2b01      	cmp	r3, #1
 80145be:	d136      	bne.n	801462e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145c4:	68fa      	ldr	r2, [r7, #12]
 80145c6:	8b12      	ldrh	r2, [r2, #24]
 80145c8:	4293      	cmp	r3, r2
 80145ca:	d90e      	bls.n	80145ea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d0:	68fa      	ldr	r2, [r7, #12]
 80145d2:	8b12      	ldrh	r2, [r2, #24]
 80145d4:	1a9a      	subs	r2, r3, r2
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	69db      	ldr	r3, [r3, #28]
 80145de:	68fa      	ldr	r2, [r7, #12]
 80145e0:	8b12      	ldrh	r2, [r2, #24]
 80145e2:	441a      	add	r2, r3
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	61da      	str	r2, [r3, #28]
 80145e8:	e002      	b.n	80145f0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	2200      	movs	r2, #0
 80145ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d004      	beq.n	8014602 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	2201      	movs	r2, #1
 80145fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8014600:	e006      	b.n	8014610 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	2200      	movs	r2, #0
 8014606:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f000 f892 	bl	8014734 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2204      	movs	r2, #4
 8014614:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014624:	2200      	movs	r2, #0
 8014626:	4619      	mov	r1, r3
 8014628:	f001 ffea 	bl	8016600 <osMessagePut>
      break;
 801462c:	e014      	b.n	8014658 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 801462e:	7afb      	ldrb	r3, [r7, #11]
 8014630:	2b02      	cmp	r3, #2
 8014632:	d111      	bne.n	8014658 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	2201      	movs	r2, #1
 8014638:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2204      	movs	r2, #4
 8014640:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014650:	2200      	movs	r2, #0
 8014652:	4619      	mov	r1, r3
 8014654:	f001 ffd4 	bl	8016600 <osMessagePut>
      break;
 8014658:	bf00      	nop
  }
}
 801465a:	bf00      	nop
 801465c:	3710      	adds	r7, #16
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}

08014662 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8014662:	b580      	push	{r7, lr}
 8014664:	b086      	sub	sp, #24
 8014666:	af00      	add	r7, sp, #0
 8014668:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014670:	69db      	ldr	r3, [r3, #28]
 8014672:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014674:	2300      	movs	r3, #0
 8014676:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801467e:	2b03      	cmp	r3, #3
 8014680:	d002      	beq.n	8014688 <CDC_ProcessReception+0x26>
 8014682:	2b04      	cmp	r3, #4
 8014684:	d00e      	beq.n	80146a4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8014686:	e051      	b.n	801472c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	6a19      	ldr	r1, [r3, #32]
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	8b5a      	ldrh	r2, [r3, #26]
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	7b1b      	ldrb	r3, [r3, #12]
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f001 fd47 	bl	8016128 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801469a:	697b      	ldr	r3, [r7, #20]
 801469c:	2204      	movs	r2, #4
 801469e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80146a2:	e043      	b.n	801472c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80146a4:	697b      	ldr	r3, [r7, #20]
 80146a6:	7b1b      	ldrb	r3, [r3, #12]
 80146a8:	4619      	mov	r1, r3
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f004 fe24 	bl	80192f8 <USBH_LL_GetURBState>
 80146b0:	4603      	mov	r3, r0
 80146b2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80146b4:	7cfb      	ldrb	r3, [r7, #19]
 80146b6:	2b01      	cmp	r3, #1
 80146b8:	d137      	bne.n	801472a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	7b1b      	ldrb	r3, [r3, #12]
 80146be:	4619      	mov	r1, r3
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f004 fd87 	bl	80191d4 <USBH_LL_GetLastXferSize>
 80146c6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146cc:	68fa      	ldr	r2, [r7, #12]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d016      	beq.n	8014700 <CDC_ProcessReception+0x9e>
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	8b5b      	ldrh	r3, [r3, #26]
 80146d6:	461a      	mov	r2, r3
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	4293      	cmp	r3, r2
 80146dc:	d910      	bls.n	8014700 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	1ad2      	subs	r2, r2, r3
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80146ea:	697b      	ldr	r3, [r7, #20]
 80146ec:	6a1a      	ldr	r2, [r3, #32]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	441a      	add	r2, r3
 80146f2:	697b      	ldr	r3, [r7, #20]
 80146f4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	2203      	movs	r2, #3
 80146fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80146fe:	e006      	b.n	801470e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	2200      	movs	r2, #0
 8014704:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f000 f81d 	bl	8014748 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	2204      	movs	r2, #4
 8014712:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014722:	2200      	movs	r2, #0
 8014724:	4619      	mov	r1, r3
 8014726:	f001 ff6b 	bl	8016600 <osMessagePut>
      break;
 801472a:	bf00      	nop
  }
}
 801472c:	bf00      	nop
 801472e:	3718      	adds	r7, #24
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8014734:	b480      	push	{r7}
 8014736:	b083      	sub	sp, #12
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801473c:	bf00      	nop
 801473e:	370c      	adds	r7, #12
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr

08014748 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8014748:	b480      	push	{r7}
 801474a:	b083      	sub	sp, #12
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8014750:	bf00      	nop
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr

0801475c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8014764:	bf00      	nop
 8014766:	370c      	adds	r7, #12
 8014768:	46bd      	mov	sp, r7
 801476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476e:	4770      	bx	lr

08014770 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8014770:	b5b0      	push	{r4, r5, r7, lr}
 8014772:	b090      	sub	sp, #64	; 0x40
 8014774:	af00      	add	r7, sp, #0
 8014776:	60f8      	str	r0, [r7, #12]
 8014778:	60b9      	str	r1, [r7, #8]
 801477a:	4613      	mov	r3, r2
 801477c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d101      	bne.n	8014788 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8014784:	2302      	movs	r3, #2
 8014786:	e04d      	b.n	8014824 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	79fa      	ldrb	r2, [r7, #7]
 801478c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	2200      	movs	r2, #0
 8014794:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	2200      	movs	r2, #0
 801479c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80147a0:	68f8      	ldr	r0, [r7, #12]
 80147a2:	f000 f847 	bl	8014834 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	2200      	movs	r2, #0
 80147aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	2200      	movs	r2, #0
 80147b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	2200      	movs	r2, #0
 80147ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	2200      	movs	r2, #0
 80147c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d003      	beq.n	80147d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	68ba      	ldr	r2, [r7, #8]
 80147d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80147d4:	4b15      	ldr	r3, [pc, #84]	; (801482c <USBH_Init+0xbc>)
 80147d6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80147da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80147e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80147e4:	2100      	movs	r1, #0
 80147e6:	4618      	mov	r0, r3
 80147e8:	f001 fee2 	bl	80165b0 <osMessageCreate>
 80147ec:	4602      	mov	r2, r0
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80147f4:	4b0e      	ldr	r3, [pc, #56]	; (8014830 <USBH_Init+0xc0>)
 80147f6:	f107 0414 	add.w	r4, r7, #20
 80147fa:	461d      	mov	r5, r3
 80147fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80147fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014800:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8014808:	f107 0314 	add.w	r3, r7, #20
 801480c:	68f9      	ldr	r1, [r7, #12]
 801480e:	4618      	mov	r0, r3
 8014810:	f001 fde2 	bl	80163d8 <osThreadCreate>
 8014814:	4602      	mov	r2, r0
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 801481c:	68f8      	ldr	r0, [r7, #12]
 801481e:	f004 fc25 	bl	801906c <USBH_LL_Init>

  return USBH_OK;
 8014822:	2300      	movs	r3, #0
}
 8014824:	4618      	mov	r0, r3
 8014826:	3740      	adds	r7, #64	; 0x40
 8014828:	46bd      	mov	sp, r7
 801482a:	bdb0      	pop	{r4, r5, r7, pc}
 801482c:	0801c1e4 	.word	0x0801c1e4
 8014830:	0801c1f4 	.word	0x0801c1f4

08014834 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8014834:	b480      	push	{r7}
 8014836:	b085      	sub	sp, #20
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 801483c:	2300      	movs	r3, #0
 801483e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8014840:	2300      	movs	r3, #0
 8014842:	60fb      	str	r3, [r7, #12]
 8014844:	e009      	b.n	801485a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8014846:	687a      	ldr	r2, [r7, #4]
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	33e0      	adds	r3, #224	; 0xe0
 801484c:	009b      	lsls	r3, r3, #2
 801484e:	4413      	add	r3, r2
 8014850:	2200      	movs	r2, #0
 8014852:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	3301      	adds	r3, #1
 8014858:	60fb      	str	r3, [r7, #12]
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	2b0e      	cmp	r3, #14
 801485e:	d9f2      	bls.n	8014846 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8014860:	2300      	movs	r3, #0
 8014862:	60fb      	str	r3, [r7, #12]
 8014864:	e009      	b.n	801487a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8014866:	687a      	ldr	r2, [r7, #4]
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	4413      	add	r3, r2
 801486c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014870:	2200      	movs	r2, #0
 8014872:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	3301      	adds	r3, #1
 8014878:	60fb      	str	r3, [r7, #12]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014880:	d3f1      	bcc.n	8014866 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2200      	movs	r2, #0
 8014886:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2200      	movs	r2, #0
 801488c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2201      	movs	r2, #1
 8014892:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2200      	movs	r2, #0
 8014898:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2201      	movs	r2, #1
 80148a0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2240      	movs	r2, #64	; 0x40
 80148a6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2200      	movs	r2, #0
 80148ac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2200      	movs	r2, #0
 80148b2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2201      	movs	r2, #1
 80148ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2200      	movs	r2, #0
 80148c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2200      	movs	r2, #0
 80148ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80148ce:	2300      	movs	r3, #0
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3714      	adds	r7, #20
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80148dc:	b480      	push	{r7}
 80148de:	b085      	sub	sp, #20
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80148e6:	2300      	movs	r3, #0
 80148e8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d016      	beq.n	801491e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d10e      	bne.n	8014918 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014900:	1c59      	adds	r1, r3, #1
 8014902:	687a      	ldr	r2, [r7, #4]
 8014904:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8014908:	687a      	ldr	r2, [r7, #4]
 801490a:	33de      	adds	r3, #222	; 0xde
 801490c:	6839      	ldr	r1, [r7, #0]
 801490e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8014912:	2300      	movs	r3, #0
 8014914:	73fb      	strb	r3, [r7, #15]
 8014916:	e004      	b.n	8014922 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8014918:	2302      	movs	r3, #2
 801491a:	73fb      	strb	r3, [r7, #15]
 801491c:	e001      	b.n	8014922 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801491e:	2302      	movs	r3, #2
 8014920:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014922:	7bfb      	ldrb	r3, [r7, #15]
}
 8014924:	4618      	mov	r0, r3
 8014926:	3714      	adds	r7, #20
 8014928:	46bd      	mov	sp, r7
 801492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492e:	4770      	bx	lr

08014930 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8014930:	b480      	push	{r7}
 8014932:	b085      	sub	sp, #20
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
 8014938:	460b      	mov	r3, r1
 801493a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 801493c:	2300      	movs	r3, #0
 801493e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8014946:	78fa      	ldrb	r2, [r7, #3]
 8014948:	429a      	cmp	r2, r3
 801494a:	d204      	bcs.n	8014956 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	78fa      	ldrb	r2, [r7, #3]
 8014950:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8014954:	e001      	b.n	801495a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8014956:	2302      	movs	r3, #2
 8014958:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801495a:	7bfb      	ldrb	r3, [r7, #15]
}
 801495c:	4618      	mov	r0, r3
 801495e:	3714      	adds	r7, #20
 8014960:	46bd      	mov	sp, r7
 8014962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014966:	4770      	bx	lr

08014968 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8014968:	b480      	push	{r7}
 801496a:	b087      	sub	sp, #28
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
 8014970:	4608      	mov	r0, r1
 8014972:	4611      	mov	r1, r2
 8014974:	461a      	mov	r2, r3
 8014976:	4603      	mov	r3, r0
 8014978:	70fb      	strb	r3, [r7, #3]
 801497a:	460b      	mov	r3, r1
 801497c:	70bb      	strb	r3, [r7, #2]
 801497e:	4613      	mov	r3, r2
 8014980:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8014982:	2300      	movs	r3, #0
 8014984:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8014986:	2300      	movs	r3, #0
 8014988:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014990:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8014992:	e025      	b.n	80149e0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8014994:	7dfb      	ldrb	r3, [r7, #23]
 8014996:	221a      	movs	r2, #26
 8014998:	fb02 f303 	mul.w	r3, r2, r3
 801499c:	3308      	adds	r3, #8
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	4413      	add	r3, r2
 80149a2:	3302      	adds	r3, #2
 80149a4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	795b      	ldrb	r3, [r3, #5]
 80149aa:	78fa      	ldrb	r2, [r7, #3]
 80149ac:	429a      	cmp	r2, r3
 80149ae:	d002      	beq.n	80149b6 <USBH_FindInterface+0x4e>
 80149b0:	78fb      	ldrb	r3, [r7, #3]
 80149b2:	2bff      	cmp	r3, #255	; 0xff
 80149b4:	d111      	bne.n	80149da <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80149b6:	693b      	ldr	r3, [r7, #16]
 80149b8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80149ba:	78ba      	ldrb	r2, [r7, #2]
 80149bc:	429a      	cmp	r2, r3
 80149be:	d002      	beq.n	80149c6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80149c0:	78bb      	ldrb	r3, [r7, #2]
 80149c2:	2bff      	cmp	r3, #255	; 0xff
 80149c4:	d109      	bne.n	80149da <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80149ca:	787a      	ldrb	r2, [r7, #1]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d002      	beq.n	80149d6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80149d0:	787b      	ldrb	r3, [r7, #1]
 80149d2:	2bff      	cmp	r3, #255	; 0xff
 80149d4:	d101      	bne.n	80149da <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80149d6:	7dfb      	ldrb	r3, [r7, #23]
 80149d8:	e006      	b.n	80149e8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80149da:	7dfb      	ldrb	r3, [r7, #23]
 80149dc:	3301      	adds	r3, #1
 80149de:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80149e0:	7dfb      	ldrb	r3, [r7, #23]
 80149e2:	2b01      	cmp	r3, #1
 80149e4:	d9d6      	bls.n	8014994 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80149e6:	23ff      	movs	r3, #255	; 0xff
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	371c      	adds	r7, #28
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr

080149f4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f004 fb71 	bl	80190e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8014a02:	2101      	movs	r1, #1
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f004 fc8a 	bl	801931e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8014a0a:	2300      	movs	r3, #0
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	3708      	adds	r7, #8
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}

08014a14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b088      	sub	sp, #32
 8014a18:	af04      	add	r7, sp, #16
 8014a1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8014a1c:	2302      	movs	r3, #2
 8014a1e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8014a20:	2300      	movs	r3, #0
 8014a22:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8014a2a:	b2db      	uxtb	r3, r3
 8014a2c:	2b01      	cmp	r3, #1
 8014a2e:	d102      	bne.n	8014a36 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2203      	movs	r2, #3
 8014a34:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	b2db      	uxtb	r3, r3
 8014a3c:	2b0b      	cmp	r3, #11
 8014a3e:	f200 823c 	bhi.w	8014eba <USBH_Process+0x4a6>
 8014a42:	a201      	add	r2, pc, #4	; (adr r2, 8014a48 <USBH_Process+0x34>)
 8014a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a48:	08014a79 	.word	0x08014a79
 8014a4c:	08014ac7 	.word	0x08014ac7
 8014a50:	08014b4b 	.word	0x08014b4b
 8014a54:	08014e39 	.word	0x08014e39
 8014a58:	08014ebb 	.word	0x08014ebb
 8014a5c:	08014c0b 	.word	0x08014c0b
 8014a60:	08014dc3 	.word	0x08014dc3
 8014a64:	08014c5d 	.word	0x08014c5d
 8014a68:	08014c99 	.word	0x08014c99
 8014a6c:	08014cd3 	.word	0x08014cd3
 8014a70:	08014d1b 	.word	0x08014d1b
 8014a74:	08014e21 	.word	0x08014e21
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8014a7e:	b2db      	uxtb	r3, r3
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	f000 821c 	beq.w	8014ebe <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	2201      	movs	r2, #1
 8014a8a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8014a8c:	20c8      	movs	r0, #200	; 0xc8
 8014a8e:	f004 fc8d 	bl	80193ac <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f004 fb83 	bl	801919e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2201      	movs	r2, #1
 8014aac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014abc:	2200      	movs	r2, #0
 8014abe:	4619      	mov	r1, r3
 8014ac0:	f001 fd9e 	bl	8016600 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8014ac4:	e1fb      	b.n	8014ebe <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	d107      	bne.n	8014ae0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2202      	movs	r2, #2
 8014adc:	701a      	strb	r2, [r3, #0]
 8014ade:	e025      	b.n	8014b2c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8014ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014aea:	d914      	bls.n	8014b16 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8014af2:	3301      	adds	r3, #1
 8014af4:	b2da      	uxtb	r2, r3
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8014b02:	2b03      	cmp	r3, #3
 8014b04:	d903      	bls.n	8014b0e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	220d      	movs	r2, #13
 8014b0a:	701a      	strb	r2, [r3, #0]
 8014b0c:	e00e      	b.n	8014b2c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2200      	movs	r2, #0
 8014b12:	701a      	strb	r2, [r3, #0]
 8014b14:	e00a      	b.n	8014b2c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8014b1c:	f103 020a 	add.w	r2, r3, #10
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8014b26:	200a      	movs	r0, #10
 8014b28:	f004 fc40 	bl	80193ac <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2201      	movs	r2, #1
 8014b30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014b40:	2200      	movs	r2, #0
 8014b42:	4619      	mov	r1, r3
 8014b44:	f001 fd5c 	bl	8016600 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014b48:	e1c0      	b.n	8014ecc <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d005      	beq.n	8014b60 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014b5a:	2104      	movs	r1, #4
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8014b60:	2064      	movs	r0, #100	; 0x64
 8014b62:	f004 fc23 	bl	80193ac <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f004 faf2 	bl	8019150 <USBH_LL_GetSpeed>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	461a      	mov	r2, r3
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2205      	movs	r2, #5
 8014b7a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8014b7c:	2100      	movs	r1, #0
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f001 fb1f 	bl	80161c2 <USBH_AllocPipe>
 8014b84:	4603      	mov	r3, r0
 8014b86:	461a      	mov	r2, r3
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8014b8c:	2180      	movs	r1, #128	; 0x80
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f001 fb17 	bl	80161c2 <USBH_AllocPipe>
 8014b94:	4603      	mov	r3, r0
 8014b96:	461a      	mov	r2, r3
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	7919      	ldrb	r1, [r3, #4]
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8014bb0:	b292      	uxth	r2, r2
 8014bb2:	9202      	str	r2, [sp, #8]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	9201      	str	r2, [sp, #4]
 8014bb8:	9300      	str	r3, [sp, #0]
 8014bba:	4603      	mov	r3, r0
 8014bbc:	2280      	movs	r2, #128	; 0x80
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f001 fad0 	bl	8016164 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	7959      	ldrb	r1, [r3, #5]
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8014bd4:	687a      	ldr	r2, [r7, #4]
 8014bd6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014bd8:	b292      	uxth	r2, r2
 8014bda:	9202      	str	r2, [sp, #8]
 8014bdc:	2200      	movs	r2, #0
 8014bde:	9201      	str	r2, [sp, #4]
 8014be0:	9300      	str	r3, [sp, #0]
 8014be2:	4603      	mov	r3, r0
 8014be4:	2200      	movs	r2, #0
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f001 fabc 	bl	8016164 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2201      	movs	r2, #1
 8014bf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c00:	2200      	movs	r2, #0
 8014c02:	4619      	mov	r1, r3
 8014c04:	f001 fcfc 	bl	8016600 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014c08:	e160      	b.n	8014ecc <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f000 f964 	bl	8014ed8 <USBH_HandleEnum>
 8014c10:	4603      	mov	r3, r0
 8014c12:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8014c14:	7bbb      	ldrb	r3, [r7, #14]
 8014c16:	b2db      	uxtb	r3, r3
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	f040 8152 	bne.w	8014ec2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	2200      	movs	r2, #0
 8014c22:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d103      	bne.n	8014c38 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2208      	movs	r2, #8
 8014c34:	701a      	strb	r2, [r3, #0]
 8014c36:	e002      	b.n	8014c3e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2207      	movs	r2, #7
 8014c3c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2205      	movs	r2, #5
 8014c42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c52:	2200      	movs	r2, #0
 8014c54:	4619      	mov	r1, r3
 8014c56:	f001 fcd3 	bl	8016600 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8014c5a:	e132      	b.n	8014ec2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	f000 812f 	beq.w	8014ec6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014c6e:	2101      	movs	r1, #1
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2208      	movs	r2, #8
 8014c78:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	2205      	movs	r2, #5
 8014c7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c8e:	2200      	movs	r2, #0
 8014c90:	4619      	mov	r1, r3
 8014c92:	f001 fcb5 	bl	8016600 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8014c96:	e116      	b.n	8014ec6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f000 fcf6 	bl	8015694 <USBH_SetCfg>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d102      	bne.n	8014cb4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	2209      	movs	r2, #9
 8014cb2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2201      	movs	r2, #1
 8014cb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014cc8:	2200      	movs	r2, #0
 8014cca:	4619      	mov	r1, r3
 8014ccc:	f001 fc98 	bl	8016600 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014cd0:	e0fc      	b.n	8014ecc <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8014cd8:	f003 0320 	and.w	r3, r3, #32
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d00a      	beq.n	8014cf6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8014ce0:	2101      	movs	r1, #1
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f000 fcf9 	bl	80156da <USBH_SetFeature>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d106      	bne.n	8014cfc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	220a      	movs	r2, #10
 8014cf2:	701a      	strb	r2, [r3, #0]
 8014cf4:	e002      	b.n	8014cfc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	220a      	movs	r2, #10
 8014cfa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2201      	movs	r2, #1
 8014d00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d10:	2200      	movs	r2, #0
 8014d12:	4619      	mov	r1, r3
 8014d14:	f001 fc74 	bl	8016600 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014d18:	e0d8      	b.n	8014ecc <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d03f      	beq.n	8014da4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2200      	movs	r2, #0
 8014d28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	73fb      	strb	r3, [r7, #15]
 8014d30:	e016      	b.n	8014d60 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8014d32:	7bfa      	ldrb	r2, [r7, #15]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	32de      	adds	r2, #222	; 0xde
 8014d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d3c:	791a      	ldrb	r2, [r3, #4]
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d108      	bne.n	8014d5a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8014d48:	7bfa      	ldrb	r2, [r7, #15]
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	32de      	adds	r2, #222	; 0xde
 8014d4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8014d58:	e005      	b.n	8014d66 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8014d5a:	7bfb      	ldrb	r3, [r7, #15]
 8014d5c:	3301      	adds	r3, #1
 8014d5e:	73fb      	strb	r3, [r7, #15]
 8014d60:	7bfb      	ldrb	r3, [r7, #15]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d0e5      	beq.n	8014d32 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d016      	beq.n	8014d9e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014d76:	689b      	ldr	r3, [r3, #8]
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	4798      	blx	r3
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d109      	bne.n	8014d96 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2206      	movs	r2, #6
 8014d86:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014d8e:	2103      	movs	r1, #3
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	4798      	blx	r3
 8014d94:	e006      	b.n	8014da4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	220d      	movs	r2, #13
 8014d9a:	701a      	strb	r2, [r3, #0]
 8014d9c:	e002      	b.n	8014da4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	220d      	movs	r2, #13
 8014da2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2205      	movs	r2, #5
 8014da8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014db8:	2200      	movs	r2, #0
 8014dba:	4619      	mov	r1, r3
 8014dbc:	f001 fc20 	bl	8016600 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014dc0:	e084      	b.n	8014ecc <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d017      	beq.n	8014dfc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014dd2:	691b      	ldr	r3, [r3, #16]
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	4798      	blx	r3
 8014dd8:	4603      	mov	r3, r0
 8014dda:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8014ddc:	7bbb      	ldrb	r3, [r7, #14]
 8014dde:	b2db      	uxtb	r3, r3
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d103      	bne.n	8014dec <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	220b      	movs	r2, #11
 8014de8:	701a      	strb	r2, [r3, #0]
 8014dea:	e00a      	b.n	8014e02 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8014dec:	7bbb      	ldrb	r3, [r7, #14]
 8014dee:	b2db      	uxtb	r3, r3
 8014df0:	2b02      	cmp	r3, #2
 8014df2:	d106      	bne.n	8014e02 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	220d      	movs	r2, #13
 8014df8:	701a      	strb	r2, [r3, #0]
 8014dfa:	e002      	b.n	8014e02 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	220d      	movs	r2, #13
 8014e00:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2205      	movs	r2, #5
 8014e06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e16:	2200      	movs	r2, #0
 8014e18:	4619      	mov	r1, r3
 8014e1a:	f001 fbf1 	bl	8016600 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014e1e:	e055      	b.n	8014ecc <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d04f      	beq.n	8014eca <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e30:	695b      	ldr	r3, [r3, #20]
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	4798      	blx	r3
      }
      break;
 8014e36:	e048      	b.n	8014eca <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7ff fcf7 	bl	8014834 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d009      	beq.n	8014e64 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e56:	68db      	ldr	r3, [r3, #12]
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d005      	beq.n	8014e7a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014e74:	2105      	movs	r1, #5
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8014e80:	b2db      	uxtb	r3, r3
 8014e82:	2b01      	cmp	r3, #1
 8014e84:	d107      	bne.n	8014e96 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	2200      	movs	r2, #0
 8014e8a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f7ff fdb0 	bl	80149f4 <USBH_Start>
 8014e94:	e002      	b.n	8014e9c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f004 f924 	bl	80190e4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2201      	movs	r2, #1
 8014ea0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	f001 fba4 	bl	8016600 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014eb8:	e008      	b.n	8014ecc <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8014eba:	bf00      	nop
 8014ebc:	e006      	b.n	8014ecc <USBH_Process+0x4b8>
      break;
 8014ebe:	bf00      	nop
 8014ec0:	e004      	b.n	8014ecc <USBH_Process+0x4b8>
      break;
 8014ec2:	bf00      	nop
 8014ec4:	e002      	b.n	8014ecc <USBH_Process+0x4b8>
    break;
 8014ec6:	bf00      	nop
 8014ec8:	e000      	b.n	8014ecc <USBH_Process+0x4b8>
      break;
 8014eca:	bf00      	nop
  }
  return USBH_OK;
 8014ecc:	2300      	movs	r3, #0
}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	3710      	adds	r7, #16
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}
 8014ed6:	bf00      	nop

08014ed8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b088      	sub	sp, #32
 8014edc:	af04      	add	r7, sp, #16
 8014ede:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8014ee0:	2301      	movs	r3, #1
 8014ee2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8014ee4:	2301      	movs	r3, #1
 8014ee6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	785b      	ldrb	r3, [r3, #1]
 8014eec:	2b07      	cmp	r3, #7
 8014eee:	f200 8208 	bhi.w	8015302 <USBH_HandleEnum+0x42a>
 8014ef2:	a201      	add	r2, pc, #4	; (adr r2, 8014ef8 <USBH_HandleEnum+0x20>)
 8014ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ef8:	08014f19 	.word	0x08014f19
 8014efc:	08014fd7 	.word	0x08014fd7
 8014f00:	08015041 	.word	0x08015041
 8014f04:	080150cf 	.word	0x080150cf
 8014f08:	08015139 	.word	0x08015139
 8014f0c:	080151a9 	.word	0x080151a9
 8014f10:	08015245 	.word	0x08015245
 8014f14:	080152c3 	.word	0x080152c3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8014f18:	2108      	movs	r1, #8
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f000 faea 	bl	80154f4 <USBH_Get_DevDesc>
 8014f20:	4603      	mov	r3, r0
 8014f22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014f24:	7bbb      	ldrb	r3, [r7, #14]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d130      	bne.n	8014f8c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2201      	movs	r2, #1
 8014f38:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	7919      	ldrb	r1, [r3, #4]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8014f4e:	b292      	uxth	r2, r2
 8014f50:	9202      	str	r2, [sp, #8]
 8014f52:	2200      	movs	r2, #0
 8014f54:	9201      	str	r2, [sp, #4]
 8014f56:	9300      	str	r3, [sp, #0]
 8014f58:	4603      	mov	r3, r0
 8014f5a:	2280      	movs	r2, #128	; 0x80
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f001 f901 	bl	8016164 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	7959      	ldrb	r1, [r3, #5]
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014f72:	687a      	ldr	r2, [r7, #4]
 8014f74:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014f76:	b292      	uxth	r2, r2
 8014f78:	9202      	str	r2, [sp, #8]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	9201      	str	r2, [sp, #4]
 8014f7e:	9300      	str	r3, [sp, #0]
 8014f80:	4603      	mov	r3, r0
 8014f82:	2200      	movs	r2, #0
 8014f84:	6878      	ldr	r0, [r7, #4]
 8014f86:	f001 f8ed 	bl	8016164 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8014f8a:	e1bc      	b.n	8015306 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014f8c:	7bbb      	ldrb	r3, [r7, #14]
 8014f8e:	2b03      	cmp	r3, #3
 8014f90:	f040 81b9 	bne.w	8015306 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014f9a:	3301      	adds	r3, #1
 8014f9c:	b2da      	uxtb	r2, r3
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014faa:	2b03      	cmp	r3, #3
 8014fac:	d903      	bls.n	8014fb6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	220d      	movs	r2, #13
 8014fb2:	701a      	strb	r2, [r3, #0]
      break;
 8014fb4:	e1a7      	b.n	8015306 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	795b      	ldrb	r3, [r3, #5]
 8014fba:	4619      	mov	r1, r3
 8014fbc:	6878      	ldr	r0, [r7, #4]
 8014fbe:	f001 f921 	bl	8016204 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	791b      	ldrb	r3, [r3, #4]
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f001 f91b 	bl	8016204 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	701a      	strb	r2, [r3, #0]
      break;
 8014fd4:	e197      	b.n	8015306 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8014fd6:	2112      	movs	r1, #18
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f000 fa8b 	bl	80154f4 <USBH_Get_DevDesc>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014fe2:	7bbb      	ldrb	r3, [r7, #14]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d103      	bne.n	8014ff0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2202      	movs	r2, #2
 8014fec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8014fee:	e18c      	b.n	801530a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014ff0:	7bbb      	ldrb	r3, [r7, #14]
 8014ff2:	2b03      	cmp	r3, #3
 8014ff4:	f040 8189 	bne.w	801530a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014ffe:	3301      	adds	r3, #1
 8015000:	b2da      	uxtb	r2, r3
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801500e:	2b03      	cmp	r3, #3
 8015010:	d903      	bls.n	801501a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	220d      	movs	r2, #13
 8015016:	701a      	strb	r2, [r3, #0]
      break;
 8015018:	e177      	b.n	801530a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	795b      	ldrb	r3, [r3, #5]
 801501e:	4619      	mov	r1, r3
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f001 f8ef 	bl	8016204 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	791b      	ldrb	r3, [r3, #4]
 801502a:	4619      	mov	r1, r3
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f001 f8e9 	bl	8016204 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2200      	movs	r2, #0
 8015036:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2200      	movs	r2, #0
 801503c:	701a      	strb	r2, [r3, #0]
      break;
 801503e:	e164      	b.n	801530a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8015040:	2101      	movs	r1, #1
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f000 fb02 	bl	801564c <USBH_SetAddress>
 8015048:	4603      	mov	r3, r0
 801504a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801504c:	7bbb      	ldrb	r3, [r7, #14]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d132      	bne.n	80150b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8015052:	2002      	movs	r0, #2
 8015054:	f004 f9aa 	bl	80193ac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2201      	movs	r2, #1
 801505c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2203      	movs	r2, #3
 8015064:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	7919      	ldrb	r1, [r3, #4]
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8015076:	687a      	ldr	r2, [r7, #4]
 8015078:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801507a:	b292      	uxth	r2, r2
 801507c:	9202      	str	r2, [sp, #8]
 801507e:	2200      	movs	r2, #0
 8015080:	9201      	str	r2, [sp, #4]
 8015082:	9300      	str	r3, [sp, #0]
 8015084:	4603      	mov	r3, r0
 8015086:	2280      	movs	r2, #128	; 0x80
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f001 f86b 	bl	8016164 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	7959      	ldrb	r1, [r3, #5]
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801509e:	687a      	ldr	r2, [r7, #4]
 80150a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80150a2:	b292      	uxth	r2, r2
 80150a4:	9202      	str	r2, [sp, #8]
 80150a6:	2200      	movs	r2, #0
 80150a8:	9201      	str	r2, [sp, #4]
 80150aa:	9300      	str	r3, [sp, #0]
 80150ac:	4603      	mov	r3, r0
 80150ae:	2200      	movs	r2, #0
 80150b0:	6878      	ldr	r0, [r7, #4]
 80150b2:	f001 f857 	bl	8016164 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80150b6:	e12a      	b.n	801530e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80150b8:	7bbb      	ldrb	r3, [r7, #14]
 80150ba:	2b03      	cmp	r3, #3
 80150bc:	f040 8127 	bne.w	801530e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	220d      	movs	r2, #13
 80150c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	2200      	movs	r2, #0
 80150ca:	705a      	strb	r2, [r3, #1]
      break;
 80150cc:	e11f      	b.n	801530e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80150ce:	2109      	movs	r1, #9
 80150d0:	6878      	ldr	r0, [r7, #4]
 80150d2:	f000 fa37 	bl	8015544 <USBH_Get_CfgDesc>
 80150d6:	4603      	mov	r3, r0
 80150d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80150da:	7bbb      	ldrb	r3, [r7, #14]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d103      	bne.n	80150e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2204      	movs	r2, #4
 80150e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80150e6:	e114      	b.n	8015312 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80150e8:	7bbb      	ldrb	r3, [r7, #14]
 80150ea:	2b03      	cmp	r3, #3
 80150ec:	f040 8111 	bne.w	8015312 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80150f6:	3301      	adds	r3, #1
 80150f8:	b2da      	uxtb	r2, r3
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015106:	2b03      	cmp	r3, #3
 8015108:	d903      	bls.n	8015112 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	220d      	movs	r2, #13
 801510e:	701a      	strb	r2, [r3, #0]
      break;
 8015110:	e0ff      	b.n	8015312 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	795b      	ldrb	r3, [r3, #5]
 8015116:	4619      	mov	r1, r3
 8015118:	6878      	ldr	r0, [r7, #4]
 801511a:	f001 f873 	bl	8016204 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	791b      	ldrb	r3, [r3, #4]
 8015122:	4619      	mov	r1, r3
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f001 f86d 	bl	8016204 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2200      	movs	r2, #0
 801512e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2200      	movs	r2, #0
 8015134:	701a      	strb	r2, [r3, #0]
      break;
 8015136:	e0ec      	b.n	8015312 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 801513e:	4619      	mov	r1, r3
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f000 f9ff 	bl	8015544 <USBH_Get_CfgDesc>
 8015146:	4603      	mov	r3, r0
 8015148:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801514a:	7bbb      	ldrb	r3, [r7, #14]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d103      	bne.n	8015158 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2205      	movs	r2, #5
 8015154:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015156:	e0de      	b.n	8015316 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015158:	7bbb      	ldrb	r3, [r7, #14]
 801515a:	2b03      	cmp	r3, #3
 801515c:	f040 80db 	bne.w	8015316 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015166:	3301      	adds	r3, #1
 8015168:	b2da      	uxtb	r2, r3
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015176:	2b03      	cmp	r3, #3
 8015178:	d903      	bls.n	8015182 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	220d      	movs	r2, #13
 801517e:	701a      	strb	r2, [r3, #0]
      break;
 8015180:	e0c9      	b.n	8015316 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	795b      	ldrb	r3, [r3, #5]
 8015186:	4619      	mov	r1, r3
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f001 f83b 	bl	8016204 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	791b      	ldrb	r3, [r3, #4]
 8015192:	4619      	mov	r1, r3
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f001 f835 	bl	8016204 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	2200      	movs	r2, #0
 801519e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2200      	movs	r2, #0
 80151a4:	701a      	strb	r2, [r3, #0]
      break;
 80151a6:	e0b6      	b.n	8015316 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d036      	beq.n	8015220 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80151be:	23ff      	movs	r3, #255	; 0xff
 80151c0:	6878      	ldr	r0, [r7, #4]
 80151c2:	f000 f9e3 	bl	801558c <USBH_Get_StringDesc>
 80151c6:	4603      	mov	r3, r0
 80151c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80151ca:	7bbb      	ldrb	r3, [r7, #14]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d111      	bne.n	80151f4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2206      	movs	r2, #6
 80151d4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2205      	movs	r2, #5
 80151da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80151ea:	2200      	movs	r2, #0
 80151ec:	4619      	mov	r1, r3
 80151ee:	f001 fa07 	bl	8016600 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80151f2:	e092      	b.n	801531a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80151f4:	7bbb      	ldrb	r3, [r7, #14]
 80151f6:	2b03      	cmp	r3, #3
 80151f8:	f040 808f 	bne.w	801531a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	2206      	movs	r2, #6
 8015200:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2205      	movs	r2, #5
 8015206:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015216:	2200      	movs	r2, #0
 8015218:	4619      	mov	r1, r3
 801521a:	f001 f9f1 	bl	8016600 <osMessagePut>
      break;
 801521e:	e07c      	b.n	801531a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2206      	movs	r2, #6
 8015224:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	2205      	movs	r2, #5
 801522a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801523a:	2200      	movs	r2, #0
 801523c:	4619      	mov	r1, r3
 801523e:	f001 f9df 	bl	8016600 <osMessagePut>
      break;
 8015242:	e06a      	b.n	801531a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 801524a:	2b00      	cmp	r3, #0
 801524c:	d027      	beq.n	801529e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801525a:	23ff      	movs	r3, #255	; 0xff
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f000 f995 	bl	801558c <USBH_Get_StringDesc>
 8015262:	4603      	mov	r3, r0
 8015264:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015266:	7bbb      	ldrb	r3, [r7, #14]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d103      	bne.n	8015274 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	2207      	movs	r2, #7
 8015270:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8015272:	e054      	b.n	801531e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015274:	7bbb      	ldrb	r3, [r7, #14]
 8015276:	2b03      	cmp	r3, #3
 8015278:	d151      	bne.n	801531e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	2207      	movs	r2, #7
 801527e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2205      	movs	r2, #5
 8015284:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015294:	2200      	movs	r2, #0
 8015296:	4619      	mov	r1, r3
 8015298:	f001 f9b2 	bl	8016600 <osMessagePut>
      break;
 801529c:	e03f      	b.n	801531e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2207      	movs	r2, #7
 80152a2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	2205      	movs	r2, #5
 80152a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80152b8:	2200      	movs	r2, #0
 80152ba:	4619      	mov	r1, r3
 80152bc:	f001 f9a0 	bl	8016600 <osMessagePut>
      break;
 80152c0:	e02d      	b.n	801531e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d017      	beq.n	80152fc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80152d8:	23ff      	movs	r3, #255	; 0xff
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f000 f956 	bl	801558c <USBH_Get_StringDesc>
 80152e0:	4603      	mov	r3, r0
 80152e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80152e4:	7bbb      	ldrb	r3, [r7, #14]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d102      	bne.n	80152f0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80152ea:	2300      	movs	r3, #0
 80152ec:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80152ee:	e018      	b.n	8015322 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80152f0:	7bbb      	ldrb	r3, [r7, #14]
 80152f2:	2b03      	cmp	r3, #3
 80152f4:	d115      	bne.n	8015322 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80152f6:	2300      	movs	r3, #0
 80152f8:	73fb      	strb	r3, [r7, #15]
      break;
 80152fa:	e012      	b.n	8015322 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80152fc:	2300      	movs	r3, #0
 80152fe:	73fb      	strb	r3, [r7, #15]
      break;
 8015300:	e00f      	b.n	8015322 <USBH_HandleEnum+0x44a>

    default:
      break;
 8015302:	bf00      	nop
 8015304:	e00e      	b.n	8015324 <USBH_HandleEnum+0x44c>
      break;
 8015306:	bf00      	nop
 8015308:	e00c      	b.n	8015324 <USBH_HandleEnum+0x44c>
      break;
 801530a:	bf00      	nop
 801530c:	e00a      	b.n	8015324 <USBH_HandleEnum+0x44c>
      break;
 801530e:	bf00      	nop
 8015310:	e008      	b.n	8015324 <USBH_HandleEnum+0x44c>
      break;
 8015312:	bf00      	nop
 8015314:	e006      	b.n	8015324 <USBH_HandleEnum+0x44c>
      break;
 8015316:	bf00      	nop
 8015318:	e004      	b.n	8015324 <USBH_HandleEnum+0x44c>
      break;
 801531a:	bf00      	nop
 801531c:	e002      	b.n	8015324 <USBH_HandleEnum+0x44c>
      break;
 801531e:	bf00      	nop
 8015320:	e000      	b.n	8015324 <USBH_HandleEnum+0x44c>
      break;
 8015322:	bf00      	nop
  }
  return Status;
 8015324:	7bfb      	ldrb	r3, [r7, #15]
}
 8015326:	4618      	mov	r0, r3
 8015328:	3710      	adds	r7, #16
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}
 801532e:	bf00      	nop

08015330 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8015330:	b480      	push	{r7}
 8015332:	b083      	sub	sp, #12
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	683a      	ldr	r2, [r7, #0]
 801533e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8015342:	bf00      	nop
 8015344:	370c      	adds	r7, #12
 8015346:	46bd      	mov	sp, r7
 8015348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534c:	4770      	bx	lr

0801534e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801534e:	b580      	push	{r7, lr}
 8015350:	b082      	sub	sp, #8
 8015352:	af00      	add	r7, sp, #0
 8015354:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801535c:	1c5a      	adds	r2, r3, #1
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f000 f804 	bl	8015372 <USBH_HandleSof>
}
 801536a:	bf00      	nop
 801536c:	3708      	adds	r7, #8
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}

08015372 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8015372:	b580      	push	{r7, lr}
 8015374:	b082      	sub	sp, #8
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	b2db      	uxtb	r3, r3
 8015380:	2b0b      	cmp	r3, #11
 8015382:	d10a      	bne.n	801539a <USBH_HandleSof+0x28>
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801538a:	2b00      	cmp	r3, #0
 801538c:	d005      	beq.n	801539a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015394:	699b      	ldr	r3, [r3, #24]
 8015396:	6878      	ldr	r0, [r7, #4]
 8015398:	4798      	blx	r3
  }
}
 801539a:	bf00      	nop
 801539c:	3708      	adds	r7, #8
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}

080153a2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b082      	sub	sp, #8
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2201      	movs	r2, #1
 80153ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2201      	movs	r2, #1
 80153b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80153c6:	2200      	movs	r2, #0
 80153c8:	4619      	mov	r1, r3
 80153ca:	f001 f919 	bl	8016600 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80153ce:	bf00      	nop
}
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80153d6:	b480      	push	{r7}
 80153d8:	b083      	sub	sp, #12
 80153da:	af00      	add	r7, sp, #0
 80153dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2200      	movs	r2, #0
 80153e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80153e6:	bf00      	nop
}
 80153e8:	370c      	adds	r7, #12
 80153ea:	46bd      	mov	sp, r7
 80153ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f0:	4770      	bx	lr

080153f2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80153f2:	b580      	push	{r7, lr}
 80153f4:	b082      	sub	sp, #8
 80153f6:	af00      	add	r7, sp, #0
 80153f8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2201      	movs	r2, #1
 80153fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2200      	movs	r2, #0
 8015406:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2200      	movs	r2, #0
 801540e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	2201      	movs	r2, #1
 8015416:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015426:	2200      	movs	r2, #0
 8015428:	4619      	mov	r1, r3
 801542a:	f001 f8e9 	bl	8016600 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801542e:	2300      	movs	r3, #0
}
 8015430:	4618      	mov	r0, r3
 8015432:	3708      	adds	r7, #8
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}

08015438 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2201      	movs	r2, #1
 8015444:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2200      	movs	r2, #0
 801544c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	2200      	movs	r2, #0
 8015454:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f003 fe5e 	bl	801911a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	791b      	ldrb	r3, [r3, #4]
 8015462:	4619      	mov	r1, r3
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f000 fecd 	bl	8016204 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	795b      	ldrb	r3, [r3, #5]
 801546e:	4619      	mov	r1, r3
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f000 fec7 	bl	8016204 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	2201      	movs	r2, #1
 801547a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801548a:	2200      	movs	r2, #0
 801548c:	4619      	mov	r1, r3
 801548e:	f001 f8b7 	bl	8016600 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8015492:	2300      	movs	r3, #0
}
 8015494:	4618      	mov	r0, r3
 8015496:	3708      	adds	r7, #8
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}

0801549c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b086      	sub	sp, #24
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80154aa:	f107 030c 	add.w	r3, r7, #12
 80154ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80154b2:	4618      	mov	r0, r3
 80154b4:	f001 f8e4 	bl	8016680 <osMessageGet>
    if (event.status == osEventMessage)
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	2b10      	cmp	r3, #16
 80154bc:	d1f2      	bne.n	80154a4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f7ff faa8 	bl	8014a14 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80154c4:	e7ee      	b.n	80154a4 <USBH_Process_OS+0x8>

080154c6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80154c6:	b580      	push	{r7, lr}
 80154c8:	b082      	sub	sp, #8
 80154ca:	af00      	add	r7, sp, #0
 80154cc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	2201      	movs	r2, #1
 80154d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80154e2:	2200      	movs	r2, #0
 80154e4:	4619      	mov	r1, r3
 80154e6:	f001 f88b 	bl	8016600 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80154ea:	2300      	movs	r3, #0
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	3708      	adds	r7, #8
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}

080154f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b086      	sub	sp, #24
 80154f8:	af02      	add	r7, sp, #8
 80154fa:	6078      	str	r0, [r7, #4]
 80154fc:	460b      	mov	r3, r1
 80154fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8015506:	78fb      	ldrb	r3, [r7, #3]
 8015508:	b29b      	uxth	r3, r3
 801550a:	9300      	str	r3, [sp, #0]
 801550c:	4613      	mov	r3, r2
 801550e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015512:	2100      	movs	r1, #0
 8015514:	6878      	ldr	r0, [r7, #4]
 8015516:	f000 f864 	bl	80155e2 <USBH_GetDescriptor>
 801551a:	4603      	mov	r3, r0
 801551c:	73fb      	strb	r3, [r7, #15]
 801551e:	7bfb      	ldrb	r3, [r7, #15]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d10a      	bne.n	801553a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f203 3026 	addw	r0, r3, #806	; 0x326
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015530:	78fa      	ldrb	r2, [r7, #3]
 8015532:	b292      	uxth	r2, r2
 8015534:	4619      	mov	r1, r3
 8015536:	f000 f918 	bl	801576a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801553a:	7bfb      	ldrb	r3, [r7, #15]
}
 801553c:	4618      	mov	r0, r3
 801553e:	3710      	adds	r7, #16
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}

08015544 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8015544:	b580      	push	{r7, lr}
 8015546:	b086      	sub	sp, #24
 8015548:	af02      	add	r7, sp, #8
 801554a:	6078      	str	r0, [r7, #4]
 801554c:	460b      	mov	r3, r1
 801554e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	331c      	adds	r3, #28
 8015554:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8015556:	887b      	ldrh	r3, [r7, #2]
 8015558:	9300      	str	r3, [sp, #0]
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015560:	2100      	movs	r1, #0
 8015562:	6878      	ldr	r0, [r7, #4]
 8015564:	f000 f83d 	bl	80155e2 <USBH_GetDescriptor>
 8015568:	4603      	mov	r3, r0
 801556a:	72fb      	strb	r3, [r7, #11]
 801556c:	7afb      	ldrb	r3, [r7, #11]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d107      	bne.n	8015582 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015578:	887a      	ldrh	r2, [r7, #2]
 801557a:	68f9      	ldr	r1, [r7, #12]
 801557c:	4618      	mov	r0, r3
 801557e:	f000 f964 	bl	801584a <USBH_ParseCfgDesc>
  }

  return status;
 8015582:	7afb      	ldrb	r3, [r7, #11]
}
 8015584:	4618      	mov	r0, r3
 8015586:	3710      	adds	r7, #16
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b088      	sub	sp, #32
 8015590:	af02      	add	r7, sp, #8
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	607a      	str	r2, [r7, #4]
 8015596:	461a      	mov	r2, r3
 8015598:	460b      	mov	r3, r1
 801559a:	72fb      	strb	r3, [r7, #11]
 801559c:	4613      	mov	r3, r2
 801559e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80155a0:	7afb      	ldrb	r3, [r7, #11]
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80155a8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80155b0:	893b      	ldrh	r3, [r7, #8]
 80155b2:	9300      	str	r3, [sp, #0]
 80155b4:	460b      	mov	r3, r1
 80155b6:	2100      	movs	r1, #0
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f000 f812 	bl	80155e2 <USBH_GetDescriptor>
 80155be:	4603      	mov	r3, r0
 80155c0:	75fb      	strb	r3, [r7, #23]
 80155c2:	7dfb      	ldrb	r3, [r7, #23]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d107      	bne.n	80155d8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80155ce:	893a      	ldrh	r2, [r7, #8]
 80155d0:	6879      	ldr	r1, [r7, #4]
 80155d2:	4618      	mov	r0, r3
 80155d4:	f000 fa37 	bl	8015a46 <USBH_ParseStringDesc>
  }

  return status;
 80155d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80155da:	4618      	mov	r0, r3
 80155dc:	3718      	adds	r7, #24
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd80      	pop	{r7, pc}

080155e2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80155e2:	b580      	push	{r7, lr}
 80155e4:	b084      	sub	sp, #16
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	60f8      	str	r0, [r7, #12]
 80155ea:	607b      	str	r3, [r7, #4]
 80155ec:	460b      	mov	r3, r1
 80155ee:	72fb      	strb	r3, [r7, #11]
 80155f0:	4613      	mov	r3, r2
 80155f2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	789b      	ldrb	r3, [r3, #2]
 80155f8:	2b01      	cmp	r3, #1
 80155fa:	d11c      	bne.n	8015636 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80155fc:	7afb      	ldrb	r3, [r7, #11]
 80155fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015602:	b2da      	uxtb	r2, r3
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	2206      	movs	r2, #6
 801560c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	893a      	ldrh	r2, [r7, #8]
 8015612:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8015614:	893b      	ldrh	r3, [r7, #8]
 8015616:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801561a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801561e:	d104      	bne.n	801562a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	f240 4209 	movw	r2, #1033	; 0x409
 8015626:	829a      	strh	r2, [r3, #20]
 8015628:	e002      	b.n	8015630 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	2200      	movs	r2, #0
 801562e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	8b3a      	ldrh	r2, [r7, #24]
 8015634:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8015636:	8b3b      	ldrh	r3, [r7, #24]
 8015638:	461a      	mov	r2, r3
 801563a:	6879      	ldr	r1, [r7, #4]
 801563c:	68f8      	ldr	r0, [r7, #12]
 801563e:	f000 fa50 	bl	8015ae2 <USBH_CtlReq>
 8015642:	4603      	mov	r3, r0
}
 8015644:	4618      	mov	r0, r3
 8015646:	3710      	adds	r7, #16
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}

0801564c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b082      	sub	sp, #8
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	460b      	mov	r3, r1
 8015656:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	789b      	ldrb	r3, [r3, #2]
 801565c:	2b01      	cmp	r3, #1
 801565e:	d10f      	bne.n	8015680 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2200      	movs	r2, #0
 8015664:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	2205      	movs	r2, #5
 801566a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801566c:	78fb      	ldrb	r3, [r7, #3]
 801566e:	b29a      	uxth	r2, r3
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2200      	movs	r2, #0
 8015678:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2200      	movs	r2, #0
 801567e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8015680:	2200      	movs	r2, #0
 8015682:	2100      	movs	r1, #0
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f000 fa2c 	bl	8015ae2 <USBH_CtlReq>
 801568a:	4603      	mov	r3, r0
}
 801568c:	4618      	mov	r0, r3
 801568e:	3708      	adds	r7, #8
 8015690:	46bd      	mov	sp, r7
 8015692:	bd80      	pop	{r7, pc}

08015694 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b082      	sub	sp, #8
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	460b      	mov	r3, r1
 801569e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	789b      	ldrb	r3, [r3, #2]
 80156a4:	2b01      	cmp	r3, #1
 80156a6:	d10e      	bne.n	80156c6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	2200      	movs	r2, #0
 80156ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2209      	movs	r2, #9
 80156b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	887a      	ldrh	r2, [r7, #2]
 80156b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	2200      	movs	r2, #0
 80156be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	2200      	movs	r2, #0
 80156c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80156c6:	2200      	movs	r2, #0
 80156c8:	2100      	movs	r1, #0
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f000 fa09 	bl	8015ae2 <USBH_CtlReq>
 80156d0:	4603      	mov	r3, r0
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	3708      	adds	r7, #8
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}

080156da <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80156da:	b580      	push	{r7, lr}
 80156dc:	b082      	sub	sp, #8
 80156de:	af00      	add	r7, sp, #0
 80156e0:	6078      	str	r0, [r7, #4]
 80156e2:	460b      	mov	r3, r1
 80156e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	789b      	ldrb	r3, [r3, #2]
 80156ea:	2b01      	cmp	r3, #1
 80156ec:	d10f      	bne.n	801570e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2200      	movs	r2, #0
 80156f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2203      	movs	r2, #3
 80156f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80156fa:	78fb      	ldrb	r3, [r7, #3]
 80156fc:	b29a      	uxth	r2, r3
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2200      	movs	r2, #0
 8015706:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2200      	movs	r2, #0
 801570c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801570e:	2200      	movs	r2, #0
 8015710:	2100      	movs	r1, #0
 8015712:	6878      	ldr	r0, [r7, #4]
 8015714:	f000 f9e5 	bl	8015ae2 <USBH_CtlReq>
 8015718:	4603      	mov	r3, r0
}
 801571a:	4618      	mov	r0, r3
 801571c:	3708      	adds	r7, #8
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}

08015722 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8015722:	b580      	push	{r7, lr}
 8015724:	b082      	sub	sp, #8
 8015726:	af00      	add	r7, sp, #0
 8015728:	6078      	str	r0, [r7, #4]
 801572a:	460b      	mov	r3, r1
 801572c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	789b      	ldrb	r3, [r3, #2]
 8015732:	2b01      	cmp	r3, #1
 8015734:	d10f      	bne.n	8015756 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2202      	movs	r2, #2
 801573a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2201      	movs	r2, #1
 8015740:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2200      	movs	r2, #0
 8015746:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8015748:	78fb      	ldrb	r3, [r7, #3]
 801574a:	b29a      	uxth	r2, r3
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	2200      	movs	r2, #0
 8015754:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8015756:	2200      	movs	r2, #0
 8015758:	2100      	movs	r1, #0
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f000 f9c1 	bl	8015ae2 <USBH_CtlReq>
 8015760:	4603      	mov	r3, r0
}
 8015762:	4618      	mov	r0, r3
 8015764:	3708      	adds	r7, #8
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}

0801576a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 801576a:	b480      	push	{r7}
 801576c:	b085      	sub	sp, #20
 801576e:	af00      	add	r7, sp, #0
 8015770:	60f8      	str	r0, [r7, #12]
 8015772:	60b9      	str	r1, [r7, #8]
 8015774:	4613      	mov	r3, r2
 8015776:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	781a      	ldrb	r2, [r3, #0]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	785a      	ldrb	r2, [r3, #1]
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	3302      	adds	r3, #2
 801578c:	781b      	ldrb	r3, [r3, #0]
 801578e:	b29a      	uxth	r2, r3
 8015790:	68bb      	ldr	r3, [r7, #8]
 8015792:	3303      	adds	r3, #3
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	b29b      	uxth	r3, r3
 8015798:	021b      	lsls	r3, r3, #8
 801579a:	b29b      	uxth	r3, r3
 801579c:	4313      	orrs	r3, r2
 801579e:	b29a      	uxth	r2, r3
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	791a      	ldrb	r2, [r3, #4]
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	795a      	ldrb	r2, [r3, #5]
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	799a      	ldrb	r2, [r3, #6]
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80157bc:	68bb      	ldr	r3, [r7, #8]
 80157be:	79da      	ldrb	r2, [r3, #7]
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80157c4:	88fb      	ldrh	r3, [r7, #6]
 80157c6:	2b08      	cmp	r3, #8
 80157c8:	d939      	bls.n	801583e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	3308      	adds	r3, #8
 80157ce:	781b      	ldrb	r3, [r3, #0]
 80157d0:	b29a      	uxth	r2, r3
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	3309      	adds	r3, #9
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	b29b      	uxth	r3, r3
 80157da:	021b      	lsls	r3, r3, #8
 80157dc:	b29b      	uxth	r3, r3
 80157de:	4313      	orrs	r3, r2
 80157e0:	b29a      	uxth	r2, r3
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	330a      	adds	r3, #10
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	b29a      	uxth	r2, r3
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	330b      	adds	r3, #11
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	b29b      	uxth	r3, r3
 80157f6:	021b      	lsls	r3, r3, #8
 80157f8:	b29b      	uxth	r3, r3
 80157fa:	4313      	orrs	r3, r2
 80157fc:	b29a      	uxth	r2, r3
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	330c      	adds	r3, #12
 8015806:	781b      	ldrb	r3, [r3, #0]
 8015808:	b29a      	uxth	r2, r3
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	330d      	adds	r3, #13
 801580e:	781b      	ldrb	r3, [r3, #0]
 8015810:	b29b      	uxth	r3, r3
 8015812:	021b      	lsls	r3, r3, #8
 8015814:	b29b      	uxth	r3, r3
 8015816:	4313      	orrs	r3, r2
 8015818:	b29a      	uxth	r2, r3
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	7b9a      	ldrb	r2, [r3, #14]
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	7bda      	ldrb	r2, [r3, #15]
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	7c1a      	ldrb	r2, [r3, #16]
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8015836:	68bb      	ldr	r3, [r7, #8]
 8015838:	7c5a      	ldrb	r2, [r3, #17]
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	745a      	strb	r2, [r3, #17]
  }
}
 801583e:	bf00      	nop
 8015840:	3714      	adds	r7, #20
 8015842:	46bd      	mov	sp, r7
 8015844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015848:	4770      	bx	lr

0801584a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 801584a:	b580      	push	{r7, lr}
 801584c:	b08a      	sub	sp, #40	; 0x28
 801584e:	af00      	add	r7, sp, #0
 8015850:	60f8      	str	r0, [r7, #12]
 8015852:	60b9      	str	r1, [r7, #8]
 8015854:	4613      	mov	r3, r2
 8015856:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801585c:	2300      	movs	r3, #0
 801585e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8015862:	2300      	movs	r3, #0
 8015864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	781a      	ldrb	r2, [r3, #0]
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	785a      	ldrb	r2, [r3, #1]
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 801587c:	68bb      	ldr	r3, [r7, #8]
 801587e:	3302      	adds	r3, #2
 8015880:	781b      	ldrb	r3, [r3, #0]
 8015882:	b29a      	uxth	r2, r3
 8015884:	68bb      	ldr	r3, [r7, #8]
 8015886:	3303      	adds	r3, #3
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	b29b      	uxth	r3, r3
 801588c:	021b      	lsls	r3, r3, #8
 801588e:	b29b      	uxth	r3, r3
 8015890:	4313      	orrs	r3, r2
 8015892:	b29a      	uxth	r2, r3
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	791a      	ldrb	r2, [r3, #4]
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	795a      	ldrb	r2, [r3, #5]
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	799a      	ldrb	r2, [r3, #6]
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	79da      	ldrb	r2, [r3, #7]
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	7a1a      	ldrb	r2, [r3, #8]
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80158c0:	88fb      	ldrh	r3, [r7, #6]
 80158c2:	2b09      	cmp	r3, #9
 80158c4:	d95f      	bls.n	8015986 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80158c6:	2309      	movs	r3, #9
 80158c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80158ca:	2300      	movs	r3, #0
 80158cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80158ce:	e051      	b.n	8015974 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80158d0:	f107 0316 	add.w	r3, r7, #22
 80158d4:	4619      	mov	r1, r3
 80158d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158d8:	f000 f8e8 	bl	8015aac <USBH_GetNextDesc>
 80158dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80158de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e0:	785b      	ldrb	r3, [r3, #1]
 80158e2:	2b04      	cmp	r3, #4
 80158e4:	d146      	bne.n	8015974 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80158e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80158ea:	221a      	movs	r2, #26
 80158ec:	fb02 f303 	mul.w	r3, r2, r3
 80158f0:	3308      	adds	r3, #8
 80158f2:	68fa      	ldr	r2, [r7, #12]
 80158f4:	4413      	add	r3, r2
 80158f6:	3302      	adds	r3, #2
 80158f8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80158fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80158fc:	69f8      	ldr	r0, [r7, #28]
 80158fe:	f000 f846 	bl	801598e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8015902:	2300      	movs	r3, #0
 8015904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8015908:	2300      	movs	r3, #0
 801590a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801590c:	e022      	b.n	8015954 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801590e:	f107 0316 	add.w	r3, r7, #22
 8015912:	4619      	mov	r1, r3
 8015914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015916:	f000 f8c9 	bl	8015aac <USBH_GetNextDesc>
 801591a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 801591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801591e:	785b      	ldrb	r3, [r3, #1]
 8015920:	2b05      	cmp	r3, #5
 8015922:	d117      	bne.n	8015954 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8015924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015928:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801592c:	3201      	adds	r2, #1
 801592e:	00d2      	lsls	r2, r2, #3
 8015930:	211a      	movs	r1, #26
 8015932:	fb01 f303 	mul.w	r3, r1, r3
 8015936:	4413      	add	r3, r2
 8015938:	3308      	adds	r3, #8
 801593a:	68fa      	ldr	r2, [r7, #12]
 801593c:	4413      	add	r3, r2
 801593e:	3304      	adds	r3, #4
 8015940:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8015942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015944:	69b8      	ldr	r0, [r7, #24]
 8015946:	f000 f851 	bl	80159ec <USBH_ParseEPDesc>
            ep_ix++;
 801594a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801594e:	3301      	adds	r3, #1
 8015950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8015954:	69fb      	ldr	r3, [r7, #28]
 8015956:	791b      	ldrb	r3, [r3, #4]
 8015958:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801595c:	429a      	cmp	r2, r3
 801595e:	d204      	bcs.n	801596a <USBH_ParseCfgDesc+0x120>
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	885a      	ldrh	r2, [r3, #2]
 8015964:	8afb      	ldrh	r3, [r7, #22]
 8015966:	429a      	cmp	r2, r3
 8015968:	d8d1      	bhi.n	801590e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 801596a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801596e:	3301      	adds	r3, #1
 8015970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8015974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015978:	2b01      	cmp	r3, #1
 801597a:	d804      	bhi.n	8015986 <USBH_ParseCfgDesc+0x13c>
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	885a      	ldrh	r2, [r3, #2]
 8015980:	8afb      	ldrh	r3, [r7, #22]
 8015982:	429a      	cmp	r2, r3
 8015984:	d8a4      	bhi.n	80158d0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8015986:	bf00      	nop
 8015988:	3728      	adds	r7, #40	; 0x28
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}

0801598e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 801598e:	b480      	push	{r7}
 8015990:	b083      	sub	sp, #12
 8015992:	af00      	add	r7, sp, #0
 8015994:	6078      	str	r0, [r7, #4]
 8015996:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	781a      	ldrb	r2, [r3, #0]
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	785a      	ldrb	r2, [r3, #1]
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80159a8:	683b      	ldr	r3, [r7, #0]
 80159aa:	789a      	ldrb	r2, [r3, #2]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	78da      	ldrb	r2, [r3, #3]
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	791a      	ldrb	r2, [r3, #4]
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	795a      	ldrb	r2, [r3, #5]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	799a      	ldrb	r2, [r3, #6]
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	79da      	ldrb	r2, [r3, #7]
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	7a1a      	ldrb	r2, [r3, #8]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	721a      	strb	r2, [r3, #8]
}
 80159e0:	bf00      	nop
 80159e2:	370c      	adds	r7, #12
 80159e4:	46bd      	mov	sp, r7
 80159e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ea:	4770      	bx	lr

080159ec <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80159ec:	b480      	push	{r7}
 80159ee:	b083      	sub	sp, #12
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
 80159f4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80159f6:	683b      	ldr	r3, [r7, #0]
 80159f8:	781a      	ldrb	r2, [r3, #0]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	785a      	ldrb	r2, [r3, #1]
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	789a      	ldrb	r2, [r3, #2]
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	78da      	ldrb	r2, [r3, #3]
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8015a16:	683b      	ldr	r3, [r7, #0]
 8015a18:	3304      	adds	r3, #4
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	b29a      	uxth	r2, r3
 8015a1e:	683b      	ldr	r3, [r7, #0]
 8015a20:	3305      	adds	r3, #5
 8015a22:	781b      	ldrb	r3, [r3, #0]
 8015a24:	b29b      	uxth	r3, r3
 8015a26:	021b      	lsls	r3, r3, #8
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	4313      	orrs	r3, r2
 8015a2c:	b29a      	uxth	r2, r3
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	799a      	ldrb	r2, [r3, #6]
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	719a      	strb	r2, [r3, #6]
}
 8015a3a:	bf00      	nop
 8015a3c:	370c      	adds	r7, #12
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a44:	4770      	bx	lr

08015a46 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8015a46:	b480      	push	{r7}
 8015a48:	b087      	sub	sp, #28
 8015a4a:	af00      	add	r7, sp, #0
 8015a4c:	60f8      	str	r0, [r7, #12]
 8015a4e:	60b9      	str	r1, [r7, #8]
 8015a50:	4613      	mov	r3, r2
 8015a52:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	3301      	adds	r3, #1
 8015a58:	781b      	ldrb	r3, [r3, #0]
 8015a5a:	2b03      	cmp	r3, #3
 8015a5c:	d120      	bne.n	8015aa0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	781b      	ldrb	r3, [r3, #0]
 8015a62:	1e9a      	subs	r2, r3, #2
 8015a64:	88fb      	ldrh	r3, [r7, #6]
 8015a66:	4293      	cmp	r3, r2
 8015a68:	bf28      	it	cs
 8015a6a:	4613      	movcs	r3, r2
 8015a6c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	3302      	adds	r3, #2
 8015a72:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8015a74:	2300      	movs	r3, #0
 8015a76:	82fb      	strh	r3, [r7, #22]
 8015a78:	e00b      	b.n	8015a92 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8015a7a:	8afb      	ldrh	r3, [r7, #22]
 8015a7c:	68fa      	ldr	r2, [r7, #12]
 8015a7e:	4413      	add	r3, r2
 8015a80:	781a      	ldrb	r2, [r3, #0]
 8015a82:	68bb      	ldr	r3, [r7, #8]
 8015a84:	701a      	strb	r2, [r3, #0]
      pdest++;
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	3301      	adds	r3, #1
 8015a8a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8015a8c:	8afb      	ldrh	r3, [r7, #22]
 8015a8e:	3302      	adds	r3, #2
 8015a90:	82fb      	strh	r3, [r7, #22]
 8015a92:	8afa      	ldrh	r2, [r7, #22]
 8015a94:	8abb      	ldrh	r3, [r7, #20]
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d3ef      	bcc.n	8015a7a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8015a9a:	68bb      	ldr	r3, [r7, #8]
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	701a      	strb	r2, [r3, #0]
  }
}
 8015aa0:	bf00      	nop
 8015aa2:	371c      	adds	r7, #28
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aaa:	4770      	bx	lr

08015aac <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8015aac:	b480      	push	{r7}
 8015aae:	b085      	sub	sp, #20
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
 8015ab4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	881a      	ldrh	r2, [r3, #0]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	781b      	ldrb	r3, [r3, #0]
 8015abe:	b29b      	uxth	r3, r3
 8015ac0:	4413      	add	r3, r2
 8015ac2:	b29a      	uxth	r2, r3
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	781b      	ldrb	r3, [r3, #0]
 8015acc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	4413      	add	r3, r2
 8015ad2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015ad4:	68fb      	ldr	r3, [r7, #12]
}
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	3714      	adds	r7, #20
 8015ada:	46bd      	mov	sp, r7
 8015adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae0:	4770      	bx	lr

08015ae2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8015ae2:	b580      	push	{r7, lr}
 8015ae4:	b086      	sub	sp, #24
 8015ae6:	af00      	add	r7, sp, #0
 8015ae8:	60f8      	str	r0, [r7, #12]
 8015aea:	60b9      	str	r1, [r7, #8]
 8015aec:	4613      	mov	r3, r2
 8015aee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8015af0:	2301      	movs	r3, #1
 8015af2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	789b      	ldrb	r3, [r3, #2]
 8015af8:	2b01      	cmp	r3, #1
 8015afa:	d002      	beq.n	8015b02 <USBH_CtlReq+0x20>
 8015afc:	2b02      	cmp	r3, #2
 8015afe:	d01d      	beq.n	8015b3c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8015b00:	e043      	b.n	8015b8a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	68ba      	ldr	r2, [r7, #8]
 8015b06:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	88fa      	ldrh	r2, [r7, #6]
 8015b0c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	2201      	movs	r2, #1
 8015b12:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	2202      	movs	r2, #2
 8015b18:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	2203      	movs	r2, #3
 8015b22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015b32:	2200      	movs	r2, #0
 8015b34:	4619      	mov	r1, r3
 8015b36:	f000 fd63 	bl	8016600 <osMessagePut>
      break;
 8015b3a:	e026      	b.n	8015b8a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8015b3c:	68f8      	ldr	r0, [r7, #12]
 8015b3e:	f000 f829 	bl	8015b94 <USBH_HandleControl>
 8015b42:	4603      	mov	r3, r0
 8015b44:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8015b46:	7dfb      	ldrb	r3, [r7, #23]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d002      	beq.n	8015b52 <USBH_CtlReq+0x70>
 8015b4c:	7dfb      	ldrb	r3, [r7, #23]
 8015b4e:	2b03      	cmp	r3, #3
 8015b50:	d106      	bne.n	8015b60 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	2201      	movs	r2, #1
 8015b56:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	761a      	strb	r2, [r3, #24]
 8015b5e:	e005      	b.n	8015b6c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8015b60:	7dfb      	ldrb	r3, [r7, #23]
 8015b62:	2b02      	cmp	r3, #2
 8015b64:	d102      	bne.n	8015b6c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	2201      	movs	r2, #1
 8015b6a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	2203      	movs	r2, #3
 8015b70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015b80:	2200      	movs	r2, #0
 8015b82:	4619      	mov	r1, r3
 8015b84:	f000 fd3c 	bl	8016600 <osMessagePut>
      break;
 8015b88:	bf00      	nop
  }
  return status;
 8015b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3718      	adds	r7, #24
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}

08015b94 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b086      	sub	sp, #24
 8015b98:	af02      	add	r7, sp, #8
 8015b9a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8015b9c:	2301      	movs	r3, #1
 8015b9e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	7e1b      	ldrb	r3, [r3, #24]
 8015ba8:	3b01      	subs	r3, #1
 8015baa:	2b0a      	cmp	r3, #10
 8015bac:	f200 8229 	bhi.w	8016002 <USBH_HandleControl+0x46e>
 8015bb0:	a201      	add	r2, pc, #4	; (adr r2, 8015bb8 <USBH_HandleControl+0x24>)
 8015bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bb6:	bf00      	nop
 8015bb8:	08015be5 	.word	0x08015be5
 8015bbc:	08015bff 	.word	0x08015bff
 8015bc0:	08015ca1 	.word	0x08015ca1
 8015bc4:	08015cc7 	.word	0x08015cc7
 8015bc8:	08015d53 	.word	0x08015d53
 8015bcc:	08015d7d 	.word	0x08015d7d
 8015bd0:	08015e3f 	.word	0x08015e3f
 8015bd4:	08015e61 	.word	0x08015e61
 8015bd8:	08015ef3 	.word	0x08015ef3
 8015bdc:	08015f19 	.word	0x08015f19
 8015be0:	08015fab 	.word	0x08015fab
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f103 0110 	add.w	r1, r3, #16
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	795b      	ldrb	r3, [r3, #5]
 8015bee:	461a      	mov	r2, r3
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f000 fa17 	bl	8016024 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2202      	movs	r2, #2
 8015bfa:	761a      	strb	r2, [r3, #24]
      break;
 8015bfc:	e20c      	b.n	8016018 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	795b      	ldrb	r3, [r3, #5]
 8015c02:	4619      	mov	r1, r3
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f003 fb77 	bl	80192f8 <USBH_LL_GetURBState>
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8015c0e:	7bbb      	ldrb	r3, [r7, #14]
 8015c10:	2b01      	cmp	r3, #1
 8015c12:	d12c      	bne.n	8015c6e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	7c1b      	ldrb	r3, [r3, #16]
 8015c18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015c1c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	8adb      	ldrh	r3, [r3, #22]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d00a      	beq.n	8015c3c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8015c26:	7b7b      	ldrb	r3, [r7, #13]
 8015c28:	2b80      	cmp	r3, #128	; 0x80
 8015c2a:	d103      	bne.n	8015c34 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	2203      	movs	r2, #3
 8015c30:	761a      	strb	r2, [r3, #24]
 8015c32:	e00d      	b.n	8015c50 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2205      	movs	r2, #5
 8015c38:	761a      	strb	r2, [r3, #24]
 8015c3a:	e009      	b.n	8015c50 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8015c3c:	7b7b      	ldrb	r3, [r7, #13]
 8015c3e:	2b80      	cmp	r3, #128	; 0x80
 8015c40:	d103      	bne.n	8015c4a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	2209      	movs	r2, #9
 8015c46:	761a      	strb	r2, [r3, #24]
 8015c48:	e002      	b.n	8015c50 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2207      	movs	r2, #7
 8015c4e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2203      	movs	r2, #3
 8015c54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015c64:	2200      	movs	r2, #0
 8015c66:	4619      	mov	r1, r3
 8015c68:	f000 fcca 	bl	8016600 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015c6c:	e1cb      	b.n	8016006 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8015c6e:	7bbb      	ldrb	r3, [r7, #14]
 8015c70:	2b04      	cmp	r3, #4
 8015c72:	d003      	beq.n	8015c7c <USBH_HandleControl+0xe8>
 8015c74:	7bbb      	ldrb	r3, [r7, #14]
 8015c76:	2b02      	cmp	r3, #2
 8015c78:	f040 81c5 	bne.w	8016006 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	220b      	movs	r2, #11
 8015c80:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	2203      	movs	r2, #3
 8015c86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015c96:	2200      	movs	r2, #0
 8015c98:	4619      	mov	r1, r3
 8015c9a:	f000 fcb1 	bl	8016600 <osMessagePut>
      break;
 8015c9e:	e1b2      	b.n	8016006 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015ca6:	b29a      	uxth	r2, r3
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	6899      	ldr	r1, [r3, #8]
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	899a      	ldrh	r2, [r3, #12]
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	791b      	ldrb	r3, [r3, #4]
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f000 f9f2 	bl	80160a2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	2204      	movs	r2, #4
 8015cc2:	761a      	strb	r2, [r3, #24]
      break;
 8015cc4:	e1a8      	b.n	8016018 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	791b      	ldrb	r3, [r3, #4]
 8015cca:	4619      	mov	r1, r3
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f003 fb13 	bl	80192f8 <USBH_LL_GetURBState>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8015cd6:	7bbb      	ldrb	r3, [r7, #14]
 8015cd8:	2b01      	cmp	r3, #1
 8015cda:	d110      	bne.n	8015cfe <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	2209      	movs	r2, #9
 8015ce0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2203      	movs	r2, #3
 8015ce6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	4619      	mov	r1, r3
 8015cfa:	f000 fc81 	bl	8016600 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8015cfe:	7bbb      	ldrb	r3, [r7, #14]
 8015d00:	2b05      	cmp	r3, #5
 8015d02:	d110      	bne.n	8015d26 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8015d04:	2303      	movs	r3, #3
 8015d06:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2203      	movs	r2, #3
 8015d0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	4619      	mov	r1, r3
 8015d20:	f000 fc6e 	bl	8016600 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015d24:	e171      	b.n	801600a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8015d26:	7bbb      	ldrb	r3, [r7, #14]
 8015d28:	2b04      	cmp	r3, #4
 8015d2a:	f040 816e 	bne.w	801600a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	220b      	movs	r2, #11
 8015d32:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	2203      	movs	r2, #3
 8015d38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015d48:	2200      	movs	r2, #0
 8015d4a:	4619      	mov	r1, r3
 8015d4c:	f000 fc58 	bl	8016600 <osMessagePut>
      break;
 8015d50:	e15b      	b.n	801600a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	6899      	ldr	r1, [r3, #8]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	899a      	ldrh	r2, [r3, #12]
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	795b      	ldrb	r3, [r3, #5]
 8015d5e:	2001      	movs	r0, #1
 8015d60:	9000      	str	r0, [sp, #0]
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f000 f978 	bl	8016058 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015d6e:	b29a      	uxth	r2, r3
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2206      	movs	r2, #6
 8015d78:	761a      	strb	r2, [r3, #24]
      break;
 8015d7a:	e14d      	b.n	8016018 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	795b      	ldrb	r3, [r3, #5]
 8015d80:	4619      	mov	r1, r3
 8015d82:	6878      	ldr	r0, [r7, #4]
 8015d84:	f003 fab8 	bl	80192f8 <USBH_LL_GetURBState>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8015d8c:	7bbb      	ldrb	r3, [r7, #14]
 8015d8e:	2b01      	cmp	r3, #1
 8015d90:	d111      	bne.n	8015db6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	2207      	movs	r2, #7
 8015d96:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	2203      	movs	r2, #3
 8015d9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015dac:	2200      	movs	r2, #0
 8015dae:	4619      	mov	r1, r3
 8015db0:	f000 fc26 	bl	8016600 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015db4:	e12b      	b.n	801600e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8015db6:	7bbb      	ldrb	r3, [r7, #14]
 8015db8:	2b05      	cmp	r3, #5
 8015dba:	d113      	bne.n	8015de4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	220c      	movs	r2, #12
 8015dc0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8015dc2:	2303      	movs	r3, #3
 8015dc4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2203      	movs	r2, #3
 8015dca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015dda:	2200      	movs	r2, #0
 8015ddc:	4619      	mov	r1, r3
 8015dde:	f000 fc0f 	bl	8016600 <osMessagePut>
      break;
 8015de2:	e114      	b.n	801600e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015de4:	7bbb      	ldrb	r3, [r7, #14]
 8015de6:	2b02      	cmp	r3, #2
 8015de8:	d111      	bne.n	8015e0e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	2205      	movs	r2, #5
 8015dee:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2203      	movs	r2, #3
 8015df4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015e04:	2200      	movs	r2, #0
 8015e06:	4619      	mov	r1, r3
 8015e08:	f000 fbfa 	bl	8016600 <osMessagePut>
      break;
 8015e0c:	e0ff      	b.n	801600e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8015e0e:	7bbb      	ldrb	r3, [r7, #14]
 8015e10:	2b04      	cmp	r3, #4
 8015e12:	f040 80fc 	bne.w	801600e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	220b      	movs	r2, #11
 8015e1a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8015e1c:	2302      	movs	r3, #2
 8015e1e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2203      	movs	r2, #3
 8015e24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015e34:	2200      	movs	r2, #0
 8015e36:	4619      	mov	r1, r3
 8015e38:	f000 fbe2 	bl	8016600 <osMessagePut>
      break;
 8015e3c:	e0e7      	b.n	801600e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	791b      	ldrb	r3, [r3, #4]
 8015e42:	2200      	movs	r2, #0
 8015e44:	2100      	movs	r1, #0
 8015e46:	6878      	ldr	r0, [r7, #4]
 8015e48:	f000 f92b 	bl	80160a2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015e52:	b29a      	uxth	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	2208      	movs	r2, #8
 8015e5c:	761a      	strb	r2, [r3, #24]

      break;
 8015e5e:	e0db      	b.n	8016018 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	791b      	ldrb	r3, [r3, #4]
 8015e64:	4619      	mov	r1, r3
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f003 fa46 	bl	80192f8 <USBH_LL_GetURBState>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8015e70:	7bbb      	ldrb	r3, [r7, #14]
 8015e72:	2b01      	cmp	r3, #1
 8015e74:	d113      	bne.n	8015e9e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	220d      	movs	r2, #13
 8015e7a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	2203      	movs	r2, #3
 8015e84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015e94:	2200      	movs	r2, #0
 8015e96:	4619      	mov	r1, r3
 8015e98:	f000 fbb2 	bl	8016600 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015e9c:	e0b9      	b.n	8016012 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8015e9e:	7bbb      	ldrb	r3, [r7, #14]
 8015ea0:	2b04      	cmp	r3, #4
 8015ea2:	d111      	bne.n	8015ec8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	220b      	movs	r2, #11
 8015ea8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	2203      	movs	r2, #3
 8015eae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	f000 fb9d 	bl	8016600 <osMessagePut>
      break;
 8015ec6:	e0a4      	b.n	8016012 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8015ec8:	7bbb      	ldrb	r3, [r7, #14]
 8015eca:	2b05      	cmp	r3, #5
 8015ecc:	f040 80a1 	bne.w	8016012 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8015ed0:	2303      	movs	r3, #3
 8015ed2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2203      	movs	r2, #3
 8015ed8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015ee8:	2200      	movs	r2, #0
 8015eea:	4619      	mov	r1, r3
 8015eec:	f000 fb88 	bl	8016600 <osMessagePut>
      break;
 8015ef0:	e08f      	b.n	8016012 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	795b      	ldrb	r3, [r3, #5]
 8015ef6:	2201      	movs	r2, #1
 8015ef8:	9200      	str	r2, [sp, #0]
 8015efa:	2200      	movs	r2, #0
 8015efc:	2100      	movs	r1, #0
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f000 f8aa 	bl	8016058 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015f0a:	b29a      	uxth	r2, r3
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	220a      	movs	r2, #10
 8015f14:	761a      	strb	r2, [r3, #24]
      break;
 8015f16:	e07f      	b.n	8016018 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	795b      	ldrb	r3, [r3, #5]
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f003 f9ea 	bl	80192f8 <USBH_LL_GetURBState>
 8015f24:	4603      	mov	r3, r0
 8015f26:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8015f28:	7bbb      	ldrb	r3, [r7, #14]
 8015f2a:	2b01      	cmp	r3, #1
 8015f2c:	d113      	bne.n	8015f56 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	220d      	movs	r2, #13
 8015f36:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2203      	movs	r2, #3
 8015f3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	4619      	mov	r1, r3
 8015f50:	f000 fb56 	bl	8016600 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015f54:	e05f      	b.n	8016016 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015f56:	7bbb      	ldrb	r3, [r7, #14]
 8015f58:	2b02      	cmp	r3, #2
 8015f5a:	d111      	bne.n	8015f80 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2209      	movs	r2, #9
 8015f60:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2203      	movs	r2, #3
 8015f66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015f76:	2200      	movs	r2, #0
 8015f78:	4619      	mov	r1, r3
 8015f7a:	f000 fb41 	bl	8016600 <osMessagePut>
      break;
 8015f7e:	e04a      	b.n	8016016 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8015f80:	7bbb      	ldrb	r3, [r7, #14]
 8015f82:	2b04      	cmp	r3, #4
 8015f84:	d147      	bne.n	8016016 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	220b      	movs	r2, #11
 8015f8a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	2203      	movs	r2, #3
 8015f90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	4619      	mov	r1, r3
 8015fa4:	f000 fb2c 	bl	8016600 <osMessagePut>
      break;
 8015fa8:	e035      	b.n	8016016 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	7e5b      	ldrb	r3, [r3, #25]
 8015fae:	3301      	adds	r3, #1
 8015fb0:	b2da      	uxtb	r2, r3
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	765a      	strb	r2, [r3, #25]
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	7e5b      	ldrb	r3, [r3, #25]
 8015fba:	2b02      	cmp	r3, #2
 8015fbc:	d806      	bhi.n	8015fcc <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	2201      	movs	r2, #1
 8015fc2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2201      	movs	r2, #1
 8015fc8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8015fca:	e025      	b.n	8016018 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015fd2:	2106      	movs	r1, #6
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	795b      	ldrb	r3, [r3, #5]
 8015fe2:	4619      	mov	r1, r3
 8015fe4:	6878      	ldr	r0, [r7, #4]
 8015fe6:	f000 f90d 	bl	8016204 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	791b      	ldrb	r3, [r3, #4]
 8015fee:	4619      	mov	r1, r3
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f000 f907 	bl	8016204 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8015ffc:	2302      	movs	r3, #2
 8015ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8016000:	e00a      	b.n	8016018 <USBH_HandleControl+0x484>

    default:
      break;
 8016002:	bf00      	nop
 8016004:	e008      	b.n	8016018 <USBH_HandleControl+0x484>
      break;
 8016006:	bf00      	nop
 8016008:	e006      	b.n	8016018 <USBH_HandleControl+0x484>
      break;
 801600a:	bf00      	nop
 801600c:	e004      	b.n	8016018 <USBH_HandleControl+0x484>
      break;
 801600e:	bf00      	nop
 8016010:	e002      	b.n	8016018 <USBH_HandleControl+0x484>
      break;
 8016012:	bf00      	nop
 8016014:	e000      	b.n	8016018 <USBH_HandleControl+0x484>
      break;
 8016016:	bf00      	nop
  }

  return status;
 8016018:	7bfb      	ldrb	r3, [r7, #15]
}
 801601a:	4618      	mov	r0, r3
 801601c:	3710      	adds	r7, #16
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}
 8016022:	bf00      	nop

08016024 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b088      	sub	sp, #32
 8016028:	af04      	add	r7, sp, #16
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	60b9      	str	r1, [r7, #8]
 801602e:	4613      	mov	r3, r2
 8016030:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016032:	79f9      	ldrb	r1, [r7, #7]
 8016034:	2300      	movs	r3, #0
 8016036:	9303      	str	r3, [sp, #12]
 8016038:	2308      	movs	r3, #8
 801603a:	9302      	str	r3, [sp, #8]
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	9301      	str	r3, [sp, #4]
 8016040:	2300      	movs	r3, #0
 8016042:	9300      	str	r3, [sp, #0]
 8016044:	2300      	movs	r3, #0
 8016046:	2200      	movs	r2, #0
 8016048:	68f8      	ldr	r0, [r7, #12]
 801604a:	f003 f924 	bl	8019296 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801604e:	2300      	movs	r3, #0
}
 8016050:	4618      	mov	r0, r3
 8016052:	3710      	adds	r7, #16
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b088      	sub	sp, #32
 801605c:	af04      	add	r7, sp, #16
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	4611      	mov	r1, r2
 8016064:	461a      	mov	r2, r3
 8016066:	460b      	mov	r3, r1
 8016068:	80fb      	strh	r3, [r7, #6]
 801606a:	4613      	mov	r3, r2
 801606c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016074:	2b00      	cmp	r3, #0
 8016076:	d001      	beq.n	801607c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8016078:	2300      	movs	r3, #0
 801607a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801607c:	7979      	ldrb	r1, [r7, #5]
 801607e:	7e3b      	ldrb	r3, [r7, #24]
 8016080:	9303      	str	r3, [sp, #12]
 8016082:	88fb      	ldrh	r3, [r7, #6]
 8016084:	9302      	str	r3, [sp, #8]
 8016086:	68bb      	ldr	r3, [r7, #8]
 8016088:	9301      	str	r3, [sp, #4]
 801608a:	2301      	movs	r3, #1
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	2300      	movs	r3, #0
 8016090:	2200      	movs	r2, #0
 8016092:	68f8      	ldr	r0, [r7, #12]
 8016094:	f003 f8ff 	bl	8019296 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8016098:	2300      	movs	r3, #0
}
 801609a:	4618      	mov	r0, r3
 801609c:	3710      	adds	r7, #16
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd80      	pop	{r7, pc}

080160a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80160a2:	b580      	push	{r7, lr}
 80160a4:	b088      	sub	sp, #32
 80160a6:	af04      	add	r7, sp, #16
 80160a8:	60f8      	str	r0, [r7, #12]
 80160aa:	60b9      	str	r1, [r7, #8]
 80160ac:	4611      	mov	r1, r2
 80160ae:	461a      	mov	r2, r3
 80160b0:	460b      	mov	r3, r1
 80160b2:	80fb      	strh	r3, [r7, #6]
 80160b4:	4613      	mov	r3, r2
 80160b6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80160b8:	7979      	ldrb	r1, [r7, #5]
 80160ba:	2300      	movs	r3, #0
 80160bc:	9303      	str	r3, [sp, #12]
 80160be:	88fb      	ldrh	r3, [r7, #6]
 80160c0:	9302      	str	r3, [sp, #8]
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	9301      	str	r3, [sp, #4]
 80160c6:	2301      	movs	r3, #1
 80160c8:	9300      	str	r3, [sp, #0]
 80160ca:	2300      	movs	r3, #0
 80160cc:	2201      	movs	r2, #1
 80160ce:	68f8      	ldr	r0, [r7, #12]
 80160d0:	f003 f8e1 	bl	8019296 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80160d4:	2300      	movs	r3, #0

}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3710      	adds	r7, #16
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}

080160de <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80160de:	b580      	push	{r7, lr}
 80160e0:	b088      	sub	sp, #32
 80160e2:	af04      	add	r7, sp, #16
 80160e4:	60f8      	str	r0, [r7, #12]
 80160e6:	60b9      	str	r1, [r7, #8]
 80160e8:	4611      	mov	r1, r2
 80160ea:	461a      	mov	r2, r3
 80160ec:	460b      	mov	r3, r1
 80160ee:	80fb      	strh	r3, [r7, #6]
 80160f0:	4613      	mov	r3, r2
 80160f2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d001      	beq.n	8016102 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80160fe:	2300      	movs	r3, #0
 8016100:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016102:	7979      	ldrb	r1, [r7, #5]
 8016104:	7e3b      	ldrb	r3, [r7, #24]
 8016106:	9303      	str	r3, [sp, #12]
 8016108:	88fb      	ldrh	r3, [r7, #6]
 801610a:	9302      	str	r3, [sp, #8]
 801610c:	68bb      	ldr	r3, [r7, #8]
 801610e:	9301      	str	r3, [sp, #4]
 8016110:	2301      	movs	r3, #1
 8016112:	9300      	str	r3, [sp, #0]
 8016114:	2302      	movs	r3, #2
 8016116:	2200      	movs	r2, #0
 8016118:	68f8      	ldr	r0, [r7, #12]
 801611a:	f003 f8bc 	bl	8019296 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801611e:	2300      	movs	r3, #0
}
 8016120:	4618      	mov	r0, r3
 8016122:	3710      	adds	r7, #16
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}

08016128 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b088      	sub	sp, #32
 801612c:	af04      	add	r7, sp, #16
 801612e:	60f8      	str	r0, [r7, #12]
 8016130:	60b9      	str	r1, [r7, #8]
 8016132:	4611      	mov	r1, r2
 8016134:	461a      	mov	r2, r3
 8016136:	460b      	mov	r3, r1
 8016138:	80fb      	strh	r3, [r7, #6]
 801613a:	4613      	mov	r3, r2
 801613c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801613e:	7979      	ldrb	r1, [r7, #5]
 8016140:	2300      	movs	r3, #0
 8016142:	9303      	str	r3, [sp, #12]
 8016144:	88fb      	ldrh	r3, [r7, #6]
 8016146:	9302      	str	r3, [sp, #8]
 8016148:	68bb      	ldr	r3, [r7, #8]
 801614a:	9301      	str	r3, [sp, #4]
 801614c:	2301      	movs	r3, #1
 801614e:	9300      	str	r3, [sp, #0]
 8016150:	2302      	movs	r3, #2
 8016152:	2201      	movs	r2, #1
 8016154:	68f8      	ldr	r0, [r7, #12]
 8016156:	f003 f89e 	bl	8019296 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801615a:	2300      	movs	r3, #0
}
 801615c:	4618      	mov	r0, r3
 801615e:	3710      	adds	r7, #16
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}

08016164 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b086      	sub	sp, #24
 8016168:	af04      	add	r7, sp, #16
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	4608      	mov	r0, r1
 801616e:	4611      	mov	r1, r2
 8016170:	461a      	mov	r2, r3
 8016172:	4603      	mov	r3, r0
 8016174:	70fb      	strb	r3, [r7, #3]
 8016176:	460b      	mov	r3, r1
 8016178:	70bb      	strb	r3, [r7, #2]
 801617a:	4613      	mov	r3, r2
 801617c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801617e:	7878      	ldrb	r0, [r7, #1]
 8016180:	78ba      	ldrb	r2, [r7, #2]
 8016182:	78f9      	ldrb	r1, [r7, #3]
 8016184:	8b3b      	ldrh	r3, [r7, #24]
 8016186:	9302      	str	r3, [sp, #8]
 8016188:	7d3b      	ldrb	r3, [r7, #20]
 801618a:	9301      	str	r3, [sp, #4]
 801618c:	7c3b      	ldrb	r3, [r7, #16]
 801618e:	9300      	str	r3, [sp, #0]
 8016190:	4603      	mov	r3, r0
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f003 f831 	bl	80191fa <USBH_LL_OpenPipe>

  return USBH_OK;
 8016198:	2300      	movs	r3, #0
}
 801619a:	4618      	mov	r0, r3
 801619c:	3708      	adds	r7, #8
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}

080161a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80161a2:	b580      	push	{r7, lr}
 80161a4:	b082      	sub	sp, #8
 80161a6:	af00      	add	r7, sp, #0
 80161a8:	6078      	str	r0, [r7, #4]
 80161aa:	460b      	mov	r3, r1
 80161ac:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80161ae:	78fb      	ldrb	r3, [r7, #3]
 80161b0:	4619      	mov	r1, r3
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f003 f850 	bl	8019258 <USBH_LL_ClosePipe>

  return USBH_OK;
 80161b8:	2300      	movs	r3, #0
}
 80161ba:	4618      	mov	r0, r3
 80161bc:	3708      	adds	r7, #8
 80161be:	46bd      	mov	sp, r7
 80161c0:	bd80      	pop	{r7, pc}

080161c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80161c2:	b580      	push	{r7, lr}
 80161c4:	b084      	sub	sp, #16
 80161c6:	af00      	add	r7, sp, #0
 80161c8:	6078      	str	r0, [r7, #4]
 80161ca:	460b      	mov	r3, r1
 80161cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f000 f836 	bl	8016240 <USBH_GetFreePipe>
 80161d4:	4603      	mov	r3, r0
 80161d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80161d8:	89fb      	ldrh	r3, [r7, #14]
 80161da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161de:	4293      	cmp	r3, r2
 80161e0:	d00a      	beq.n	80161f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80161e2:	78fa      	ldrb	r2, [r7, #3]
 80161e4:	89fb      	ldrh	r3, [r7, #14]
 80161e6:	f003 030f 	and.w	r3, r3, #15
 80161ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80161ee:	6879      	ldr	r1, [r7, #4]
 80161f0:	33e0      	adds	r3, #224	; 0xe0
 80161f2:	009b      	lsls	r3, r3, #2
 80161f4:	440b      	add	r3, r1
 80161f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80161f8:	89fb      	ldrh	r3, [r7, #14]
 80161fa:	b2db      	uxtb	r3, r3
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	3710      	adds	r7, #16
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}

08016204 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8016204:	b480      	push	{r7}
 8016206:	b083      	sub	sp, #12
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	460b      	mov	r3, r1
 801620e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8016210:	78fb      	ldrb	r3, [r7, #3]
 8016212:	2b0a      	cmp	r3, #10
 8016214:	d80d      	bhi.n	8016232 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8016216:	78fb      	ldrb	r3, [r7, #3]
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	33e0      	adds	r3, #224	; 0xe0
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	4413      	add	r3, r2
 8016220:	685a      	ldr	r2, [r3, #4]
 8016222:	78fb      	ldrb	r3, [r7, #3]
 8016224:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8016228:	6879      	ldr	r1, [r7, #4]
 801622a:	33e0      	adds	r3, #224	; 0xe0
 801622c:	009b      	lsls	r3, r3, #2
 801622e:	440b      	add	r3, r1
 8016230:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8016232:	2300      	movs	r3, #0
}
 8016234:	4618      	mov	r0, r3
 8016236:	370c      	adds	r7, #12
 8016238:	46bd      	mov	sp, r7
 801623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801623e:	4770      	bx	lr

08016240 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8016240:	b480      	push	{r7}
 8016242:	b085      	sub	sp, #20
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8016248:	2300      	movs	r3, #0
 801624a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801624c:	2300      	movs	r3, #0
 801624e:	73fb      	strb	r3, [r7, #15]
 8016250:	e00f      	b.n	8016272 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8016252:	7bfb      	ldrb	r3, [r7, #15]
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	33e0      	adds	r3, #224	; 0xe0
 8016258:	009b      	lsls	r3, r3, #2
 801625a:	4413      	add	r3, r2
 801625c:	685b      	ldr	r3, [r3, #4]
 801625e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016262:	2b00      	cmp	r3, #0
 8016264:	d102      	bne.n	801626c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8016266:	7bfb      	ldrb	r3, [r7, #15]
 8016268:	b29b      	uxth	r3, r3
 801626a:	e007      	b.n	801627c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 801626c:	7bfb      	ldrb	r3, [r7, #15]
 801626e:	3301      	adds	r3, #1
 8016270:	73fb      	strb	r3, [r7, #15]
 8016272:	7bfb      	ldrb	r3, [r7, #15]
 8016274:	2b0a      	cmp	r3, #10
 8016276:	d9ec      	bls.n	8016252 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8016278:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801627c:	4618      	mov	r0, r3
 801627e:	3714      	adds	r7, #20
 8016280:	46bd      	mov	sp, r7
 8016282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016286:	4770      	bx	lr

08016288 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016288:	b480      	push	{r7}
 801628a:	b087      	sub	sp, #28
 801628c:	af00      	add	r7, sp, #0
 801628e:	60f8      	str	r0, [r7, #12]
 8016290:	60b9      	str	r1, [r7, #8]
 8016292:	4613      	mov	r3, r2
 8016294:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016296:	2301      	movs	r3, #1
 8016298:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801629a:	2300      	movs	r3, #0
 801629c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801629e:	4b1f      	ldr	r3, [pc, #124]	; (801631c <FATFS_LinkDriverEx+0x94>)
 80162a0:	7a5b      	ldrb	r3, [r3, #9]
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d131      	bne.n	801630c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80162a8:	4b1c      	ldr	r3, [pc, #112]	; (801631c <FATFS_LinkDriverEx+0x94>)
 80162aa:	7a5b      	ldrb	r3, [r3, #9]
 80162ac:	b2db      	uxtb	r3, r3
 80162ae:	461a      	mov	r2, r3
 80162b0:	4b1a      	ldr	r3, [pc, #104]	; (801631c <FATFS_LinkDriverEx+0x94>)
 80162b2:	2100      	movs	r1, #0
 80162b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80162b6:	4b19      	ldr	r3, [pc, #100]	; (801631c <FATFS_LinkDriverEx+0x94>)
 80162b8:	7a5b      	ldrb	r3, [r3, #9]
 80162ba:	b2db      	uxtb	r3, r3
 80162bc:	4a17      	ldr	r2, [pc, #92]	; (801631c <FATFS_LinkDriverEx+0x94>)
 80162be:	009b      	lsls	r3, r3, #2
 80162c0:	4413      	add	r3, r2
 80162c2:	68fa      	ldr	r2, [r7, #12]
 80162c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80162c6:	4b15      	ldr	r3, [pc, #84]	; (801631c <FATFS_LinkDriverEx+0x94>)
 80162c8:	7a5b      	ldrb	r3, [r3, #9]
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	461a      	mov	r2, r3
 80162ce:	4b13      	ldr	r3, [pc, #76]	; (801631c <FATFS_LinkDriverEx+0x94>)
 80162d0:	4413      	add	r3, r2
 80162d2:	79fa      	ldrb	r2, [r7, #7]
 80162d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80162d6:	4b11      	ldr	r3, [pc, #68]	; (801631c <FATFS_LinkDriverEx+0x94>)
 80162d8:	7a5b      	ldrb	r3, [r3, #9]
 80162da:	b2db      	uxtb	r3, r3
 80162dc:	1c5a      	adds	r2, r3, #1
 80162de:	b2d1      	uxtb	r1, r2
 80162e0:	4a0e      	ldr	r2, [pc, #56]	; (801631c <FATFS_LinkDriverEx+0x94>)
 80162e2:	7251      	strb	r1, [r2, #9]
 80162e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80162e6:	7dbb      	ldrb	r3, [r7, #22]
 80162e8:	3330      	adds	r3, #48	; 0x30
 80162ea:	b2da      	uxtb	r2, r3
 80162ec:	68bb      	ldr	r3, [r7, #8]
 80162ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	3301      	adds	r3, #1
 80162f4:	223a      	movs	r2, #58	; 0x3a
 80162f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80162f8:	68bb      	ldr	r3, [r7, #8]
 80162fa:	3302      	adds	r3, #2
 80162fc:	222f      	movs	r2, #47	; 0x2f
 80162fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	3303      	adds	r3, #3
 8016304:	2200      	movs	r2, #0
 8016306:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016308:	2300      	movs	r3, #0
 801630a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801630c:	7dfb      	ldrb	r3, [r7, #23]
}
 801630e:	4618      	mov	r0, r3
 8016310:	371c      	adds	r7, #28
 8016312:	46bd      	mov	sp, r7
 8016314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016318:	4770      	bx	lr
 801631a:	bf00      	nop
 801631c:	200003d8 	.word	0x200003d8

08016320 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
 8016328:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801632a:	2200      	movs	r2, #0
 801632c:	6839      	ldr	r1, [r7, #0]
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f7ff ffaa 	bl	8016288 <FATFS_LinkDriverEx>
 8016334:	4603      	mov	r3, r0
}
 8016336:	4618      	mov	r0, r3
 8016338:	3708      	adds	r7, #8
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}

0801633e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801633e:	b480      	push	{r7}
 8016340:	b085      	sub	sp, #20
 8016342:	af00      	add	r7, sp, #0
 8016344:	4603      	mov	r3, r0
 8016346:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016348:	2300      	movs	r3, #0
 801634a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801634c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016350:	2b84      	cmp	r3, #132	; 0x84
 8016352:	d005      	beq.n	8016360 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8016354:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	4413      	add	r3, r2
 801635c:	3303      	adds	r3, #3
 801635e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8016360:	68fb      	ldr	r3, [r7, #12]
}
 8016362:	4618      	mov	r0, r3
 8016364:	3714      	adds	r7, #20
 8016366:	46bd      	mov	sp, r7
 8016368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636c:	4770      	bx	lr

0801636e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801636e:	b480      	push	{r7}
 8016370:	b083      	sub	sp, #12
 8016372:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016374:	f3ef 8305 	mrs	r3, IPSR
 8016378:	607b      	str	r3, [r7, #4]
  return(result);
 801637a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801637c:	2b00      	cmp	r3, #0
 801637e:	bf14      	ite	ne
 8016380:	2301      	movne	r3, #1
 8016382:	2300      	moveq	r3, #0
 8016384:	b2db      	uxtb	r3, r3
}
 8016386:	4618      	mov	r0, r3
 8016388:	370c      	adds	r7, #12
 801638a:	46bd      	mov	sp, r7
 801638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016390:	4770      	bx	lr

08016392 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8016392:	b580      	push	{r7, lr}
 8016394:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8016396:	f001 f9e7 	bl	8017768 <vTaskStartScheduler>
  
  return osOK;
 801639a:	2300      	movs	r3, #0
}
 801639c:	4618      	mov	r0, r3
 801639e:	bd80      	pop	{r7, pc}

080163a0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80163a4:	f001 fe3a 	bl	801801c <xTaskGetSchedulerState>
 80163a8:	4603      	mov	r3, r0
 80163aa:	2b01      	cmp	r3, #1
 80163ac:	d101      	bne.n	80163b2 <osKernelRunning+0x12>
    return 0;
 80163ae:	2300      	movs	r3, #0
 80163b0:	e000      	b.n	80163b4 <osKernelRunning+0x14>
  else
    return 1;
 80163b2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80163bc:	f7ff ffd7 	bl	801636e <inHandlerMode>
 80163c0:	4603      	mov	r3, r0
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d003      	beq.n	80163ce <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80163c6:	f001 faef 	bl	80179a8 <xTaskGetTickCountFromISR>
 80163ca:	4603      	mov	r3, r0
 80163cc:	e002      	b.n	80163d4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80163ce:	f001 fadb 	bl	8017988 <xTaskGetTickCount>
 80163d2:	4603      	mov	r3, r0
  }
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	bd80      	pop	{r7, pc}

080163d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80163d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163da:	b089      	sub	sp, #36	; 0x24
 80163dc:	af04      	add	r7, sp, #16
 80163de:	6078      	str	r0, [r7, #4]
 80163e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	695b      	ldr	r3, [r3, #20]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d020      	beq.n	801642c <osThreadCreate+0x54>
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	699b      	ldr	r3, [r3, #24]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d01c      	beq.n	801642c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	685c      	ldr	r4, [r3, #4]
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681d      	ldr	r5, [r3, #0]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	691e      	ldr	r6, [r3, #16]
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016404:	4618      	mov	r0, r3
 8016406:	f7ff ff9a 	bl	801633e <makeFreeRtosPriority>
 801640a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	695b      	ldr	r3, [r3, #20]
 8016410:	687a      	ldr	r2, [r7, #4]
 8016412:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016414:	9202      	str	r2, [sp, #8]
 8016416:	9301      	str	r3, [sp, #4]
 8016418:	9100      	str	r1, [sp, #0]
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	4632      	mov	r2, r6
 801641e:	4629      	mov	r1, r5
 8016420:	4620      	mov	r0, r4
 8016422:	f000 ffc5 	bl	80173b0 <xTaskCreateStatic>
 8016426:	4603      	mov	r3, r0
 8016428:	60fb      	str	r3, [r7, #12]
 801642a:	e01c      	b.n	8016466 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	685c      	ldr	r4, [r3, #4]
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016438:	b29e      	uxth	r6, r3
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016440:	4618      	mov	r0, r3
 8016442:	f7ff ff7c 	bl	801633e <makeFreeRtosPriority>
 8016446:	4602      	mov	r2, r0
 8016448:	f107 030c 	add.w	r3, r7, #12
 801644c:	9301      	str	r3, [sp, #4]
 801644e:	9200      	str	r2, [sp, #0]
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	4632      	mov	r2, r6
 8016454:	4629      	mov	r1, r5
 8016456:	4620      	mov	r0, r4
 8016458:	f001 f80d 	bl	8017476 <xTaskCreate>
 801645c:	4603      	mov	r3, r0
 801645e:	2b01      	cmp	r3, #1
 8016460:	d001      	beq.n	8016466 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8016462:	2300      	movs	r3, #0
 8016464:	e000      	b.n	8016468 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8016466:	68fb      	ldr	r3, [r7, #12]
}
 8016468:	4618      	mov	r0, r3
 801646a:	3714      	adds	r7, #20
 801646c:	46bd      	mov	sp, r7
 801646e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016470 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b084      	sub	sp, #16
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d001      	beq.n	8016486 <osDelay+0x16>
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	e000      	b.n	8016488 <osDelay+0x18>
 8016486:	2301      	movs	r3, #1
 8016488:	4618      	mov	r0, r3
 801648a:	f001 f937 	bl	80176fc <vTaskDelay>
  
  return osOK;
 801648e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016490:	4618      	mov	r0, r3
 8016492:	3710      	adds	r7, #16
 8016494:	46bd      	mov	sp, r7
 8016496:	bd80      	pop	{r7, pc}

08016498 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b086      	sub	sp, #24
 801649c:	af02      	add	r7, sp, #8
 801649e:	6078      	str	r0, [r7, #4]
 80164a0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80164a2:	2300      	movs	r3, #0
 80164a4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80164a6:	2300      	movs	r3, #0
 80164a8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80164aa:	f7ff ff60 	bl	801636e <inHandlerMode>
 80164ae:	4603      	mov	r3, r0
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d01c      	beq.n	80164ee <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80164b4:	6839      	ldr	r1, [r7, #0]
 80164b6:	f107 0208 	add.w	r2, r7, #8
 80164ba:	f107 030c 	add.w	r3, r7, #12
 80164be:	9300      	str	r3, [sp, #0]
 80164c0:	4613      	mov	r3, r2
 80164c2:	2201      	movs	r2, #1
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f001 ff67 	bl	8018398 <xTaskGenericNotifyFromISR>
 80164ca:	4603      	mov	r3, r0
 80164cc:	2b01      	cmp	r3, #1
 80164ce:	d002      	beq.n	80164d6 <osSignalSet+0x3e>
      return 0x80000000;
 80164d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80164d4:	e019      	b.n	801650a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d015      	beq.n	8016508 <osSignalSet+0x70>
 80164dc:	4b0d      	ldr	r3, [pc, #52]	; (8016514 <osSignalSet+0x7c>)
 80164de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164e2:	601a      	str	r2, [r3, #0]
 80164e4:	f3bf 8f4f 	dsb	sy
 80164e8:	f3bf 8f6f 	isb	sy
 80164ec:	e00c      	b.n	8016508 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80164ee:	6839      	ldr	r1, [r7, #0]
 80164f0:	f107 0308 	add.w	r3, r7, #8
 80164f4:	2201      	movs	r2, #1
 80164f6:	6878      	ldr	r0, [r7, #4]
 80164f8:	f001 fe92 	bl	8018220 <xTaskGenericNotify>
 80164fc:	4603      	mov	r3, r0
 80164fe:	2b01      	cmp	r3, #1
 8016500:	d002      	beq.n	8016508 <osSignalSet+0x70>
    return 0x80000000;
 8016502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016506:	e000      	b.n	801650a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8016508:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 801650a:	4618      	mov	r0, r3
 801650c:	3710      	adds	r7, #16
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}
 8016512:	bf00      	nop
 8016514:	e000ed04 	.word	0xe000ed04

08016518 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8016518:	b590      	push	{r4, r7, lr}
 801651a:	b089      	sub	sp, #36	; 0x24
 801651c:	af00      	add	r7, sp, #0
 801651e:	60f8      	str	r0, [r7, #12]
 8016520:	60b9      	str	r1, [r7, #8]
 8016522:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8016524:	2300      	movs	r3, #0
 8016526:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8016528:	2300      	movs	r3, #0
 801652a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016532:	d103      	bne.n	801653c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8016534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016538:	61fb      	str	r3, [r7, #28]
 801653a:	e009      	b.n	8016550 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d006      	beq.n	8016550 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8016546:	69fb      	ldr	r3, [r7, #28]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d101      	bne.n	8016550 <osSignalWait+0x38>
      ticks = 1;
 801654c:	2301      	movs	r3, #1
 801654e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8016550:	f7ff ff0d 	bl	801636e <inHandlerMode>
 8016554:	4603      	mov	r3, r0
 8016556:	2b00      	cmp	r3, #0
 8016558:	d002      	beq.n	8016560 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 801655a:	2382      	movs	r3, #130	; 0x82
 801655c:	613b      	str	r3, [r7, #16]
 801655e:	e01b      	b.n	8016598 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8016560:	68b9      	ldr	r1, [r7, #8]
 8016562:	f107 0310 	add.w	r3, r7, #16
 8016566:	1d1a      	adds	r2, r3, #4
 8016568:	69fb      	ldr	r3, [r7, #28]
 801656a:	2000      	movs	r0, #0
 801656c:	f001 fdfe 	bl	801816c <xTaskNotifyWait>
 8016570:	4603      	mov	r3, r0
 8016572:	2b01      	cmp	r3, #1
 8016574:	d008      	beq.n	8016588 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8016576:	69fb      	ldr	r3, [r7, #28]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d102      	bne.n	8016582 <osSignalWait+0x6a>
 801657c:	2300      	movs	r3, #0
 801657e:	613b      	str	r3, [r7, #16]
 8016580:	e00a      	b.n	8016598 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8016582:	2340      	movs	r3, #64	; 0x40
 8016584:	613b      	str	r3, [r7, #16]
 8016586:	e007      	b.n	8016598 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	2b00      	cmp	r3, #0
 801658c:	da02      	bge.n	8016594 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 801658e:	2386      	movs	r3, #134	; 0x86
 8016590:	613b      	str	r3, [r7, #16]
 8016592:	e001      	b.n	8016598 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8016594:	2308      	movs	r3, #8
 8016596:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	461c      	mov	r4, r3
 801659c:	f107 0310 	add.w	r3, r7, #16
 80165a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80165a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80165a8:	68f8      	ldr	r0, [r7, #12]
 80165aa:	3724      	adds	r7, #36	; 0x24
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd90      	pop	{r4, r7, pc}

080165b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80165b0:	b590      	push	{r4, r7, lr}
 80165b2:	b085      	sub	sp, #20
 80165b4:	af02      	add	r7, sp, #8
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	689b      	ldr	r3, [r3, #8]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d011      	beq.n	80165e6 <osMessageCreate+0x36>
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	68db      	ldr	r3, [r3, #12]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d00d      	beq.n	80165e6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6818      	ldr	r0, [r3, #0]
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	6859      	ldr	r1, [r3, #4]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	689a      	ldr	r2, [r3, #8]
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	68db      	ldr	r3, [r3, #12]
 80165da:	2400      	movs	r4, #0
 80165dc:	9400      	str	r4, [sp, #0]
 80165de:	f000 f9e1 	bl	80169a4 <xQueueGenericCreateStatic>
 80165e2:	4603      	mov	r3, r0
 80165e4:	e008      	b.n	80165f8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	6818      	ldr	r0, [r3, #0]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	685b      	ldr	r3, [r3, #4]
 80165ee:	2200      	movs	r2, #0
 80165f0:	4619      	mov	r1, r3
 80165f2:	f000 fa59 	bl	8016aa8 <xQueueGenericCreate>
 80165f6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	370c      	adds	r7, #12
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd90      	pop	{r4, r7, pc}

08016600 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b086      	sub	sp, #24
 8016604:	af00      	add	r7, sp, #0
 8016606:	60f8      	str	r0, [r7, #12]
 8016608:	60b9      	str	r1, [r7, #8]
 801660a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801660c:	2300      	movs	r3, #0
 801660e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8016614:	697b      	ldr	r3, [r7, #20]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d101      	bne.n	801661e <osMessagePut+0x1e>
    ticks = 1;
 801661a:	2301      	movs	r3, #1
 801661c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801661e:	f7ff fea6 	bl	801636e <inHandlerMode>
 8016622:	4603      	mov	r3, r0
 8016624:	2b00      	cmp	r3, #0
 8016626:	d018      	beq.n	801665a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8016628:	f107 0210 	add.w	r2, r7, #16
 801662c:	f107 0108 	add.w	r1, r7, #8
 8016630:	2300      	movs	r3, #0
 8016632:	68f8      	ldr	r0, [r7, #12]
 8016634:	f000 fba0 	bl	8016d78 <xQueueGenericSendFromISR>
 8016638:	4603      	mov	r3, r0
 801663a:	2b01      	cmp	r3, #1
 801663c:	d001      	beq.n	8016642 <osMessagePut+0x42>
      return osErrorOS;
 801663e:	23ff      	movs	r3, #255	; 0xff
 8016640:	e018      	b.n	8016674 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d014      	beq.n	8016672 <osMessagePut+0x72>
 8016648:	4b0c      	ldr	r3, [pc, #48]	; (801667c <osMessagePut+0x7c>)
 801664a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801664e:	601a      	str	r2, [r3, #0]
 8016650:	f3bf 8f4f 	dsb	sy
 8016654:	f3bf 8f6f 	isb	sy
 8016658:	e00b      	b.n	8016672 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801665a:	f107 0108 	add.w	r1, r7, #8
 801665e:	2300      	movs	r3, #0
 8016660:	697a      	ldr	r2, [r7, #20]
 8016662:	68f8      	ldr	r0, [r7, #12]
 8016664:	f000 fa82 	bl	8016b6c <xQueueGenericSend>
 8016668:	4603      	mov	r3, r0
 801666a:	2b01      	cmp	r3, #1
 801666c:	d001      	beq.n	8016672 <osMessagePut+0x72>
      return osErrorOS;
 801666e:	23ff      	movs	r3, #255	; 0xff
 8016670:	e000      	b.n	8016674 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8016672:	2300      	movs	r3, #0
}
 8016674:	4618      	mov	r0, r3
 8016676:	3718      	adds	r7, #24
 8016678:	46bd      	mov	sp, r7
 801667a:	bd80      	pop	{r7, pc}
 801667c:	e000ed04 	.word	0xe000ed04

08016680 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8016680:	b590      	push	{r4, r7, lr}
 8016682:	b08b      	sub	sp, #44	; 0x2c
 8016684:	af00      	add	r7, sp, #0
 8016686:	60f8      	str	r0, [r7, #12]
 8016688:	60b9      	str	r1, [r7, #8]
 801668a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8016690:	2300      	movs	r3, #0
 8016692:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d10a      	bne.n	80166b0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801669a:	2380      	movs	r3, #128	; 0x80
 801669c:	617b      	str	r3, [r7, #20]
    return event;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	461c      	mov	r4, r3
 80166a2:	f107 0314 	add.w	r3, r7, #20
 80166a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80166aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80166ae:	e054      	b.n	801675a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80166b0:	2300      	movs	r3, #0
 80166b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80166b4:	2300      	movs	r3, #0
 80166b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80166be:	d103      	bne.n	80166c8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80166c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166c4:	627b      	str	r3, [r7, #36]	; 0x24
 80166c6:	e009      	b.n	80166dc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d006      	beq.n	80166dc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80166d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d101      	bne.n	80166dc <osMessageGet+0x5c>
      ticks = 1;
 80166d8:	2301      	movs	r3, #1
 80166da:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80166dc:	f7ff fe47 	bl	801636e <inHandlerMode>
 80166e0:	4603      	mov	r3, r0
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d01c      	beq.n	8016720 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80166e6:	f107 0220 	add.w	r2, r7, #32
 80166ea:	f107 0314 	add.w	r3, r7, #20
 80166ee:	3304      	adds	r3, #4
 80166f0:	4619      	mov	r1, r3
 80166f2:	68b8      	ldr	r0, [r7, #8]
 80166f4:	f000 fcc6 	bl	8017084 <xQueueReceiveFromISR>
 80166f8:	4603      	mov	r3, r0
 80166fa:	2b01      	cmp	r3, #1
 80166fc:	d102      	bne.n	8016704 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80166fe:	2310      	movs	r3, #16
 8016700:	617b      	str	r3, [r7, #20]
 8016702:	e001      	b.n	8016708 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8016704:	2300      	movs	r3, #0
 8016706:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016708:	6a3b      	ldr	r3, [r7, #32]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d01d      	beq.n	801674a <osMessageGet+0xca>
 801670e:	4b15      	ldr	r3, [pc, #84]	; (8016764 <osMessageGet+0xe4>)
 8016710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016714:	601a      	str	r2, [r3, #0]
 8016716:	f3bf 8f4f 	dsb	sy
 801671a:	f3bf 8f6f 	isb	sy
 801671e:	e014      	b.n	801674a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8016720:	f107 0314 	add.w	r3, r7, #20
 8016724:	3304      	adds	r3, #4
 8016726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016728:	4619      	mov	r1, r3
 801672a:	68b8      	ldr	r0, [r7, #8]
 801672c:	f000 fbc4 	bl	8016eb8 <xQueueReceive>
 8016730:	4603      	mov	r3, r0
 8016732:	2b01      	cmp	r3, #1
 8016734:	d102      	bne.n	801673c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8016736:	2310      	movs	r3, #16
 8016738:	617b      	str	r3, [r7, #20]
 801673a:	e006      	b.n	801674a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801673e:	2b00      	cmp	r3, #0
 8016740:	d101      	bne.n	8016746 <osMessageGet+0xc6>
 8016742:	2300      	movs	r3, #0
 8016744:	e000      	b.n	8016748 <osMessageGet+0xc8>
 8016746:	2340      	movs	r3, #64	; 0x40
 8016748:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	461c      	mov	r4, r3
 801674e:	f107 0314 	add.w	r3, r7, #20
 8016752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801675a:	68f8      	ldr	r0, [r7, #12]
 801675c:	372c      	adds	r7, #44	; 0x2c
 801675e:	46bd      	mov	sp, r7
 8016760:	bd90      	pop	{r4, r7, pc}
 8016762:	bf00      	nop
 8016764:	e000ed04 	.word	0xe000ed04

08016768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016768:	b480      	push	{r7}
 801676a:	b083      	sub	sp, #12
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f103 0208 	add.w	r2, r3, #8
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	f103 0208 	add.w	r2, r3, #8
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	f103 0208 	add.w	r2, r3, #8
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	2200      	movs	r2, #0
 801679a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801679c:	bf00      	nop
 801679e:	370c      	adds	r7, #12
 80167a0:	46bd      	mov	sp, r7
 80167a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a6:	4770      	bx	lr

080167a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80167a8:	b480      	push	{r7}
 80167aa:	b083      	sub	sp, #12
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2200      	movs	r2, #0
 80167b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80167b6:	bf00      	nop
 80167b8:	370c      	adds	r7, #12
 80167ba:	46bd      	mov	sp, r7
 80167bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c0:	4770      	bx	lr

080167c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80167c2:	b480      	push	{r7}
 80167c4:	b085      	sub	sp, #20
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
 80167ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	685b      	ldr	r3, [r3, #4]
 80167d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80167d2:	683b      	ldr	r3, [r7, #0]
 80167d4:	68fa      	ldr	r2, [r7, #12]
 80167d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	689a      	ldr	r2, [r3, #8]
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	689b      	ldr	r3, [r3, #8]
 80167e4:	683a      	ldr	r2, [r7, #0]
 80167e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	683a      	ldr	r2, [r7, #0]
 80167ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80167ee:	683b      	ldr	r3, [r7, #0]
 80167f0:	687a      	ldr	r2, [r7, #4]
 80167f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	1c5a      	adds	r2, r3, #1
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	601a      	str	r2, [r3, #0]
}
 80167fe:	bf00      	nop
 8016800:	3714      	adds	r7, #20
 8016802:	46bd      	mov	sp, r7
 8016804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016808:	4770      	bx	lr

0801680a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801680a:	b480      	push	{r7}
 801680c:	b085      	sub	sp, #20
 801680e:	af00      	add	r7, sp, #0
 8016810:	6078      	str	r0, [r7, #4]
 8016812:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016814:	683b      	ldr	r3, [r7, #0]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801681a:	68bb      	ldr	r3, [r7, #8]
 801681c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016820:	d103      	bne.n	801682a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	691b      	ldr	r3, [r3, #16]
 8016826:	60fb      	str	r3, [r7, #12]
 8016828:	e00c      	b.n	8016844 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	3308      	adds	r3, #8
 801682e:	60fb      	str	r3, [r7, #12]
 8016830:	e002      	b.n	8016838 <vListInsert+0x2e>
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	685b      	ldr	r3, [r3, #4]
 8016836:	60fb      	str	r3, [r7, #12]
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	68ba      	ldr	r2, [r7, #8]
 8016840:	429a      	cmp	r2, r3
 8016842:	d2f6      	bcs.n	8016832 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	685a      	ldr	r2, [r3, #4]
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	685b      	ldr	r3, [r3, #4]
 8016850:	683a      	ldr	r2, [r7, #0]
 8016852:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	68fa      	ldr	r2, [r7, #12]
 8016858:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	683a      	ldr	r2, [r7, #0]
 801685e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	687a      	ldr	r2, [r7, #4]
 8016864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	1c5a      	adds	r2, r3, #1
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	601a      	str	r2, [r3, #0]
}
 8016870:	bf00      	nop
 8016872:	3714      	adds	r7, #20
 8016874:	46bd      	mov	sp, r7
 8016876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687a:	4770      	bx	lr

0801687c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801687c:	b480      	push	{r7}
 801687e:	b085      	sub	sp, #20
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	691b      	ldr	r3, [r3, #16]
 8016888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	685b      	ldr	r3, [r3, #4]
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	6892      	ldr	r2, [r2, #8]
 8016892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	689b      	ldr	r3, [r3, #8]
 8016898:	687a      	ldr	r2, [r7, #4]
 801689a:	6852      	ldr	r2, [r2, #4]
 801689c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	685b      	ldr	r3, [r3, #4]
 80168a2:	687a      	ldr	r2, [r7, #4]
 80168a4:	429a      	cmp	r2, r3
 80168a6:	d103      	bne.n	80168b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	689a      	ldr	r2, [r3, #8]
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	2200      	movs	r2, #0
 80168b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	1e5a      	subs	r2, r3, #1
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	681b      	ldr	r3, [r3, #0]
}
 80168c4:	4618      	mov	r0, r3
 80168c6:	3714      	adds	r7, #20
 80168c8:	46bd      	mov	sp, r7
 80168ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ce:	4770      	bx	lr

080168d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b084      	sub	sp, #16
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
 80168d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d10c      	bne.n	80168fe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80168e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e8:	b672      	cpsid	i
 80168ea:	f383 8811 	msr	BASEPRI, r3
 80168ee:	f3bf 8f6f 	isb	sy
 80168f2:	f3bf 8f4f 	dsb	sy
 80168f6:	b662      	cpsie	i
 80168f8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80168fa:	bf00      	nop
 80168fc:	e7fe      	b.n	80168fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80168fe:	f001 ff9d 	bl	801883c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	681a      	ldr	r2, [r3, #0]
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801690a:	68f9      	ldr	r1, [r7, #12]
 801690c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801690e:	fb01 f303 	mul.w	r3, r1, r3
 8016912:	441a      	add	r2, r3
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	2200      	movs	r2, #0
 801691c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	681a      	ldr	r2, [r3, #0]
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	681a      	ldr	r2, [r3, #0]
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801692e:	3b01      	subs	r3, #1
 8016930:	68f9      	ldr	r1, [r7, #12]
 8016932:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016934:	fb01 f303 	mul.w	r3, r1, r3
 8016938:	441a      	add	r2, r3
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	22ff      	movs	r2, #255	; 0xff
 8016942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	22ff      	movs	r2, #255	; 0xff
 801694a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d114      	bne.n	801697e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	691b      	ldr	r3, [r3, #16]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d01a      	beq.n	8016992 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	3310      	adds	r3, #16
 8016960:	4618      	mov	r0, r3
 8016962:	f001 f995 	bl	8017c90 <xTaskRemoveFromEventList>
 8016966:	4603      	mov	r3, r0
 8016968:	2b00      	cmp	r3, #0
 801696a:	d012      	beq.n	8016992 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801696c:	4b0c      	ldr	r3, [pc, #48]	; (80169a0 <xQueueGenericReset+0xd0>)
 801696e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016972:	601a      	str	r2, [r3, #0]
 8016974:	f3bf 8f4f 	dsb	sy
 8016978:	f3bf 8f6f 	isb	sy
 801697c:	e009      	b.n	8016992 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	3310      	adds	r3, #16
 8016982:	4618      	mov	r0, r3
 8016984:	f7ff fef0 	bl	8016768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	3324      	adds	r3, #36	; 0x24
 801698c:	4618      	mov	r0, r3
 801698e:	f7ff feeb 	bl	8016768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016992:	f001 ff87 	bl	80188a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016996:	2301      	movs	r3, #1
}
 8016998:	4618      	mov	r0, r3
 801699a:	3710      	adds	r7, #16
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}
 80169a0:	e000ed04 	.word	0xe000ed04

080169a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b08e      	sub	sp, #56	; 0x38
 80169a8:	af02      	add	r7, sp, #8
 80169aa:	60f8      	str	r0, [r7, #12]
 80169ac:	60b9      	str	r1, [r7, #8]
 80169ae:	607a      	str	r2, [r7, #4]
 80169b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d10c      	bne.n	80169d2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80169b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169bc:	b672      	cpsid	i
 80169be:	f383 8811 	msr	BASEPRI, r3
 80169c2:	f3bf 8f6f 	isb	sy
 80169c6:	f3bf 8f4f 	dsb	sy
 80169ca:	b662      	cpsie	i
 80169cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80169ce:	bf00      	nop
 80169d0:	e7fe      	b.n	80169d0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80169d2:	683b      	ldr	r3, [r7, #0]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d10c      	bne.n	80169f2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80169d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169dc:	b672      	cpsid	i
 80169de:	f383 8811 	msr	BASEPRI, r3
 80169e2:	f3bf 8f6f 	isb	sy
 80169e6:	f3bf 8f4f 	dsb	sy
 80169ea:	b662      	cpsie	i
 80169ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80169ee:	bf00      	nop
 80169f0:	e7fe      	b.n	80169f0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d002      	beq.n	80169fe <xQueueGenericCreateStatic+0x5a>
 80169f8:	68bb      	ldr	r3, [r7, #8]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d001      	beq.n	8016a02 <xQueueGenericCreateStatic+0x5e>
 80169fe:	2301      	movs	r3, #1
 8016a00:	e000      	b.n	8016a04 <xQueueGenericCreateStatic+0x60>
 8016a02:	2300      	movs	r3, #0
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d10c      	bne.n	8016a22 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8016a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a0c:	b672      	cpsid	i
 8016a0e:	f383 8811 	msr	BASEPRI, r3
 8016a12:	f3bf 8f6f 	isb	sy
 8016a16:	f3bf 8f4f 	dsb	sy
 8016a1a:	b662      	cpsie	i
 8016a1c:	623b      	str	r3, [r7, #32]
}
 8016a1e:	bf00      	nop
 8016a20:	e7fe      	b.n	8016a20 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d102      	bne.n	8016a2e <xQueueGenericCreateStatic+0x8a>
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d101      	bne.n	8016a32 <xQueueGenericCreateStatic+0x8e>
 8016a2e:	2301      	movs	r3, #1
 8016a30:	e000      	b.n	8016a34 <xQueueGenericCreateStatic+0x90>
 8016a32:	2300      	movs	r3, #0
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d10c      	bne.n	8016a52 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8016a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a3c:	b672      	cpsid	i
 8016a3e:	f383 8811 	msr	BASEPRI, r3
 8016a42:	f3bf 8f6f 	isb	sy
 8016a46:	f3bf 8f4f 	dsb	sy
 8016a4a:	b662      	cpsie	i
 8016a4c:	61fb      	str	r3, [r7, #28]
}
 8016a4e:	bf00      	nop
 8016a50:	e7fe      	b.n	8016a50 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016a52:	2348      	movs	r3, #72	; 0x48
 8016a54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016a56:	697b      	ldr	r3, [r7, #20]
 8016a58:	2b48      	cmp	r3, #72	; 0x48
 8016a5a:	d00c      	beq.n	8016a76 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8016a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a60:	b672      	cpsid	i
 8016a62:	f383 8811 	msr	BASEPRI, r3
 8016a66:	f3bf 8f6f 	isb	sy
 8016a6a:	f3bf 8f4f 	dsb	sy
 8016a6e:	b662      	cpsie	i
 8016a70:	61bb      	str	r3, [r7, #24]
}
 8016a72:	bf00      	nop
 8016a74:	e7fe      	b.n	8016a74 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016a76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d00d      	beq.n	8016a9e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a84:	2201      	movs	r2, #1
 8016a86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016a8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a90:	9300      	str	r3, [sp, #0]
 8016a92:	4613      	mov	r3, r2
 8016a94:	687a      	ldr	r2, [r7, #4]
 8016a96:	68b9      	ldr	r1, [r7, #8]
 8016a98:	68f8      	ldr	r0, [r7, #12]
 8016a9a:	f000 f847 	bl	8016b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3730      	adds	r7, #48	; 0x30
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}

08016aa8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b08a      	sub	sp, #40	; 0x28
 8016aac:	af02      	add	r7, sp, #8
 8016aae:	60f8      	str	r0, [r7, #12]
 8016ab0:	60b9      	str	r1, [r7, #8]
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d10c      	bne.n	8016ad6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8016abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac0:	b672      	cpsid	i
 8016ac2:	f383 8811 	msr	BASEPRI, r3
 8016ac6:	f3bf 8f6f 	isb	sy
 8016aca:	f3bf 8f4f 	dsb	sy
 8016ace:	b662      	cpsie	i
 8016ad0:	613b      	str	r3, [r7, #16]
}
 8016ad2:	bf00      	nop
 8016ad4:	e7fe      	b.n	8016ad4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d102      	bne.n	8016ae2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016adc:	2300      	movs	r3, #0
 8016ade:	61fb      	str	r3, [r7, #28]
 8016ae0:	e004      	b.n	8016aec <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	68ba      	ldr	r2, [r7, #8]
 8016ae6:	fb02 f303 	mul.w	r3, r2, r3
 8016aea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016aec:	69fb      	ldr	r3, [r7, #28]
 8016aee:	3348      	adds	r3, #72	; 0x48
 8016af0:	4618      	mov	r0, r3
 8016af2:	f001 ffcf 	bl	8018a94 <pvPortMalloc>
 8016af6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016af8:	69bb      	ldr	r3, [r7, #24]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d011      	beq.n	8016b22 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016afe:	69bb      	ldr	r3, [r7, #24]
 8016b00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b02:	697b      	ldr	r3, [r7, #20]
 8016b04:	3348      	adds	r3, #72	; 0x48
 8016b06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016b08:	69bb      	ldr	r3, [r7, #24]
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016b10:	79fa      	ldrb	r2, [r7, #7]
 8016b12:	69bb      	ldr	r3, [r7, #24]
 8016b14:	9300      	str	r3, [sp, #0]
 8016b16:	4613      	mov	r3, r2
 8016b18:	697a      	ldr	r2, [r7, #20]
 8016b1a:	68b9      	ldr	r1, [r7, #8]
 8016b1c:	68f8      	ldr	r0, [r7, #12]
 8016b1e:	f000 f805 	bl	8016b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016b22:	69bb      	ldr	r3, [r7, #24]
	}
 8016b24:	4618      	mov	r0, r3
 8016b26:	3720      	adds	r7, #32
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd80      	pop	{r7, pc}

08016b2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b084      	sub	sp, #16
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	60f8      	str	r0, [r7, #12]
 8016b34:	60b9      	str	r1, [r7, #8]
 8016b36:	607a      	str	r2, [r7, #4]
 8016b38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016b3a:	68bb      	ldr	r3, [r7, #8]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d103      	bne.n	8016b48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016b40:	69bb      	ldr	r3, [r7, #24]
 8016b42:	69ba      	ldr	r2, [r7, #24]
 8016b44:	601a      	str	r2, [r3, #0]
 8016b46:	e002      	b.n	8016b4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016b48:	69bb      	ldr	r3, [r7, #24]
 8016b4a:	687a      	ldr	r2, [r7, #4]
 8016b4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016b4e:	69bb      	ldr	r3, [r7, #24]
 8016b50:	68fa      	ldr	r2, [r7, #12]
 8016b52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016b54:	69bb      	ldr	r3, [r7, #24]
 8016b56:	68ba      	ldr	r2, [r7, #8]
 8016b58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016b5a:	2101      	movs	r1, #1
 8016b5c:	69b8      	ldr	r0, [r7, #24]
 8016b5e:	f7ff feb7 	bl	80168d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016b62:	bf00      	nop
 8016b64:	3710      	adds	r7, #16
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}
	...

08016b6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b08e      	sub	sp, #56	; 0x38
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	60f8      	str	r0, [r7, #12]
 8016b74:	60b9      	str	r1, [r7, #8]
 8016b76:	607a      	str	r2, [r7, #4]
 8016b78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d10c      	bne.n	8016ba2 <xQueueGenericSend+0x36>
	__asm volatile
 8016b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b8c:	b672      	cpsid	i
 8016b8e:	f383 8811 	msr	BASEPRI, r3
 8016b92:	f3bf 8f6f 	isb	sy
 8016b96:	f3bf 8f4f 	dsb	sy
 8016b9a:	b662      	cpsie	i
 8016b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016b9e:	bf00      	nop
 8016ba0:	e7fe      	b.n	8016ba0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016ba2:	68bb      	ldr	r3, [r7, #8]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d103      	bne.n	8016bb0 <xQueueGenericSend+0x44>
 8016ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d101      	bne.n	8016bb4 <xQueueGenericSend+0x48>
 8016bb0:	2301      	movs	r3, #1
 8016bb2:	e000      	b.n	8016bb6 <xQueueGenericSend+0x4a>
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d10c      	bne.n	8016bd4 <xQueueGenericSend+0x68>
	__asm volatile
 8016bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bbe:	b672      	cpsid	i
 8016bc0:	f383 8811 	msr	BASEPRI, r3
 8016bc4:	f3bf 8f6f 	isb	sy
 8016bc8:	f3bf 8f4f 	dsb	sy
 8016bcc:	b662      	cpsie	i
 8016bce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016bd0:	bf00      	nop
 8016bd2:	e7fe      	b.n	8016bd2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	2b02      	cmp	r3, #2
 8016bd8:	d103      	bne.n	8016be2 <xQueueGenericSend+0x76>
 8016bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bde:	2b01      	cmp	r3, #1
 8016be0:	d101      	bne.n	8016be6 <xQueueGenericSend+0x7a>
 8016be2:	2301      	movs	r3, #1
 8016be4:	e000      	b.n	8016be8 <xQueueGenericSend+0x7c>
 8016be6:	2300      	movs	r3, #0
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d10c      	bne.n	8016c06 <xQueueGenericSend+0x9a>
	__asm volatile
 8016bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bf0:	b672      	cpsid	i
 8016bf2:	f383 8811 	msr	BASEPRI, r3
 8016bf6:	f3bf 8f6f 	isb	sy
 8016bfa:	f3bf 8f4f 	dsb	sy
 8016bfe:	b662      	cpsie	i
 8016c00:	623b      	str	r3, [r7, #32]
}
 8016c02:	bf00      	nop
 8016c04:	e7fe      	b.n	8016c04 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016c06:	f001 fa09 	bl	801801c <xTaskGetSchedulerState>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d102      	bne.n	8016c16 <xQueueGenericSend+0xaa>
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d101      	bne.n	8016c1a <xQueueGenericSend+0xae>
 8016c16:	2301      	movs	r3, #1
 8016c18:	e000      	b.n	8016c1c <xQueueGenericSend+0xb0>
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d10c      	bne.n	8016c3a <xQueueGenericSend+0xce>
	__asm volatile
 8016c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c24:	b672      	cpsid	i
 8016c26:	f383 8811 	msr	BASEPRI, r3
 8016c2a:	f3bf 8f6f 	isb	sy
 8016c2e:	f3bf 8f4f 	dsb	sy
 8016c32:	b662      	cpsie	i
 8016c34:	61fb      	str	r3, [r7, #28]
}
 8016c36:	bf00      	nop
 8016c38:	e7fe      	b.n	8016c38 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016c3a:	f001 fdff 	bl	801883c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d302      	bcc.n	8016c50 <xQueueGenericSend+0xe4>
 8016c4a:	683b      	ldr	r3, [r7, #0]
 8016c4c:	2b02      	cmp	r3, #2
 8016c4e:	d129      	bne.n	8016ca4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016c50:	683a      	ldr	r2, [r7, #0]
 8016c52:	68b9      	ldr	r1, [r7, #8]
 8016c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c56:	f000 fa9b 	bl	8017190 <prvCopyDataToQueue>
 8016c5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d010      	beq.n	8016c86 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c66:	3324      	adds	r3, #36	; 0x24
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f001 f811 	bl	8017c90 <xTaskRemoveFromEventList>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d013      	beq.n	8016c9c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016c74:	4b3f      	ldr	r3, [pc, #252]	; (8016d74 <xQueueGenericSend+0x208>)
 8016c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c7a:	601a      	str	r2, [r3, #0]
 8016c7c:	f3bf 8f4f 	dsb	sy
 8016c80:	f3bf 8f6f 	isb	sy
 8016c84:	e00a      	b.n	8016c9c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d007      	beq.n	8016c9c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016c8c:	4b39      	ldr	r3, [pc, #228]	; (8016d74 <xQueueGenericSend+0x208>)
 8016c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c92:	601a      	str	r2, [r3, #0]
 8016c94:	f3bf 8f4f 	dsb	sy
 8016c98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016c9c:	f001 fe02 	bl	80188a4 <vPortExitCritical>
				return pdPASS;
 8016ca0:	2301      	movs	r3, #1
 8016ca2:	e063      	b.n	8016d6c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d103      	bne.n	8016cb2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016caa:	f001 fdfb 	bl	80188a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	e05c      	b.n	8016d6c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d106      	bne.n	8016cc6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016cb8:	f107 0314 	add.w	r3, r7, #20
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	f001 f84b 	bl	8017d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016cc6:	f001 fded 	bl	80188a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016cca:	f000 fdb1 	bl	8017830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016cce:	f001 fdb5 	bl	801883c <vPortEnterCritical>
 8016cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016cd8:	b25b      	sxtb	r3, r3
 8016cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016cde:	d103      	bne.n	8016ce8 <xQueueGenericSend+0x17c>
 8016ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016cee:	b25b      	sxtb	r3, r3
 8016cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016cf4:	d103      	bne.n	8016cfe <xQueueGenericSend+0x192>
 8016cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016cfe:	f001 fdd1 	bl	80188a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d02:	1d3a      	adds	r2, r7, #4
 8016d04:	f107 0314 	add.w	r3, r7, #20
 8016d08:	4611      	mov	r1, r2
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	f001 f83a 	bl	8017d84 <xTaskCheckForTimeOut>
 8016d10:	4603      	mov	r3, r0
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d124      	bne.n	8016d60 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d18:	f000 fb32 	bl	8017380 <prvIsQueueFull>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d018      	beq.n	8016d54 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d24:	3310      	adds	r3, #16
 8016d26:	687a      	ldr	r2, [r7, #4]
 8016d28:	4611      	mov	r1, r2
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f000 ff8a 	bl	8017c44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d32:	f000 fabd 	bl	80172b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016d36:	f000 fd89 	bl	801784c <xTaskResumeAll>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	f47f af7c 	bne.w	8016c3a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8016d42:	4b0c      	ldr	r3, [pc, #48]	; (8016d74 <xQueueGenericSend+0x208>)
 8016d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d48:	601a      	str	r2, [r3, #0]
 8016d4a:	f3bf 8f4f 	dsb	sy
 8016d4e:	f3bf 8f6f 	isb	sy
 8016d52:	e772      	b.n	8016c3a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d56:	f000 faab 	bl	80172b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016d5a:	f000 fd77 	bl	801784c <xTaskResumeAll>
 8016d5e:	e76c      	b.n	8016c3a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d62:	f000 faa5 	bl	80172b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016d66:	f000 fd71 	bl	801784c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016d6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3738      	adds	r7, #56	; 0x38
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}
 8016d74:	e000ed04 	.word	0xe000ed04

08016d78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b08e      	sub	sp, #56	; 0x38
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	60f8      	str	r0, [r7, #12]
 8016d80:	60b9      	str	r1, [r7, #8]
 8016d82:	607a      	str	r2, [r7, #4]
 8016d84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d10c      	bne.n	8016daa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8016d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d94:	b672      	cpsid	i
 8016d96:	f383 8811 	msr	BASEPRI, r3
 8016d9a:	f3bf 8f6f 	isb	sy
 8016d9e:	f3bf 8f4f 	dsb	sy
 8016da2:	b662      	cpsie	i
 8016da4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016da6:	bf00      	nop
 8016da8:	e7fe      	b.n	8016da8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016daa:	68bb      	ldr	r3, [r7, #8]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d103      	bne.n	8016db8 <xQueueGenericSendFromISR+0x40>
 8016db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d101      	bne.n	8016dbc <xQueueGenericSendFromISR+0x44>
 8016db8:	2301      	movs	r3, #1
 8016dba:	e000      	b.n	8016dbe <xQueueGenericSendFromISR+0x46>
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d10c      	bne.n	8016ddc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8016dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc6:	b672      	cpsid	i
 8016dc8:	f383 8811 	msr	BASEPRI, r3
 8016dcc:	f3bf 8f6f 	isb	sy
 8016dd0:	f3bf 8f4f 	dsb	sy
 8016dd4:	b662      	cpsie	i
 8016dd6:	623b      	str	r3, [r7, #32]
}
 8016dd8:	bf00      	nop
 8016dda:	e7fe      	b.n	8016dda <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016ddc:	683b      	ldr	r3, [r7, #0]
 8016dde:	2b02      	cmp	r3, #2
 8016de0:	d103      	bne.n	8016dea <xQueueGenericSendFromISR+0x72>
 8016de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016de6:	2b01      	cmp	r3, #1
 8016de8:	d101      	bne.n	8016dee <xQueueGenericSendFromISR+0x76>
 8016dea:	2301      	movs	r3, #1
 8016dec:	e000      	b.n	8016df0 <xQueueGenericSendFromISR+0x78>
 8016dee:	2300      	movs	r3, #0
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d10c      	bne.n	8016e0e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8016df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016df8:	b672      	cpsid	i
 8016dfa:	f383 8811 	msr	BASEPRI, r3
 8016dfe:	f3bf 8f6f 	isb	sy
 8016e02:	f3bf 8f4f 	dsb	sy
 8016e06:	b662      	cpsie	i
 8016e08:	61fb      	str	r3, [r7, #28]
}
 8016e0a:	bf00      	nop
 8016e0c:	e7fe      	b.n	8016e0c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016e0e:	f001 fdfd 	bl	8018a0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016e12:	f3ef 8211 	mrs	r2, BASEPRI
 8016e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e1a:	b672      	cpsid	i
 8016e1c:	f383 8811 	msr	BASEPRI, r3
 8016e20:	f3bf 8f6f 	isb	sy
 8016e24:	f3bf 8f4f 	dsb	sy
 8016e28:	b662      	cpsie	i
 8016e2a:	61ba      	str	r2, [r7, #24]
 8016e2c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016e2e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016e30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d302      	bcc.n	8016e44 <xQueueGenericSendFromISR+0xcc>
 8016e3e:	683b      	ldr	r3, [r7, #0]
 8016e40:	2b02      	cmp	r3, #2
 8016e42:	d12c      	bne.n	8016e9e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016e4e:	683a      	ldr	r2, [r7, #0]
 8016e50:	68b9      	ldr	r1, [r7, #8]
 8016e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e54:	f000 f99c 	bl	8017190 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016e58:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8016e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016e60:	d112      	bne.n	8016e88 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d016      	beq.n	8016e98 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e6c:	3324      	adds	r3, #36	; 0x24
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f000 ff0e 	bl	8017c90 <xTaskRemoveFromEventList>
 8016e74:	4603      	mov	r3, r0
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d00e      	beq.n	8016e98 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d00b      	beq.n	8016e98 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2201      	movs	r2, #1
 8016e84:	601a      	str	r2, [r3, #0]
 8016e86:	e007      	b.n	8016e98 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016e88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016e8c:	3301      	adds	r3, #1
 8016e8e:	b2db      	uxtb	r3, r3
 8016e90:	b25a      	sxtb	r2, r3
 8016e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016e98:	2301      	movs	r3, #1
 8016e9a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8016e9c:	e001      	b.n	8016ea2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8016ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016ea6:	693b      	ldr	r3, [r7, #16]
 8016ea8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016eac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3738      	adds	r7, #56	; 0x38
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b08c      	sub	sp, #48	; 0x30
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	60f8      	str	r0, [r7, #12]
 8016ec0:	60b9      	str	r1, [r7, #8]
 8016ec2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d10c      	bne.n	8016eec <xQueueReceive+0x34>
	__asm volatile
 8016ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ed6:	b672      	cpsid	i
 8016ed8:	f383 8811 	msr	BASEPRI, r3
 8016edc:	f3bf 8f6f 	isb	sy
 8016ee0:	f3bf 8f4f 	dsb	sy
 8016ee4:	b662      	cpsie	i
 8016ee6:	623b      	str	r3, [r7, #32]
}
 8016ee8:	bf00      	nop
 8016eea:	e7fe      	b.n	8016eea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d103      	bne.n	8016efa <xQueueReceive+0x42>
 8016ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d101      	bne.n	8016efe <xQueueReceive+0x46>
 8016efa:	2301      	movs	r3, #1
 8016efc:	e000      	b.n	8016f00 <xQueueReceive+0x48>
 8016efe:	2300      	movs	r3, #0
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d10c      	bne.n	8016f1e <xQueueReceive+0x66>
	__asm volatile
 8016f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f08:	b672      	cpsid	i
 8016f0a:	f383 8811 	msr	BASEPRI, r3
 8016f0e:	f3bf 8f6f 	isb	sy
 8016f12:	f3bf 8f4f 	dsb	sy
 8016f16:	b662      	cpsie	i
 8016f18:	61fb      	str	r3, [r7, #28]
}
 8016f1a:	bf00      	nop
 8016f1c:	e7fe      	b.n	8016f1c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016f1e:	f001 f87d 	bl	801801c <xTaskGetSchedulerState>
 8016f22:	4603      	mov	r3, r0
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d102      	bne.n	8016f2e <xQueueReceive+0x76>
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d101      	bne.n	8016f32 <xQueueReceive+0x7a>
 8016f2e:	2301      	movs	r3, #1
 8016f30:	e000      	b.n	8016f34 <xQueueReceive+0x7c>
 8016f32:	2300      	movs	r3, #0
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d10c      	bne.n	8016f52 <xQueueReceive+0x9a>
	__asm volatile
 8016f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f3c:	b672      	cpsid	i
 8016f3e:	f383 8811 	msr	BASEPRI, r3
 8016f42:	f3bf 8f6f 	isb	sy
 8016f46:	f3bf 8f4f 	dsb	sy
 8016f4a:	b662      	cpsie	i
 8016f4c:	61bb      	str	r3, [r7, #24]
}
 8016f4e:	bf00      	nop
 8016f50:	e7fe      	b.n	8016f50 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016f52:	f001 fc73 	bl	801883c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d01f      	beq.n	8016fa2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016f62:	68b9      	ldr	r1, [r7, #8]
 8016f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f66:	f000 f97d 	bl	8017264 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6c:	1e5a      	subs	r2, r3, #1
 8016f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f74:	691b      	ldr	r3, [r3, #16]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d00f      	beq.n	8016f9a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f7c:	3310      	adds	r3, #16
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f000 fe86 	bl	8017c90 <xTaskRemoveFromEventList>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d007      	beq.n	8016f9a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016f8a:	4b3d      	ldr	r3, [pc, #244]	; (8017080 <xQueueReceive+0x1c8>)
 8016f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f90:	601a      	str	r2, [r3, #0]
 8016f92:	f3bf 8f4f 	dsb	sy
 8016f96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016f9a:	f001 fc83 	bl	80188a4 <vPortExitCritical>
				return pdPASS;
 8016f9e:	2301      	movs	r3, #1
 8016fa0:	e069      	b.n	8017076 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d103      	bne.n	8016fb0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016fa8:	f001 fc7c 	bl	80188a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016fac:	2300      	movs	r3, #0
 8016fae:	e062      	b.n	8017076 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d106      	bne.n	8016fc4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016fb6:	f107 0310 	add.w	r3, r7, #16
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f000 fecc 	bl	8017d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016fc4:	f001 fc6e 	bl	80188a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016fc8:	f000 fc32 	bl	8017830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016fcc:	f001 fc36 	bl	801883c <vPortEnterCritical>
 8016fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016fd6:	b25b      	sxtb	r3, r3
 8016fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016fdc:	d103      	bne.n	8016fe6 <xQueueReceive+0x12e>
 8016fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016fec:	b25b      	sxtb	r3, r3
 8016fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016ff2:	d103      	bne.n	8016ffc <xQueueReceive+0x144>
 8016ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016ffc:	f001 fc52 	bl	80188a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017000:	1d3a      	adds	r2, r7, #4
 8017002:	f107 0310 	add.w	r3, r7, #16
 8017006:	4611      	mov	r1, r2
 8017008:	4618      	mov	r0, r3
 801700a:	f000 febb 	bl	8017d84 <xTaskCheckForTimeOut>
 801700e:	4603      	mov	r3, r0
 8017010:	2b00      	cmp	r3, #0
 8017012:	d123      	bne.n	801705c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017016:	f000 f99d 	bl	8017354 <prvIsQueueEmpty>
 801701a:	4603      	mov	r3, r0
 801701c:	2b00      	cmp	r3, #0
 801701e:	d017      	beq.n	8017050 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017022:	3324      	adds	r3, #36	; 0x24
 8017024:	687a      	ldr	r2, [r7, #4]
 8017026:	4611      	mov	r1, r2
 8017028:	4618      	mov	r0, r3
 801702a:	f000 fe0b 	bl	8017c44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801702e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017030:	f000 f93e 	bl	80172b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017034:	f000 fc0a 	bl	801784c <xTaskResumeAll>
 8017038:	4603      	mov	r3, r0
 801703a:	2b00      	cmp	r3, #0
 801703c:	d189      	bne.n	8016f52 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801703e:	4b10      	ldr	r3, [pc, #64]	; (8017080 <xQueueReceive+0x1c8>)
 8017040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017044:	601a      	str	r2, [r3, #0]
 8017046:	f3bf 8f4f 	dsb	sy
 801704a:	f3bf 8f6f 	isb	sy
 801704e:	e780      	b.n	8016f52 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017052:	f000 f92d 	bl	80172b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017056:	f000 fbf9 	bl	801784c <xTaskResumeAll>
 801705a:	e77a      	b.n	8016f52 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801705c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801705e:	f000 f927 	bl	80172b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017062:	f000 fbf3 	bl	801784c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017068:	f000 f974 	bl	8017354 <prvIsQueueEmpty>
 801706c:	4603      	mov	r3, r0
 801706e:	2b00      	cmp	r3, #0
 8017070:	f43f af6f 	beq.w	8016f52 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017074:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017076:	4618      	mov	r0, r3
 8017078:	3730      	adds	r7, #48	; 0x30
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}
 801707e:	bf00      	nop
 8017080:	e000ed04 	.word	0xe000ed04

08017084 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b08e      	sub	sp, #56	; 0x38
 8017088:	af00      	add	r7, sp, #0
 801708a:	60f8      	str	r0, [r7, #12]
 801708c:	60b9      	str	r1, [r7, #8]
 801708e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017096:	2b00      	cmp	r3, #0
 8017098:	d10c      	bne.n	80170b4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801709e:	b672      	cpsid	i
 80170a0:	f383 8811 	msr	BASEPRI, r3
 80170a4:	f3bf 8f6f 	isb	sy
 80170a8:	f3bf 8f4f 	dsb	sy
 80170ac:	b662      	cpsie	i
 80170ae:	623b      	str	r3, [r7, #32]
}
 80170b0:	bf00      	nop
 80170b2:	e7fe      	b.n	80170b2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80170b4:	68bb      	ldr	r3, [r7, #8]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d103      	bne.n	80170c2 <xQueueReceiveFromISR+0x3e>
 80170ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d101      	bne.n	80170c6 <xQueueReceiveFromISR+0x42>
 80170c2:	2301      	movs	r3, #1
 80170c4:	e000      	b.n	80170c8 <xQueueReceiveFromISR+0x44>
 80170c6:	2300      	movs	r3, #0
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d10c      	bne.n	80170e6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80170cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170d0:	b672      	cpsid	i
 80170d2:	f383 8811 	msr	BASEPRI, r3
 80170d6:	f3bf 8f6f 	isb	sy
 80170da:	f3bf 8f4f 	dsb	sy
 80170de:	b662      	cpsie	i
 80170e0:	61fb      	str	r3, [r7, #28]
}
 80170e2:	bf00      	nop
 80170e4:	e7fe      	b.n	80170e4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80170e6:	f001 fc91 	bl	8018a0c <vPortValidateInterruptPriority>
	__asm volatile
 80170ea:	f3ef 8211 	mrs	r2, BASEPRI
 80170ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f2:	b672      	cpsid	i
 80170f4:	f383 8811 	msr	BASEPRI, r3
 80170f8:	f3bf 8f6f 	isb	sy
 80170fc:	f3bf 8f4f 	dsb	sy
 8017100:	b662      	cpsie	i
 8017102:	61ba      	str	r2, [r7, #24]
 8017104:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017106:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017108:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801710c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801710e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017112:	2b00      	cmp	r3, #0
 8017114:	d02f      	beq.n	8017176 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801711c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017120:	68b9      	ldr	r1, [r7, #8]
 8017122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017124:	f000 f89e 	bl	8017264 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801712a:	1e5a      	subs	r2, r3, #1
 801712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801712e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017130:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017138:	d112      	bne.n	8017160 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801713c:	691b      	ldr	r3, [r3, #16]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d016      	beq.n	8017170 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017144:	3310      	adds	r3, #16
 8017146:	4618      	mov	r0, r3
 8017148:	f000 fda2 	bl	8017c90 <xTaskRemoveFromEventList>
 801714c:	4603      	mov	r3, r0
 801714e:	2b00      	cmp	r3, #0
 8017150:	d00e      	beq.n	8017170 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d00b      	beq.n	8017170 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	2201      	movs	r2, #1
 801715c:	601a      	str	r2, [r3, #0]
 801715e:	e007      	b.n	8017170 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017164:	3301      	adds	r3, #1
 8017166:	b2db      	uxtb	r3, r3
 8017168:	b25a      	sxtb	r2, r3
 801716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801716c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017170:	2301      	movs	r3, #1
 8017172:	637b      	str	r3, [r7, #52]	; 0x34
 8017174:	e001      	b.n	801717a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8017176:	2300      	movs	r3, #0
 8017178:	637b      	str	r3, [r7, #52]	; 0x34
 801717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	f383 8811 	msr	BASEPRI, r3
}
 8017184:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017188:	4618      	mov	r0, r3
 801718a:	3738      	adds	r7, #56	; 0x38
 801718c:	46bd      	mov	sp, r7
 801718e:	bd80      	pop	{r7, pc}

08017190 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b086      	sub	sp, #24
 8017194:	af00      	add	r7, sp, #0
 8017196:	60f8      	str	r0, [r7, #12]
 8017198:	60b9      	str	r1, [r7, #8]
 801719a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801719c:	2300      	movs	r3, #0
 801719e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d10d      	bne.n	80171ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d14d      	bne.n	8017252 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	689b      	ldr	r3, [r3, #8]
 80171ba:	4618      	mov	r0, r3
 80171bc:	f000 ff4c 	bl	8018058 <xTaskPriorityDisinherit>
 80171c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	2200      	movs	r2, #0
 80171c6:	609a      	str	r2, [r3, #8]
 80171c8:	e043      	b.n	8017252 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d119      	bne.n	8017204 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	6858      	ldr	r0, [r3, #4]
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171d8:	461a      	mov	r2, r3
 80171da:	68b9      	ldr	r1, [r7, #8]
 80171dc:	f003 fa66 	bl	801a6ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	685a      	ldr	r2, [r3, #4]
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171e8:	441a      	add	r2, r3
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	685a      	ldr	r2, [r3, #4]
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	689b      	ldr	r3, [r3, #8]
 80171f6:	429a      	cmp	r2, r3
 80171f8:	d32b      	bcc.n	8017252 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	681a      	ldr	r2, [r3, #0]
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	605a      	str	r2, [r3, #4]
 8017202:	e026      	b.n	8017252 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	68d8      	ldr	r0, [r3, #12]
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801720c:	461a      	mov	r2, r3
 801720e:	68b9      	ldr	r1, [r7, #8]
 8017210:	f003 fa4c 	bl	801a6ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	68da      	ldr	r2, [r3, #12]
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801721c:	425b      	negs	r3, r3
 801721e:	441a      	add	r2, r3
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	68da      	ldr	r2, [r3, #12]
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	429a      	cmp	r2, r3
 801722e:	d207      	bcs.n	8017240 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	689a      	ldr	r2, [r3, #8]
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017238:	425b      	negs	r3, r3
 801723a:	441a      	add	r2, r3
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	2b02      	cmp	r3, #2
 8017244:	d105      	bne.n	8017252 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017246:	693b      	ldr	r3, [r7, #16]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d002      	beq.n	8017252 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801724c:	693b      	ldr	r3, [r7, #16]
 801724e:	3b01      	subs	r3, #1
 8017250:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017252:	693b      	ldr	r3, [r7, #16]
 8017254:	1c5a      	adds	r2, r3, #1
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801725a:	697b      	ldr	r3, [r7, #20]
}
 801725c:	4618      	mov	r0, r3
 801725e:	3718      	adds	r7, #24
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}

08017264 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b082      	sub	sp, #8
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
 801726c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017272:	2b00      	cmp	r3, #0
 8017274:	d018      	beq.n	80172a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	68da      	ldr	r2, [r3, #12]
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801727e:	441a      	add	r2, r3
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	68da      	ldr	r2, [r3, #12]
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	689b      	ldr	r3, [r3, #8]
 801728c:	429a      	cmp	r2, r3
 801728e:	d303      	bcc.n	8017298 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	681a      	ldr	r2, [r3, #0]
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	68d9      	ldr	r1, [r3, #12]
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172a0:	461a      	mov	r2, r3
 80172a2:	6838      	ldr	r0, [r7, #0]
 80172a4:	f003 fa02 	bl	801a6ac <memcpy>
	}
}
 80172a8:	bf00      	nop
 80172aa:	3708      	adds	r7, #8
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}

080172b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b084      	sub	sp, #16
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80172b8:	f001 fac0 	bl	801883c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80172c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80172c4:	e011      	b.n	80172ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d012      	beq.n	80172f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	3324      	adds	r3, #36	; 0x24
 80172d2:	4618      	mov	r0, r3
 80172d4:	f000 fcdc 	bl	8017c90 <xTaskRemoveFromEventList>
 80172d8:	4603      	mov	r3, r0
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d001      	beq.n	80172e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80172de:	f000 fdb7 	bl	8017e50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80172e2:	7bfb      	ldrb	r3, [r7, #15]
 80172e4:	3b01      	subs	r3, #1
 80172e6:	b2db      	uxtb	r3, r3
 80172e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80172ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	dce9      	bgt.n	80172c6 <prvUnlockQueue+0x16>
 80172f2:	e000      	b.n	80172f6 <prvUnlockQueue+0x46>
					break;
 80172f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	22ff      	movs	r2, #255	; 0xff
 80172fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80172fe:	f001 fad1 	bl	80188a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017302:	f001 fa9b 	bl	801883c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801730c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801730e:	e011      	b.n	8017334 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	691b      	ldr	r3, [r3, #16]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d012      	beq.n	801733e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	3310      	adds	r3, #16
 801731c:	4618      	mov	r0, r3
 801731e:	f000 fcb7 	bl	8017c90 <xTaskRemoveFromEventList>
 8017322:	4603      	mov	r3, r0
 8017324:	2b00      	cmp	r3, #0
 8017326:	d001      	beq.n	801732c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017328:	f000 fd92 	bl	8017e50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801732c:	7bbb      	ldrb	r3, [r7, #14]
 801732e:	3b01      	subs	r3, #1
 8017330:	b2db      	uxtb	r3, r3
 8017332:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017338:	2b00      	cmp	r3, #0
 801733a:	dce9      	bgt.n	8017310 <prvUnlockQueue+0x60>
 801733c:	e000      	b.n	8017340 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801733e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	22ff      	movs	r2, #255	; 0xff
 8017344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017348:	f001 faac 	bl	80188a4 <vPortExitCritical>
}
 801734c:	bf00      	nop
 801734e:	3710      	adds	r7, #16
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}

08017354 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b084      	sub	sp, #16
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801735c:	f001 fa6e 	bl	801883c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017364:	2b00      	cmp	r3, #0
 8017366:	d102      	bne.n	801736e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017368:	2301      	movs	r3, #1
 801736a:	60fb      	str	r3, [r7, #12]
 801736c:	e001      	b.n	8017372 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801736e:	2300      	movs	r3, #0
 8017370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017372:	f001 fa97 	bl	80188a4 <vPortExitCritical>

	return xReturn;
 8017376:	68fb      	ldr	r3, [r7, #12]
}
 8017378:	4618      	mov	r0, r3
 801737a:	3710      	adds	r7, #16
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b084      	sub	sp, #16
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017388:	f001 fa58 	bl	801883c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017394:	429a      	cmp	r2, r3
 8017396:	d102      	bne.n	801739e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017398:	2301      	movs	r3, #1
 801739a:	60fb      	str	r3, [r7, #12]
 801739c:	e001      	b.n	80173a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801739e:	2300      	movs	r3, #0
 80173a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80173a2:	f001 fa7f 	bl	80188a4 <vPortExitCritical>

	return xReturn;
 80173a6:	68fb      	ldr	r3, [r7, #12]
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	3710      	adds	r7, #16
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}

080173b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b08e      	sub	sp, #56	; 0x38
 80173b4:	af04      	add	r7, sp, #16
 80173b6:	60f8      	str	r0, [r7, #12]
 80173b8:	60b9      	str	r1, [r7, #8]
 80173ba:	607a      	str	r2, [r7, #4]
 80173bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80173be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d10c      	bne.n	80173de <xTaskCreateStatic+0x2e>
	__asm volatile
 80173c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173c8:	b672      	cpsid	i
 80173ca:	f383 8811 	msr	BASEPRI, r3
 80173ce:	f3bf 8f6f 	isb	sy
 80173d2:	f3bf 8f4f 	dsb	sy
 80173d6:	b662      	cpsie	i
 80173d8:	623b      	str	r3, [r7, #32]
}
 80173da:	bf00      	nop
 80173dc:	e7fe      	b.n	80173dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80173de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d10c      	bne.n	80173fe <xTaskCreateStatic+0x4e>
	__asm volatile
 80173e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173e8:	b672      	cpsid	i
 80173ea:	f383 8811 	msr	BASEPRI, r3
 80173ee:	f3bf 8f6f 	isb	sy
 80173f2:	f3bf 8f4f 	dsb	sy
 80173f6:	b662      	cpsie	i
 80173f8:	61fb      	str	r3, [r7, #28]
}
 80173fa:	bf00      	nop
 80173fc:	e7fe      	b.n	80173fc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80173fe:	2358      	movs	r3, #88	; 0x58
 8017400:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017402:	693b      	ldr	r3, [r7, #16]
 8017404:	2b58      	cmp	r3, #88	; 0x58
 8017406:	d00c      	beq.n	8017422 <xTaskCreateStatic+0x72>
	__asm volatile
 8017408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801740c:	b672      	cpsid	i
 801740e:	f383 8811 	msr	BASEPRI, r3
 8017412:	f3bf 8f6f 	isb	sy
 8017416:	f3bf 8f4f 	dsb	sy
 801741a:	b662      	cpsie	i
 801741c:	61bb      	str	r3, [r7, #24]
}
 801741e:	bf00      	nop
 8017420:	e7fe      	b.n	8017420 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017422:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017426:	2b00      	cmp	r3, #0
 8017428:	d01e      	beq.n	8017468 <xTaskCreateStatic+0xb8>
 801742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801742c:	2b00      	cmp	r3, #0
 801742e:	d01b      	beq.n	8017468 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017432:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017438:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801743c:	2202      	movs	r2, #2
 801743e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017442:	2300      	movs	r3, #0
 8017444:	9303      	str	r3, [sp, #12]
 8017446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017448:	9302      	str	r3, [sp, #8]
 801744a:	f107 0314 	add.w	r3, r7, #20
 801744e:	9301      	str	r3, [sp, #4]
 8017450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017452:	9300      	str	r3, [sp, #0]
 8017454:	683b      	ldr	r3, [r7, #0]
 8017456:	687a      	ldr	r2, [r7, #4]
 8017458:	68b9      	ldr	r1, [r7, #8]
 801745a:	68f8      	ldr	r0, [r7, #12]
 801745c:	f000 f850 	bl	8017500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017462:	f000 f8e1 	bl	8017628 <prvAddNewTaskToReadyList>
 8017466:	e001      	b.n	801746c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8017468:	2300      	movs	r3, #0
 801746a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801746c:	697b      	ldr	r3, [r7, #20]
	}
 801746e:	4618      	mov	r0, r3
 8017470:	3728      	adds	r7, #40	; 0x28
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}

08017476 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017476:	b580      	push	{r7, lr}
 8017478:	b08c      	sub	sp, #48	; 0x30
 801747a:	af04      	add	r7, sp, #16
 801747c:	60f8      	str	r0, [r7, #12]
 801747e:	60b9      	str	r1, [r7, #8]
 8017480:	603b      	str	r3, [r7, #0]
 8017482:	4613      	mov	r3, r2
 8017484:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017486:	88fb      	ldrh	r3, [r7, #6]
 8017488:	009b      	lsls	r3, r3, #2
 801748a:	4618      	mov	r0, r3
 801748c:	f001 fb02 	bl	8018a94 <pvPortMalloc>
 8017490:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d00e      	beq.n	80174b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017498:	2058      	movs	r0, #88	; 0x58
 801749a:	f001 fafb 	bl	8018a94 <pvPortMalloc>
 801749e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80174a0:	69fb      	ldr	r3, [r7, #28]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d003      	beq.n	80174ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80174a6:	69fb      	ldr	r3, [r7, #28]
 80174a8:	697a      	ldr	r2, [r7, #20]
 80174aa:	631a      	str	r2, [r3, #48]	; 0x30
 80174ac:	e005      	b.n	80174ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80174ae:	6978      	ldr	r0, [r7, #20]
 80174b0:	f001 fbc0 	bl	8018c34 <vPortFree>
 80174b4:	e001      	b.n	80174ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80174b6:	2300      	movs	r3, #0
 80174b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d017      	beq.n	80174f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80174c0:	69fb      	ldr	r3, [r7, #28]
 80174c2:	2200      	movs	r2, #0
 80174c4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80174c8:	88fa      	ldrh	r2, [r7, #6]
 80174ca:	2300      	movs	r3, #0
 80174cc:	9303      	str	r3, [sp, #12]
 80174ce:	69fb      	ldr	r3, [r7, #28]
 80174d0:	9302      	str	r3, [sp, #8]
 80174d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d4:	9301      	str	r3, [sp, #4]
 80174d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d8:	9300      	str	r3, [sp, #0]
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	68b9      	ldr	r1, [r7, #8]
 80174de:	68f8      	ldr	r0, [r7, #12]
 80174e0:	f000 f80e 	bl	8017500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80174e4:	69f8      	ldr	r0, [r7, #28]
 80174e6:	f000 f89f 	bl	8017628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80174ea:	2301      	movs	r3, #1
 80174ec:	61bb      	str	r3, [r7, #24]
 80174ee:	e002      	b.n	80174f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80174f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80174f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80174f6:	69bb      	ldr	r3, [r7, #24]
	}
 80174f8:	4618      	mov	r0, r3
 80174fa:	3720      	adds	r7, #32
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}

08017500 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b088      	sub	sp, #32
 8017504:	af00      	add	r7, sp, #0
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	607a      	str	r2, [r7, #4]
 801750c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017510:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	009b      	lsls	r3, r3, #2
 8017516:	461a      	mov	r2, r3
 8017518:	21a5      	movs	r1, #165	; 0xa5
 801751a:	f003 f8d5 	bl	801a6c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017522:	6879      	ldr	r1, [r7, #4]
 8017524:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017528:	440b      	add	r3, r1
 801752a:	009b      	lsls	r3, r3, #2
 801752c:	4413      	add	r3, r2
 801752e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017530:	69bb      	ldr	r3, [r7, #24]
 8017532:	f023 0307 	bic.w	r3, r3, #7
 8017536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017538:	69bb      	ldr	r3, [r7, #24]
 801753a:	f003 0307 	and.w	r3, r3, #7
 801753e:	2b00      	cmp	r3, #0
 8017540:	d00c      	beq.n	801755c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8017542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017546:	b672      	cpsid	i
 8017548:	f383 8811 	msr	BASEPRI, r3
 801754c:	f3bf 8f6f 	isb	sy
 8017550:	f3bf 8f4f 	dsb	sy
 8017554:	b662      	cpsie	i
 8017556:	617b      	str	r3, [r7, #20]
}
 8017558:	bf00      	nop
 801755a:	e7fe      	b.n	801755a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d01f      	beq.n	80175a2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017562:	2300      	movs	r3, #0
 8017564:	61fb      	str	r3, [r7, #28]
 8017566:	e012      	b.n	801758e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017568:	68ba      	ldr	r2, [r7, #8]
 801756a:	69fb      	ldr	r3, [r7, #28]
 801756c:	4413      	add	r3, r2
 801756e:	7819      	ldrb	r1, [r3, #0]
 8017570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017572:	69fb      	ldr	r3, [r7, #28]
 8017574:	4413      	add	r3, r2
 8017576:	3334      	adds	r3, #52	; 0x34
 8017578:	460a      	mov	r2, r1
 801757a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801757c:	68ba      	ldr	r2, [r7, #8]
 801757e:	69fb      	ldr	r3, [r7, #28]
 8017580:	4413      	add	r3, r2
 8017582:	781b      	ldrb	r3, [r3, #0]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d006      	beq.n	8017596 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017588:	69fb      	ldr	r3, [r7, #28]
 801758a:	3301      	adds	r3, #1
 801758c:	61fb      	str	r3, [r7, #28]
 801758e:	69fb      	ldr	r3, [r7, #28]
 8017590:	2b0f      	cmp	r3, #15
 8017592:	d9e9      	bls.n	8017568 <prvInitialiseNewTask+0x68>
 8017594:	e000      	b.n	8017598 <prvInitialiseNewTask+0x98>
			{
				break;
 8017596:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801759a:	2200      	movs	r2, #0
 801759c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80175a0:	e003      	b.n	80175aa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80175a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a4:	2200      	movs	r2, #0
 80175a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80175aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ac:	2b06      	cmp	r3, #6
 80175ae:	d901      	bls.n	80175b4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80175b0:	2306      	movs	r3, #6
 80175b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80175b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80175ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80175c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c2:	2200      	movs	r2, #0
 80175c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80175c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c8:	3304      	adds	r3, #4
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7ff f8ec 	bl	80167a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80175d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175d2:	3318      	adds	r3, #24
 80175d4:	4618      	mov	r0, r3
 80175d6:	f7ff f8e7 	bl	80167a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80175da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80175e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e2:	f1c3 0207 	rsb	r2, r3, #7
 80175e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80175ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80175f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f2:	2200      	movs	r2, #0
 80175f4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80175f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f8:	2200      	movs	r2, #0
 80175fa:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80175fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175fe:	2200      	movs	r2, #0
 8017600:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017604:	683a      	ldr	r2, [r7, #0]
 8017606:	68f9      	ldr	r1, [r7, #12]
 8017608:	69b8      	ldr	r0, [r7, #24]
 801760a:	f001 f80d 	bl	8018628 <pxPortInitialiseStack>
 801760e:	4602      	mov	r2, r0
 8017610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017612:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017616:	2b00      	cmp	r3, #0
 8017618:	d002      	beq.n	8017620 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801761c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801761e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017620:	bf00      	nop
 8017622:	3720      	adds	r7, #32
 8017624:	46bd      	mov	sp, r7
 8017626:	bd80      	pop	{r7, pc}

08017628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017630:	f001 f904 	bl	801883c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017634:	4b2a      	ldr	r3, [pc, #168]	; (80176e0 <prvAddNewTaskToReadyList+0xb8>)
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	3301      	adds	r3, #1
 801763a:	4a29      	ldr	r2, [pc, #164]	; (80176e0 <prvAddNewTaskToReadyList+0xb8>)
 801763c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801763e:	4b29      	ldr	r3, [pc, #164]	; (80176e4 <prvAddNewTaskToReadyList+0xbc>)
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d109      	bne.n	801765a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017646:	4a27      	ldr	r2, [pc, #156]	; (80176e4 <prvAddNewTaskToReadyList+0xbc>)
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801764c:	4b24      	ldr	r3, [pc, #144]	; (80176e0 <prvAddNewTaskToReadyList+0xb8>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	2b01      	cmp	r3, #1
 8017652:	d110      	bne.n	8017676 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017654:	f000 fc22 	bl	8017e9c <prvInitialiseTaskLists>
 8017658:	e00d      	b.n	8017676 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801765a:	4b23      	ldr	r3, [pc, #140]	; (80176e8 <prvAddNewTaskToReadyList+0xc0>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d109      	bne.n	8017676 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017662:	4b20      	ldr	r3, [pc, #128]	; (80176e4 <prvAddNewTaskToReadyList+0xbc>)
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801766c:	429a      	cmp	r2, r3
 801766e:	d802      	bhi.n	8017676 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017670:	4a1c      	ldr	r2, [pc, #112]	; (80176e4 <prvAddNewTaskToReadyList+0xbc>)
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017676:	4b1d      	ldr	r3, [pc, #116]	; (80176ec <prvAddNewTaskToReadyList+0xc4>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	3301      	adds	r3, #1
 801767c:	4a1b      	ldr	r2, [pc, #108]	; (80176ec <prvAddNewTaskToReadyList+0xc4>)
 801767e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017684:	2201      	movs	r2, #1
 8017686:	409a      	lsls	r2, r3
 8017688:	4b19      	ldr	r3, [pc, #100]	; (80176f0 <prvAddNewTaskToReadyList+0xc8>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	4313      	orrs	r3, r2
 801768e:	4a18      	ldr	r2, [pc, #96]	; (80176f0 <prvAddNewTaskToReadyList+0xc8>)
 8017690:	6013      	str	r3, [r2, #0]
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017696:	4613      	mov	r3, r2
 8017698:	009b      	lsls	r3, r3, #2
 801769a:	4413      	add	r3, r2
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	4a15      	ldr	r2, [pc, #84]	; (80176f4 <prvAddNewTaskToReadyList+0xcc>)
 80176a0:	441a      	add	r2, r3
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	3304      	adds	r3, #4
 80176a6:	4619      	mov	r1, r3
 80176a8:	4610      	mov	r0, r2
 80176aa:	f7ff f88a 	bl	80167c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80176ae:	f001 f8f9 	bl	80188a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80176b2:	4b0d      	ldr	r3, [pc, #52]	; (80176e8 <prvAddNewTaskToReadyList+0xc0>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d00e      	beq.n	80176d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80176ba:	4b0a      	ldr	r3, [pc, #40]	; (80176e4 <prvAddNewTaskToReadyList+0xbc>)
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d207      	bcs.n	80176d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80176c8:	4b0b      	ldr	r3, [pc, #44]	; (80176f8 <prvAddNewTaskToReadyList+0xd0>)
 80176ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176ce:	601a      	str	r2, [r3, #0]
 80176d0:	f3bf 8f4f 	dsb	sy
 80176d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80176d8:	bf00      	nop
 80176da:	3708      	adds	r7, #8
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}
 80176e0:	200004e4 	.word	0x200004e4
 80176e4:	200003e4 	.word	0x200003e4
 80176e8:	200004f0 	.word	0x200004f0
 80176ec:	20000500 	.word	0x20000500
 80176f0:	200004ec 	.word	0x200004ec
 80176f4:	200003e8 	.word	0x200003e8
 80176f8:	e000ed04 	.word	0xe000ed04

080176fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b084      	sub	sp, #16
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017704:	2300      	movs	r3, #0
 8017706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d019      	beq.n	8017742 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801770e:	4b14      	ldr	r3, [pc, #80]	; (8017760 <vTaskDelay+0x64>)
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d00c      	beq.n	8017730 <vTaskDelay+0x34>
	__asm volatile
 8017716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801771a:	b672      	cpsid	i
 801771c:	f383 8811 	msr	BASEPRI, r3
 8017720:	f3bf 8f6f 	isb	sy
 8017724:	f3bf 8f4f 	dsb	sy
 8017728:	b662      	cpsie	i
 801772a:	60bb      	str	r3, [r7, #8]
}
 801772c:	bf00      	nop
 801772e:	e7fe      	b.n	801772e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8017730:	f000 f87e 	bl	8017830 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017734:	2100      	movs	r1, #0
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	f000 ff10 	bl	801855c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801773c:	f000 f886 	bl	801784c <xTaskResumeAll>
 8017740:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d107      	bne.n	8017758 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8017748:	4b06      	ldr	r3, [pc, #24]	; (8017764 <vTaskDelay+0x68>)
 801774a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801774e:	601a      	str	r2, [r3, #0]
 8017750:	f3bf 8f4f 	dsb	sy
 8017754:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017758:	bf00      	nop
 801775a:	3710      	adds	r7, #16
 801775c:	46bd      	mov	sp, r7
 801775e:	bd80      	pop	{r7, pc}
 8017760:	2000050c 	.word	0x2000050c
 8017764:	e000ed04 	.word	0xe000ed04

08017768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b08a      	sub	sp, #40	; 0x28
 801776c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801776e:	2300      	movs	r3, #0
 8017770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017772:	2300      	movs	r3, #0
 8017774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017776:	463a      	mov	r2, r7
 8017778:	1d39      	adds	r1, r7, #4
 801777a:	f107 0308 	add.w	r3, r7, #8
 801777e:	4618      	mov	r0, r3
 8017780:	f7e9 feae 	bl	80014e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017784:	6839      	ldr	r1, [r7, #0]
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	68ba      	ldr	r2, [r7, #8]
 801778a:	9202      	str	r2, [sp, #8]
 801778c:	9301      	str	r3, [sp, #4]
 801778e:	2300      	movs	r3, #0
 8017790:	9300      	str	r3, [sp, #0]
 8017792:	2300      	movs	r3, #0
 8017794:	460a      	mov	r2, r1
 8017796:	4920      	ldr	r1, [pc, #128]	; (8017818 <vTaskStartScheduler+0xb0>)
 8017798:	4820      	ldr	r0, [pc, #128]	; (801781c <vTaskStartScheduler+0xb4>)
 801779a:	f7ff fe09 	bl	80173b0 <xTaskCreateStatic>
 801779e:	4603      	mov	r3, r0
 80177a0:	4a1f      	ldr	r2, [pc, #124]	; (8017820 <vTaskStartScheduler+0xb8>)
 80177a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80177a4:	4b1e      	ldr	r3, [pc, #120]	; (8017820 <vTaskStartScheduler+0xb8>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d002      	beq.n	80177b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80177ac:	2301      	movs	r3, #1
 80177ae:	617b      	str	r3, [r7, #20]
 80177b0:	e001      	b.n	80177b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80177b2:	2300      	movs	r3, #0
 80177b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80177b6:	697b      	ldr	r3, [r7, #20]
 80177b8:	2b01      	cmp	r3, #1
 80177ba:	d118      	bne.n	80177ee <vTaskStartScheduler+0x86>
	__asm volatile
 80177bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177c0:	b672      	cpsid	i
 80177c2:	f383 8811 	msr	BASEPRI, r3
 80177c6:	f3bf 8f6f 	isb	sy
 80177ca:	f3bf 8f4f 	dsb	sy
 80177ce:	b662      	cpsie	i
 80177d0:	613b      	str	r3, [r7, #16]
}
 80177d2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80177d4:	4b13      	ldr	r3, [pc, #76]	; (8017824 <vTaskStartScheduler+0xbc>)
 80177d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80177da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80177dc:	4b12      	ldr	r3, [pc, #72]	; (8017828 <vTaskStartScheduler+0xc0>)
 80177de:	2201      	movs	r2, #1
 80177e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80177e2:	4b12      	ldr	r3, [pc, #72]	; (801782c <vTaskStartScheduler+0xc4>)
 80177e4:	2200      	movs	r2, #0
 80177e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80177e8:	f000 ffaa 	bl	8018740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80177ec:	e010      	b.n	8017810 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80177f4:	d10c      	bne.n	8017810 <vTaskStartScheduler+0xa8>
	__asm volatile
 80177f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177fa:	b672      	cpsid	i
 80177fc:	f383 8811 	msr	BASEPRI, r3
 8017800:	f3bf 8f6f 	isb	sy
 8017804:	f3bf 8f4f 	dsb	sy
 8017808:	b662      	cpsie	i
 801780a:	60fb      	str	r3, [r7, #12]
}
 801780c:	bf00      	nop
 801780e:	e7fe      	b.n	801780e <vTaskStartScheduler+0xa6>
}
 8017810:	bf00      	nop
 8017812:	3718      	adds	r7, #24
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}
 8017818:	0801c210 	.word	0x0801c210
 801781c:	08017e69 	.word	0x08017e69
 8017820:	20000508 	.word	0x20000508
 8017824:	20000504 	.word	0x20000504
 8017828:	200004f0 	.word	0x200004f0
 801782c:	200004e8 	.word	0x200004e8

08017830 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017830:	b480      	push	{r7}
 8017832:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8017834:	4b04      	ldr	r3, [pc, #16]	; (8017848 <vTaskSuspendAll+0x18>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	3301      	adds	r3, #1
 801783a:	4a03      	ldr	r2, [pc, #12]	; (8017848 <vTaskSuspendAll+0x18>)
 801783c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801783e:	bf00      	nop
 8017840:	46bd      	mov	sp, r7
 8017842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017846:	4770      	bx	lr
 8017848:	2000050c 	.word	0x2000050c

0801784c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b084      	sub	sp, #16
 8017850:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017852:	2300      	movs	r3, #0
 8017854:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017856:	2300      	movs	r3, #0
 8017858:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801785a:	4b42      	ldr	r3, [pc, #264]	; (8017964 <xTaskResumeAll+0x118>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d10c      	bne.n	801787c <xTaskResumeAll+0x30>
	__asm volatile
 8017862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017866:	b672      	cpsid	i
 8017868:	f383 8811 	msr	BASEPRI, r3
 801786c:	f3bf 8f6f 	isb	sy
 8017870:	f3bf 8f4f 	dsb	sy
 8017874:	b662      	cpsie	i
 8017876:	603b      	str	r3, [r7, #0]
}
 8017878:	bf00      	nop
 801787a:	e7fe      	b.n	801787a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801787c:	f000 ffde 	bl	801883c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017880:	4b38      	ldr	r3, [pc, #224]	; (8017964 <xTaskResumeAll+0x118>)
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	3b01      	subs	r3, #1
 8017886:	4a37      	ldr	r2, [pc, #220]	; (8017964 <xTaskResumeAll+0x118>)
 8017888:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801788a:	4b36      	ldr	r3, [pc, #216]	; (8017964 <xTaskResumeAll+0x118>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d161      	bne.n	8017956 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017892:	4b35      	ldr	r3, [pc, #212]	; (8017968 <xTaskResumeAll+0x11c>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d05d      	beq.n	8017956 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801789a:	e02e      	b.n	80178fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801789c:	4b33      	ldr	r3, [pc, #204]	; (801796c <xTaskResumeAll+0x120>)
 801789e:	68db      	ldr	r3, [r3, #12]
 80178a0:	68db      	ldr	r3, [r3, #12]
 80178a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	3318      	adds	r3, #24
 80178a8:	4618      	mov	r0, r3
 80178aa:	f7fe ffe7 	bl	801687c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	3304      	adds	r3, #4
 80178b2:	4618      	mov	r0, r3
 80178b4:	f7fe ffe2 	bl	801687c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178bc:	2201      	movs	r2, #1
 80178be:	409a      	lsls	r2, r3
 80178c0:	4b2b      	ldr	r3, [pc, #172]	; (8017970 <xTaskResumeAll+0x124>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	4313      	orrs	r3, r2
 80178c6:	4a2a      	ldr	r2, [pc, #168]	; (8017970 <xTaskResumeAll+0x124>)
 80178c8:	6013      	str	r3, [r2, #0]
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178ce:	4613      	mov	r3, r2
 80178d0:	009b      	lsls	r3, r3, #2
 80178d2:	4413      	add	r3, r2
 80178d4:	009b      	lsls	r3, r3, #2
 80178d6:	4a27      	ldr	r2, [pc, #156]	; (8017974 <xTaskResumeAll+0x128>)
 80178d8:	441a      	add	r2, r3
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	3304      	adds	r3, #4
 80178de:	4619      	mov	r1, r3
 80178e0:	4610      	mov	r0, r2
 80178e2:	f7fe ff6e 	bl	80167c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178ea:	4b23      	ldr	r3, [pc, #140]	; (8017978 <xTaskResumeAll+0x12c>)
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178f0:	429a      	cmp	r2, r3
 80178f2:	d302      	bcc.n	80178fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80178f4:	4b21      	ldr	r3, [pc, #132]	; (801797c <xTaskResumeAll+0x130>)
 80178f6:	2201      	movs	r2, #1
 80178f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80178fa:	4b1c      	ldr	r3, [pc, #112]	; (801796c <xTaskResumeAll+0x120>)
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d1cc      	bne.n	801789c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d001      	beq.n	801790c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017908:	f000 fb68 	bl	8017fdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801790c:	4b1c      	ldr	r3, [pc, #112]	; (8017980 <xTaskResumeAll+0x134>)
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d010      	beq.n	801793a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017918:	f000 f858 	bl	80179cc <xTaskIncrementTick>
 801791c:	4603      	mov	r3, r0
 801791e:	2b00      	cmp	r3, #0
 8017920:	d002      	beq.n	8017928 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8017922:	4b16      	ldr	r3, [pc, #88]	; (801797c <xTaskResumeAll+0x130>)
 8017924:	2201      	movs	r2, #1
 8017926:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	3b01      	subs	r3, #1
 801792c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d1f1      	bne.n	8017918 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8017934:	4b12      	ldr	r3, [pc, #72]	; (8017980 <xTaskResumeAll+0x134>)
 8017936:	2200      	movs	r2, #0
 8017938:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801793a:	4b10      	ldr	r3, [pc, #64]	; (801797c <xTaskResumeAll+0x130>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d009      	beq.n	8017956 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017942:	2301      	movs	r3, #1
 8017944:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017946:	4b0f      	ldr	r3, [pc, #60]	; (8017984 <xTaskResumeAll+0x138>)
 8017948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801794c:	601a      	str	r2, [r3, #0]
 801794e:	f3bf 8f4f 	dsb	sy
 8017952:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017956:	f000 ffa5 	bl	80188a4 <vPortExitCritical>

	return xAlreadyYielded;
 801795a:	68bb      	ldr	r3, [r7, #8]
}
 801795c:	4618      	mov	r0, r3
 801795e:	3710      	adds	r7, #16
 8017960:	46bd      	mov	sp, r7
 8017962:	bd80      	pop	{r7, pc}
 8017964:	2000050c 	.word	0x2000050c
 8017968:	200004e4 	.word	0x200004e4
 801796c:	200004a4 	.word	0x200004a4
 8017970:	200004ec 	.word	0x200004ec
 8017974:	200003e8 	.word	0x200003e8
 8017978:	200003e4 	.word	0x200003e4
 801797c:	200004f8 	.word	0x200004f8
 8017980:	200004f4 	.word	0x200004f4
 8017984:	e000ed04 	.word	0xe000ed04

08017988 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017988:	b480      	push	{r7}
 801798a:	b083      	sub	sp, #12
 801798c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801798e:	4b05      	ldr	r3, [pc, #20]	; (80179a4 <xTaskGetTickCount+0x1c>)
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017994:	687b      	ldr	r3, [r7, #4]
}
 8017996:	4618      	mov	r0, r3
 8017998:	370c      	adds	r7, #12
 801799a:	46bd      	mov	sp, r7
 801799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a0:	4770      	bx	lr
 80179a2:	bf00      	nop
 80179a4:	200004e8 	.word	0x200004e8

080179a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b082      	sub	sp, #8
 80179ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80179ae:	f001 f82d 	bl	8018a0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80179b2:	2300      	movs	r3, #0
 80179b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80179b6:	4b04      	ldr	r3, [pc, #16]	; (80179c8 <xTaskGetTickCountFromISR+0x20>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80179bc:	683b      	ldr	r3, [r7, #0]
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3708      	adds	r7, #8
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}
 80179c6:	bf00      	nop
 80179c8:	200004e8 	.word	0x200004e8

080179cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b086      	sub	sp, #24
 80179d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80179d2:	2300      	movs	r3, #0
 80179d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80179d6:	4b4f      	ldr	r3, [pc, #316]	; (8017b14 <xTaskIncrementTick+0x148>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	f040 808a 	bne.w	8017af4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80179e0:	4b4d      	ldr	r3, [pc, #308]	; (8017b18 <xTaskIncrementTick+0x14c>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	3301      	adds	r3, #1
 80179e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80179e8:	4a4b      	ldr	r2, [pc, #300]	; (8017b18 <xTaskIncrementTick+0x14c>)
 80179ea:	693b      	ldr	r3, [r7, #16]
 80179ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80179ee:	693b      	ldr	r3, [r7, #16]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d122      	bne.n	8017a3a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80179f4:	4b49      	ldr	r3, [pc, #292]	; (8017b1c <xTaskIncrementTick+0x150>)
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d00c      	beq.n	8017a18 <xTaskIncrementTick+0x4c>
	__asm volatile
 80179fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a02:	b672      	cpsid	i
 8017a04:	f383 8811 	msr	BASEPRI, r3
 8017a08:	f3bf 8f6f 	isb	sy
 8017a0c:	f3bf 8f4f 	dsb	sy
 8017a10:	b662      	cpsie	i
 8017a12:	603b      	str	r3, [r7, #0]
}
 8017a14:	bf00      	nop
 8017a16:	e7fe      	b.n	8017a16 <xTaskIncrementTick+0x4a>
 8017a18:	4b40      	ldr	r3, [pc, #256]	; (8017b1c <xTaskIncrementTick+0x150>)
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	60fb      	str	r3, [r7, #12]
 8017a1e:	4b40      	ldr	r3, [pc, #256]	; (8017b20 <xTaskIncrementTick+0x154>)
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	4a3e      	ldr	r2, [pc, #248]	; (8017b1c <xTaskIncrementTick+0x150>)
 8017a24:	6013      	str	r3, [r2, #0]
 8017a26:	4a3e      	ldr	r2, [pc, #248]	; (8017b20 <xTaskIncrementTick+0x154>)
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	6013      	str	r3, [r2, #0]
 8017a2c:	4b3d      	ldr	r3, [pc, #244]	; (8017b24 <xTaskIncrementTick+0x158>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	3301      	adds	r3, #1
 8017a32:	4a3c      	ldr	r2, [pc, #240]	; (8017b24 <xTaskIncrementTick+0x158>)
 8017a34:	6013      	str	r3, [r2, #0]
 8017a36:	f000 fad1 	bl	8017fdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017a3a:	4b3b      	ldr	r3, [pc, #236]	; (8017b28 <xTaskIncrementTick+0x15c>)
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	693a      	ldr	r2, [r7, #16]
 8017a40:	429a      	cmp	r2, r3
 8017a42:	d348      	bcc.n	8017ad6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017a44:	4b35      	ldr	r3, [pc, #212]	; (8017b1c <xTaskIncrementTick+0x150>)
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d104      	bne.n	8017a58 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017a4e:	4b36      	ldr	r3, [pc, #216]	; (8017b28 <xTaskIncrementTick+0x15c>)
 8017a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a54:	601a      	str	r2, [r3, #0]
					break;
 8017a56:	e03e      	b.n	8017ad6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a58:	4b30      	ldr	r3, [pc, #192]	; (8017b1c <xTaskIncrementTick+0x150>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	68db      	ldr	r3, [r3, #12]
 8017a5e:	68db      	ldr	r3, [r3, #12]
 8017a60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017a62:	68bb      	ldr	r3, [r7, #8]
 8017a64:	685b      	ldr	r3, [r3, #4]
 8017a66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017a68:	693a      	ldr	r2, [r7, #16]
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	d203      	bcs.n	8017a78 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017a70:	4a2d      	ldr	r2, [pc, #180]	; (8017b28 <xTaskIncrementTick+0x15c>)
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017a76:	e02e      	b.n	8017ad6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	3304      	adds	r3, #4
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f7fe fefd 	bl	801687c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017a82:	68bb      	ldr	r3, [r7, #8]
 8017a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d004      	beq.n	8017a94 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017a8a:	68bb      	ldr	r3, [r7, #8]
 8017a8c:	3318      	adds	r3, #24
 8017a8e:	4618      	mov	r0, r3
 8017a90:	f7fe fef4 	bl	801687c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a98:	2201      	movs	r2, #1
 8017a9a:	409a      	lsls	r2, r3
 8017a9c:	4b23      	ldr	r3, [pc, #140]	; (8017b2c <xTaskIncrementTick+0x160>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	4313      	orrs	r3, r2
 8017aa2:	4a22      	ldr	r2, [pc, #136]	; (8017b2c <xTaskIncrementTick+0x160>)
 8017aa4:	6013      	str	r3, [r2, #0]
 8017aa6:	68bb      	ldr	r3, [r7, #8]
 8017aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017aaa:	4613      	mov	r3, r2
 8017aac:	009b      	lsls	r3, r3, #2
 8017aae:	4413      	add	r3, r2
 8017ab0:	009b      	lsls	r3, r3, #2
 8017ab2:	4a1f      	ldr	r2, [pc, #124]	; (8017b30 <xTaskIncrementTick+0x164>)
 8017ab4:	441a      	add	r2, r3
 8017ab6:	68bb      	ldr	r3, [r7, #8]
 8017ab8:	3304      	adds	r3, #4
 8017aba:	4619      	mov	r1, r3
 8017abc:	4610      	mov	r0, r2
 8017abe:	f7fe fe80 	bl	80167c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ac6:	4b1b      	ldr	r3, [pc, #108]	; (8017b34 <xTaskIncrementTick+0x168>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d3b9      	bcc.n	8017a44 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017ad4:	e7b6      	b.n	8017a44 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017ad6:	4b17      	ldr	r3, [pc, #92]	; (8017b34 <xTaskIncrementTick+0x168>)
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017adc:	4914      	ldr	r1, [pc, #80]	; (8017b30 <xTaskIncrementTick+0x164>)
 8017ade:	4613      	mov	r3, r2
 8017ae0:	009b      	lsls	r3, r3, #2
 8017ae2:	4413      	add	r3, r2
 8017ae4:	009b      	lsls	r3, r3, #2
 8017ae6:	440b      	add	r3, r1
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	2b01      	cmp	r3, #1
 8017aec:	d907      	bls.n	8017afe <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8017aee:	2301      	movs	r3, #1
 8017af0:	617b      	str	r3, [r7, #20]
 8017af2:	e004      	b.n	8017afe <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8017af4:	4b10      	ldr	r3, [pc, #64]	; (8017b38 <xTaskIncrementTick+0x16c>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	3301      	adds	r3, #1
 8017afa:	4a0f      	ldr	r2, [pc, #60]	; (8017b38 <xTaskIncrementTick+0x16c>)
 8017afc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8017afe:	4b0f      	ldr	r3, [pc, #60]	; (8017b3c <xTaskIncrementTick+0x170>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d001      	beq.n	8017b0a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8017b06:	2301      	movs	r3, #1
 8017b08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8017b0a:	697b      	ldr	r3, [r7, #20]
}
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	3718      	adds	r7, #24
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}
 8017b14:	2000050c 	.word	0x2000050c
 8017b18:	200004e8 	.word	0x200004e8
 8017b1c:	2000049c 	.word	0x2000049c
 8017b20:	200004a0 	.word	0x200004a0
 8017b24:	200004fc 	.word	0x200004fc
 8017b28:	20000504 	.word	0x20000504
 8017b2c:	200004ec 	.word	0x200004ec
 8017b30:	200003e8 	.word	0x200003e8
 8017b34:	200003e4 	.word	0x200003e4
 8017b38:	200004f4 	.word	0x200004f4
 8017b3c:	200004f8 	.word	0x200004f8

08017b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b088      	sub	sp, #32
 8017b44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017b46:	4b3a      	ldr	r3, [pc, #232]	; (8017c30 <vTaskSwitchContext+0xf0>)
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d003      	beq.n	8017b56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017b4e:	4b39      	ldr	r3, [pc, #228]	; (8017c34 <vTaskSwitchContext+0xf4>)
 8017b50:	2201      	movs	r2, #1
 8017b52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017b54:	e068      	b.n	8017c28 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8017b56:	4b37      	ldr	r3, [pc, #220]	; (8017c34 <vTaskSwitchContext+0xf4>)
 8017b58:	2200      	movs	r2, #0
 8017b5a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017b5c:	4b36      	ldr	r3, [pc, #216]	; (8017c38 <vTaskSwitchContext+0xf8>)
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b62:	61fb      	str	r3, [r7, #28]
 8017b64:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8017b68:	61bb      	str	r3, [r7, #24]
 8017b6a:	69fb      	ldr	r3, [r7, #28]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	69ba      	ldr	r2, [r7, #24]
 8017b70:	429a      	cmp	r2, r3
 8017b72:	d111      	bne.n	8017b98 <vTaskSwitchContext+0x58>
 8017b74:	69fb      	ldr	r3, [r7, #28]
 8017b76:	3304      	adds	r3, #4
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	69ba      	ldr	r2, [r7, #24]
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	d10b      	bne.n	8017b98 <vTaskSwitchContext+0x58>
 8017b80:	69fb      	ldr	r3, [r7, #28]
 8017b82:	3308      	adds	r3, #8
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	69ba      	ldr	r2, [r7, #24]
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	d105      	bne.n	8017b98 <vTaskSwitchContext+0x58>
 8017b8c:	69fb      	ldr	r3, [r7, #28]
 8017b8e:	330c      	adds	r3, #12
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	69ba      	ldr	r2, [r7, #24]
 8017b94:	429a      	cmp	r2, r3
 8017b96:	d008      	beq.n	8017baa <vTaskSwitchContext+0x6a>
 8017b98:	4b27      	ldr	r3, [pc, #156]	; (8017c38 <vTaskSwitchContext+0xf8>)
 8017b9a:	681a      	ldr	r2, [r3, #0]
 8017b9c:	4b26      	ldr	r3, [pc, #152]	; (8017c38 <vTaskSwitchContext+0xf8>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	3334      	adds	r3, #52	; 0x34
 8017ba2:	4619      	mov	r1, r3
 8017ba4:	4610      	mov	r0, r2
 8017ba6:	f7e9 fc88 	bl	80014ba <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017baa:	4b24      	ldr	r3, [pc, #144]	; (8017c3c <vTaskSwitchContext+0xfc>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	fab3 f383 	clz	r3, r3
 8017bb6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8017bb8:	7afb      	ldrb	r3, [r7, #11]
 8017bba:	f1c3 031f 	rsb	r3, r3, #31
 8017bbe:	617b      	str	r3, [r7, #20]
 8017bc0:	491f      	ldr	r1, [pc, #124]	; (8017c40 <vTaskSwitchContext+0x100>)
 8017bc2:	697a      	ldr	r2, [r7, #20]
 8017bc4:	4613      	mov	r3, r2
 8017bc6:	009b      	lsls	r3, r3, #2
 8017bc8:	4413      	add	r3, r2
 8017bca:	009b      	lsls	r3, r3, #2
 8017bcc:	440b      	add	r3, r1
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d10c      	bne.n	8017bee <vTaskSwitchContext+0xae>
	__asm volatile
 8017bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bd8:	b672      	cpsid	i
 8017bda:	f383 8811 	msr	BASEPRI, r3
 8017bde:	f3bf 8f6f 	isb	sy
 8017be2:	f3bf 8f4f 	dsb	sy
 8017be6:	b662      	cpsie	i
 8017be8:	607b      	str	r3, [r7, #4]
}
 8017bea:	bf00      	nop
 8017bec:	e7fe      	b.n	8017bec <vTaskSwitchContext+0xac>
 8017bee:	697a      	ldr	r2, [r7, #20]
 8017bf0:	4613      	mov	r3, r2
 8017bf2:	009b      	lsls	r3, r3, #2
 8017bf4:	4413      	add	r3, r2
 8017bf6:	009b      	lsls	r3, r3, #2
 8017bf8:	4a11      	ldr	r2, [pc, #68]	; (8017c40 <vTaskSwitchContext+0x100>)
 8017bfa:	4413      	add	r3, r2
 8017bfc:	613b      	str	r3, [r7, #16]
 8017bfe:	693b      	ldr	r3, [r7, #16]
 8017c00:	685b      	ldr	r3, [r3, #4]
 8017c02:	685a      	ldr	r2, [r3, #4]
 8017c04:	693b      	ldr	r3, [r7, #16]
 8017c06:	605a      	str	r2, [r3, #4]
 8017c08:	693b      	ldr	r3, [r7, #16]
 8017c0a:	685a      	ldr	r2, [r3, #4]
 8017c0c:	693b      	ldr	r3, [r7, #16]
 8017c0e:	3308      	adds	r3, #8
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d104      	bne.n	8017c1e <vTaskSwitchContext+0xde>
 8017c14:	693b      	ldr	r3, [r7, #16]
 8017c16:	685b      	ldr	r3, [r3, #4]
 8017c18:	685a      	ldr	r2, [r3, #4]
 8017c1a:	693b      	ldr	r3, [r7, #16]
 8017c1c:	605a      	str	r2, [r3, #4]
 8017c1e:	693b      	ldr	r3, [r7, #16]
 8017c20:	685b      	ldr	r3, [r3, #4]
 8017c22:	68db      	ldr	r3, [r3, #12]
 8017c24:	4a04      	ldr	r2, [pc, #16]	; (8017c38 <vTaskSwitchContext+0xf8>)
 8017c26:	6013      	str	r3, [r2, #0]
}
 8017c28:	bf00      	nop
 8017c2a:	3720      	adds	r7, #32
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}
 8017c30:	2000050c 	.word	0x2000050c
 8017c34:	200004f8 	.word	0x200004f8
 8017c38:	200003e4 	.word	0x200003e4
 8017c3c:	200004ec 	.word	0x200004ec
 8017c40:	200003e8 	.word	0x200003e8

08017c44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b084      	sub	sp, #16
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
 8017c4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d10c      	bne.n	8017c6e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8017c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c58:	b672      	cpsid	i
 8017c5a:	f383 8811 	msr	BASEPRI, r3
 8017c5e:	f3bf 8f6f 	isb	sy
 8017c62:	f3bf 8f4f 	dsb	sy
 8017c66:	b662      	cpsie	i
 8017c68:	60fb      	str	r3, [r7, #12]
}
 8017c6a:	bf00      	nop
 8017c6c:	e7fe      	b.n	8017c6c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017c6e:	4b07      	ldr	r3, [pc, #28]	; (8017c8c <vTaskPlaceOnEventList+0x48>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	3318      	adds	r3, #24
 8017c74:	4619      	mov	r1, r3
 8017c76:	6878      	ldr	r0, [r7, #4]
 8017c78:	f7fe fdc7 	bl	801680a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017c7c:	2101      	movs	r1, #1
 8017c7e:	6838      	ldr	r0, [r7, #0]
 8017c80:	f000 fc6c 	bl	801855c <prvAddCurrentTaskToDelayedList>
}
 8017c84:	bf00      	nop
 8017c86:	3710      	adds	r7, #16
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}
 8017c8c:	200003e4 	.word	0x200003e4

08017c90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b086      	sub	sp, #24
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	68db      	ldr	r3, [r3, #12]
 8017c9c:	68db      	ldr	r3, [r3, #12]
 8017c9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017ca0:	693b      	ldr	r3, [r7, #16]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d10c      	bne.n	8017cc0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8017ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017caa:	b672      	cpsid	i
 8017cac:	f383 8811 	msr	BASEPRI, r3
 8017cb0:	f3bf 8f6f 	isb	sy
 8017cb4:	f3bf 8f4f 	dsb	sy
 8017cb8:	b662      	cpsie	i
 8017cba:	60fb      	str	r3, [r7, #12]
}
 8017cbc:	bf00      	nop
 8017cbe:	e7fe      	b.n	8017cbe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	3318      	adds	r3, #24
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7fe fdd9 	bl	801687c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017cca:	4b1d      	ldr	r3, [pc, #116]	; (8017d40 <xTaskRemoveFromEventList+0xb0>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d11c      	bne.n	8017d0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017cd2:	693b      	ldr	r3, [r7, #16]
 8017cd4:	3304      	adds	r3, #4
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7fe fdd0 	bl	801687c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017cdc:	693b      	ldr	r3, [r7, #16]
 8017cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ce0:	2201      	movs	r2, #1
 8017ce2:	409a      	lsls	r2, r3
 8017ce4:	4b17      	ldr	r3, [pc, #92]	; (8017d44 <xTaskRemoveFromEventList+0xb4>)
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	4313      	orrs	r3, r2
 8017cea:	4a16      	ldr	r2, [pc, #88]	; (8017d44 <xTaskRemoveFromEventList+0xb4>)
 8017cec:	6013      	str	r3, [r2, #0]
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cf2:	4613      	mov	r3, r2
 8017cf4:	009b      	lsls	r3, r3, #2
 8017cf6:	4413      	add	r3, r2
 8017cf8:	009b      	lsls	r3, r3, #2
 8017cfa:	4a13      	ldr	r2, [pc, #76]	; (8017d48 <xTaskRemoveFromEventList+0xb8>)
 8017cfc:	441a      	add	r2, r3
 8017cfe:	693b      	ldr	r3, [r7, #16]
 8017d00:	3304      	adds	r3, #4
 8017d02:	4619      	mov	r1, r3
 8017d04:	4610      	mov	r0, r2
 8017d06:	f7fe fd5c 	bl	80167c2 <vListInsertEnd>
 8017d0a:	e005      	b.n	8017d18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017d0c:	693b      	ldr	r3, [r7, #16]
 8017d0e:	3318      	adds	r3, #24
 8017d10:	4619      	mov	r1, r3
 8017d12:	480e      	ldr	r0, [pc, #56]	; (8017d4c <xTaskRemoveFromEventList+0xbc>)
 8017d14:	f7fe fd55 	bl	80167c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017d18:	693b      	ldr	r3, [r7, #16]
 8017d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d1c:	4b0c      	ldr	r3, [pc, #48]	; (8017d50 <xTaskRemoveFromEventList+0xc0>)
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d905      	bls.n	8017d32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017d26:	2301      	movs	r3, #1
 8017d28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017d2a:	4b0a      	ldr	r3, [pc, #40]	; (8017d54 <xTaskRemoveFromEventList+0xc4>)
 8017d2c:	2201      	movs	r2, #1
 8017d2e:	601a      	str	r2, [r3, #0]
 8017d30:	e001      	b.n	8017d36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8017d32:	2300      	movs	r3, #0
 8017d34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017d36:	697b      	ldr	r3, [r7, #20]
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3718      	adds	r7, #24
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}
 8017d40:	2000050c 	.word	0x2000050c
 8017d44:	200004ec 	.word	0x200004ec
 8017d48:	200003e8 	.word	0x200003e8
 8017d4c:	200004a4 	.word	0x200004a4
 8017d50:	200003e4 	.word	0x200003e4
 8017d54:	200004f8 	.word	0x200004f8

08017d58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017d58:	b480      	push	{r7}
 8017d5a:	b083      	sub	sp, #12
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017d60:	4b06      	ldr	r3, [pc, #24]	; (8017d7c <vTaskInternalSetTimeOutState+0x24>)
 8017d62:	681a      	ldr	r2, [r3, #0]
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017d68:	4b05      	ldr	r3, [pc, #20]	; (8017d80 <vTaskInternalSetTimeOutState+0x28>)
 8017d6a:	681a      	ldr	r2, [r3, #0]
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	605a      	str	r2, [r3, #4]
}
 8017d70:	bf00      	nop
 8017d72:	370c      	adds	r7, #12
 8017d74:	46bd      	mov	sp, r7
 8017d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7a:	4770      	bx	lr
 8017d7c:	200004fc 	.word	0x200004fc
 8017d80:	200004e8 	.word	0x200004e8

08017d84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	b088      	sub	sp, #32
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
 8017d8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d10c      	bne.n	8017dae <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8017d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d98:	b672      	cpsid	i
 8017d9a:	f383 8811 	msr	BASEPRI, r3
 8017d9e:	f3bf 8f6f 	isb	sy
 8017da2:	f3bf 8f4f 	dsb	sy
 8017da6:	b662      	cpsie	i
 8017da8:	613b      	str	r3, [r7, #16]
}
 8017daa:	bf00      	nop
 8017dac:	e7fe      	b.n	8017dac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8017dae:	683b      	ldr	r3, [r7, #0]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d10c      	bne.n	8017dce <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8017db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017db8:	b672      	cpsid	i
 8017dba:	f383 8811 	msr	BASEPRI, r3
 8017dbe:	f3bf 8f6f 	isb	sy
 8017dc2:	f3bf 8f4f 	dsb	sy
 8017dc6:	b662      	cpsie	i
 8017dc8:	60fb      	str	r3, [r7, #12]
}
 8017dca:	bf00      	nop
 8017dcc:	e7fe      	b.n	8017dcc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8017dce:	f000 fd35 	bl	801883c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017dd2:	4b1d      	ldr	r3, [pc, #116]	; (8017e48 <xTaskCheckForTimeOut+0xc4>)
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	69ba      	ldr	r2, [r7, #24]
 8017dde:	1ad3      	subs	r3, r2, r3
 8017de0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017de2:	683b      	ldr	r3, [r7, #0]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017dea:	d102      	bne.n	8017df2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017dec:	2300      	movs	r3, #0
 8017dee:	61fb      	str	r3, [r7, #28]
 8017df0:	e023      	b.n	8017e3a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	681a      	ldr	r2, [r3, #0]
 8017df6:	4b15      	ldr	r3, [pc, #84]	; (8017e4c <xTaskCheckForTimeOut+0xc8>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	429a      	cmp	r2, r3
 8017dfc:	d007      	beq.n	8017e0e <xTaskCheckForTimeOut+0x8a>
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	685b      	ldr	r3, [r3, #4]
 8017e02:	69ba      	ldr	r2, [r7, #24]
 8017e04:	429a      	cmp	r2, r3
 8017e06:	d302      	bcc.n	8017e0e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017e08:	2301      	movs	r3, #1
 8017e0a:	61fb      	str	r3, [r7, #28]
 8017e0c:	e015      	b.n	8017e3a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017e0e:	683b      	ldr	r3, [r7, #0]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	697a      	ldr	r2, [r7, #20]
 8017e14:	429a      	cmp	r2, r3
 8017e16:	d20b      	bcs.n	8017e30 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017e18:	683b      	ldr	r3, [r7, #0]
 8017e1a:	681a      	ldr	r2, [r3, #0]
 8017e1c:	697b      	ldr	r3, [r7, #20]
 8017e1e:	1ad2      	subs	r2, r2, r3
 8017e20:	683b      	ldr	r3, [r7, #0]
 8017e22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017e24:	6878      	ldr	r0, [r7, #4]
 8017e26:	f7ff ff97 	bl	8017d58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	61fb      	str	r3, [r7, #28]
 8017e2e:	e004      	b.n	8017e3a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8017e30:	683b      	ldr	r3, [r7, #0]
 8017e32:	2200      	movs	r2, #0
 8017e34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017e36:	2301      	movs	r3, #1
 8017e38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017e3a:	f000 fd33 	bl	80188a4 <vPortExitCritical>

	return xReturn;
 8017e3e:	69fb      	ldr	r3, [r7, #28]
}
 8017e40:	4618      	mov	r0, r3
 8017e42:	3720      	adds	r7, #32
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}
 8017e48:	200004e8 	.word	0x200004e8
 8017e4c:	200004fc 	.word	0x200004fc

08017e50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017e50:	b480      	push	{r7}
 8017e52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017e54:	4b03      	ldr	r3, [pc, #12]	; (8017e64 <vTaskMissedYield+0x14>)
 8017e56:	2201      	movs	r2, #1
 8017e58:	601a      	str	r2, [r3, #0]
}
 8017e5a:	bf00      	nop
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e62:	4770      	bx	lr
 8017e64:	200004f8 	.word	0x200004f8

08017e68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b082      	sub	sp, #8
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017e70:	f000 f854 	bl	8017f1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017e74:	4b07      	ldr	r3, [pc, #28]	; (8017e94 <prvIdleTask+0x2c>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	2b01      	cmp	r3, #1
 8017e7a:	d907      	bls.n	8017e8c <prvIdleTask+0x24>
			{
				taskYIELD();
 8017e7c:	4b06      	ldr	r3, [pc, #24]	; (8017e98 <prvIdleTask+0x30>)
 8017e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e82:	601a      	str	r2, [r3, #0]
 8017e84:	f3bf 8f4f 	dsb	sy
 8017e88:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8017e8c:	f7e9 fb0e 	bl	80014ac <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8017e90:	e7ee      	b.n	8017e70 <prvIdleTask+0x8>
 8017e92:	bf00      	nop
 8017e94:	200003e8 	.word	0x200003e8
 8017e98:	e000ed04 	.word	0xe000ed04

08017e9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b082      	sub	sp, #8
 8017ea0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	607b      	str	r3, [r7, #4]
 8017ea6:	e00c      	b.n	8017ec2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017ea8:	687a      	ldr	r2, [r7, #4]
 8017eaa:	4613      	mov	r3, r2
 8017eac:	009b      	lsls	r3, r3, #2
 8017eae:	4413      	add	r3, r2
 8017eb0:	009b      	lsls	r3, r3, #2
 8017eb2:	4a12      	ldr	r2, [pc, #72]	; (8017efc <prvInitialiseTaskLists+0x60>)
 8017eb4:	4413      	add	r3, r2
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f7fe fc56 	bl	8016768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	607b      	str	r3, [r7, #4]
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2b06      	cmp	r3, #6
 8017ec6:	d9ef      	bls.n	8017ea8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017ec8:	480d      	ldr	r0, [pc, #52]	; (8017f00 <prvInitialiseTaskLists+0x64>)
 8017eca:	f7fe fc4d 	bl	8016768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017ece:	480d      	ldr	r0, [pc, #52]	; (8017f04 <prvInitialiseTaskLists+0x68>)
 8017ed0:	f7fe fc4a 	bl	8016768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017ed4:	480c      	ldr	r0, [pc, #48]	; (8017f08 <prvInitialiseTaskLists+0x6c>)
 8017ed6:	f7fe fc47 	bl	8016768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017eda:	480c      	ldr	r0, [pc, #48]	; (8017f0c <prvInitialiseTaskLists+0x70>)
 8017edc:	f7fe fc44 	bl	8016768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017ee0:	480b      	ldr	r0, [pc, #44]	; (8017f10 <prvInitialiseTaskLists+0x74>)
 8017ee2:	f7fe fc41 	bl	8016768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017ee6:	4b0b      	ldr	r3, [pc, #44]	; (8017f14 <prvInitialiseTaskLists+0x78>)
 8017ee8:	4a05      	ldr	r2, [pc, #20]	; (8017f00 <prvInitialiseTaskLists+0x64>)
 8017eea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017eec:	4b0a      	ldr	r3, [pc, #40]	; (8017f18 <prvInitialiseTaskLists+0x7c>)
 8017eee:	4a05      	ldr	r2, [pc, #20]	; (8017f04 <prvInitialiseTaskLists+0x68>)
 8017ef0:	601a      	str	r2, [r3, #0]
}
 8017ef2:	bf00      	nop
 8017ef4:	3708      	adds	r7, #8
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}
 8017efa:	bf00      	nop
 8017efc:	200003e8 	.word	0x200003e8
 8017f00:	20000474 	.word	0x20000474
 8017f04:	20000488 	.word	0x20000488
 8017f08:	200004a4 	.word	0x200004a4
 8017f0c:	200004b8 	.word	0x200004b8
 8017f10:	200004d0 	.word	0x200004d0
 8017f14:	2000049c 	.word	0x2000049c
 8017f18:	200004a0 	.word	0x200004a0

08017f1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b082      	sub	sp, #8
 8017f20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017f22:	e019      	b.n	8017f58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017f24:	f000 fc8a 	bl	801883c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f28:	4b10      	ldr	r3, [pc, #64]	; (8017f6c <prvCheckTasksWaitingTermination+0x50>)
 8017f2a:	68db      	ldr	r3, [r3, #12]
 8017f2c:	68db      	ldr	r3, [r3, #12]
 8017f2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	3304      	adds	r3, #4
 8017f34:	4618      	mov	r0, r3
 8017f36:	f7fe fca1 	bl	801687c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017f3a:	4b0d      	ldr	r3, [pc, #52]	; (8017f70 <prvCheckTasksWaitingTermination+0x54>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	3b01      	subs	r3, #1
 8017f40:	4a0b      	ldr	r2, [pc, #44]	; (8017f70 <prvCheckTasksWaitingTermination+0x54>)
 8017f42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017f44:	4b0b      	ldr	r3, [pc, #44]	; (8017f74 <prvCheckTasksWaitingTermination+0x58>)
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	3b01      	subs	r3, #1
 8017f4a:	4a0a      	ldr	r2, [pc, #40]	; (8017f74 <prvCheckTasksWaitingTermination+0x58>)
 8017f4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017f4e:	f000 fca9 	bl	80188a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	f000 f810 	bl	8017f78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017f58:	4b06      	ldr	r3, [pc, #24]	; (8017f74 <prvCheckTasksWaitingTermination+0x58>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d1e1      	bne.n	8017f24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017f60:	bf00      	nop
 8017f62:	bf00      	nop
 8017f64:	3708      	adds	r7, #8
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}
 8017f6a:	bf00      	nop
 8017f6c:	200004b8 	.word	0x200004b8
 8017f70:	200004e4 	.word	0x200004e4
 8017f74:	200004cc 	.word	0x200004cc

08017f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b084      	sub	sp, #16
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d108      	bne.n	8017f9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f8e:	4618      	mov	r0, r3
 8017f90:	f000 fe50 	bl	8018c34 <vPortFree>
				vPortFree( pxTCB );
 8017f94:	6878      	ldr	r0, [r7, #4]
 8017f96:	f000 fe4d 	bl	8018c34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017f9a:	e01a      	b.n	8017fd2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017fa2:	2b01      	cmp	r3, #1
 8017fa4:	d103      	bne.n	8017fae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017fa6:	6878      	ldr	r0, [r7, #4]
 8017fa8:	f000 fe44 	bl	8018c34 <vPortFree>
	}
 8017fac:	e011      	b.n	8017fd2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017fb4:	2b02      	cmp	r3, #2
 8017fb6:	d00c      	beq.n	8017fd2 <prvDeleteTCB+0x5a>
	__asm volatile
 8017fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fbc:	b672      	cpsid	i
 8017fbe:	f383 8811 	msr	BASEPRI, r3
 8017fc2:	f3bf 8f6f 	isb	sy
 8017fc6:	f3bf 8f4f 	dsb	sy
 8017fca:	b662      	cpsie	i
 8017fcc:	60fb      	str	r3, [r7, #12]
}
 8017fce:	bf00      	nop
 8017fd0:	e7fe      	b.n	8017fd0 <prvDeleteTCB+0x58>
	}
 8017fd2:	bf00      	nop
 8017fd4:	3710      	adds	r7, #16
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}
	...

08017fdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017fdc:	b480      	push	{r7}
 8017fde:	b083      	sub	sp, #12
 8017fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017fe2:	4b0c      	ldr	r3, [pc, #48]	; (8018014 <prvResetNextTaskUnblockTime+0x38>)
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d104      	bne.n	8017ff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017fec:	4b0a      	ldr	r3, [pc, #40]	; (8018018 <prvResetNextTaskUnblockTime+0x3c>)
 8017fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017ff4:	e008      	b.n	8018008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ff6:	4b07      	ldr	r3, [pc, #28]	; (8018014 <prvResetNextTaskUnblockTime+0x38>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	68db      	ldr	r3, [r3, #12]
 8017ffc:	68db      	ldr	r3, [r3, #12]
 8017ffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	685b      	ldr	r3, [r3, #4]
 8018004:	4a04      	ldr	r2, [pc, #16]	; (8018018 <prvResetNextTaskUnblockTime+0x3c>)
 8018006:	6013      	str	r3, [r2, #0]
}
 8018008:	bf00      	nop
 801800a:	370c      	adds	r7, #12
 801800c:	46bd      	mov	sp, r7
 801800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018012:	4770      	bx	lr
 8018014:	2000049c 	.word	0x2000049c
 8018018:	20000504 	.word	0x20000504

0801801c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801801c:	b480      	push	{r7}
 801801e:	b083      	sub	sp, #12
 8018020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018022:	4b0b      	ldr	r3, [pc, #44]	; (8018050 <xTaskGetSchedulerState+0x34>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d102      	bne.n	8018030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801802a:	2301      	movs	r3, #1
 801802c:	607b      	str	r3, [r7, #4]
 801802e:	e008      	b.n	8018042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018030:	4b08      	ldr	r3, [pc, #32]	; (8018054 <xTaskGetSchedulerState+0x38>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d102      	bne.n	801803e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018038:	2302      	movs	r3, #2
 801803a:	607b      	str	r3, [r7, #4]
 801803c:	e001      	b.n	8018042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801803e:	2300      	movs	r3, #0
 8018040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018042:	687b      	ldr	r3, [r7, #4]
	}
 8018044:	4618      	mov	r0, r3
 8018046:	370c      	adds	r7, #12
 8018048:	46bd      	mov	sp, r7
 801804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801804e:	4770      	bx	lr
 8018050:	200004f0 	.word	0x200004f0
 8018054:	2000050c 	.word	0x2000050c

08018058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018058:	b580      	push	{r7, lr}
 801805a:	b086      	sub	sp, #24
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018064:	2300      	movs	r3, #0
 8018066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d072      	beq.n	8018154 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801806e:	4b3c      	ldr	r3, [pc, #240]	; (8018160 <xTaskPriorityDisinherit+0x108>)
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	693a      	ldr	r2, [r7, #16]
 8018074:	429a      	cmp	r2, r3
 8018076:	d00c      	beq.n	8018092 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8018078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801807c:	b672      	cpsid	i
 801807e:	f383 8811 	msr	BASEPRI, r3
 8018082:	f3bf 8f6f 	isb	sy
 8018086:	f3bf 8f4f 	dsb	sy
 801808a:	b662      	cpsie	i
 801808c:	60fb      	str	r3, [r7, #12]
}
 801808e:	bf00      	nop
 8018090:	e7fe      	b.n	8018090 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8018092:	693b      	ldr	r3, [r7, #16]
 8018094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018096:	2b00      	cmp	r3, #0
 8018098:	d10c      	bne.n	80180b4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801809e:	b672      	cpsid	i
 80180a0:	f383 8811 	msr	BASEPRI, r3
 80180a4:	f3bf 8f6f 	isb	sy
 80180a8:	f3bf 8f4f 	dsb	sy
 80180ac:	b662      	cpsie	i
 80180ae:	60bb      	str	r3, [r7, #8]
}
 80180b0:	bf00      	nop
 80180b2:	e7fe      	b.n	80180b2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80180b4:	693b      	ldr	r3, [r7, #16]
 80180b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180b8:	1e5a      	subs	r2, r3, #1
 80180ba:	693b      	ldr	r3, [r7, #16]
 80180bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80180be:	693b      	ldr	r3, [r7, #16]
 80180c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180c2:	693b      	ldr	r3, [r7, #16]
 80180c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180c6:	429a      	cmp	r2, r3
 80180c8:	d044      	beq.n	8018154 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80180ca:	693b      	ldr	r3, [r7, #16]
 80180cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d140      	bne.n	8018154 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80180d2:	693b      	ldr	r3, [r7, #16]
 80180d4:	3304      	adds	r3, #4
 80180d6:	4618      	mov	r0, r3
 80180d8:	f7fe fbd0 	bl	801687c <uxListRemove>
 80180dc:	4603      	mov	r3, r0
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d115      	bne.n	801810e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80180e2:	693b      	ldr	r3, [r7, #16]
 80180e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180e6:	491f      	ldr	r1, [pc, #124]	; (8018164 <xTaskPriorityDisinherit+0x10c>)
 80180e8:	4613      	mov	r3, r2
 80180ea:	009b      	lsls	r3, r3, #2
 80180ec:	4413      	add	r3, r2
 80180ee:	009b      	lsls	r3, r3, #2
 80180f0:	440b      	add	r3, r1
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d10a      	bne.n	801810e <xTaskPriorityDisinherit+0xb6>
 80180f8:	693b      	ldr	r3, [r7, #16]
 80180fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180fc:	2201      	movs	r2, #1
 80180fe:	fa02 f303 	lsl.w	r3, r2, r3
 8018102:	43da      	mvns	r2, r3
 8018104:	4b18      	ldr	r3, [pc, #96]	; (8018168 <xTaskPriorityDisinherit+0x110>)
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	4013      	ands	r3, r2
 801810a:	4a17      	ldr	r2, [pc, #92]	; (8018168 <xTaskPriorityDisinherit+0x110>)
 801810c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801810e:	693b      	ldr	r3, [r7, #16]
 8018110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018112:	693b      	ldr	r3, [r7, #16]
 8018114:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018116:	693b      	ldr	r3, [r7, #16]
 8018118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801811a:	f1c3 0207 	rsb	r2, r3, #7
 801811e:	693b      	ldr	r3, [r7, #16]
 8018120:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018126:	2201      	movs	r2, #1
 8018128:	409a      	lsls	r2, r3
 801812a:	4b0f      	ldr	r3, [pc, #60]	; (8018168 <xTaskPriorityDisinherit+0x110>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	4313      	orrs	r3, r2
 8018130:	4a0d      	ldr	r2, [pc, #52]	; (8018168 <xTaskPriorityDisinherit+0x110>)
 8018132:	6013      	str	r3, [r2, #0]
 8018134:	693b      	ldr	r3, [r7, #16]
 8018136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018138:	4613      	mov	r3, r2
 801813a:	009b      	lsls	r3, r3, #2
 801813c:	4413      	add	r3, r2
 801813e:	009b      	lsls	r3, r3, #2
 8018140:	4a08      	ldr	r2, [pc, #32]	; (8018164 <xTaskPriorityDisinherit+0x10c>)
 8018142:	441a      	add	r2, r3
 8018144:	693b      	ldr	r3, [r7, #16]
 8018146:	3304      	adds	r3, #4
 8018148:	4619      	mov	r1, r3
 801814a:	4610      	mov	r0, r2
 801814c:	f7fe fb39 	bl	80167c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018150:	2301      	movs	r3, #1
 8018152:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018154:	697b      	ldr	r3, [r7, #20]
	}
 8018156:	4618      	mov	r0, r3
 8018158:	3718      	adds	r7, #24
 801815a:	46bd      	mov	sp, r7
 801815c:	bd80      	pop	{r7, pc}
 801815e:	bf00      	nop
 8018160:	200003e4 	.word	0x200003e4
 8018164:	200003e8 	.word	0x200003e8
 8018168:	200004ec 	.word	0x200004ec

0801816c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801816c:	b580      	push	{r7, lr}
 801816e:	b086      	sub	sp, #24
 8018170:	af00      	add	r7, sp, #0
 8018172:	60f8      	str	r0, [r7, #12]
 8018174:	60b9      	str	r1, [r7, #8]
 8018176:	607a      	str	r2, [r7, #4]
 8018178:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801817a:	f000 fb5f 	bl	801883c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801817e:	4b26      	ldr	r3, [pc, #152]	; (8018218 <xTaskNotifyWait+0xac>)
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018186:	b2db      	uxtb	r3, r3
 8018188:	2b02      	cmp	r3, #2
 801818a:	d01a      	beq.n	80181c2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801818c:	4b22      	ldr	r3, [pc, #136]	; (8018218 <xTaskNotifyWait+0xac>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8018192:	68fa      	ldr	r2, [r7, #12]
 8018194:	43d2      	mvns	r2, r2
 8018196:	400a      	ands	r2, r1
 8018198:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801819a:	4b1f      	ldr	r3, [pc, #124]	; (8018218 <xTaskNotifyWait+0xac>)
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	2201      	movs	r2, #1
 80181a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 80181a4:	683b      	ldr	r3, [r7, #0]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d00b      	beq.n	80181c2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80181aa:	2101      	movs	r1, #1
 80181ac:	6838      	ldr	r0, [r7, #0]
 80181ae:	f000 f9d5 	bl	801855c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80181b2:	4b1a      	ldr	r3, [pc, #104]	; (801821c <xTaskNotifyWait+0xb0>)
 80181b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181b8:	601a      	str	r2, [r3, #0]
 80181ba:	f3bf 8f4f 	dsb	sy
 80181be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80181c2:	f000 fb6f 	bl	80188a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80181c6:	f000 fb39 	bl	801883c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d004      	beq.n	80181da <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80181d0:	4b11      	ldr	r3, [pc, #68]	; (8018218 <xTaskNotifyWait+0xac>)
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80181da:	4b0f      	ldr	r3, [pc, #60]	; (8018218 <xTaskNotifyWait+0xac>)
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80181e2:	b2db      	uxtb	r3, r3
 80181e4:	2b02      	cmp	r3, #2
 80181e6:	d002      	beq.n	80181ee <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80181e8:	2300      	movs	r3, #0
 80181ea:	617b      	str	r3, [r7, #20]
 80181ec:	e008      	b.n	8018200 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80181ee:	4b0a      	ldr	r3, [pc, #40]	; (8018218 <xTaskNotifyWait+0xac>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80181f4:	68ba      	ldr	r2, [r7, #8]
 80181f6:	43d2      	mvns	r2, r2
 80181f8:	400a      	ands	r2, r1
 80181fa:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 80181fc:	2301      	movs	r3, #1
 80181fe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018200:	4b05      	ldr	r3, [pc, #20]	; (8018218 <xTaskNotifyWait+0xac>)
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	2200      	movs	r2, #0
 8018206:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 801820a:	f000 fb4b 	bl	80188a4 <vPortExitCritical>

		return xReturn;
 801820e:	697b      	ldr	r3, [r7, #20]
	}
 8018210:	4618      	mov	r0, r3
 8018212:	3718      	adds	r7, #24
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}
 8018218:	200003e4 	.word	0x200003e4
 801821c:	e000ed04 	.word	0xe000ed04

08018220 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8018220:	b580      	push	{r7, lr}
 8018222:	b08a      	sub	sp, #40	; 0x28
 8018224:	af00      	add	r7, sp, #0
 8018226:	60f8      	str	r0, [r7, #12]
 8018228:	60b9      	str	r1, [r7, #8]
 801822a:	603b      	str	r3, [r7, #0]
 801822c:	4613      	mov	r3, r2
 801822e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8018230:	2301      	movs	r3, #1
 8018232:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d10c      	bne.n	8018254 <xTaskGenericNotify+0x34>
	__asm volatile
 801823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801823e:	b672      	cpsid	i
 8018240:	f383 8811 	msr	BASEPRI, r3
 8018244:	f3bf 8f6f 	isb	sy
 8018248:	f3bf 8f4f 	dsb	sy
 801824c:	b662      	cpsie	i
 801824e:	61bb      	str	r3, [r7, #24]
}
 8018250:	bf00      	nop
 8018252:	e7fe      	b.n	8018252 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8018258:	f000 faf0 	bl	801883c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801825c:	683b      	ldr	r3, [r7, #0]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d003      	beq.n	801826a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8018262:	6a3b      	ldr	r3, [r7, #32]
 8018264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018266:	683b      	ldr	r3, [r7, #0]
 8018268:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801826a:	6a3b      	ldr	r3, [r7, #32]
 801826c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018270:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018272:	6a3b      	ldr	r3, [r7, #32]
 8018274:	2202      	movs	r2, #2
 8018276:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 801827a:	79fb      	ldrb	r3, [r7, #7]
 801827c:	2b04      	cmp	r3, #4
 801827e:	d828      	bhi.n	80182d2 <xTaskGenericNotify+0xb2>
 8018280:	a201      	add	r2, pc, #4	; (adr r2, 8018288 <xTaskGenericNotify+0x68>)
 8018282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018286:	bf00      	nop
 8018288:	080182f7 	.word	0x080182f7
 801828c:	0801829d 	.word	0x0801829d
 8018290:	080182ab 	.word	0x080182ab
 8018294:	080182b7 	.word	0x080182b7
 8018298:	080182bf 	.word	0x080182bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801829c:	6a3b      	ldr	r3, [r7, #32]
 801829e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	431a      	orrs	r2, r3
 80182a4:	6a3b      	ldr	r3, [r7, #32]
 80182a6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80182a8:	e028      	b.n	80182fc <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80182aa:	6a3b      	ldr	r3, [r7, #32]
 80182ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182ae:	1c5a      	adds	r2, r3, #1
 80182b0:	6a3b      	ldr	r3, [r7, #32]
 80182b2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80182b4:	e022      	b.n	80182fc <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80182b6:	6a3b      	ldr	r3, [r7, #32]
 80182b8:	68ba      	ldr	r2, [r7, #8]
 80182ba:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80182bc:	e01e      	b.n	80182fc <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80182be:	7ffb      	ldrb	r3, [r7, #31]
 80182c0:	2b02      	cmp	r3, #2
 80182c2:	d003      	beq.n	80182cc <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80182c4:	6a3b      	ldr	r3, [r7, #32]
 80182c6:	68ba      	ldr	r2, [r7, #8]
 80182c8:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80182ca:	e017      	b.n	80182fc <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 80182cc:	2300      	movs	r3, #0
 80182ce:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80182d0:	e014      	b.n	80182fc <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80182d2:	6a3b      	ldr	r3, [r7, #32]
 80182d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182da:	d00e      	beq.n	80182fa <xTaskGenericNotify+0xda>
	__asm volatile
 80182dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182e0:	b672      	cpsid	i
 80182e2:	f383 8811 	msr	BASEPRI, r3
 80182e6:	f3bf 8f6f 	isb	sy
 80182ea:	f3bf 8f4f 	dsb	sy
 80182ee:	b662      	cpsie	i
 80182f0:	617b      	str	r3, [r7, #20]
}
 80182f2:	bf00      	nop
 80182f4:	e7fe      	b.n	80182f4 <xTaskGenericNotify+0xd4>
					break;
 80182f6:	bf00      	nop
 80182f8:	e000      	b.n	80182fc <xTaskGenericNotify+0xdc>

					break;
 80182fa:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80182fc:	7ffb      	ldrb	r3, [r7, #31]
 80182fe:	2b01      	cmp	r3, #1
 8018300:	d13b      	bne.n	801837a <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018302:	6a3b      	ldr	r3, [r7, #32]
 8018304:	3304      	adds	r3, #4
 8018306:	4618      	mov	r0, r3
 8018308:	f7fe fab8 	bl	801687c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801830c:	6a3b      	ldr	r3, [r7, #32]
 801830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018310:	2201      	movs	r2, #1
 8018312:	409a      	lsls	r2, r3
 8018314:	4b1c      	ldr	r3, [pc, #112]	; (8018388 <xTaskGenericNotify+0x168>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	4313      	orrs	r3, r2
 801831a:	4a1b      	ldr	r2, [pc, #108]	; (8018388 <xTaskGenericNotify+0x168>)
 801831c:	6013      	str	r3, [r2, #0]
 801831e:	6a3b      	ldr	r3, [r7, #32]
 8018320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018322:	4613      	mov	r3, r2
 8018324:	009b      	lsls	r3, r3, #2
 8018326:	4413      	add	r3, r2
 8018328:	009b      	lsls	r3, r3, #2
 801832a:	4a18      	ldr	r2, [pc, #96]	; (801838c <xTaskGenericNotify+0x16c>)
 801832c:	441a      	add	r2, r3
 801832e:	6a3b      	ldr	r3, [r7, #32]
 8018330:	3304      	adds	r3, #4
 8018332:	4619      	mov	r1, r3
 8018334:	4610      	mov	r0, r2
 8018336:	f7fe fa44 	bl	80167c2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801833a:	6a3b      	ldr	r3, [r7, #32]
 801833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801833e:	2b00      	cmp	r3, #0
 8018340:	d00c      	beq.n	801835c <xTaskGenericNotify+0x13c>
	__asm volatile
 8018342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018346:	b672      	cpsid	i
 8018348:	f383 8811 	msr	BASEPRI, r3
 801834c:	f3bf 8f6f 	isb	sy
 8018350:	f3bf 8f4f 	dsb	sy
 8018354:	b662      	cpsie	i
 8018356:	613b      	str	r3, [r7, #16]
}
 8018358:	bf00      	nop
 801835a:	e7fe      	b.n	801835a <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801835c:	6a3b      	ldr	r3, [r7, #32]
 801835e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018360:	4b0b      	ldr	r3, [pc, #44]	; (8018390 <xTaskGenericNotify+0x170>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018366:	429a      	cmp	r2, r3
 8018368:	d907      	bls.n	801837a <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801836a:	4b0a      	ldr	r3, [pc, #40]	; (8018394 <xTaskGenericNotify+0x174>)
 801836c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018370:	601a      	str	r2, [r3, #0]
 8018372:	f3bf 8f4f 	dsb	sy
 8018376:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801837a:	f000 fa93 	bl	80188a4 <vPortExitCritical>

		return xReturn;
 801837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8018380:	4618      	mov	r0, r3
 8018382:	3728      	adds	r7, #40	; 0x28
 8018384:	46bd      	mov	sp, r7
 8018386:	bd80      	pop	{r7, pc}
 8018388:	200004ec 	.word	0x200004ec
 801838c:	200003e8 	.word	0x200003e8
 8018390:	200003e4 	.word	0x200003e4
 8018394:	e000ed04 	.word	0xe000ed04

08018398 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018398:	b580      	push	{r7, lr}
 801839a:	b08e      	sub	sp, #56	; 0x38
 801839c:	af00      	add	r7, sp, #0
 801839e:	60f8      	str	r0, [r7, #12]
 80183a0:	60b9      	str	r1, [r7, #8]
 80183a2:	603b      	str	r3, [r7, #0]
 80183a4:	4613      	mov	r3, r2
 80183a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80183a8:	2301      	movs	r3, #1
 80183aa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d10c      	bne.n	80183cc <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 80183b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183b6:	b672      	cpsid	i
 80183b8:	f383 8811 	msr	BASEPRI, r3
 80183bc:	f3bf 8f6f 	isb	sy
 80183c0:	f3bf 8f4f 	dsb	sy
 80183c4:	b662      	cpsie	i
 80183c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80183c8:	bf00      	nop
 80183ca:	e7fe      	b.n	80183ca <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80183cc:	f000 fb1e 	bl	8018a0c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80183d4:	f3ef 8211 	mrs	r2, BASEPRI
 80183d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183dc:	b672      	cpsid	i
 80183de:	f383 8811 	msr	BASEPRI, r3
 80183e2:	f3bf 8f6f 	isb	sy
 80183e6:	f3bf 8f4f 	dsb	sy
 80183ea:	b662      	cpsie	i
 80183ec:	623a      	str	r2, [r7, #32]
 80183ee:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80183f0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80183f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80183f4:	683b      	ldr	r3, [r7, #0]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d003      	beq.n	8018402 <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80183fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80183fe:	683b      	ldr	r3, [r7, #0]
 8018400:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018404:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801840e:	2202      	movs	r2, #2
 8018410:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8018414:	79fb      	ldrb	r3, [r7, #7]
 8018416:	2b04      	cmp	r3, #4
 8018418:	d828      	bhi.n	801846c <xTaskGenericNotifyFromISR+0xd4>
 801841a:	a201      	add	r2, pc, #4	; (adr r2, 8018420 <xTaskGenericNotifyFromISR+0x88>)
 801841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018420:	08018491 	.word	0x08018491
 8018424:	08018435 	.word	0x08018435
 8018428:	08018443 	.word	0x08018443
 801842c:	0801844f 	.word	0x0801844f
 8018430:	08018457 	.word	0x08018457
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8018434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018438:	68bb      	ldr	r3, [r7, #8]
 801843a:	431a      	orrs	r2, r3
 801843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801843e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8018440:	e029      	b.n	8018496 <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8018442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018446:	1c5a      	adds	r2, r3, #1
 8018448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801844a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801844c:	e023      	b.n	8018496 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018450:	68ba      	ldr	r2, [r7, #8]
 8018452:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8018454:	e01f      	b.n	8018496 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8018456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801845a:	2b02      	cmp	r3, #2
 801845c:	d003      	beq.n	8018466 <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801845e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018460:	68ba      	ldr	r2, [r7, #8]
 8018462:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8018464:	e017      	b.n	8018496 <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 8018466:	2300      	movs	r3, #0
 8018468:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801846a:	e014      	b.n	8018496 <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801846e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018474:	d00e      	beq.n	8018494 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 8018476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801847a:	b672      	cpsid	i
 801847c:	f383 8811 	msr	BASEPRI, r3
 8018480:	f3bf 8f6f 	isb	sy
 8018484:	f3bf 8f4f 	dsb	sy
 8018488:	b662      	cpsie	i
 801848a:	61bb      	str	r3, [r7, #24]
}
 801848c:	bf00      	nop
 801848e:	e7fe      	b.n	801848e <xTaskGenericNotifyFromISR+0xf6>
					break;
 8018490:	bf00      	nop
 8018492:	e000      	b.n	8018496 <xTaskGenericNotifyFromISR+0xfe>
					break;
 8018494:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801849a:	2b01      	cmp	r3, #1
 801849c:	d147      	bne.n	801852e <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d00c      	beq.n	80184c0 <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 80184a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184aa:	b672      	cpsid	i
 80184ac:	f383 8811 	msr	BASEPRI, r3
 80184b0:	f3bf 8f6f 	isb	sy
 80184b4:	f3bf 8f4f 	dsb	sy
 80184b8:	b662      	cpsie	i
 80184ba:	617b      	str	r3, [r7, #20]
}
 80184bc:	bf00      	nop
 80184be:	e7fe      	b.n	80184be <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80184c0:	4b20      	ldr	r3, [pc, #128]	; (8018544 <xTaskGenericNotifyFromISR+0x1ac>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d11c      	bne.n	8018502 <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80184c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ca:	3304      	adds	r3, #4
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7fe f9d5 	bl	801687c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80184d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184d6:	2201      	movs	r2, #1
 80184d8:	409a      	lsls	r2, r3
 80184da:	4b1b      	ldr	r3, [pc, #108]	; (8018548 <xTaskGenericNotifyFromISR+0x1b0>)
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	4313      	orrs	r3, r2
 80184e0:	4a19      	ldr	r2, [pc, #100]	; (8018548 <xTaskGenericNotifyFromISR+0x1b0>)
 80184e2:	6013      	str	r3, [r2, #0]
 80184e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184e8:	4613      	mov	r3, r2
 80184ea:	009b      	lsls	r3, r3, #2
 80184ec:	4413      	add	r3, r2
 80184ee:	009b      	lsls	r3, r3, #2
 80184f0:	4a16      	ldr	r2, [pc, #88]	; (801854c <xTaskGenericNotifyFromISR+0x1b4>)
 80184f2:	441a      	add	r2, r3
 80184f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184f6:	3304      	adds	r3, #4
 80184f8:	4619      	mov	r1, r3
 80184fa:	4610      	mov	r0, r2
 80184fc:	f7fe f961 	bl	80167c2 <vListInsertEnd>
 8018500:	e005      	b.n	801850e <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018504:	3318      	adds	r3, #24
 8018506:	4619      	mov	r1, r3
 8018508:	4811      	ldr	r0, [pc, #68]	; (8018550 <xTaskGenericNotifyFromISR+0x1b8>)
 801850a:	f7fe f95a 	bl	80167c2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018512:	4b10      	ldr	r3, [pc, #64]	; (8018554 <xTaskGenericNotifyFromISR+0x1bc>)
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018518:	429a      	cmp	r2, r3
 801851a:	d908      	bls.n	801852e <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801851c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801851e:	2b00      	cmp	r3, #0
 8018520:	d002      	beq.n	8018528 <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8018522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018524:	2201      	movs	r2, #1
 8018526:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8018528:	4b0b      	ldr	r3, [pc, #44]	; (8018558 <xTaskGenericNotifyFromISR+0x1c0>)
 801852a:	2201      	movs	r2, #1
 801852c:	601a      	str	r2, [r3, #0]
 801852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018530:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018532:	693b      	ldr	r3, [r7, #16]
 8018534:	f383 8811 	msr	BASEPRI, r3
}
 8018538:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801853a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801853c:	4618      	mov	r0, r3
 801853e:	3738      	adds	r7, #56	; 0x38
 8018540:	46bd      	mov	sp, r7
 8018542:	bd80      	pop	{r7, pc}
 8018544:	2000050c 	.word	0x2000050c
 8018548:	200004ec 	.word	0x200004ec
 801854c:	200003e8 	.word	0x200003e8
 8018550:	200004a4 	.word	0x200004a4
 8018554:	200003e4 	.word	0x200003e4
 8018558:	200004f8 	.word	0x200004f8

0801855c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b084      	sub	sp, #16
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
 8018564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018566:	4b29      	ldr	r3, [pc, #164]	; (801860c <prvAddCurrentTaskToDelayedList+0xb0>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801856c:	4b28      	ldr	r3, [pc, #160]	; (8018610 <prvAddCurrentTaskToDelayedList+0xb4>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	3304      	adds	r3, #4
 8018572:	4618      	mov	r0, r3
 8018574:	f7fe f982 	bl	801687c <uxListRemove>
 8018578:	4603      	mov	r3, r0
 801857a:	2b00      	cmp	r3, #0
 801857c:	d10b      	bne.n	8018596 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801857e:	4b24      	ldr	r3, [pc, #144]	; (8018610 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018584:	2201      	movs	r2, #1
 8018586:	fa02 f303 	lsl.w	r3, r2, r3
 801858a:	43da      	mvns	r2, r3
 801858c:	4b21      	ldr	r3, [pc, #132]	; (8018614 <prvAddCurrentTaskToDelayedList+0xb8>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	4013      	ands	r3, r2
 8018592:	4a20      	ldr	r2, [pc, #128]	; (8018614 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018594:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801859c:	d10a      	bne.n	80185b4 <prvAddCurrentTaskToDelayedList+0x58>
 801859e:	683b      	ldr	r3, [r7, #0]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d007      	beq.n	80185b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80185a4:	4b1a      	ldr	r3, [pc, #104]	; (8018610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	3304      	adds	r3, #4
 80185aa:	4619      	mov	r1, r3
 80185ac:	481a      	ldr	r0, [pc, #104]	; (8018618 <prvAddCurrentTaskToDelayedList+0xbc>)
 80185ae:	f7fe f908 	bl	80167c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80185b2:	e026      	b.n	8018602 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80185b4:	68fa      	ldr	r2, [r7, #12]
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	4413      	add	r3, r2
 80185ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80185bc:	4b14      	ldr	r3, [pc, #80]	; (8018610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	68ba      	ldr	r2, [r7, #8]
 80185c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80185c4:	68ba      	ldr	r2, [r7, #8]
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	429a      	cmp	r2, r3
 80185ca:	d209      	bcs.n	80185e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80185cc:	4b13      	ldr	r3, [pc, #76]	; (801861c <prvAddCurrentTaskToDelayedList+0xc0>)
 80185ce:	681a      	ldr	r2, [r3, #0]
 80185d0:	4b0f      	ldr	r3, [pc, #60]	; (8018610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	3304      	adds	r3, #4
 80185d6:	4619      	mov	r1, r3
 80185d8:	4610      	mov	r0, r2
 80185da:	f7fe f916 	bl	801680a <vListInsert>
}
 80185de:	e010      	b.n	8018602 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80185e0:	4b0f      	ldr	r3, [pc, #60]	; (8018620 <prvAddCurrentTaskToDelayedList+0xc4>)
 80185e2:	681a      	ldr	r2, [r3, #0]
 80185e4:	4b0a      	ldr	r3, [pc, #40]	; (8018610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	3304      	adds	r3, #4
 80185ea:	4619      	mov	r1, r3
 80185ec:	4610      	mov	r0, r2
 80185ee:	f7fe f90c 	bl	801680a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80185f2:	4b0c      	ldr	r3, [pc, #48]	; (8018624 <prvAddCurrentTaskToDelayedList+0xc8>)
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	68ba      	ldr	r2, [r7, #8]
 80185f8:	429a      	cmp	r2, r3
 80185fa:	d202      	bcs.n	8018602 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80185fc:	4a09      	ldr	r2, [pc, #36]	; (8018624 <prvAddCurrentTaskToDelayedList+0xc8>)
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	6013      	str	r3, [r2, #0]
}
 8018602:	bf00      	nop
 8018604:	3710      	adds	r7, #16
 8018606:	46bd      	mov	sp, r7
 8018608:	bd80      	pop	{r7, pc}
 801860a:	bf00      	nop
 801860c:	200004e8 	.word	0x200004e8
 8018610:	200003e4 	.word	0x200003e4
 8018614:	200004ec 	.word	0x200004ec
 8018618:	200004d0 	.word	0x200004d0
 801861c:	200004a0 	.word	0x200004a0
 8018620:	2000049c 	.word	0x2000049c
 8018624:	20000504 	.word	0x20000504

08018628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018628:	b480      	push	{r7}
 801862a:	b085      	sub	sp, #20
 801862c:	af00      	add	r7, sp, #0
 801862e:	60f8      	str	r0, [r7, #12]
 8018630:	60b9      	str	r1, [r7, #8]
 8018632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	3b04      	subs	r3, #4
 8018638:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	3b04      	subs	r3, #4
 8018646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018648:	68bb      	ldr	r3, [r7, #8]
 801864a:	f023 0201 	bic.w	r2, r3, #1
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	3b04      	subs	r3, #4
 8018656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018658:	4a0c      	ldr	r2, [pc, #48]	; (801868c <pxPortInitialiseStack+0x64>)
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	3b14      	subs	r3, #20
 8018662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018664:	687a      	ldr	r2, [r7, #4]
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	3b04      	subs	r3, #4
 801866e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	f06f 0202 	mvn.w	r2, #2
 8018676:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	3b20      	subs	r3, #32
 801867c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801867e:	68fb      	ldr	r3, [r7, #12]
}
 8018680:	4618      	mov	r0, r3
 8018682:	3714      	adds	r7, #20
 8018684:	46bd      	mov	sp, r7
 8018686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801868a:	4770      	bx	lr
 801868c:	08018691 	.word	0x08018691

08018690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018690:	b480      	push	{r7}
 8018692:	b085      	sub	sp, #20
 8018694:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018696:	2300      	movs	r3, #0
 8018698:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801869a:	4b14      	ldr	r3, [pc, #80]	; (80186ec <prvTaskExitError+0x5c>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80186a2:	d00c      	beq.n	80186be <prvTaskExitError+0x2e>
	__asm volatile
 80186a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186a8:	b672      	cpsid	i
 80186aa:	f383 8811 	msr	BASEPRI, r3
 80186ae:	f3bf 8f6f 	isb	sy
 80186b2:	f3bf 8f4f 	dsb	sy
 80186b6:	b662      	cpsie	i
 80186b8:	60fb      	str	r3, [r7, #12]
}
 80186ba:	bf00      	nop
 80186bc:	e7fe      	b.n	80186bc <prvTaskExitError+0x2c>
	__asm volatile
 80186be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186c2:	b672      	cpsid	i
 80186c4:	f383 8811 	msr	BASEPRI, r3
 80186c8:	f3bf 8f6f 	isb	sy
 80186cc:	f3bf 8f4f 	dsb	sy
 80186d0:	b662      	cpsie	i
 80186d2:	60bb      	str	r3, [r7, #8]
}
 80186d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80186d6:	bf00      	nop
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d0fc      	beq.n	80186d8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80186de:	bf00      	nop
 80186e0:	bf00      	nop
 80186e2:	3714      	adds	r7, #20
 80186e4:	46bd      	mov	sp, r7
 80186e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ea:	4770      	bx	lr
 80186ec:	20000058 	.word	0x20000058

080186f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80186f0:	4b07      	ldr	r3, [pc, #28]	; (8018710 <pxCurrentTCBConst2>)
 80186f2:	6819      	ldr	r1, [r3, #0]
 80186f4:	6808      	ldr	r0, [r1, #0]
 80186f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186fa:	f380 8809 	msr	PSP, r0
 80186fe:	f3bf 8f6f 	isb	sy
 8018702:	f04f 0000 	mov.w	r0, #0
 8018706:	f380 8811 	msr	BASEPRI, r0
 801870a:	4770      	bx	lr
 801870c:	f3af 8000 	nop.w

08018710 <pxCurrentTCBConst2>:
 8018710:	200003e4 	.word	0x200003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018714:	bf00      	nop
 8018716:	bf00      	nop

08018718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018718:	4808      	ldr	r0, [pc, #32]	; (801873c <prvPortStartFirstTask+0x24>)
 801871a:	6800      	ldr	r0, [r0, #0]
 801871c:	6800      	ldr	r0, [r0, #0]
 801871e:	f380 8808 	msr	MSP, r0
 8018722:	f04f 0000 	mov.w	r0, #0
 8018726:	f380 8814 	msr	CONTROL, r0
 801872a:	b662      	cpsie	i
 801872c:	b661      	cpsie	f
 801872e:	f3bf 8f4f 	dsb	sy
 8018732:	f3bf 8f6f 	isb	sy
 8018736:	df00      	svc	0
 8018738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801873a:	bf00      	nop
 801873c:	e000ed08 	.word	0xe000ed08

08018740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b084      	sub	sp, #16
 8018744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018746:	4b37      	ldr	r3, [pc, #220]	; (8018824 <xPortStartScheduler+0xe4>)
 8018748:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	781b      	ldrb	r3, [r3, #0]
 801874e:	b2db      	uxtb	r3, r3
 8018750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	22ff      	movs	r2, #255	; 0xff
 8018756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	b2db      	uxtb	r3, r3
 801875e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018760:	78fb      	ldrb	r3, [r7, #3]
 8018762:	b2db      	uxtb	r3, r3
 8018764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018768:	b2da      	uxtb	r2, r3
 801876a:	4b2f      	ldr	r3, [pc, #188]	; (8018828 <xPortStartScheduler+0xe8>)
 801876c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801876e:	4b2f      	ldr	r3, [pc, #188]	; (801882c <xPortStartScheduler+0xec>)
 8018770:	2207      	movs	r2, #7
 8018772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018774:	e009      	b.n	801878a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8018776:	4b2d      	ldr	r3, [pc, #180]	; (801882c <xPortStartScheduler+0xec>)
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	3b01      	subs	r3, #1
 801877c:	4a2b      	ldr	r2, [pc, #172]	; (801882c <xPortStartScheduler+0xec>)
 801877e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018780:	78fb      	ldrb	r3, [r7, #3]
 8018782:	b2db      	uxtb	r3, r3
 8018784:	005b      	lsls	r3, r3, #1
 8018786:	b2db      	uxtb	r3, r3
 8018788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801878a:	78fb      	ldrb	r3, [r7, #3]
 801878c:	b2db      	uxtb	r3, r3
 801878e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018792:	2b80      	cmp	r3, #128	; 0x80
 8018794:	d0ef      	beq.n	8018776 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018796:	4b25      	ldr	r3, [pc, #148]	; (801882c <xPortStartScheduler+0xec>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	f1c3 0307 	rsb	r3, r3, #7
 801879e:	2b04      	cmp	r3, #4
 80187a0:	d00c      	beq.n	80187bc <xPortStartScheduler+0x7c>
	__asm volatile
 80187a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187a6:	b672      	cpsid	i
 80187a8:	f383 8811 	msr	BASEPRI, r3
 80187ac:	f3bf 8f6f 	isb	sy
 80187b0:	f3bf 8f4f 	dsb	sy
 80187b4:	b662      	cpsie	i
 80187b6:	60bb      	str	r3, [r7, #8]
}
 80187b8:	bf00      	nop
 80187ba:	e7fe      	b.n	80187ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80187bc:	4b1b      	ldr	r3, [pc, #108]	; (801882c <xPortStartScheduler+0xec>)
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	021b      	lsls	r3, r3, #8
 80187c2:	4a1a      	ldr	r2, [pc, #104]	; (801882c <xPortStartScheduler+0xec>)
 80187c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80187c6:	4b19      	ldr	r3, [pc, #100]	; (801882c <xPortStartScheduler+0xec>)
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80187ce:	4a17      	ldr	r2, [pc, #92]	; (801882c <xPortStartScheduler+0xec>)
 80187d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	b2da      	uxtb	r2, r3
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80187da:	4b15      	ldr	r3, [pc, #84]	; (8018830 <xPortStartScheduler+0xf0>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	4a14      	ldr	r2, [pc, #80]	; (8018830 <xPortStartScheduler+0xf0>)
 80187e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80187e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80187e6:	4b12      	ldr	r3, [pc, #72]	; (8018830 <xPortStartScheduler+0xf0>)
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	4a11      	ldr	r2, [pc, #68]	; (8018830 <xPortStartScheduler+0xf0>)
 80187ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80187f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80187f2:	f000 f8dd 	bl	80189b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80187f6:	4b0f      	ldr	r3, [pc, #60]	; (8018834 <xPortStartScheduler+0xf4>)
 80187f8:	2200      	movs	r2, #0
 80187fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80187fc:	f000 f8fc 	bl	80189f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018800:	4b0d      	ldr	r3, [pc, #52]	; (8018838 <xPortStartScheduler+0xf8>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	4a0c      	ldr	r2, [pc, #48]	; (8018838 <xPortStartScheduler+0xf8>)
 8018806:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801880a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801880c:	f7ff ff84 	bl	8018718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018810:	f7ff f996 	bl	8017b40 <vTaskSwitchContext>
	prvTaskExitError();
 8018814:	f7ff ff3c 	bl	8018690 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018818:	2300      	movs	r3, #0
}
 801881a:	4618      	mov	r0, r3
 801881c:	3710      	adds	r7, #16
 801881e:	46bd      	mov	sp, r7
 8018820:	bd80      	pop	{r7, pc}
 8018822:	bf00      	nop
 8018824:	e000e400 	.word	0xe000e400
 8018828:	20000510 	.word	0x20000510
 801882c:	20000514 	.word	0x20000514
 8018830:	e000ed20 	.word	0xe000ed20
 8018834:	20000058 	.word	0x20000058
 8018838:	e000ef34 	.word	0xe000ef34

0801883c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801883c:	b480      	push	{r7}
 801883e:	b083      	sub	sp, #12
 8018840:	af00      	add	r7, sp, #0
	__asm volatile
 8018842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018846:	b672      	cpsid	i
 8018848:	f383 8811 	msr	BASEPRI, r3
 801884c:	f3bf 8f6f 	isb	sy
 8018850:	f3bf 8f4f 	dsb	sy
 8018854:	b662      	cpsie	i
 8018856:	607b      	str	r3, [r7, #4]
}
 8018858:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801885a:	4b10      	ldr	r3, [pc, #64]	; (801889c <vPortEnterCritical+0x60>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	3301      	adds	r3, #1
 8018860:	4a0e      	ldr	r2, [pc, #56]	; (801889c <vPortEnterCritical+0x60>)
 8018862:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018864:	4b0d      	ldr	r3, [pc, #52]	; (801889c <vPortEnterCritical+0x60>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	2b01      	cmp	r3, #1
 801886a:	d111      	bne.n	8018890 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801886c:	4b0c      	ldr	r3, [pc, #48]	; (80188a0 <vPortEnterCritical+0x64>)
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	b2db      	uxtb	r3, r3
 8018872:	2b00      	cmp	r3, #0
 8018874:	d00c      	beq.n	8018890 <vPortEnterCritical+0x54>
	__asm volatile
 8018876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801887a:	b672      	cpsid	i
 801887c:	f383 8811 	msr	BASEPRI, r3
 8018880:	f3bf 8f6f 	isb	sy
 8018884:	f3bf 8f4f 	dsb	sy
 8018888:	b662      	cpsie	i
 801888a:	603b      	str	r3, [r7, #0]
}
 801888c:	bf00      	nop
 801888e:	e7fe      	b.n	801888e <vPortEnterCritical+0x52>
	}
}
 8018890:	bf00      	nop
 8018892:	370c      	adds	r7, #12
 8018894:	46bd      	mov	sp, r7
 8018896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801889a:	4770      	bx	lr
 801889c:	20000058 	.word	0x20000058
 80188a0:	e000ed04 	.word	0xe000ed04

080188a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80188a4:	b480      	push	{r7}
 80188a6:	b083      	sub	sp, #12
 80188a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80188aa:	4b13      	ldr	r3, [pc, #76]	; (80188f8 <vPortExitCritical+0x54>)
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d10c      	bne.n	80188cc <vPortExitCritical+0x28>
	__asm volatile
 80188b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188b6:	b672      	cpsid	i
 80188b8:	f383 8811 	msr	BASEPRI, r3
 80188bc:	f3bf 8f6f 	isb	sy
 80188c0:	f3bf 8f4f 	dsb	sy
 80188c4:	b662      	cpsie	i
 80188c6:	607b      	str	r3, [r7, #4]
}
 80188c8:	bf00      	nop
 80188ca:	e7fe      	b.n	80188ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80188cc:	4b0a      	ldr	r3, [pc, #40]	; (80188f8 <vPortExitCritical+0x54>)
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	3b01      	subs	r3, #1
 80188d2:	4a09      	ldr	r2, [pc, #36]	; (80188f8 <vPortExitCritical+0x54>)
 80188d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80188d6:	4b08      	ldr	r3, [pc, #32]	; (80188f8 <vPortExitCritical+0x54>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d105      	bne.n	80188ea <vPortExitCritical+0x46>
 80188de:	2300      	movs	r3, #0
 80188e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	f383 8811 	msr	BASEPRI, r3
}
 80188e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80188ea:	bf00      	nop
 80188ec:	370c      	adds	r7, #12
 80188ee:	46bd      	mov	sp, r7
 80188f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f4:	4770      	bx	lr
 80188f6:	bf00      	nop
 80188f8:	20000058 	.word	0x20000058
 80188fc:	00000000 	.word	0x00000000

08018900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018900:	f3ef 8009 	mrs	r0, PSP
 8018904:	f3bf 8f6f 	isb	sy
 8018908:	4b15      	ldr	r3, [pc, #84]	; (8018960 <pxCurrentTCBConst>)
 801890a:	681a      	ldr	r2, [r3, #0]
 801890c:	f01e 0f10 	tst.w	lr, #16
 8018910:	bf08      	it	eq
 8018912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801891a:	6010      	str	r0, [r2, #0]
 801891c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018924:	b672      	cpsid	i
 8018926:	f380 8811 	msr	BASEPRI, r0
 801892a:	f3bf 8f4f 	dsb	sy
 801892e:	f3bf 8f6f 	isb	sy
 8018932:	b662      	cpsie	i
 8018934:	f7ff f904 	bl	8017b40 <vTaskSwitchContext>
 8018938:	f04f 0000 	mov.w	r0, #0
 801893c:	f380 8811 	msr	BASEPRI, r0
 8018940:	bc09      	pop	{r0, r3}
 8018942:	6819      	ldr	r1, [r3, #0]
 8018944:	6808      	ldr	r0, [r1, #0]
 8018946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801894a:	f01e 0f10 	tst.w	lr, #16
 801894e:	bf08      	it	eq
 8018950:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018954:	f380 8809 	msr	PSP, r0
 8018958:	f3bf 8f6f 	isb	sy
 801895c:	4770      	bx	lr
 801895e:	bf00      	nop

08018960 <pxCurrentTCBConst>:
 8018960:	200003e4 	.word	0x200003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018964:	bf00      	nop
 8018966:	bf00      	nop

08018968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b082      	sub	sp, #8
 801896c:	af00      	add	r7, sp, #0
	__asm volatile
 801896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018972:	b672      	cpsid	i
 8018974:	f383 8811 	msr	BASEPRI, r3
 8018978:	f3bf 8f6f 	isb	sy
 801897c:	f3bf 8f4f 	dsb	sy
 8018980:	b662      	cpsie	i
 8018982:	607b      	str	r3, [r7, #4]
}
 8018984:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018986:	f7ff f821 	bl	80179cc <xTaskIncrementTick>
 801898a:	4603      	mov	r3, r0
 801898c:	2b00      	cmp	r3, #0
 801898e:	d003      	beq.n	8018998 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018990:	4b06      	ldr	r3, [pc, #24]	; (80189ac <SysTick_Handler+0x44>)
 8018992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018996:	601a      	str	r2, [r3, #0]
 8018998:	2300      	movs	r3, #0
 801899a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801899c:	683b      	ldr	r3, [r7, #0]
 801899e:	f383 8811 	msr	BASEPRI, r3
}
 80189a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80189a4:	bf00      	nop
 80189a6:	3708      	adds	r7, #8
 80189a8:	46bd      	mov	sp, r7
 80189aa:	bd80      	pop	{r7, pc}
 80189ac:	e000ed04 	.word	0xe000ed04

080189b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80189b0:	b480      	push	{r7}
 80189b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80189b4:	4b0b      	ldr	r3, [pc, #44]	; (80189e4 <vPortSetupTimerInterrupt+0x34>)
 80189b6:	2200      	movs	r2, #0
 80189b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80189ba:	4b0b      	ldr	r3, [pc, #44]	; (80189e8 <vPortSetupTimerInterrupt+0x38>)
 80189bc:	2200      	movs	r2, #0
 80189be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80189c0:	4b0a      	ldr	r3, [pc, #40]	; (80189ec <vPortSetupTimerInterrupt+0x3c>)
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	4a0a      	ldr	r2, [pc, #40]	; (80189f0 <vPortSetupTimerInterrupt+0x40>)
 80189c6:	fba2 2303 	umull	r2, r3, r2, r3
 80189ca:	099b      	lsrs	r3, r3, #6
 80189cc:	4a09      	ldr	r2, [pc, #36]	; (80189f4 <vPortSetupTimerInterrupt+0x44>)
 80189ce:	3b01      	subs	r3, #1
 80189d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80189d2:	4b04      	ldr	r3, [pc, #16]	; (80189e4 <vPortSetupTimerInterrupt+0x34>)
 80189d4:	2207      	movs	r2, #7
 80189d6:	601a      	str	r2, [r3, #0]
}
 80189d8:	bf00      	nop
 80189da:	46bd      	mov	sp, r7
 80189dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e0:	4770      	bx	lr
 80189e2:	bf00      	nop
 80189e4:	e000e010 	.word	0xe000e010
 80189e8:	e000e018 	.word	0xe000e018
 80189ec:	20000008 	.word	0x20000008
 80189f0:	10624dd3 	.word	0x10624dd3
 80189f4:	e000e014 	.word	0xe000e014

080189f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80189f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018a08 <vPortEnableVFP+0x10>
 80189fc:	6801      	ldr	r1, [r0, #0]
 80189fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018a02:	6001      	str	r1, [r0, #0]
 8018a04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018a06:	bf00      	nop
 8018a08:	e000ed88 	.word	0xe000ed88

08018a0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018a0c:	b480      	push	{r7}
 8018a0e:	b085      	sub	sp, #20
 8018a10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018a12:	f3ef 8305 	mrs	r3, IPSR
 8018a16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	2b0f      	cmp	r3, #15
 8018a1c:	d916      	bls.n	8018a4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018a1e:	4a19      	ldr	r2, [pc, #100]	; (8018a84 <vPortValidateInterruptPriority+0x78>)
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	4413      	add	r3, r2
 8018a24:	781b      	ldrb	r3, [r3, #0]
 8018a26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018a28:	4b17      	ldr	r3, [pc, #92]	; (8018a88 <vPortValidateInterruptPriority+0x7c>)
 8018a2a:	781b      	ldrb	r3, [r3, #0]
 8018a2c:	7afa      	ldrb	r2, [r7, #11]
 8018a2e:	429a      	cmp	r2, r3
 8018a30:	d20c      	bcs.n	8018a4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8018a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a36:	b672      	cpsid	i
 8018a38:	f383 8811 	msr	BASEPRI, r3
 8018a3c:	f3bf 8f6f 	isb	sy
 8018a40:	f3bf 8f4f 	dsb	sy
 8018a44:	b662      	cpsie	i
 8018a46:	607b      	str	r3, [r7, #4]
}
 8018a48:	bf00      	nop
 8018a4a:	e7fe      	b.n	8018a4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018a4c:	4b0f      	ldr	r3, [pc, #60]	; (8018a8c <vPortValidateInterruptPriority+0x80>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018a54:	4b0e      	ldr	r3, [pc, #56]	; (8018a90 <vPortValidateInterruptPriority+0x84>)
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d90c      	bls.n	8018a76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8018a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a60:	b672      	cpsid	i
 8018a62:	f383 8811 	msr	BASEPRI, r3
 8018a66:	f3bf 8f6f 	isb	sy
 8018a6a:	f3bf 8f4f 	dsb	sy
 8018a6e:	b662      	cpsie	i
 8018a70:	603b      	str	r3, [r7, #0]
}
 8018a72:	bf00      	nop
 8018a74:	e7fe      	b.n	8018a74 <vPortValidateInterruptPriority+0x68>
	}
 8018a76:	bf00      	nop
 8018a78:	3714      	adds	r7, #20
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a80:	4770      	bx	lr
 8018a82:	bf00      	nop
 8018a84:	e000e3f0 	.word	0xe000e3f0
 8018a88:	20000510 	.word	0x20000510
 8018a8c:	e000ed0c 	.word	0xe000ed0c
 8018a90:	20000514 	.word	0x20000514

08018a94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b08a      	sub	sp, #40	; 0x28
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018aa0:	f7fe fec6 	bl	8017830 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018aa4:	4b5e      	ldr	r3, [pc, #376]	; (8018c20 <pvPortMalloc+0x18c>)
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d101      	bne.n	8018ab0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018aac:	f000 f920 	bl	8018cf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018ab0:	4b5c      	ldr	r3, [pc, #368]	; (8018c24 <pvPortMalloc+0x190>)
 8018ab2:	681a      	ldr	r2, [r3, #0]
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	4013      	ands	r3, r2
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	f040 8092 	bne.w	8018be2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d01f      	beq.n	8018b04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8018ac4:	2208      	movs	r2, #8
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	4413      	add	r3, r2
 8018aca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	f003 0307 	and.w	r3, r3, #7
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d016      	beq.n	8018b04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	f023 0307 	bic.w	r3, r3, #7
 8018adc:	3308      	adds	r3, #8
 8018ade:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f003 0307 	and.w	r3, r3, #7
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d00c      	beq.n	8018b04 <pvPortMalloc+0x70>
	__asm volatile
 8018aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aee:	b672      	cpsid	i
 8018af0:	f383 8811 	msr	BASEPRI, r3
 8018af4:	f3bf 8f6f 	isb	sy
 8018af8:	f3bf 8f4f 	dsb	sy
 8018afc:	b662      	cpsie	i
 8018afe:	617b      	str	r3, [r7, #20]
}
 8018b00:	bf00      	nop
 8018b02:	e7fe      	b.n	8018b02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d06b      	beq.n	8018be2 <pvPortMalloc+0x14e>
 8018b0a:	4b47      	ldr	r3, [pc, #284]	; (8018c28 <pvPortMalloc+0x194>)
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	687a      	ldr	r2, [r7, #4]
 8018b10:	429a      	cmp	r2, r3
 8018b12:	d866      	bhi.n	8018be2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018b14:	4b45      	ldr	r3, [pc, #276]	; (8018c2c <pvPortMalloc+0x198>)
 8018b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018b18:	4b44      	ldr	r3, [pc, #272]	; (8018c2c <pvPortMalloc+0x198>)
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018b1e:	e004      	b.n	8018b2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8018b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b2c:	685b      	ldr	r3, [r3, #4]
 8018b2e:	687a      	ldr	r2, [r7, #4]
 8018b30:	429a      	cmp	r2, r3
 8018b32:	d903      	bls.n	8018b3c <pvPortMalloc+0xa8>
 8018b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d1f1      	bne.n	8018b20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018b3c:	4b38      	ldr	r3, [pc, #224]	; (8018c20 <pvPortMalloc+0x18c>)
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b42:	429a      	cmp	r2, r3
 8018b44:	d04d      	beq.n	8018be2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018b46:	6a3b      	ldr	r3, [r7, #32]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	2208      	movs	r2, #8
 8018b4c:	4413      	add	r3, r2
 8018b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b52:	681a      	ldr	r2, [r3, #0]
 8018b54:	6a3b      	ldr	r3, [r7, #32]
 8018b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b5a:	685a      	ldr	r2, [r3, #4]
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	1ad2      	subs	r2, r2, r3
 8018b60:	2308      	movs	r3, #8
 8018b62:	005b      	lsls	r3, r3, #1
 8018b64:	429a      	cmp	r2, r3
 8018b66:	d921      	bls.n	8018bac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	4413      	add	r3, r2
 8018b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018b70:	69bb      	ldr	r3, [r7, #24]
 8018b72:	f003 0307 	and.w	r3, r3, #7
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d00c      	beq.n	8018b94 <pvPortMalloc+0x100>
	__asm volatile
 8018b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b7e:	b672      	cpsid	i
 8018b80:	f383 8811 	msr	BASEPRI, r3
 8018b84:	f3bf 8f6f 	isb	sy
 8018b88:	f3bf 8f4f 	dsb	sy
 8018b8c:	b662      	cpsie	i
 8018b8e:	613b      	str	r3, [r7, #16]
}
 8018b90:	bf00      	nop
 8018b92:	e7fe      	b.n	8018b92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b96:	685a      	ldr	r2, [r3, #4]
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	1ad2      	subs	r2, r2, r3
 8018b9c:	69bb      	ldr	r3, [r7, #24]
 8018b9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ba2:	687a      	ldr	r2, [r7, #4]
 8018ba4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018ba6:	69b8      	ldr	r0, [r7, #24]
 8018ba8:	f000 f904 	bl	8018db4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018bac:	4b1e      	ldr	r3, [pc, #120]	; (8018c28 <pvPortMalloc+0x194>)
 8018bae:	681a      	ldr	r2, [r3, #0]
 8018bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bb2:	685b      	ldr	r3, [r3, #4]
 8018bb4:	1ad3      	subs	r3, r2, r3
 8018bb6:	4a1c      	ldr	r2, [pc, #112]	; (8018c28 <pvPortMalloc+0x194>)
 8018bb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018bba:	4b1b      	ldr	r3, [pc, #108]	; (8018c28 <pvPortMalloc+0x194>)
 8018bbc:	681a      	ldr	r2, [r3, #0]
 8018bbe:	4b1c      	ldr	r3, [pc, #112]	; (8018c30 <pvPortMalloc+0x19c>)
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	429a      	cmp	r2, r3
 8018bc4:	d203      	bcs.n	8018bce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018bc6:	4b18      	ldr	r3, [pc, #96]	; (8018c28 <pvPortMalloc+0x194>)
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	4a19      	ldr	r2, [pc, #100]	; (8018c30 <pvPortMalloc+0x19c>)
 8018bcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bd0:	685a      	ldr	r2, [r3, #4]
 8018bd2:	4b14      	ldr	r3, [pc, #80]	; (8018c24 <pvPortMalloc+0x190>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	431a      	orrs	r2, r3
 8018bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bde:	2200      	movs	r2, #0
 8018be0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018be2:	f7fe fe33 	bl	801784c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8018be6:	69fb      	ldr	r3, [r7, #28]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d101      	bne.n	8018bf0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8018bec:	f7e8 fc70 	bl	80014d0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018bf0:	69fb      	ldr	r3, [r7, #28]
 8018bf2:	f003 0307 	and.w	r3, r3, #7
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d00c      	beq.n	8018c14 <pvPortMalloc+0x180>
	__asm volatile
 8018bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bfe:	b672      	cpsid	i
 8018c00:	f383 8811 	msr	BASEPRI, r3
 8018c04:	f3bf 8f6f 	isb	sy
 8018c08:	f3bf 8f4f 	dsb	sy
 8018c0c:	b662      	cpsie	i
 8018c0e:	60fb      	str	r3, [r7, #12]
}
 8018c10:	bf00      	nop
 8018c12:	e7fe      	b.n	8018c12 <pvPortMalloc+0x17e>
	return pvReturn;
 8018c14:	69fb      	ldr	r3, [r7, #28]
}
 8018c16:	4618      	mov	r0, r3
 8018c18:	3728      	adds	r7, #40	; 0x28
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	bd80      	pop	{r7, pc}
 8018c1e:	bf00      	nop
 8018c20:	20008520 	.word	0x20008520
 8018c24:	2000852c 	.word	0x2000852c
 8018c28:	20008524 	.word	0x20008524
 8018c2c:	20008518 	.word	0x20008518
 8018c30:	20008528 	.word	0x20008528

08018c34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b086      	sub	sp, #24
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d04c      	beq.n	8018ce0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018c46:	2308      	movs	r3, #8
 8018c48:	425b      	negs	r3, r3
 8018c4a:	697a      	ldr	r2, [r7, #20]
 8018c4c:	4413      	add	r3, r2
 8018c4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018c50:	697b      	ldr	r3, [r7, #20]
 8018c52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018c54:	693b      	ldr	r3, [r7, #16]
 8018c56:	685a      	ldr	r2, [r3, #4]
 8018c58:	4b23      	ldr	r3, [pc, #140]	; (8018ce8 <vPortFree+0xb4>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	4013      	ands	r3, r2
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d10c      	bne.n	8018c7c <vPortFree+0x48>
	__asm volatile
 8018c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c66:	b672      	cpsid	i
 8018c68:	f383 8811 	msr	BASEPRI, r3
 8018c6c:	f3bf 8f6f 	isb	sy
 8018c70:	f3bf 8f4f 	dsb	sy
 8018c74:	b662      	cpsie	i
 8018c76:	60fb      	str	r3, [r7, #12]
}
 8018c78:	bf00      	nop
 8018c7a:	e7fe      	b.n	8018c7a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018c7c:	693b      	ldr	r3, [r7, #16]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d00c      	beq.n	8018c9e <vPortFree+0x6a>
	__asm volatile
 8018c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c88:	b672      	cpsid	i
 8018c8a:	f383 8811 	msr	BASEPRI, r3
 8018c8e:	f3bf 8f6f 	isb	sy
 8018c92:	f3bf 8f4f 	dsb	sy
 8018c96:	b662      	cpsie	i
 8018c98:	60bb      	str	r3, [r7, #8]
}
 8018c9a:	bf00      	nop
 8018c9c:	e7fe      	b.n	8018c9c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018c9e:	693b      	ldr	r3, [r7, #16]
 8018ca0:	685a      	ldr	r2, [r3, #4]
 8018ca2:	4b11      	ldr	r3, [pc, #68]	; (8018ce8 <vPortFree+0xb4>)
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	4013      	ands	r3, r2
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d019      	beq.n	8018ce0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018cac:	693b      	ldr	r3, [r7, #16]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d115      	bne.n	8018ce0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018cb4:	693b      	ldr	r3, [r7, #16]
 8018cb6:	685a      	ldr	r2, [r3, #4]
 8018cb8:	4b0b      	ldr	r3, [pc, #44]	; (8018ce8 <vPortFree+0xb4>)
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	43db      	mvns	r3, r3
 8018cbe:	401a      	ands	r2, r3
 8018cc0:	693b      	ldr	r3, [r7, #16]
 8018cc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018cc4:	f7fe fdb4 	bl	8017830 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018cc8:	693b      	ldr	r3, [r7, #16]
 8018cca:	685a      	ldr	r2, [r3, #4]
 8018ccc:	4b07      	ldr	r3, [pc, #28]	; (8018cec <vPortFree+0xb8>)
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	4413      	add	r3, r2
 8018cd2:	4a06      	ldr	r2, [pc, #24]	; (8018cec <vPortFree+0xb8>)
 8018cd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018cd6:	6938      	ldr	r0, [r7, #16]
 8018cd8:	f000 f86c 	bl	8018db4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018cdc:	f7fe fdb6 	bl	801784c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018ce0:	bf00      	nop
 8018ce2:	3718      	adds	r7, #24
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}
 8018ce8:	2000852c 	.word	0x2000852c
 8018cec:	20008524 	.word	0x20008524

08018cf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018cf0:	b480      	push	{r7}
 8018cf2:	b085      	sub	sp, #20
 8018cf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018cfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018cfc:	4b27      	ldr	r3, [pc, #156]	; (8018d9c <prvHeapInit+0xac>)
 8018cfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	f003 0307 	and.w	r3, r3, #7
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d00c      	beq.n	8018d24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	3307      	adds	r3, #7
 8018d0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	f023 0307 	bic.w	r3, r3, #7
 8018d16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018d18:	68ba      	ldr	r2, [r7, #8]
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	1ad3      	subs	r3, r2, r3
 8018d1e:	4a1f      	ldr	r2, [pc, #124]	; (8018d9c <prvHeapInit+0xac>)
 8018d20:	4413      	add	r3, r2
 8018d22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018d28:	4a1d      	ldr	r2, [pc, #116]	; (8018da0 <prvHeapInit+0xb0>)
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018d2e:	4b1c      	ldr	r3, [pc, #112]	; (8018da0 <prvHeapInit+0xb0>)
 8018d30:	2200      	movs	r2, #0
 8018d32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	68ba      	ldr	r2, [r7, #8]
 8018d38:	4413      	add	r3, r2
 8018d3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018d3c:	2208      	movs	r2, #8
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	1a9b      	subs	r3, r3, r2
 8018d42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	f023 0307 	bic.w	r3, r3, #7
 8018d4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	4a15      	ldr	r2, [pc, #84]	; (8018da4 <prvHeapInit+0xb4>)
 8018d50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018d52:	4b14      	ldr	r3, [pc, #80]	; (8018da4 <prvHeapInit+0xb4>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	2200      	movs	r2, #0
 8018d58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018d5a:	4b12      	ldr	r3, [pc, #72]	; (8018da4 <prvHeapInit+0xb4>)
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	2200      	movs	r2, #0
 8018d60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018d66:	683b      	ldr	r3, [r7, #0]
 8018d68:	68fa      	ldr	r2, [r7, #12]
 8018d6a:	1ad2      	subs	r2, r2, r3
 8018d6c:	683b      	ldr	r3, [r7, #0]
 8018d6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018d70:	4b0c      	ldr	r3, [pc, #48]	; (8018da4 <prvHeapInit+0xb4>)
 8018d72:	681a      	ldr	r2, [r3, #0]
 8018d74:	683b      	ldr	r3, [r7, #0]
 8018d76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	685b      	ldr	r3, [r3, #4]
 8018d7c:	4a0a      	ldr	r2, [pc, #40]	; (8018da8 <prvHeapInit+0xb8>)
 8018d7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018d80:	683b      	ldr	r3, [r7, #0]
 8018d82:	685b      	ldr	r3, [r3, #4]
 8018d84:	4a09      	ldr	r2, [pc, #36]	; (8018dac <prvHeapInit+0xbc>)
 8018d86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018d88:	4b09      	ldr	r3, [pc, #36]	; (8018db0 <prvHeapInit+0xc0>)
 8018d8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018d8e:	601a      	str	r2, [r3, #0]
}
 8018d90:	bf00      	nop
 8018d92:	3714      	adds	r7, #20
 8018d94:	46bd      	mov	sp, r7
 8018d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9a:	4770      	bx	lr
 8018d9c:	20000518 	.word	0x20000518
 8018da0:	20008518 	.word	0x20008518
 8018da4:	20008520 	.word	0x20008520
 8018da8:	20008528 	.word	0x20008528
 8018dac:	20008524 	.word	0x20008524
 8018db0:	2000852c 	.word	0x2000852c

08018db4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018db4:	b480      	push	{r7}
 8018db6:	b085      	sub	sp, #20
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018dbc:	4b28      	ldr	r3, [pc, #160]	; (8018e60 <prvInsertBlockIntoFreeList+0xac>)
 8018dbe:	60fb      	str	r3, [r7, #12]
 8018dc0:	e002      	b.n	8018dc8 <prvInsertBlockIntoFreeList+0x14>
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	60fb      	str	r3, [r7, #12]
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	687a      	ldr	r2, [r7, #4]
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	d8f7      	bhi.n	8018dc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	685b      	ldr	r3, [r3, #4]
 8018dda:	68ba      	ldr	r2, [r7, #8]
 8018ddc:	4413      	add	r3, r2
 8018dde:	687a      	ldr	r2, [r7, #4]
 8018de0:	429a      	cmp	r2, r3
 8018de2:	d108      	bne.n	8018df6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	685a      	ldr	r2, [r3, #4]
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	685b      	ldr	r3, [r3, #4]
 8018dec:	441a      	add	r2, r3
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	685b      	ldr	r3, [r3, #4]
 8018dfe:	68ba      	ldr	r2, [r7, #8]
 8018e00:	441a      	add	r2, r3
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	429a      	cmp	r2, r3
 8018e08:	d118      	bne.n	8018e3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	681a      	ldr	r2, [r3, #0]
 8018e0e:	4b15      	ldr	r3, [pc, #84]	; (8018e64 <prvInsertBlockIntoFreeList+0xb0>)
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	429a      	cmp	r2, r3
 8018e14:	d00d      	beq.n	8018e32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	685a      	ldr	r2, [r3, #4]
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	685b      	ldr	r3, [r3, #4]
 8018e20:	441a      	add	r2, r3
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	681a      	ldr	r2, [r3, #0]
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	601a      	str	r2, [r3, #0]
 8018e30:	e008      	b.n	8018e44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018e32:	4b0c      	ldr	r3, [pc, #48]	; (8018e64 <prvInsertBlockIntoFreeList+0xb0>)
 8018e34:	681a      	ldr	r2, [r3, #0]
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	601a      	str	r2, [r3, #0]
 8018e3a:	e003      	b.n	8018e44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	681a      	ldr	r2, [r3, #0]
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018e44:	68fa      	ldr	r2, [r7, #12]
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	429a      	cmp	r2, r3
 8018e4a:	d002      	beq.n	8018e52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	687a      	ldr	r2, [r7, #4]
 8018e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018e52:	bf00      	nop
 8018e54:	3714      	adds	r7, #20
 8018e56:	46bd      	mov	sp, r7
 8018e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e5c:	4770      	bx	lr
 8018e5e:	bf00      	nop
 8018e60:	20008518 	.word	0x20008518
 8018e64:	20008520 	.word	0x20008520

08018e68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8018e6c:	2201      	movs	r2, #1
 8018e6e:	490e      	ldr	r1, [pc, #56]	; (8018ea8 <MX_USB_HOST_Init+0x40>)
 8018e70:	480e      	ldr	r0, [pc, #56]	; (8018eac <MX_USB_HOST_Init+0x44>)
 8018e72:	f7fb fc7d 	bl	8014770 <USBH_Init>
 8018e76:	4603      	mov	r3, r0
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d001      	beq.n	8018e80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8018e7c:	f7e9 ff56 	bl	8002d2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8018e80:	490b      	ldr	r1, [pc, #44]	; (8018eb0 <MX_USB_HOST_Init+0x48>)
 8018e82:	480a      	ldr	r0, [pc, #40]	; (8018eac <MX_USB_HOST_Init+0x44>)
 8018e84:	f7fb fd2a 	bl	80148dc <USBH_RegisterClass>
 8018e88:	4603      	mov	r3, r0
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d001      	beq.n	8018e92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8018e8e:	f7e9 ff4d 	bl	8002d2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8018e92:	4806      	ldr	r0, [pc, #24]	; (8018eac <MX_USB_HOST_Init+0x44>)
 8018e94:	f7fb fdae 	bl	80149f4 <USBH_Start>
 8018e98:	4603      	mov	r3, r0
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d001      	beq.n	8018ea2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8018e9e:	f7e9 ff45 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8018ea2:	bf00      	nop
 8018ea4:	bd80      	pop	{r7, pc}
 8018ea6:	bf00      	nop
 8018ea8:	08018eb5 	.word	0x08018eb5
 8018eac:	2004a938 	.word	0x2004a938
 8018eb0:	20000038 	.word	0x20000038

08018eb4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8018eb4:	b480      	push	{r7}
 8018eb6:	b083      	sub	sp, #12
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	6078      	str	r0, [r7, #4]
 8018ebc:	460b      	mov	r3, r1
 8018ebe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8018ec0:	78fb      	ldrb	r3, [r7, #3]
 8018ec2:	3b01      	subs	r3, #1
 8018ec4:	2b04      	cmp	r3, #4
 8018ec6:	d819      	bhi.n	8018efc <USBH_UserProcess+0x48>
 8018ec8:	a201      	add	r2, pc, #4	; (adr r2, 8018ed0 <USBH_UserProcess+0x1c>)
 8018eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ece:	bf00      	nop
 8018ed0:	08018efd 	.word	0x08018efd
 8018ed4:	08018eed 	.word	0x08018eed
 8018ed8:	08018efd 	.word	0x08018efd
 8018edc:	08018ef5 	.word	0x08018ef5
 8018ee0:	08018ee5 	.word	0x08018ee5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018ee4:	4b09      	ldr	r3, [pc, #36]	; (8018f0c <USBH_UserProcess+0x58>)
 8018ee6:	2203      	movs	r2, #3
 8018ee8:	701a      	strb	r2, [r3, #0]
  break;
 8018eea:	e008      	b.n	8018efe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8018eec:	4b07      	ldr	r3, [pc, #28]	; (8018f0c <USBH_UserProcess+0x58>)
 8018eee:	2202      	movs	r2, #2
 8018ef0:	701a      	strb	r2, [r3, #0]
  break;
 8018ef2:	e004      	b.n	8018efe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018ef4:	4b05      	ldr	r3, [pc, #20]	; (8018f0c <USBH_UserProcess+0x58>)
 8018ef6:	2201      	movs	r2, #1
 8018ef8:	701a      	strb	r2, [r3, #0]
  break;
 8018efa:	e000      	b.n	8018efe <USBH_UserProcess+0x4a>

  default:
  break;
 8018efc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8018efe:	bf00      	nop
 8018f00:	370c      	adds	r7, #12
 8018f02:	46bd      	mov	sp, r7
 8018f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f08:	4770      	bx	lr
 8018f0a:	bf00      	nop
 8018f0c:	20008530 	.word	0x20008530

08018f10 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b08a      	sub	sp, #40	; 0x28
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018f18:	f107 0314 	add.w	r3, r7, #20
 8018f1c:	2200      	movs	r2, #0
 8018f1e:	601a      	str	r2, [r3, #0]
 8018f20:	605a      	str	r2, [r3, #4]
 8018f22:	609a      	str	r2, [r3, #8]
 8018f24:	60da      	str	r2, [r3, #12]
 8018f26:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018f30:	d13c      	bne.n	8018fac <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018f32:	4b20      	ldr	r3, [pc, #128]	; (8018fb4 <HAL_HCD_MspInit+0xa4>)
 8018f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f36:	4a1f      	ldr	r2, [pc, #124]	; (8018fb4 <HAL_HCD_MspInit+0xa4>)
 8018f38:	f043 0301 	orr.w	r3, r3, #1
 8018f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8018f3e:	4b1d      	ldr	r3, [pc, #116]	; (8018fb4 <HAL_HCD_MspInit+0xa4>)
 8018f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f42:	f003 0301 	and.w	r3, r3, #1
 8018f46:	613b      	str	r3, [r7, #16]
 8018f48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8018f4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8018f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f50:	2302      	movs	r3, #2
 8018f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f54:	2300      	movs	r3, #0
 8018f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f58:	2303      	movs	r3, #3
 8018f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018f5c:	230a      	movs	r3, #10
 8018f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018f60:	f107 0314 	add.w	r3, r7, #20
 8018f64:	4619      	mov	r1, r3
 8018f66:	4814      	ldr	r0, [pc, #80]	; (8018fb8 <HAL_HCD_MspInit+0xa8>)
 8018f68:	f7ef fe28 	bl	8008bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018f6c:	4b11      	ldr	r3, [pc, #68]	; (8018fb4 <HAL_HCD_MspInit+0xa4>)
 8018f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f70:	4a10      	ldr	r2, [pc, #64]	; (8018fb4 <HAL_HCD_MspInit+0xa4>)
 8018f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f76:	6353      	str	r3, [r2, #52]	; 0x34
 8018f78:	4b0e      	ldr	r3, [pc, #56]	; (8018fb4 <HAL_HCD_MspInit+0xa4>)
 8018f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018f80:	60fb      	str	r3, [r7, #12]
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	4b0b      	ldr	r3, [pc, #44]	; (8018fb4 <HAL_HCD_MspInit+0xa4>)
 8018f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f88:	4a0a      	ldr	r2, [pc, #40]	; (8018fb4 <HAL_HCD_MspInit+0xa4>)
 8018f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8018f90:	4b08      	ldr	r3, [pc, #32]	; (8018fb4 <HAL_HCD_MspInit+0xa4>)
 8018f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018f98:	60bb      	str	r3, [r7, #8]
 8018f9a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	2105      	movs	r1, #5
 8018fa0:	2043      	movs	r0, #67	; 0x43
 8018fa2:	f7ee fb71 	bl	8007688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018fa6:	2043      	movs	r0, #67	; 0x43
 8018fa8:	f7ee fb8a 	bl	80076c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018fac:	bf00      	nop
 8018fae:	3728      	adds	r7, #40	; 0x28
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}
 8018fb4:	40023800 	.word	0x40023800
 8018fb8:	40020000 	.word	0x40020000

08018fbc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b082      	sub	sp, #8
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018fca:	4618      	mov	r0, r3
 8018fcc:	f7fc f9bf 	bl	801534e <USBH_LL_IncTimer>
}
 8018fd0:	bf00      	nop
 8018fd2:	3708      	adds	r7, #8
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bd80      	pop	{r7, pc}

08018fd8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b082      	sub	sp, #8
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7fc fa03 	bl	80153f2 <USBH_LL_Connect>
}
 8018fec:	bf00      	nop
 8018fee:	3708      	adds	r7, #8
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd80      	pop	{r7, pc}

08018ff4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b082      	sub	sp, #8
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019002:	4618      	mov	r0, r3
 8019004:	f7fc fa18 	bl	8015438 <USBH_LL_Disconnect>
}
 8019008:	bf00      	nop
 801900a:	3708      	adds	r7, #8
 801900c:	46bd      	mov	sp, r7
 801900e:	bd80      	pop	{r7, pc}

08019010 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b082      	sub	sp, #8
 8019014:	af00      	add	r7, sp, #0
 8019016:	6078      	str	r0, [r7, #4]
 8019018:	460b      	mov	r3, r1
 801901a:	70fb      	strb	r3, [r7, #3]
 801901c:	4613      	mov	r3, r2
 801901e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019026:	4618      	mov	r0, r3
 8019028:	f7fc fa4d 	bl	80154c6 <USBH_LL_NotifyURBChange>
#endif
}
 801902c:	bf00      	nop
 801902e:	3708      	adds	r7, #8
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}

08019034 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b082      	sub	sp, #8
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019042:	4618      	mov	r0, r3
 8019044:	f7fc f9ad 	bl	80153a2 <USBH_LL_PortEnabled>
}
 8019048:	bf00      	nop
 801904a:	3708      	adds	r7, #8
 801904c:	46bd      	mov	sp, r7
 801904e:	bd80      	pop	{r7, pc}

08019050 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b082      	sub	sp, #8
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801905e:	4618      	mov	r0, r3
 8019060:	f7fc f9b9 	bl	80153d6 <USBH_LL_PortDisabled>
}
 8019064:	bf00      	nop
 8019066:	3708      	adds	r7, #8
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}

0801906c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801906c:	b580      	push	{r7, lr}
 801906e:	b082      	sub	sp, #8
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801907a:	2b01      	cmp	r3, #1
 801907c:	d12a      	bne.n	80190d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801907e:	4a18      	ldr	r2, [pc, #96]	; (80190e0 <USBH_LL_Init+0x74>)
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	4a15      	ldr	r2, [pc, #84]	; (80190e0 <USBH_LL_Init+0x74>)
 801908a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801908e:	4b14      	ldr	r3, [pc, #80]	; (80190e0 <USBH_LL_Init+0x74>)
 8019090:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019094:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019096:	4b12      	ldr	r3, [pc, #72]	; (80190e0 <USBH_LL_Init+0x74>)
 8019098:	2208      	movs	r2, #8
 801909a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801909c:	4b10      	ldr	r3, [pc, #64]	; (80190e0 <USBH_LL_Init+0x74>)
 801909e:	2201      	movs	r2, #1
 80190a0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80190a2:	4b0f      	ldr	r3, [pc, #60]	; (80190e0 <USBH_LL_Init+0x74>)
 80190a4:	2200      	movs	r2, #0
 80190a6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80190a8:	4b0d      	ldr	r3, [pc, #52]	; (80190e0 <USBH_LL_Init+0x74>)
 80190aa:	2202      	movs	r2, #2
 80190ac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80190ae:	4b0c      	ldr	r3, [pc, #48]	; (80190e0 <USBH_LL_Init+0x74>)
 80190b0:	2200      	movs	r2, #0
 80190b2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80190b4:	480a      	ldr	r0, [pc, #40]	; (80190e0 <USBH_LL_Init+0x74>)
 80190b6:	f7f0 f8a8 	bl	800920a <HAL_HCD_Init>
 80190ba:	4603      	mov	r3, r0
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d001      	beq.n	80190c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80190c0:	f7e9 fe34 	bl	8002d2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80190c4:	4806      	ldr	r0, [pc, #24]	; (80190e0 <USBH_LL_Init+0x74>)
 80190c6:	f7f0 fc85 	bl	80099d4 <HAL_HCD_GetCurrentFrame>
 80190ca:	4603      	mov	r3, r0
 80190cc:	4619      	mov	r1, r3
 80190ce:	6878      	ldr	r0, [r7, #4]
 80190d0:	f7fc f92e 	bl	8015330 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80190d4:	2300      	movs	r3, #0
}
 80190d6:	4618      	mov	r0, r3
 80190d8:	3708      	adds	r7, #8
 80190da:	46bd      	mov	sp, r7
 80190dc:	bd80      	pop	{r7, pc}
 80190de:	bf00      	nop
 80190e0:	2004ad1c 	.word	0x2004ad1c

080190e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	b084      	sub	sp, #16
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190ec:	2300      	movs	r3, #0
 80190ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80190f0:	2300      	movs	r3, #0
 80190f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7f0 fbf4 	bl	80098e8 <HAL_HCD_Start>
 8019100:	4603      	mov	r3, r0
 8019102:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019104:	7bfb      	ldrb	r3, [r7, #15]
 8019106:	4618      	mov	r0, r3
 8019108:	f000 f95c 	bl	80193c4 <USBH_Get_USB_Status>
 801910c:	4603      	mov	r3, r0
 801910e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019110:	7bbb      	ldrb	r3, [r7, #14]
}
 8019112:	4618      	mov	r0, r3
 8019114:	3710      	adds	r7, #16
 8019116:	46bd      	mov	sp, r7
 8019118:	bd80      	pop	{r7, pc}

0801911a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801911a:	b580      	push	{r7, lr}
 801911c:	b084      	sub	sp, #16
 801911e:	af00      	add	r7, sp, #0
 8019120:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019122:	2300      	movs	r3, #0
 8019124:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019126:	2300      	movs	r3, #0
 8019128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019130:	4618      	mov	r0, r3
 8019132:	f7f0 fbfc 	bl	800992e <HAL_HCD_Stop>
 8019136:	4603      	mov	r3, r0
 8019138:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801913a:	7bfb      	ldrb	r3, [r7, #15]
 801913c:	4618      	mov	r0, r3
 801913e:	f000 f941 	bl	80193c4 <USBH_Get_USB_Status>
 8019142:	4603      	mov	r3, r0
 8019144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019146:	7bbb      	ldrb	r3, [r7, #14]
}
 8019148:	4618      	mov	r0, r3
 801914a:	3710      	adds	r7, #16
 801914c:	46bd      	mov	sp, r7
 801914e:	bd80      	pop	{r7, pc}

08019150 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8019150:	b580      	push	{r7, lr}
 8019152:	b084      	sub	sp, #16
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019158:	2301      	movs	r3, #1
 801915a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019162:	4618      	mov	r0, r3
 8019164:	f7f0 fc44 	bl	80099f0 <HAL_HCD_GetCurrentSpeed>
 8019168:	4603      	mov	r3, r0
 801916a:	2b02      	cmp	r3, #2
 801916c:	d00c      	beq.n	8019188 <USBH_LL_GetSpeed+0x38>
 801916e:	2b02      	cmp	r3, #2
 8019170:	d80d      	bhi.n	801918e <USBH_LL_GetSpeed+0x3e>
 8019172:	2b00      	cmp	r3, #0
 8019174:	d002      	beq.n	801917c <USBH_LL_GetSpeed+0x2c>
 8019176:	2b01      	cmp	r3, #1
 8019178:	d003      	beq.n	8019182 <USBH_LL_GetSpeed+0x32>
 801917a:	e008      	b.n	801918e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801917c:	2300      	movs	r3, #0
 801917e:	73fb      	strb	r3, [r7, #15]
    break;
 8019180:	e008      	b.n	8019194 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8019182:	2301      	movs	r3, #1
 8019184:	73fb      	strb	r3, [r7, #15]
    break;
 8019186:	e005      	b.n	8019194 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019188:	2302      	movs	r3, #2
 801918a:	73fb      	strb	r3, [r7, #15]
    break;
 801918c:	e002      	b.n	8019194 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801918e:	2301      	movs	r3, #1
 8019190:	73fb      	strb	r3, [r7, #15]
    break;
 8019192:	bf00      	nop
  }
  return  speed;
 8019194:	7bfb      	ldrb	r3, [r7, #15]
}
 8019196:	4618      	mov	r0, r3
 8019198:	3710      	adds	r7, #16
 801919a:	46bd      	mov	sp, r7
 801919c:	bd80      	pop	{r7, pc}

0801919e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801919e:	b580      	push	{r7, lr}
 80191a0:	b084      	sub	sp, #16
 80191a2:	af00      	add	r7, sp, #0
 80191a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191a6:	2300      	movs	r3, #0
 80191a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80191aa:	2300      	movs	r3, #0
 80191ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80191b4:	4618      	mov	r0, r3
 80191b6:	f7f0 fbd7 	bl	8009968 <HAL_HCD_ResetPort>
 80191ba:	4603      	mov	r3, r0
 80191bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80191be:	7bfb      	ldrb	r3, [r7, #15]
 80191c0:	4618      	mov	r0, r3
 80191c2:	f000 f8ff 	bl	80193c4 <USBH_Get_USB_Status>
 80191c6:	4603      	mov	r3, r0
 80191c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80191cc:	4618      	mov	r0, r3
 80191ce:	3710      	adds	r7, #16
 80191d0:	46bd      	mov	sp, r7
 80191d2:	bd80      	pop	{r7, pc}

080191d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80191d4:	b580      	push	{r7, lr}
 80191d6:	b082      	sub	sp, #8
 80191d8:	af00      	add	r7, sp, #0
 80191da:	6078      	str	r0, [r7, #4]
 80191dc:	460b      	mov	r3, r1
 80191de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80191e6:	78fa      	ldrb	r2, [r7, #3]
 80191e8:	4611      	mov	r1, r2
 80191ea:	4618      	mov	r0, r3
 80191ec:	f7f0 fbde 	bl	80099ac <HAL_HCD_HC_GetXferCount>
 80191f0:	4603      	mov	r3, r0
}
 80191f2:	4618      	mov	r0, r3
 80191f4:	3708      	adds	r7, #8
 80191f6:	46bd      	mov	sp, r7
 80191f8:	bd80      	pop	{r7, pc}

080191fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80191fa:	b590      	push	{r4, r7, lr}
 80191fc:	b089      	sub	sp, #36	; 0x24
 80191fe:	af04      	add	r7, sp, #16
 8019200:	6078      	str	r0, [r7, #4]
 8019202:	4608      	mov	r0, r1
 8019204:	4611      	mov	r1, r2
 8019206:	461a      	mov	r2, r3
 8019208:	4603      	mov	r3, r0
 801920a:	70fb      	strb	r3, [r7, #3]
 801920c:	460b      	mov	r3, r1
 801920e:	70bb      	strb	r3, [r7, #2]
 8019210:	4613      	mov	r3, r2
 8019212:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019214:	2300      	movs	r3, #0
 8019216:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019218:	2300      	movs	r3, #0
 801921a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019222:	787c      	ldrb	r4, [r7, #1]
 8019224:	78ba      	ldrb	r2, [r7, #2]
 8019226:	78f9      	ldrb	r1, [r7, #3]
 8019228:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801922a:	9302      	str	r3, [sp, #8]
 801922c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019230:	9301      	str	r3, [sp, #4]
 8019232:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019236:	9300      	str	r3, [sp, #0]
 8019238:	4623      	mov	r3, r4
 801923a:	f7f0 f848 	bl	80092ce <HAL_HCD_HC_Init>
 801923e:	4603      	mov	r3, r0
 8019240:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019242:	7bfb      	ldrb	r3, [r7, #15]
 8019244:	4618      	mov	r0, r3
 8019246:	f000 f8bd 	bl	80193c4 <USBH_Get_USB_Status>
 801924a:	4603      	mov	r3, r0
 801924c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801924e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019250:	4618      	mov	r0, r3
 8019252:	3714      	adds	r7, #20
 8019254:	46bd      	mov	sp, r7
 8019256:	bd90      	pop	{r4, r7, pc}

08019258 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b084      	sub	sp, #16
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
 8019260:	460b      	mov	r3, r1
 8019262:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019264:	2300      	movs	r3, #0
 8019266:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019268:	2300      	movs	r3, #0
 801926a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019272:	78fa      	ldrb	r2, [r7, #3]
 8019274:	4611      	mov	r1, r2
 8019276:	4618      	mov	r0, r3
 8019278:	f7f0 f8b8 	bl	80093ec <HAL_HCD_HC_Halt>
 801927c:	4603      	mov	r3, r0
 801927e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019280:	7bfb      	ldrb	r3, [r7, #15]
 8019282:	4618      	mov	r0, r3
 8019284:	f000 f89e 	bl	80193c4 <USBH_Get_USB_Status>
 8019288:	4603      	mov	r3, r0
 801928a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801928c:	7bbb      	ldrb	r3, [r7, #14]
}
 801928e:	4618      	mov	r0, r3
 8019290:	3710      	adds	r7, #16
 8019292:	46bd      	mov	sp, r7
 8019294:	bd80      	pop	{r7, pc}

08019296 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019296:	b590      	push	{r4, r7, lr}
 8019298:	b089      	sub	sp, #36	; 0x24
 801929a:	af04      	add	r7, sp, #16
 801929c:	6078      	str	r0, [r7, #4]
 801929e:	4608      	mov	r0, r1
 80192a0:	4611      	mov	r1, r2
 80192a2:	461a      	mov	r2, r3
 80192a4:	4603      	mov	r3, r0
 80192a6:	70fb      	strb	r3, [r7, #3]
 80192a8:	460b      	mov	r3, r1
 80192aa:	70bb      	strb	r3, [r7, #2]
 80192ac:	4613      	mov	r3, r2
 80192ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192b0:	2300      	movs	r3, #0
 80192b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80192b4:	2300      	movs	r3, #0
 80192b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80192be:	787c      	ldrb	r4, [r7, #1]
 80192c0:	78ba      	ldrb	r2, [r7, #2]
 80192c2:	78f9      	ldrb	r1, [r7, #3]
 80192c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80192c8:	9303      	str	r3, [sp, #12]
 80192ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80192cc:	9302      	str	r3, [sp, #8]
 80192ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d0:	9301      	str	r3, [sp, #4]
 80192d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80192d6:	9300      	str	r3, [sp, #0]
 80192d8:	4623      	mov	r3, r4
 80192da:	f7f0 f8ab 	bl	8009434 <HAL_HCD_HC_SubmitRequest>
 80192de:	4603      	mov	r3, r0
 80192e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80192e2:	7bfb      	ldrb	r3, [r7, #15]
 80192e4:	4618      	mov	r0, r3
 80192e6:	f000 f86d 	bl	80193c4 <USBH_Get_USB_Status>
 80192ea:	4603      	mov	r3, r0
 80192ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80192f0:	4618      	mov	r0, r3
 80192f2:	3714      	adds	r7, #20
 80192f4:	46bd      	mov	sp, r7
 80192f6:	bd90      	pop	{r4, r7, pc}

080192f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b082      	sub	sp, #8
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
 8019300:	460b      	mov	r3, r1
 8019302:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801930a:	78fa      	ldrb	r2, [r7, #3]
 801930c:	4611      	mov	r1, r2
 801930e:	4618      	mov	r0, r3
 8019310:	f7f0 fb38 	bl	8009984 <HAL_HCD_HC_GetURBState>
 8019314:	4603      	mov	r3, r0
}
 8019316:	4618      	mov	r0, r3
 8019318:	3708      	adds	r7, #8
 801931a:	46bd      	mov	sp, r7
 801931c:	bd80      	pop	{r7, pc}

0801931e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801931e:	b580      	push	{r7, lr}
 8019320:	b082      	sub	sp, #8
 8019322:	af00      	add	r7, sp, #0
 8019324:	6078      	str	r0, [r7, #4]
 8019326:	460b      	mov	r3, r1
 8019328:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019330:	2b01      	cmp	r3, #1
 8019332:	d103      	bne.n	801933c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019334:	78fb      	ldrb	r3, [r7, #3]
 8019336:	4618      	mov	r0, r3
 8019338:	f000 f870 	bl	801941c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801933c:	20c8      	movs	r0, #200	; 0xc8
 801933e:	f7ed fe1b 	bl	8006f78 <HAL_Delay>
  return USBH_OK;
 8019342:	2300      	movs	r3, #0
}
 8019344:	4618      	mov	r0, r3
 8019346:	3708      	adds	r7, #8
 8019348:	46bd      	mov	sp, r7
 801934a:	bd80      	pop	{r7, pc}

0801934c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801934c:	b480      	push	{r7}
 801934e:	b085      	sub	sp, #20
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
 8019354:	460b      	mov	r3, r1
 8019356:	70fb      	strb	r3, [r7, #3]
 8019358:	4613      	mov	r3, r2
 801935a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019362:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019364:	78fb      	ldrb	r3, [r7, #3]
 8019366:	68fa      	ldr	r2, [r7, #12]
 8019368:	212c      	movs	r1, #44	; 0x2c
 801936a:	fb01 f303 	mul.w	r3, r1, r3
 801936e:	4413      	add	r3, r2
 8019370:	333b      	adds	r3, #59	; 0x3b
 8019372:	781b      	ldrb	r3, [r3, #0]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d009      	beq.n	801938c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019378:	78fb      	ldrb	r3, [r7, #3]
 801937a:	68fa      	ldr	r2, [r7, #12]
 801937c:	212c      	movs	r1, #44	; 0x2c
 801937e:	fb01 f303 	mul.w	r3, r1, r3
 8019382:	4413      	add	r3, r2
 8019384:	3354      	adds	r3, #84	; 0x54
 8019386:	78ba      	ldrb	r2, [r7, #2]
 8019388:	701a      	strb	r2, [r3, #0]
 801938a:	e008      	b.n	801939e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801938c:	78fb      	ldrb	r3, [r7, #3]
 801938e:	68fa      	ldr	r2, [r7, #12]
 8019390:	212c      	movs	r1, #44	; 0x2c
 8019392:	fb01 f303 	mul.w	r3, r1, r3
 8019396:	4413      	add	r3, r2
 8019398:	3355      	adds	r3, #85	; 0x55
 801939a:	78ba      	ldrb	r2, [r7, #2]
 801939c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801939e:	2300      	movs	r3, #0
}
 80193a0:	4618      	mov	r0, r3
 80193a2:	3714      	adds	r7, #20
 80193a4:	46bd      	mov	sp, r7
 80193a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193aa:	4770      	bx	lr

080193ac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b082      	sub	sp, #8
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80193b4:	6878      	ldr	r0, [r7, #4]
 80193b6:	f7ed fddf 	bl	8006f78 <HAL_Delay>
}
 80193ba:	bf00      	nop
 80193bc:	3708      	adds	r7, #8
 80193be:	46bd      	mov	sp, r7
 80193c0:	bd80      	pop	{r7, pc}
	...

080193c4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80193c4:	b480      	push	{r7}
 80193c6:	b085      	sub	sp, #20
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	4603      	mov	r3, r0
 80193cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80193ce:	2300      	movs	r3, #0
 80193d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80193d2:	79fb      	ldrb	r3, [r7, #7]
 80193d4:	2b03      	cmp	r3, #3
 80193d6:	d817      	bhi.n	8019408 <USBH_Get_USB_Status+0x44>
 80193d8:	a201      	add	r2, pc, #4	; (adr r2, 80193e0 <USBH_Get_USB_Status+0x1c>)
 80193da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193de:	bf00      	nop
 80193e0:	080193f1 	.word	0x080193f1
 80193e4:	080193f7 	.word	0x080193f7
 80193e8:	080193fd 	.word	0x080193fd
 80193ec:	08019403 	.word	0x08019403
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80193f0:	2300      	movs	r3, #0
 80193f2:	73fb      	strb	r3, [r7, #15]
    break;
 80193f4:	e00b      	b.n	801940e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80193f6:	2302      	movs	r3, #2
 80193f8:	73fb      	strb	r3, [r7, #15]
    break;
 80193fa:	e008      	b.n	801940e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80193fc:	2301      	movs	r3, #1
 80193fe:	73fb      	strb	r3, [r7, #15]
    break;
 8019400:	e005      	b.n	801940e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019402:	2302      	movs	r3, #2
 8019404:	73fb      	strb	r3, [r7, #15]
    break;
 8019406:	e002      	b.n	801940e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019408:	2302      	movs	r3, #2
 801940a:	73fb      	strb	r3, [r7, #15]
    break;
 801940c:	bf00      	nop
  }
  return usb_status;
 801940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019410:	4618      	mov	r0, r3
 8019412:	3714      	adds	r7, #20
 8019414:	46bd      	mov	sp, r7
 8019416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941a:	4770      	bx	lr

0801941c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b084      	sub	sp, #16
 8019420:	af00      	add	r7, sp, #0
 8019422:	4603      	mov	r3, r0
 8019424:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019426:	79fb      	ldrb	r3, [r7, #7]
 8019428:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801942a:	79fb      	ldrb	r3, [r7, #7]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d102      	bne.n	8019436 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8019430:	2301      	movs	r3, #1
 8019432:	73fb      	strb	r3, [r7, #15]
 8019434:	e001      	b.n	801943a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8019436:	2300      	movs	r3, #0
 8019438:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801943a:	7bfb      	ldrb	r3, [r7, #15]
 801943c:	461a      	mov	r2, r3
 801943e:	2120      	movs	r1, #32
 8019440:	4803      	ldr	r0, [pc, #12]	; (8019450 <MX_DriverVbusFS+0x34>)
 8019442:	f7ef fe8b 	bl	800915c <HAL_GPIO_WritePin>
}
 8019446:	bf00      	nop
 8019448:	3710      	adds	r7, #16
 801944a:	46bd      	mov	sp, r7
 801944c:	bd80      	pop	{r7, pc}
 801944e:	bf00      	nop
 8019450:	40020c00 	.word	0x40020c00

08019454 <arm_rfft_fast_init_f32>:
 8019454:	084b      	lsrs	r3, r1, #1
 8019456:	2b80      	cmp	r3, #128	; 0x80
 8019458:	b430      	push	{r4, r5}
 801945a:	8201      	strh	r1, [r0, #16]
 801945c:	8003      	strh	r3, [r0, #0]
 801945e:	d070      	beq.n	8019542 <arm_rfft_fast_init_f32+0xee>
 8019460:	d916      	bls.n	8019490 <arm_rfft_fast_init_f32+0x3c>
 8019462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019466:	d05f      	beq.n	8019528 <arm_rfft_fast_init_f32+0xd4>
 8019468:	d936      	bls.n	80194d8 <arm_rfft_fast_init_f32+0x84>
 801946a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801946e:	d026      	beq.n	80194be <arm_rfft_fast_init_f32+0x6a>
 8019470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019474:	d112      	bne.n	801949c <arm_rfft_fast_init_f32+0x48>
 8019476:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 801947a:	4c38      	ldr	r4, [pc, #224]	; (801955c <arm_rfft_fast_init_f32+0x108>)
 801947c:	4938      	ldr	r1, [pc, #224]	; (8019560 <arm_rfft_fast_init_f32+0x10c>)
 801947e:	2300      	movs	r3, #0
 8019480:	4a38      	ldr	r2, [pc, #224]	; (8019564 <arm_rfft_fast_init_f32+0x110>)
 8019482:	8185      	strh	r5, [r0, #12]
 8019484:	6084      	str	r4, [r0, #8]
 8019486:	6041      	str	r1, [r0, #4]
 8019488:	6142      	str	r2, [r0, #20]
 801948a:	4618      	mov	r0, r3
 801948c:	bc30      	pop	{r4, r5}
 801948e:	4770      	bx	lr
 8019490:	2b20      	cmp	r3, #32
 8019492:	d031      	beq.n	80194f8 <arm_rfft_fast_init_f32+0xa4>
 8019494:	2b40      	cmp	r3, #64	; 0x40
 8019496:	d006      	beq.n	80194a6 <arm_rfft_fast_init_f32+0x52>
 8019498:	2b10      	cmp	r3, #16
 801949a:	d039      	beq.n	8019510 <arm_rfft_fast_init_f32+0xbc>
 801949c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80194a0:	bc30      	pop	{r4, r5}
 80194a2:	4618      	mov	r0, r3
 80194a4:	4770      	bx	lr
 80194a6:	2538      	movs	r5, #56	; 0x38
 80194a8:	4c2f      	ldr	r4, [pc, #188]	; (8019568 <arm_rfft_fast_init_f32+0x114>)
 80194aa:	4930      	ldr	r1, [pc, #192]	; (801956c <arm_rfft_fast_init_f32+0x118>)
 80194ac:	2300      	movs	r3, #0
 80194ae:	4a30      	ldr	r2, [pc, #192]	; (8019570 <arm_rfft_fast_init_f32+0x11c>)
 80194b0:	8185      	strh	r5, [r0, #12]
 80194b2:	6084      	str	r4, [r0, #8]
 80194b4:	6041      	str	r1, [r0, #4]
 80194b6:	6142      	str	r2, [r0, #20]
 80194b8:	4618      	mov	r0, r3
 80194ba:	bc30      	pop	{r4, r5}
 80194bc:	4770      	bx	lr
 80194be:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 80194c2:	4c2c      	ldr	r4, [pc, #176]	; (8019574 <arm_rfft_fast_init_f32+0x120>)
 80194c4:	492c      	ldr	r1, [pc, #176]	; (8019578 <arm_rfft_fast_init_f32+0x124>)
 80194c6:	2300      	movs	r3, #0
 80194c8:	4a2c      	ldr	r2, [pc, #176]	; (801957c <arm_rfft_fast_init_f32+0x128>)
 80194ca:	8185      	strh	r5, [r0, #12]
 80194cc:	6084      	str	r4, [r0, #8]
 80194ce:	6041      	str	r1, [r0, #4]
 80194d0:	6142      	str	r2, [r0, #20]
 80194d2:	4618      	mov	r0, r3
 80194d4:	bc30      	pop	{r4, r5}
 80194d6:	4770      	bx	lr
 80194d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80194dc:	d1de      	bne.n	801949c <arm_rfft_fast_init_f32+0x48>
 80194de:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80194e2:	4c27      	ldr	r4, [pc, #156]	; (8019580 <arm_rfft_fast_init_f32+0x12c>)
 80194e4:	4927      	ldr	r1, [pc, #156]	; (8019584 <arm_rfft_fast_init_f32+0x130>)
 80194e6:	2300      	movs	r3, #0
 80194e8:	4a27      	ldr	r2, [pc, #156]	; (8019588 <arm_rfft_fast_init_f32+0x134>)
 80194ea:	8185      	strh	r5, [r0, #12]
 80194ec:	6084      	str	r4, [r0, #8]
 80194ee:	6041      	str	r1, [r0, #4]
 80194f0:	6142      	str	r2, [r0, #20]
 80194f2:	4618      	mov	r0, r3
 80194f4:	bc30      	pop	{r4, r5}
 80194f6:	4770      	bx	lr
 80194f8:	2530      	movs	r5, #48	; 0x30
 80194fa:	4c24      	ldr	r4, [pc, #144]	; (801958c <arm_rfft_fast_init_f32+0x138>)
 80194fc:	4924      	ldr	r1, [pc, #144]	; (8019590 <arm_rfft_fast_init_f32+0x13c>)
 80194fe:	2300      	movs	r3, #0
 8019500:	4a24      	ldr	r2, [pc, #144]	; (8019594 <arm_rfft_fast_init_f32+0x140>)
 8019502:	8185      	strh	r5, [r0, #12]
 8019504:	6084      	str	r4, [r0, #8]
 8019506:	6041      	str	r1, [r0, #4]
 8019508:	6142      	str	r2, [r0, #20]
 801950a:	4618      	mov	r0, r3
 801950c:	bc30      	pop	{r4, r5}
 801950e:	4770      	bx	lr
 8019510:	2514      	movs	r5, #20
 8019512:	4c21      	ldr	r4, [pc, #132]	; (8019598 <arm_rfft_fast_init_f32+0x144>)
 8019514:	4921      	ldr	r1, [pc, #132]	; (801959c <arm_rfft_fast_init_f32+0x148>)
 8019516:	2300      	movs	r3, #0
 8019518:	4a21      	ldr	r2, [pc, #132]	; (80195a0 <arm_rfft_fast_init_f32+0x14c>)
 801951a:	8185      	strh	r5, [r0, #12]
 801951c:	6084      	str	r4, [r0, #8]
 801951e:	6041      	str	r1, [r0, #4]
 8019520:	6142      	str	r2, [r0, #20]
 8019522:	4618      	mov	r0, r3
 8019524:	bc30      	pop	{r4, r5}
 8019526:	4770      	bx	lr
 8019528:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 801952c:	4c1d      	ldr	r4, [pc, #116]	; (80195a4 <arm_rfft_fast_init_f32+0x150>)
 801952e:	491e      	ldr	r1, [pc, #120]	; (80195a8 <arm_rfft_fast_init_f32+0x154>)
 8019530:	2300      	movs	r3, #0
 8019532:	4a1e      	ldr	r2, [pc, #120]	; (80195ac <arm_rfft_fast_init_f32+0x158>)
 8019534:	8185      	strh	r5, [r0, #12]
 8019536:	6084      	str	r4, [r0, #8]
 8019538:	6041      	str	r1, [r0, #4]
 801953a:	6142      	str	r2, [r0, #20]
 801953c:	4618      	mov	r0, r3
 801953e:	bc30      	pop	{r4, r5}
 8019540:	4770      	bx	lr
 8019542:	25d0      	movs	r5, #208	; 0xd0
 8019544:	4c1a      	ldr	r4, [pc, #104]	; (80195b0 <arm_rfft_fast_init_f32+0x15c>)
 8019546:	491b      	ldr	r1, [pc, #108]	; (80195b4 <arm_rfft_fast_init_f32+0x160>)
 8019548:	2300      	movs	r3, #0
 801954a:	4a1b      	ldr	r2, [pc, #108]	; (80195b8 <arm_rfft_fast_init_f32+0x164>)
 801954c:	8185      	strh	r5, [r0, #12]
 801954e:	6084      	str	r4, [r0, #8]
 8019550:	6041      	str	r1, [r0, #4]
 8019552:	6142      	str	r2, [r0, #20]
 8019554:	4618      	mov	r0, r3
 8019556:	bc30      	pop	{r4, r5}
 8019558:	4770      	bx	lr
 801955a:	bf00      	nop
 801955c:	0802db60 	.word	0x0802db60
 8019560:	0801ed58 	.word	0x0801ed58
 8019564:	08024ec8 	.word	0x08024ec8
 8019568:	08022e58 	.word	0x08022e58
 801956c:	0802f920 	.word	0x0802f920
 8019570:	08031e10 	.word	0x08031e10
 8019574:	0802b848 	.word	0x0802b848
 8019578:	08029748 	.word	0x08029748
 801957c:	08022ec8 	.word	0x08022ec8
 8019580:	08031aa0 	.word	0x08031aa0
 8019584:	08028ec8 	.word	0x08028ec8
 8019588:	0802fb20 	.word	0x0802fb20
 801958c:	0802c700 	.word	0x0802c700
 8019590:	0802b748 	.word	0x0802b748
 8019594:	08022d58 	.word	0x08022d58
 8019598:	0802c658 	.word	0x0802c658
 801959c:	080296c8 	.word	0x080296c8
 80195a0:	0802c680 	.word	0x0802c680
 80195a4:	08030320 	.word	0x08030320
 80195a8:	0802cb60 	.word	0x0802cb60
 80195ac:	080306a0 	.word	0x080306a0
 80195b0:	08032010 	.word	0x08032010
 80195b4:	0802c760 	.word	0x0802c760
 80195b8:	080316a0 	.word	0x080316a0

080195bc <arm_rfft_fast_f32>:
 80195bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195c0:	8a05      	ldrh	r5, [r0, #16]
 80195c2:	4606      	mov	r6, r0
 80195c4:	4617      	mov	r7, r2
 80195c6:	460c      	mov	r4, r1
 80195c8:	086d      	lsrs	r5, r5, #1
 80195ca:	8005      	strh	r5, [r0, #0]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d15e      	bne.n	801968e <arm_rfft_fast_f32+0xd2>
 80195d0:	461a      	mov	r2, r3
 80195d2:	2301      	movs	r3, #1
 80195d4:	f000 fbde 	bl	8019d94 <arm_cfft_f32>
 80195d8:	edd4 7a00 	vldr	s15, [r4]
 80195dc:	ed94 7a01 	vldr	s14, [r4, #4]
 80195e0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80195e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80195e8:	8832      	ldrh	r2, [r6, #0]
 80195ea:	ee37 7a07 	vadd.f32	s14, s14, s14
 80195ee:	6975      	ldr	r5, [r6, #20]
 80195f0:	3a01      	subs	r2, #1
 80195f2:	eeb0 3a46 	vmov.f32	s6, s12
 80195f6:	3510      	adds	r5, #16
 80195f8:	f107 0610 	add.w	r6, r7, #16
 80195fc:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019600:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8019604:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019608:	f104 0310 	add.w	r3, r4, #16
 801960c:	3808      	subs	r0, #8
 801960e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8019612:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019616:	ed87 7a00 	vstr	s14, [r7]
 801961a:	edc7 7a01 	vstr	s15, [r7, #4]
 801961e:	ed90 7a02 	vldr	s14, [r0, #8]
 8019622:	3a01      	subs	r2, #1
 8019624:	ed53 6a02 	vldr	s13, [r3, #-8]
 8019628:	f1a0 0008 	sub.w	r0, r0, #8
 801962c:	ed15 6a02 	vldr	s12, [r5, #-8]
 8019630:	f103 0308 	add.w	r3, r3, #8
 8019634:	ee77 7a66 	vsub.f32	s15, s14, s13
 8019638:	edd0 3a05 	vldr	s7, [r0, #20]
 801963c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8019640:	ee77 4a26 	vadd.f32	s9, s14, s13
 8019644:	ed55 5a01 	vldr	s11, [r5, #-4]
 8019648:	f106 0608 	add.w	r6, r6, #8
 801964c:	ee66 6a27 	vmul.f32	s13, s12, s15
 8019650:	f105 0508 	add.w	r5, r5, #8
 8019654:	ee33 4a85 	vadd.f32	s8, s7, s10
 8019658:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801965c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8019660:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019664:	ee26 6a04 	vmul.f32	s12, s12, s8
 8019668:	ee77 7a05 	vadd.f32	s15, s14, s10
 801966c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8019670:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019674:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8019678:	ee67 7a83 	vmul.f32	s15, s15, s6
 801967c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019680:	ed46 7a03 	vstr	s15, [r6, #-12]
 8019684:	ed06 7a04 	vstr	s14, [r6, #-16]
 8019688:	d1c9      	bne.n	801961e <arm_rfft_fast_f32+0x62>
 801968a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801968e:	edd1 7a00 	vldr	s15, [r1]
 8019692:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8019696:	edd1 6a01 	vldr	s13, [r1, #4]
 801969a:	1e68      	subs	r0, r5, #1
 801969c:	6975      	ldr	r5, [r6, #20]
 801969e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80196a2:	00c1      	lsls	r1, r0, #3
 80196a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80196a8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80196ac:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80196b0:	ed82 7a00 	vstr	s14, [r2]
 80196b4:	edc2 7a01 	vstr	s15, [r2, #4]
 80196b8:	b3e0      	cbz	r0, 8019734 <arm_rfft_fast_f32+0x178>
 80196ba:	3908      	subs	r1, #8
 80196bc:	f104 0210 	add.w	r2, r4, #16
 80196c0:	3510      	adds	r5, #16
 80196c2:	440c      	add	r4, r1
 80196c4:	f107 0110 	add.w	r1, r7, #16
 80196c8:	ed94 7a02 	vldr	s14, [r4, #8]
 80196cc:	3801      	subs	r0, #1
 80196ce:	ed52 6a02 	vldr	s13, [r2, #-8]
 80196d2:	f1a4 0408 	sub.w	r4, r4, #8
 80196d6:	ed15 6a02 	vldr	s12, [r5, #-8]
 80196da:	f102 0208 	add.w	r2, r2, #8
 80196de:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80196e2:	ed94 4a05 	vldr	s8, [r4, #20]
 80196e6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80196ea:	ee77 6a26 	vadd.f32	s13, s14, s13
 80196ee:	ed55 5a01 	vldr	s11, [r5, #-4]
 80196f2:	f101 0108 	add.w	r1, r1, #8
 80196f6:	ee26 3a27 	vmul.f32	s6, s12, s15
 80196fa:	f105 0508 	add.w	r5, r5, #8
 80196fe:	ee74 4a05 	vadd.f32	s9, s8, s10
 8019702:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8019706:	ee35 5a44 	vsub.f32	s10, s10, s8
 801970a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801970e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019712:	ee77 7a05 	vadd.f32	s15, s14, s10
 8019716:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801971a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801971e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8019722:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8019726:	ee27 7a23 	vmul.f32	s14, s14, s7
 801972a:	ed41 7a03 	vstr	s15, [r1, #-12]
 801972e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8019732:	d1c9      	bne.n	80196c8 <arm_rfft_fast_f32+0x10c>
 8019734:	461a      	mov	r2, r3
 8019736:	4639      	mov	r1, r7
 8019738:	4630      	mov	r0, r6
 801973a:	2301      	movs	r3, #1
 801973c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019740:	f000 bb28 	b.w	8019d94 <arm_cfft_f32>

08019744 <arm_cfft_radix8by2_f32>:
 8019744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019748:	4607      	mov	r7, r0
 801974a:	4608      	mov	r0, r1
 801974c:	ed2d 8b06 	vpush	{d8-d10}
 8019750:	f8b7 e000 	ldrh.w	lr, [r7]
 8019754:	687a      	ldr	r2, [r7, #4]
 8019756:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801975a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 801975e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8019762:	f000 80b0 	beq.w	80198c6 <arm_cfft_radix8by2_f32+0x182>
 8019766:	008b      	lsls	r3, r1, #2
 8019768:	3210      	adds	r2, #16
 801976a:	f100 0610 	add.w	r6, r0, #16
 801976e:	f108 0510 	add.w	r5, r8, #16
 8019772:	3310      	adds	r3, #16
 8019774:	18c4      	adds	r4, r0, r3
 8019776:	4443      	add	r3, r8
 8019778:	ed55 6a04 	vldr	s13, [r5, #-16]
 801977c:	f1be 0e01 	subs.w	lr, lr, #1
 8019780:	ed56 4a04 	vldr	s9, [r6, #-16]
 8019784:	f104 0410 	add.w	r4, r4, #16
 8019788:	ed15 7a03 	vldr	s14, [r5, #-12]
 801978c:	f106 0610 	add.w	r6, r6, #16
 8019790:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8019794:	ed55 7a02 	vldr	s15, [r5, #-8]
 8019798:	ed55 2a01 	vldr	s5, [r5, #-4]
 801979c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80197a0:	ed53 0a04 	vldr	s1, [r3, #-16]
 80197a4:	f102 0210 	add.w	r2, r2, #16
 80197a8:	ed13 5a03 	vldr	s10, [r3, #-12]
 80197ac:	f105 0510 	add.w	r5, r5, #16
 80197b0:	ed13 3a02 	vldr	s6, [r3, #-8]
 80197b4:	f103 0310 	add.w	r3, r3, #16
 80197b8:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 80197bc:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 80197c0:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 80197c4:	ee33 8a83 	vadd.f32	s16, s7, s6
 80197c8:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 80197cc:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 80197d0:	ee34 0a06 	vadd.f32	s0, s8, s12
 80197d4:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 80197d8:	ee76 aa87 	vadd.f32	s21, s13, s14
 80197dc:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80197e0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80197e4:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 80197e8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80197ec:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 80197f0:	ee71 8a05 	vadd.f32	s17, s2, s10
 80197f4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80197f8:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 80197fc:	ee72 9a22 	vadd.f32	s19, s4, s5
 8019800:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8019804:	ee35 5a41 	vsub.f32	s10, s10, s2
 8019808:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 801980c:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8019810:	ee36 6a44 	vsub.f32	s12, s12, s8
 8019814:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8019818:	ee71 1ae7 	vsub.f32	s3, s3, s15
 801981c:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8019820:	ee72 7a62 	vsub.f32	s15, s4, s5
 8019824:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8019828:	ee73 2a63 	vsub.f32	s5, s6, s7
 801982c:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8019830:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8019834:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8019838:	ee24 3a84 	vmul.f32	s6, s9, s8
 801983c:	ee27 2a26 	vmul.f32	s4, s14, s13
 8019840:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8019844:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8019848:	ee27 7a04 	vmul.f32	s14, s14, s8
 801984c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8019850:	ee65 6a26 	vmul.f32	s13, s10, s13
 8019854:	ee25 5a04 	vmul.f32	s10, s10, s8
 8019858:	ee37 7a64 	vsub.f32	s14, s14, s9
 801985c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019860:	ee33 4a02 	vadd.f32	s8, s6, s4
 8019864:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8019868:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 801986c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8019870:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8019874:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8019878:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 801987c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8019880:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8019884:	ee27 4a87 	vmul.f32	s8, s15, s14
 8019888:	ee61 5a87 	vmul.f32	s11, s3, s14
 801988c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019890:	ee22 5a87 	vmul.f32	s10, s5, s14
 8019894:	ee26 7a07 	vmul.f32	s14, s12, s14
 8019898:	ee26 6a26 	vmul.f32	s12, s12, s13
 801989c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80198a0:	ee74 4a84 	vadd.f32	s9, s9, s8
 80198a4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80198a8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80198ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80198b0:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 80198b4:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 80198b8:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 80198bc:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80198c0:	f47f af5a 	bne.w	8019778 <arm_cfft_radix8by2_f32+0x34>
 80198c4:	687a      	ldr	r2, [r7, #4]
 80198c6:	b28c      	uxth	r4, r1
 80198c8:	2302      	movs	r3, #2
 80198ca:	4621      	mov	r1, r4
 80198cc:	f000 fbc2 	bl	801a054 <arm_radix8_butterfly_f32>
 80198d0:	4621      	mov	r1, r4
 80198d2:	687a      	ldr	r2, [r7, #4]
 80198d4:	4640      	mov	r0, r8
 80198d6:	2302      	movs	r3, #2
 80198d8:	ecbd 8b06 	vpop	{d8-d10}
 80198dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80198e0:	f000 bbb8 	b.w	801a054 <arm_radix8_butterfly_f32>

080198e4 <arm_cfft_radix8by4_f32>:
 80198e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198e8:	ed2d 8b06 	vpush	{d8-d10}
 80198ec:	8804      	ldrh	r4, [r0, #0]
 80198ee:	b08f      	sub	sp, #60	; 0x3c
 80198f0:	ed91 6a00 	vldr	s12, [r1]
 80198f4:	460a      	mov	r2, r1
 80198f6:	0864      	lsrs	r4, r4, #1
 80198f8:	ed91 7a01 	vldr	s14, [r1, #4]
 80198fc:	9101      	str	r1, [sp, #4]
 80198fe:	00a3      	lsls	r3, r4, #2
 8019900:	6841      	ldr	r1, [r0, #4]
 8019902:	0864      	lsrs	r4, r4, #1
 8019904:	900c      	str	r0, [sp, #48]	; 0x30
 8019906:	9205      	str	r2, [sp, #20]
 8019908:	f101 0610 	add.w	r6, r1, #16
 801990c:	4625      	mov	r5, r4
 801990e:	940b      	str	r4, [sp, #44]	; 0x2c
 8019910:	f101 0408 	add.w	r4, r1, #8
 8019914:	9602      	str	r6, [sp, #8]
 8019916:	9407      	str	r4, [sp, #28]
 8019918:	18d4      	adds	r4, r2, r3
 801991a:	1eaa      	subs	r2, r5, #2
 801991c:	f101 0518 	add.w	r5, r1, #24
 8019920:	18e0      	adds	r0, r4, r3
 8019922:	edd4 4a00 	vldr	s9, [r4]
 8019926:	ed94 4a01 	vldr	s8, [r4, #4]
 801992a:	46a6      	mov	lr, r4
 801992c:	edd0 6a00 	vldr	s13, [r0]
 8019930:	18c7      	adds	r7, r0, r3
 8019932:	edd0 7a01 	vldr	s15, [r0, #4]
 8019936:	46a0      	mov	r8, r4
 8019938:	ee76 5a26 	vadd.f32	s11, s12, s13
 801993c:	ed97 5a00 	vldr	s10, [r7]
 8019940:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019944:	4604      	mov	r4, r0
 8019946:	9506      	str	r5, [sp, #24]
 8019948:	4605      	mov	r5, r0
 801994a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 801994e:	900a      	str	r0, [sp, #40]	; 0x28
 8019950:	9801      	ldr	r0, [sp, #4]
 8019952:	ee37 6a27 	vadd.f32	s12, s14, s15
 8019956:	ee77 7a67 	vsub.f32	s15, s14, s15
 801995a:	ed97 3a01 	vldr	s6, [r7, #4]
 801995e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8019962:	46bc      	mov	ip, r7
 8019964:	ee76 3a84 	vadd.f32	s7, s13, s8
 8019968:	9704      	str	r7, [sp, #16]
 801996a:	ee36 7a44 	vsub.f32	s14, s12, s8
 801996e:	f8cd e00c 	str.w	lr, [sp, #12]
 8019972:	ee12 9a90 	vmov	r9, s5
 8019976:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801997a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801997e:	1f3e      	subs	r6, r7, #4
 8019980:	f840 9b08 	str.w	r9, [r0], #8
 8019984:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8019988:	edde 2a01 	vldr	s5, [lr, #4]
 801998c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8019990:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8019994:	eddc 4a01 	vldr	s9, [ip, #4]
 8019998:	ee36 6a22 	vadd.f32	s12, s12, s5
 801999c:	9001      	str	r0, [sp, #4]
 801999e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80199a2:	9805      	ldr	r0, [sp, #20]
 80199a4:	ee13 9a90 	vmov	r9, s7
 80199a8:	ee37 7a43 	vsub.f32	s14, s14, s6
 80199ac:	ee36 6a24 	vadd.f32	s12, s12, s9
 80199b0:	f1ae 0704 	sub.w	r7, lr, #4
 80199b4:	ee74 4a05 	vadd.f32	s9, s8, s10
 80199b8:	ee76 6a83 	vadd.f32	s13, s13, s6
 80199bc:	ed80 6a01 	vstr	s12, [r0, #4]
 80199c0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80199c4:	f848 9b08 	str.w	r9, [r8], #8
 80199c8:	edce 4a01 	vstr	s9, [lr, #4]
 80199cc:	ee15 ea90 	vmov	lr, s11
 80199d0:	f844 eb08 	str.w	lr, [r4], #8
 80199d4:	ee16 ea90 	vmov	lr, s13
 80199d8:	9408      	str	r4, [sp, #32]
 80199da:	462c      	mov	r4, r5
 80199dc:	ed85 7a01 	vstr	s14, [r5, #4]
 80199e0:	9d04      	ldr	r5, [sp, #16]
 80199e2:	f84c eb08 	str.w	lr, [ip], #8
 80199e6:	edc5 7a01 	vstr	s15, [r5, #4]
 80199ea:	0855      	lsrs	r5, r2, #1
 80199ec:	9509      	str	r5, [sp, #36]	; 0x24
 80199ee:	f000 8130 	beq.w	8019c52 <arm_cfft_radix8by4_f32+0x36e>
 80199f2:	9805      	ldr	r0, [sp, #20]
 80199f4:	3b08      	subs	r3, #8
 80199f6:	46ab      	mov	fp, r5
 80199f8:	f1a4 020c 	sub.w	r2, r4, #12
 80199fc:	f100 0510 	add.w	r5, r0, #16
 8019a00:	f101 0920 	add.w	r9, r1, #32
 8019a04:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8019a08:	f8dd a008 	ldr.w	sl, [sp, #8]
 8019a0c:	4433      	add	r3, r6
 8019a0e:	3410      	adds	r4, #16
 8019a10:	4660      	mov	r0, ip
 8019a12:	4641      	mov	r1, r8
 8019a14:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8019a18:	ed54 6a02 	vldr	s13, [r4, #-8]
 8019a1c:	f1bb 0b01 	subs.w	fp, fp, #1
 8019a20:	ed55 5a02 	vldr	s11, [r5, #-8]
 8019a24:	f10a 0a08 	add.w	sl, sl, #8
 8019a28:	edd1 7a00 	vldr	s15, [r1]
 8019a2c:	f105 0508 	add.w	r5, r5, #8
 8019a30:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8019a34:	edd0 2a00 	vldr	s5, [r0]
 8019a38:	ed14 7a01 	vldr	s14, [r4, #-4]
 8019a3c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8019a40:	ed55 6a03 	vldr	s13, [r5, #-12]
 8019a44:	f1a2 0208 	sub.w	r2, r2, #8
 8019a48:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8019a4c:	ed90 2a01 	vldr	s4, [r0, #4]
 8019a50:	ee36 5a87 	vadd.f32	s10, s13, s14
 8019a54:	ed91 6a01 	vldr	s12, [r1, #4]
 8019a58:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8019a5c:	f109 0910 	add.w	r9, r9, #16
 8019a60:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8019a64:	f104 0408 	add.w	r4, r4, #8
 8019a68:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8019a6c:	f10e 0e18 	add.w	lr, lr, #24
 8019a70:	ee37 3a67 	vsub.f32	s6, s14, s15
 8019a74:	f1a3 0308 	sub.w	r3, r3, #8
 8019a78:	ed45 6a04 	vstr	s13, [r5, #-16]
 8019a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a80:	edd1 6a01 	vldr	s13, [r1, #4]
 8019a84:	ee75 1a86 	vadd.f32	s3, s11, s12
 8019a88:	edd0 4a01 	vldr	s9, [r0, #4]
 8019a8c:	ee33 3a22 	vadd.f32	s6, s6, s5
 8019a90:	ee75 6a26 	vadd.f32	s13, s10, s13
 8019a94:	ee35 5a46 	vsub.f32	s10, s10, s12
 8019a98:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8019a9c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019aa0:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8019aa4:	ee35 5a42 	vsub.f32	s10, s10, s4
 8019aa8:	ed45 6a03 	vstr	s13, [r5, #-12]
 8019aac:	ee36 2a02 	vadd.f32	s4, s12, s4
 8019ab0:	edd6 7a00 	vldr	s15, [r6]
 8019ab4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8019ab8:	ed97 1a00 	vldr	s2, [r7]
 8019abc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019ac0:	ed92 8a04 	vldr	s16, [r2, #16]
 8019ac4:	ee71 8a27 	vadd.f32	s17, s2, s15
 8019ac8:	ed93 aa04 	vldr	s20, [r3, #16]
 8019acc:	ed16 7a01 	vldr	s14, [r6, #-4]
 8019ad0:	ee71 7a67 	vsub.f32	s15, s2, s15
 8019ad4:	ed57 0a01 	vldr	s1, [r7, #-4]
 8019ad8:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8019adc:	ee38 6a88 	vadd.f32	s12, s17, s16
 8019ae0:	edd3 9a03 	vldr	s19, [r3, #12]
 8019ae4:	ee30 0a87 	vadd.f32	s0, s1, s14
 8019ae8:	ed92 9a03 	vldr	s18, [r2, #12]
 8019aec:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8019af0:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8019af4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8019af8:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8019afc:	ee16 ca10 	vmov	ip, s12
 8019b00:	ee30 6a49 	vsub.f32	s12, s0, s18
 8019b04:	ee77 4a01 	vadd.f32	s9, s14, s2
 8019b08:	f847 c908 	str.w	ip, [r7], #-8
 8019b0c:	ee34 4a29 	vadd.f32	s8, s8, s19
 8019b10:	edd2 8a03 	vldr	s17, [r2, #12]
 8019b14:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8019b18:	ed93 8a03 	vldr	s16, [r3, #12]
 8019b1c:	ee71 0a47 	vsub.f32	s1, s2, s14
 8019b20:	ee30 0a28 	vadd.f32	s0, s0, s17
 8019b24:	ee39 1a67 	vsub.f32	s2, s18, s15
 8019b28:	ee36 6a69 	vsub.f32	s12, s12, s19
 8019b2c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8019b30:	ee75 5aca 	vsub.f32	s11, s11, s20
 8019b34:	ed87 0a01 	vstr	s0, [r7, #4]
 8019b38:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8019b3c:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8019b40:	ee21 8a80 	vmul.f32	s16, s3, s0
 8019b44:	ee23 7a26 	vmul.f32	s14, s6, s13
 8019b48:	ee64 7a26 	vmul.f32	s15, s8, s13
 8019b4c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8019b50:	ee24 4a00 	vmul.f32	s8, s8, s0
 8019b54:	ee23 3a00 	vmul.f32	s6, s6, s0
 8019b58:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8019b5c:	ee24 0a80 	vmul.f32	s0, s9, s0
 8019b60:	ee38 7a07 	vadd.f32	s14, s16, s14
 8019b64:	ee76 6a84 	vadd.f32	s13, s13, s8
 8019b68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019b6c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8019b70:	ee17 ca10 	vmov	ip, s14
 8019b74:	f841 cb08 	str.w	ip, [r1], #8
 8019b78:	ed01 3a01 	vstr	s6, [r1, #-4]
 8019b7c:	ed82 0a04 	vstr	s0, [r2, #16]
 8019b80:	edc2 6a03 	vstr	s13, [r2, #12]
 8019b84:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8019b88:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8019b8c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8019b90:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8019b94:	ee65 4a27 	vmul.f32	s9, s10, s15
 8019b98:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8019b9c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019ba0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8019ba4:	ee25 5a26 	vmul.f32	s10, s10, s13
 8019ba8:	ee66 6a26 	vmul.f32	s13, s12, s13
 8019bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019bb0:	ee34 6a24 	vadd.f32	s12, s8, s9
 8019bb4:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8019bb8:	ee35 5a63 	vsub.f32	s10, s10, s7
 8019bbc:	ee17 ca90 	vmov	ip, s15
 8019bc0:	ed04 6a04 	vstr	s12, [r4, #-16]
 8019bc4:	ed04 5a03 	vstr	s10, [r4, #-12]
 8019bc8:	f846 c908 	str.w	ip, [r6], #-8
 8019bcc:	edc6 6a01 	vstr	s13, [r6, #4]
 8019bd0:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8019bd4:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8019bd8:	ee62 5a27 	vmul.f32	s11, s4, s15
 8019bdc:	ee22 6a87 	vmul.f32	s12, s5, s14
 8019be0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019be4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8019be8:	ee61 6a07 	vmul.f32	s13, s2, s14
 8019bec:	ee20 7a87 	vmul.f32	s14, s1, s14
 8019bf0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8019bf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019bf8:	ee35 6a86 	vadd.f32	s12, s11, s12
 8019bfc:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8019c00:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8019c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c08:	ee16 ca10 	vmov	ip, s12
 8019c0c:	f840 cb08 	str.w	ip, [r0], #8
 8019c10:	ed40 2a01 	vstr	s5, [r0, #-4]
 8019c14:	edc3 0a04 	vstr	s1, [r3, #16]
 8019c18:	edc3 7a03 	vstr	s15, [r3, #12]
 8019c1c:	f47f aefc 	bne.w	8019a18 <arm_cfft_radix8by4_f32+0x134>
 8019c20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019c22:	9802      	ldr	r0, [sp, #8]
 8019c24:	00cb      	lsls	r3, r1, #3
 8019c26:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8019c2a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8019c2e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8019c32:	4498      	add	r8, r3
 8019c34:	449c      	add	ip, r3
 8019c36:	9102      	str	r1, [sp, #8]
 8019c38:	9901      	ldr	r1, [sp, #4]
 8019c3a:	4419      	add	r1, r3
 8019c3c:	9101      	str	r1, [sp, #4]
 8019c3e:	9907      	ldr	r1, [sp, #28]
 8019c40:	4419      	add	r1, r3
 8019c42:	9107      	str	r1, [sp, #28]
 8019c44:	9908      	ldr	r1, [sp, #32]
 8019c46:	4419      	add	r1, r3
 8019c48:	9b06      	ldr	r3, [sp, #24]
 8019c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019c4e:	9108      	str	r1, [sp, #32]
 8019c50:	9306      	str	r3, [sp, #24]
 8019c52:	9a01      	ldr	r2, [sp, #4]
 8019c54:	2304      	movs	r3, #4
 8019c56:	9e08      	ldr	r6, [sp, #32]
 8019c58:	edd2 7a00 	vldr	s15, [r2]
 8019c5c:	ed96 7a00 	vldr	s14, [r6]
 8019c60:	edd8 2a00 	vldr	s5, [r8]
 8019c64:	ee77 5a87 	vadd.f32	s11, s15, s14
 8019c68:	ed9c 3a00 	vldr	s6, [ip]
 8019c6c:	ed92 6a01 	vldr	s12, [r2, #4]
 8019c70:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019c74:	edd6 6a01 	vldr	s13, [r6, #4]
 8019c78:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8019c7c:	ed9c 2a01 	vldr	s4, [ip, #4]
 8019c80:	ee36 5a26 	vadd.f32	s10, s12, s13
 8019c84:	edd8 7a01 	vldr	s15, [r8, #4]
 8019c88:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019c8c:	9d02      	ldr	r5, [sp, #8]
 8019c8e:	ee34 6a83 	vadd.f32	s12, s9, s6
 8019c92:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8019c96:	ee37 4a27 	vadd.f32	s8, s14, s15
 8019c9a:	9805      	ldr	r0, [sp, #20]
 8019c9c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8019ca0:	4621      	mov	r1, r4
 8019ca2:	ed82 6a00 	vstr	s12, [r2]
 8019ca6:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8019caa:	edd8 3a01 	vldr	s7, [r8, #4]
 8019cae:	ee75 5a67 	vsub.f32	s11, s10, s15
 8019cb2:	eddc 1a01 	vldr	s3, [ip, #4]
 8019cb6:	ee34 4a42 	vsub.f32	s8, s8, s4
 8019cba:	ee75 3a23 	vadd.f32	s7, s10, s7
 8019cbe:	ee74 4a83 	vadd.f32	s9, s9, s6
 8019cc2:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8019cc6:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8019cca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019cce:	ee36 6a43 	vsub.f32	s12, s12, s6
 8019cd2:	ed82 5a01 	vstr	s10, [r2, #4]
 8019cd6:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8019cda:	9a07      	ldr	r2, [sp, #28]
 8019cdc:	ee77 7a02 	vadd.f32	s15, s14, s4
 8019ce0:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8019ce4:	edd2 2a00 	vldr	s5, [r2]
 8019ce8:	ed92 5a01 	vldr	s10, [r2, #4]
 8019cec:	ee64 3a22 	vmul.f32	s7, s8, s5
 8019cf0:	ee24 4a05 	vmul.f32	s8, s8, s10
 8019cf4:	ee24 5a85 	vmul.f32	s10, s9, s10
 8019cf8:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8019cfc:	ee33 5a85 	vadd.f32	s10, s7, s10
 8019d00:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8019d04:	ed88 5a00 	vstr	s10, [r8]
 8019d08:	edc8 4a01 	vstr	s9, [r8, #4]
 8019d0c:	edd5 4a01 	vldr	s9, [r5, #4]
 8019d10:	edd5 6a00 	vldr	s13, [r5]
 8019d14:	9d06      	ldr	r5, [sp, #24]
 8019d16:	ee26 5a26 	vmul.f32	s10, s12, s13
 8019d1a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019d1e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8019d22:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8019d26:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8019d2a:	ee75 5a25 	vadd.f32	s11, s10, s11
 8019d2e:	ed86 6a01 	vstr	s12, [r6, #4]
 8019d32:	edc6 5a00 	vstr	s11, [r6]
 8019d36:	edd5 5a01 	vldr	s11, [r5, #4]
 8019d3a:	edd5 6a00 	vldr	s13, [r5]
 8019d3e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019d40:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8019d44:	ee67 6a26 	vmul.f32	s13, s14, s13
 8019d48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019d4c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8019d50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8019d54:	ee36 7a07 	vadd.f32	s14, s12, s14
 8019d58:	edcc 7a01 	vstr	s15, [ip, #4]
 8019d5c:	ed8c 7a00 	vstr	s14, [ip]
 8019d60:	6872      	ldr	r2, [r6, #4]
 8019d62:	f000 f977 	bl	801a054 <arm_radix8_butterfly_f32>
 8019d66:	9803      	ldr	r0, [sp, #12]
 8019d68:	4621      	mov	r1, r4
 8019d6a:	6872      	ldr	r2, [r6, #4]
 8019d6c:	2304      	movs	r3, #4
 8019d6e:	f000 f971 	bl	801a054 <arm_radix8_butterfly_f32>
 8019d72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019d74:	4621      	mov	r1, r4
 8019d76:	6872      	ldr	r2, [r6, #4]
 8019d78:	2304      	movs	r3, #4
 8019d7a:	f000 f96b 	bl	801a054 <arm_radix8_butterfly_f32>
 8019d7e:	4621      	mov	r1, r4
 8019d80:	6872      	ldr	r2, [r6, #4]
 8019d82:	2304      	movs	r3, #4
 8019d84:	9804      	ldr	r0, [sp, #16]
 8019d86:	b00f      	add	sp, #60	; 0x3c
 8019d88:	ecbd 8b06 	vpop	{d8-d10}
 8019d8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d90:	f000 b960 	b.w	801a054 <arm_radix8_butterfly_f32>

08019d94 <arm_cfft_f32>:
 8019d94:	2a01      	cmp	r2, #1
 8019d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d9a:	4606      	mov	r6, r0
 8019d9c:	4617      	mov	r7, r2
 8019d9e:	460c      	mov	r4, r1
 8019da0:	4698      	mov	r8, r3
 8019da2:	8805      	ldrh	r5, [r0, #0]
 8019da4:	d053      	beq.n	8019e4e <arm_cfft_f32+0xba>
 8019da6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8019daa:	d04b      	beq.n	8019e44 <arm_cfft_f32+0xb0>
 8019dac:	d916      	bls.n	8019ddc <arm_cfft_f32+0x48>
 8019dae:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8019db2:	d01a      	beq.n	8019dea <arm_cfft_f32+0x56>
 8019db4:	d95a      	bls.n	8019e6c <arm_cfft_f32+0xd8>
 8019db6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8019dba:	d043      	beq.n	8019e44 <arm_cfft_f32+0xb0>
 8019dbc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8019dc0:	d105      	bne.n	8019dce <arm_cfft_f32+0x3a>
 8019dc2:	2301      	movs	r3, #1
 8019dc4:	6872      	ldr	r2, [r6, #4]
 8019dc6:	4629      	mov	r1, r5
 8019dc8:	4620      	mov	r0, r4
 8019dca:	f000 f943 	bl	801a054 <arm_radix8_butterfly_f32>
 8019dce:	f1b8 0f00 	cmp.w	r8, #0
 8019dd2:	d111      	bne.n	8019df8 <arm_cfft_f32+0x64>
 8019dd4:	2f01      	cmp	r7, #1
 8019dd6:	d016      	beq.n	8019e06 <arm_cfft_f32+0x72>
 8019dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ddc:	2d20      	cmp	r5, #32
 8019dde:	d031      	beq.n	8019e44 <arm_cfft_f32+0xb0>
 8019de0:	d948      	bls.n	8019e74 <arm_cfft_f32+0xe0>
 8019de2:	2d40      	cmp	r5, #64	; 0x40
 8019de4:	d0ed      	beq.n	8019dc2 <arm_cfft_f32+0x2e>
 8019de6:	2d80      	cmp	r5, #128	; 0x80
 8019de8:	d1f1      	bne.n	8019dce <arm_cfft_f32+0x3a>
 8019dea:	4621      	mov	r1, r4
 8019dec:	4630      	mov	r0, r6
 8019dee:	f7ff fca9 	bl	8019744 <arm_cfft_radix8by2_f32>
 8019df2:	f1b8 0f00 	cmp.w	r8, #0
 8019df6:	d0ed      	beq.n	8019dd4 <arm_cfft_f32+0x40>
 8019df8:	68b2      	ldr	r2, [r6, #8]
 8019dfa:	4620      	mov	r0, r4
 8019dfc:	89b1      	ldrh	r1, [r6, #12]
 8019dfe:	f7e6 fa07 	bl	8000210 <arm_bitreversal_32>
 8019e02:	2f01      	cmp	r7, #1
 8019e04:	d1e8      	bne.n	8019dd8 <arm_cfft_f32+0x44>
 8019e06:	ee07 5a90 	vmov	s15, r5
 8019e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019e12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019e16:	2d00      	cmp	r5, #0
 8019e18:	d0de      	beq.n	8019dd8 <arm_cfft_f32+0x44>
 8019e1a:	f104 0108 	add.w	r1, r4, #8
 8019e1e:	2300      	movs	r3, #0
 8019e20:	ed11 7a02 	vldr	s14, [r1, #-8]
 8019e24:	3301      	adds	r3, #1
 8019e26:	ed51 7a01 	vldr	s15, [r1, #-4]
 8019e2a:	3108      	adds	r1, #8
 8019e2c:	429d      	cmp	r5, r3
 8019e2e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019e32:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019e36:	ed01 7a04 	vstr	s14, [r1, #-16]
 8019e3a:	ed41 7a03 	vstr	s15, [r1, #-12]
 8019e3e:	d1ef      	bne.n	8019e20 <arm_cfft_f32+0x8c>
 8019e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e44:	4621      	mov	r1, r4
 8019e46:	4630      	mov	r0, r6
 8019e48:	f7ff fd4c 	bl	80198e4 <arm_cfft_radix8by4_f32>
 8019e4c:	e7bf      	b.n	8019dce <arm_cfft_f32+0x3a>
 8019e4e:	b1a5      	cbz	r5, 8019e7a <arm_cfft_f32+0xe6>
 8019e50:	f101 030c 	add.w	r3, r1, #12
 8019e54:	2200      	movs	r2, #0
 8019e56:	ed53 7a02 	vldr	s15, [r3, #-8]
 8019e5a:	3201      	adds	r2, #1
 8019e5c:	3308      	adds	r3, #8
 8019e5e:	eef1 7a67 	vneg.f32	s15, s15
 8019e62:	4295      	cmp	r5, r2
 8019e64:	ed43 7a04 	vstr	s15, [r3, #-16]
 8019e68:	d1f5      	bne.n	8019e56 <arm_cfft_f32+0xc2>
 8019e6a:	e79c      	b.n	8019da6 <arm_cfft_f32+0x12>
 8019e6c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8019e70:	d0a7      	beq.n	8019dc2 <arm_cfft_f32+0x2e>
 8019e72:	e7ac      	b.n	8019dce <arm_cfft_f32+0x3a>
 8019e74:	2d10      	cmp	r5, #16
 8019e76:	d0b8      	beq.n	8019dea <arm_cfft_f32+0x56>
 8019e78:	e7a9      	b.n	8019dce <arm_cfft_f32+0x3a>
 8019e7a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8019e7e:	d896      	bhi.n	8019dae <arm_cfft_f32+0x1a>
 8019e80:	e7ac      	b.n	8019ddc <arm_cfft_f32+0x48>
 8019e82:	bf00      	nop

08019e84 <arm_cmplx_mag_f32>:
 8019e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e88:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8019e8c:	b084      	sub	sp, #16
 8019e8e:	d07f      	beq.n	8019f90 <arm_cmplx_mag_f32+0x10c>
 8019e90:	f100 0420 	add.w	r4, r0, #32
 8019e94:	f101 0510 	add.w	r5, r1, #16
 8019e98:	4646      	mov	r6, r8
 8019e9a:	2700      	movs	r7, #0
 8019e9c:	e05a      	b.n	8019f54 <arm_cmplx_mag_f32+0xd0>
 8019e9e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019ea2:	eeb4 0a40 	vcmp.f32	s0, s0
 8019ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eaa:	f040 80a4 	bne.w	8019ff6 <arm_cmplx_mag_f32+0x172>
 8019eae:	ed05 0a04 	vstr	s0, [r5, #-16]
 8019eb2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8019eb6:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8019eba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019ebe:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019ec2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019ec6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ece:	f2c0 808f 	blt.w	8019ff0 <arm_cmplx_mag_f32+0x16c>
 8019ed2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019ed6:	eeb4 0a40 	vcmp.f32	s0, s0
 8019eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ede:	f040 80af 	bne.w	801a040 <arm_cmplx_mag_f32+0x1bc>
 8019ee2:	ed05 0a03 	vstr	s0, [r5, #-12]
 8019ee6:	ed54 7a04 	vldr	s15, [r4, #-16]
 8019eea:	ed14 0a03 	vldr	s0, [r4, #-12]
 8019eee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019ef2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019ef6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f02:	db72      	blt.n	8019fea <arm_cmplx_mag_f32+0x166>
 8019f04:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019f08:	eeb4 0a40 	vcmp.f32	s0, s0
 8019f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f10:	f040 808c 	bne.w	801a02c <arm_cmplx_mag_f32+0x1a8>
 8019f14:	ed05 0a02 	vstr	s0, [r5, #-8]
 8019f18:	ed54 7a02 	vldr	s15, [r4, #-8]
 8019f1c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8019f20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019f24:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019f28:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019f2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f34:	db20      	blt.n	8019f78 <arm_cmplx_mag_f32+0xf4>
 8019f36:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019f3a:	eeb4 0a40 	vcmp.f32	s0, s0
 8019f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f42:	d169      	bne.n	801a018 <arm_cmplx_mag_f32+0x194>
 8019f44:	3e01      	subs	r6, #1
 8019f46:	ed05 0a01 	vstr	s0, [r5, #-4]
 8019f4a:	f104 0420 	add.w	r4, r4, #32
 8019f4e:	f105 0510 	add.w	r5, r5, #16
 8019f52:	d019      	beq.n	8019f88 <arm_cmplx_mag_f32+0x104>
 8019f54:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8019f58:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8019f5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019f60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019f64:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f70:	da95      	bge.n	8019e9e <arm_cmplx_mag_f32+0x1a>
 8019f72:	f845 7c10 	str.w	r7, [r5, #-16]
 8019f76:	e79c      	b.n	8019eb2 <arm_cmplx_mag_f32+0x2e>
 8019f78:	3e01      	subs	r6, #1
 8019f7a:	f845 7c04 	str.w	r7, [r5, #-4]
 8019f7e:	f104 0420 	add.w	r4, r4, #32
 8019f82:	f105 0510 	add.w	r5, r5, #16
 8019f86:	d1e5      	bne.n	8019f54 <arm_cmplx_mag_f32+0xd0>
 8019f88:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8019f8c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8019f90:	f012 0503 	ands.w	r5, r2, #3
 8019f94:	d026      	beq.n	8019fe4 <arm_cmplx_mag_f32+0x160>
 8019f96:	f100 0408 	add.w	r4, r0, #8
 8019f9a:	2600      	movs	r6, #0
 8019f9c:	e00c      	b.n	8019fb8 <arm_cmplx_mag_f32+0x134>
 8019f9e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019fa2:	eeb4 0a40 	vcmp.f32	s0, s0
 8019fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019faa:	d12e      	bne.n	801a00a <arm_cmplx_mag_f32+0x186>
 8019fac:	3d01      	subs	r5, #1
 8019fae:	ed01 0a01 	vstr	s0, [r1, #-4]
 8019fb2:	f104 0408 	add.w	r4, r4, #8
 8019fb6:	d015      	beq.n	8019fe4 <arm_cmplx_mag_f32+0x160>
 8019fb8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8019fbc:	3104      	adds	r1, #4
 8019fbe:	ed14 0a01 	vldr	s0, [r4, #-4]
 8019fc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019fc6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019fca:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fd6:	dae2      	bge.n	8019f9e <arm_cmplx_mag_f32+0x11a>
 8019fd8:	3d01      	subs	r5, #1
 8019fda:	f841 6c04 	str.w	r6, [r1, #-4]
 8019fde:	f104 0408 	add.w	r4, r4, #8
 8019fe2:	d1e9      	bne.n	8019fb8 <arm_cmplx_mag_f32+0x134>
 8019fe4:	b004      	add	sp, #16
 8019fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fea:	f845 7c08 	str.w	r7, [r5, #-8]
 8019fee:	e793      	b.n	8019f18 <arm_cmplx_mag_f32+0x94>
 8019ff0:	f845 7c0c 	str.w	r7, [r5, #-12]
 8019ff4:	e777      	b.n	8019ee6 <arm_cmplx_mag_f32+0x62>
 8019ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8019ffa:	9203      	str	r2, [sp, #12]
 8019ffc:	9102      	str	r1, [sp, #8]
 8019ffe:	9001      	str	r0, [sp, #4]
 801a000:	f001 fda2 	bl	801bb48 <sqrtf>
 801a004:	a801      	add	r0, sp, #4
 801a006:	c807      	ldmia	r0, {r0, r1, r2}
 801a008:	e751      	b.n	8019eae <arm_cmplx_mag_f32+0x2a>
 801a00a:	eeb0 0a67 	vmov.f32	s0, s15
 801a00e:	9101      	str	r1, [sp, #4]
 801a010:	f001 fd9a 	bl	801bb48 <sqrtf>
 801a014:	9901      	ldr	r1, [sp, #4]
 801a016:	e7c9      	b.n	8019fac <arm_cmplx_mag_f32+0x128>
 801a018:	eeb0 0a67 	vmov.f32	s0, s15
 801a01c:	9203      	str	r2, [sp, #12]
 801a01e:	9102      	str	r1, [sp, #8]
 801a020:	9001      	str	r0, [sp, #4]
 801a022:	f001 fd91 	bl	801bb48 <sqrtf>
 801a026:	a801      	add	r0, sp, #4
 801a028:	c807      	ldmia	r0, {r0, r1, r2}
 801a02a:	e78b      	b.n	8019f44 <arm_cmplx_mag_f32+0xc0>
 801a02c:	eeb0 0a67 	vmov.f32	s0, s15
 801a030:	9203      	str	r2, [sp, #12]
 801a032:	9102      	str	r1, [sp, #8]
 801a034:	9001      	str	r0, [sp, #4]
 801a036:	f001 fd87 	bl	801bb48 <sqrtf>
 801a03a:	a801      	add	r0, sp, #4
 801a03c:	c807      	ldmia	r0, {r0, r1, r2}
 801a03e:	e769      	b.n	8019f14 <arm_cmplx_mag_f32+0x90>
 801a040:	eeb0 0a67 	vmov.f32	s0, s15
 801a044:	9203      	str	r2, [sp, #12]
 801a046:	9102      	str	r1, [sp, #8]
 801a048:	9001      	str	r0, [sp, #4]
 801a04a:	f001 fd7d 	bl	801bb48 <sqrtf>
 801a04e:	a801      	add	r0, sp, #4
 801a050:	c807      	ldmia	r0, {r0, r1, r2}
 801a052:	e746      	b.n	8019ee2 <arm_cmplx_mag_f32+0x5e>

0801a054 <arm_radix8_butterfly_f32>:
 801a054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a058:	469e      	mov	lr, r3
 801a05a:	4603      	mov	r3, r0
 801a05c:	468a      	mov	sl, r1
 801a05e:	468b      	mov	fp, r1
 801a060:	3304      	adds	r3, #4
 801a062:	ed2d 8b10 	vpush	{d8-d15}
 801a066:	469c      	mov	ip, r3
 801a068:	b09d      	sub	sp, #116	; 0x74
 801a06a:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 801a378 <arm_radix8_butterfly_f32+0x324>
 801a06e:	9019      	str	r0, [sp, #100]	; 0x64
 801a070:	921a      	str	r2, [sp, #104]	; 0x68
 801a072:	931b      	str	r3, [sp, #108]	; 0x6c
 801a074:	ea4f 03db 	mov.w	r3, fp, lsr #3
 801a078:	f04f 0800 	mov.w	r8, #0
 801a07c:	461a      	mov	r2, r3
 801a07e:	9311      	str	r3, [sp, #68]	; 0x44
 801a080:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801a084:	4611      	mov	r1, r2
 801a086:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801a08a:	9300      	str	r3, [sp, #0]
 801a08c:	0053      	lsls	r3, r2, #1
 801a08e:	18d5      	adds	r5, r2, r3
 801a090:	9301      	str	r3, [sp, #4]
 801a092:	0113      	lsls	r3, r2, #4
 801a094:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a096:	194c      	adds	r4, r1, r5
 801a098:	eb02 0609 	add.w	r6, r2, r9
 801a09c:	9302      	str	r3, [sp, #8]
 801a09e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801a0a2:	4613      	mov	r3, r2
 801a0a4:	190a      	adds	r2, r1, r4
 801a0a6:	eb06 0709 	add.w	r7, r6, r9
 801a0aa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a0ae:	1888      	adds	r0, r1, r2
 801a0b0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801a0b4:	4401      	add	r1, r0
 801a0b6:	3204      	adds	r2, #4
 801a0b8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801a0bc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801a0c0:	9b00      	ldr	r3, [sp, #0]
 801a0c2:	3104      	adds	r1, #4
 801a0c4:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801a0c8:	44d8      	add	r8, fp
 801a0ca:	ed90 7a00 	vldr	s14, [r0]
 801a0ce:	ed94 5a00 	vldr	s10, [r4]
 801a0d2:	45c2      	cmp	sl, r8
 801a0d4:	edd7 3a00 	vldr	s7, [r7]
 801a0d8:	ed96 6a00 	vldr	s12, [r6]
 801a0dc:	ee37 1a85 	vadd.f32	s2, s15, s10
 801a0e0:	ed52 6a01 	vldr	s13, [r2, #-4]
 801a0e4:	ee73 4a87 	vadd.f32	s9, s7, s14
 801a0e8:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801a0ec:	edd5 7a00 	vldr	s15, [r5]
 801a0f0:	ee73 3ac7 	vsub.f32	s7, s7, s14
 801a0f4:	ed11 7a01 	vldr	s14, [r1, #-4]
 801a0f8:	ee36 2a26 	vadd.f32	s4, s12, s13
 801a0fc:	ee37 4a87 	vadd.f32	s8, s15, s14
 801a100:	ee76 6a66 	vsub.f32	s13, s12, s13
 801a104:	ee71 5a24 	vadd.f32	s11, s2, s9
 801a108:	ee32 6a04 	vadd.f32	s12, s4, s8
 801a10c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801a110:	ee31 1a64 	vsub.f32	s2, s2, s9
 801a114:	ee75 4a86 	vadd.f32	s9, s11, s12
 801a118:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801a11c:	ee75 5ac6 	vsub.f32	s11, s11, s12
 801a120:	ed4c 4a01 	vstr	s9, [ip, #-4]
 801a124:	ee32 2a44 	vsub.f32	s4, s4, s8
 801a128:	ee67 7a89 	vmul.f32	s15, s15, s18
 801a12c:	ed94 0a01 	vldr	s0, [r4, #4]
 801a130:	edc4 5a00 	vstr	s11, [r4]
 801a134:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a138:	edd6 5a01 	vldr	s11, [r6, #4]
 801a13c:	edd5 2a01 	vldr	s5, [r5, #4]
 801a140:	ee75 1a27 	vadd.f32	s3, s10, s15
 801a144:	ed92 4a00 	vldr	s8, [r2]
 801a148:	ee75 7a67 	vsub.f32	s15, s10, s15
 801a14c:	edd1 4a00 	vldr	s9, [r1]
 801a150:	ee27 7a09 	vmul.f32	s14, s14, s18
 801a154:	ee35 3ac4 	vsub.f32	s6, s11, s8
 801a158:	ed9c 6a00 	vldr	s12, [ip]
 801a15c:	ee72 6ae4 	vsub.f32	s13, s5, s9
 801a160:	edd0 0a01 	vldr	s1, [r0, #4]
 801a164:	ed97 5a01 	vldr	s10, [r7, #4]
 801a168:	ee35 4a84 	vadd.f32	s8, s11, s8
 801a16c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 801a170:	ee73 5a26 	vadd.f32	s11, s6, s13
 801a174:	ee76 2a00 	vadd.f32	s5, s12, s0
 801a178:	ee73 6a66 	vsub.f32	s13, s6, s13
 801a17c:	ee36 6a40 	vsub.f32	s12, s12, s0
 801a180:	ee35 0a20 	vadd.f32	s0, s10, s1
 801a184:	ee65 5a89 	vmul.f32	s11, s11, s18
 801a188:	ee35 5a60 	vsub.f32	s10, s10, s1
 801a18c:	ee32 3a80 	vadd.f32	s6, s5, s0
 801a190:	ee74 0a24 	vadd.f32	s1, s8, s9
 801a194:	ee66 6a89 	vmul.f32	s13, s13, s18
 801a198:	ee74 4a64 	vsub.f32	s9, s8, s9
 801a19c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 801a1a0:	ee75 2a25 	vadd.f32	s5, s10, s11
 801a1a4:	ee33 0a20 	vadd.f32	s0, s6, s1
 801a1a8:	ee75 5a65 	vsub.f32	s11, s10, s11
 801a1ac:	ee33 3a60 	vsub.f32	s6, s6, s1
 801a1b0:	ee36 5a26 	vadd.f32	s10, s12, s13
 801a1b4:	ed8c 0a00 	vstr	s0, [ip]
 801a1b8:	ee76 6a66 	vsub.f32	s13, s12, s13
 801a1bc:	449c      	add	ip, r3
 801a1be:	ee33 6a87 	vadd.f32	s12, s7, s14
 801a1c2:	ed84 3a01 	vstr	s6, [r4, #4]
 801a1c6:	ee33 7ac7 	vsub.f32	s14, s7, s14
 801a1ca:	441c      	add	r4, r3
 801a1cc:	ee71 3a24 	vadd.f32	s7, s2, s9
 801a1d0:	ee71 4a64 	vsub.f32	s9, s2, s9
 801a1d4:	ee31 3aa2 	vadd.f32	s6, s3, s5
 801a1d8:	edc7 3a00 	vstr	s7, [r7]
 801a1dc:	ee34 1a42 	vsub.f32	s2, s8, s4
 801a1e0:	edc0 4a00 	vstr	s9, [r0]
 801a1e4:	ee77 3aa5 	vadd.f32	s7, s15, s11
 801a1e8:	ee75 4a46 	vsub.f32	s9, s10, s12
 801a1ec:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801a1f0:	ed87 1a01 	vstr	s2, [r7, #4]
 801a1f4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 801a1f8:	441f      	add	r7, r3
 801a1fa:	ee32 4a04 	vadd.f32	s8, s4, s8
 801a1fe:	ee71 1ae2 	vsub.f32	s3, s3, s5
 801a202:	ee36 6a05 	vadd.f32	s12, s12, s10
 801a206:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a20a:	ed80 4a01 	vstr	s8, [r0, #4]
 801a20e:	ed86 3a00 	vstr	s6, [r6]
 801a212:	4418      	add	r0, r3
 801a214:	ed41 1a01 	vstr	s3, [r1, #-4]
 801a218:	ed42 3a01 	vstr	s7, [r2, #-4]
 801a21c:	edc5 7a00 	vstr	s15, [r5]
 801a220:	edc6 4a01 	vstr	s9, [r6, #4]
 801a224:	441e      	add	r6, r3
 801a226:	ed81 6a00 	vstr	s12, [r1]
 801a22a:	4419      	add	r1, r3
 801a22c:	edc2 5a00 	vstr	s11, [r2]
 801a230:	441a      	add	r2, r3
 801a232:	ed85 7a01 	vstr	s14, [r5, #4]
 801a236:	441d      	add	r5, r3
 801a238:	f63f af44 	bhi.w	801a0c4 <arm_radix8_butterfly_f32+0x70>
 801a23c:	9300      	str	r3, [sp, #0]
 801a23e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a240:	2b07      	cmp	r3, #7
 801a242:	f240 81f4 	bls.w	801a62e <arm_radix8_butterfly_f32+0x5da>
 801a246:	9901      	ldr	r1, [sp, #4]
 801a248:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 801a24c:	9d02      	ldr	r5, [sp, #8]
 801a24e:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 801a252:	3101      	adds	r1, #1
 801a254:	eb04 000e 	add.w	r0, r4, lr
 801a258:	00e4      	lsls	r4, r4, #3
 801a25a:	3508      	adds	r5, #8
 801a25c:	4419      	add	r1, r3
 801a25e:	eb00 0c0e 	add.w	ip, r0, lr
 801a262:	9413      	str	r4, [sp, #76]	; 0x4c
 801a264:	00c0      	lsls	r0, r0, #3
 801a266:	185e      	adds	r6, r3, r1
 801a268:	4617      	mov	r7, r2
 801a26a:	9218      	str	r2, [sp, #96]	; 0x60
 801a26c:	f109 0908 	add.w	r9, r9, #8
 801a270:	199c      	adds	r4, r3, r6
 801a272:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a274:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a276:	9012      	str	r0, [sp, #72]	; 0x48
 801a278:	195d      	adds	r5, r3, r5
 801a27a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a27c:	443a      	add	r2, r7
 801a27e:	950c      	str	r5, [sp, #48]	; 0x30
 801a280:	4698      	mov	r8, r3
 801a282:	4420      	add	r0, r4
 801a284:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a286:	19d7      	adds	r7, r2, r7
 801a288:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a28c:	4405      	add	r5, r0
 801a28e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801a292:	9710      	str	r7, [sp, #64]	; 0x40
 801a294:	eb0c 070e 	add.w	r7, ip, lr
 801a298:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a29c:	3404      	adds	r4, #4
 801a29e:	3004      	adds	r0, #4
 801a2a0:	44c8      	add	r8, r9
 801a2a2:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 801a2a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a2a8:	940a      	str	r4, [sp, #40]	; 0x28
 801a2aa:	9009      	str	r0, [sp, #36]	; 0x24
 801a2ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801a2b0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801a2b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801a2b6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a2b8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801a2bc:	eb07 080e 	add.w	r8, r7, lr
 801a2c0:	eb04 0900 	add.w	r9, r4, r0
 801a2c4:	00f8      	lsls	r0, r7, #3
 801a2c6:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 801a2ca:	3504      	adds	r5, #4
 801a2cc:	4607      	mov	r7, r0
 801a2ce:	9017      	str	r0, [sp, #92]	; 0x5c
 801a2d0:	910b      	str	r1, [sp, #44]	; 0x2c
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 801a2d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a2da:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801a2de:	18e3      	adds	r3, r4, r3
 801a2e0:	9508      	str	r5, [sp, #32]
 801a2e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a2e4:	910e      	str	r1, [sp, #56]	; 0x38
 801a2e6:	4621      	mov	r1, r4
 801a2e8:	eb04 0805 	add.w	r8, r4, r5
 801a2ec:	9304      	str	r3, [sp, #16]
 801a2ee:	19e5      	adds	r5, r4, r7
 801a2f0:	ea4f 130e 	mov.w	r3, lr, lsl #4
 801a2f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a2f6:	9316      	str	r3, [sp, #88]	; 0x58
 801a2f8:	190b      	adds	r3, r1, r4
 801a2fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a2fc:	9505      	str	r5, [sp, #20]
 801a2fe:	9303      	str	r3, [sp, #12]
 801a300:	f100 0308 	add.w	r3, r0, #8
 801a304:	9707      	str	r7, [sp, #28]
 801a306:	4638      	mov	r0, r7
 801a308:	930f      	str	r3, [sp, #60]	; 0x3c
 801a30a:	2301      	movs	r3, #1
 801a30c:	9306      	str	r3, [sp, #24]
 801a30e:	9b00      	ldr	r3, [sp, #0]
 801a310:	ed90 fa00 	vldr	s30, [r0]
 801a314:	edd0 ba01 	vldr	s23, [r0, #4]
 801a318:	9803      	ldr	r0, [sp, #12]
 801a31a:	9903      	ldr	r1, [sp, #12]
 801a31c:	ed90 ba01 	vldr	s22, [r0, #4]
 801a320:	9804      	ldr	r0, [sp, #16]
 801a322:	edd1 ea00 	vldr	s29, [r1]
 801a326:	edd0 aa01 	vldr	s21, [r0, #4]
 801a32a:	9805      	ldr	r0, [sp, #20]
 801a32c:	9905      	ldr	r1, [sp, #20]
 801a32e:	edd0 7a01 	vldr	s15, [r0, #4]
 801a332:	ed91 da00 	vldr	s26, [r1]
 801a336:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a338:	9c04      	ldr	r4, [sp, #16]
 801a33a:	edcd 7a01 	vstr	s15, [sp, #4]
 801a33e:	edd8 7a01 	vldr	s15, [r8, #4]
 801a342:	9100      	str	r1, [sp, #0]
 801a344:	edd2 fa00 	vldr	s31, [r2]
 801a348:	ed94 ea00 	vldr	s28, [r4]
 801a34c:	ed92 ca01 	vldr	s24, [r2, #4]
 801a350:	f8dd e020 	ldr.w	lr, [sp, #32]
 801a354:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a356:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801a358:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801a35a:	edd9 da00 	vldr	s27, [r9]
 801a35e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a360:	edd8 ca00 	vldr	s25, [r8]
 801a364:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a368:	f8dd c018 	ldr.w	ip, [sp, #24]
 801a36c:	ed99 aa01 	vldr	s20, [r9, #4]
 801a370:	edcd 7a02 	vstr	s15, [sp, #8]
 801a374:	9800      	ldr	r0, [sp, #0]
 801a376:	e001      	b.n	801a37c <arm_radix8_butterfly_f32+0x328>
 801a378:	3f3504f3 	.word	0x3f3504f3
 801a37c:	edd5 3a00 	vldr	s7, [r5]
 801a380:	44dc      	add	ip, fp
 801a382:	ed91 7a00 	vldr	s14, [r1]
 801a386:	edd4 8a00 	vldr	s17, [r4]
 801a38a:	45e2      	cmp	sl, ip
 801a38c:	ed57 7a01 	vldr	s15, [r7, #-4]
 801a390:	ed90 5a00 	vldr	s10, [r0]
 801a394:	ed56 5a01 	vldr	s11, [r6, #-4]
 801a398:	ee38 6aa7 	vadd.f32	s12, s17, s15
 801a39c:	ed92 1a00 	vldr	s2, [r2]
 801a3a0:	ee78 4ae7 	vsub.f32	s9, s17, s15
 801a3a4:	ed1e 4a01 	vldr	s8, [lr, #-4]
 801a3a8:	ee75 9a25 	vadd.f32	s19, s10, s11
 801a3ac:	ee31 3a07 	vadd.f32	s6, s2, s14
 801a3b0:	ed92 8a01 	vldr	s16, [r2, #4]
 801a3b4:	ee73 6a84 	vadd.f32	s13, s7, s8
 801a3b8:	ee75 5a65 	vsub.f32	s11, s10, s11
 801a3bc:	ee33 4ac4 	vsub.f32	s8, s7, s8
 801a3c0:	ee73 1a06 	vadd.f32	s3, s6, s12
 801a3c4:	ee39 5aa6 	vadd.f32	s10, s19, s13
 801a3c8:	ee75 7a84 	vadd.f32	s15, s11, s8
 801a3cc:	ee31 1a47 	vsub.f32	s2, s2, s14
 801a3d0:	ee31 7a85 	vadd.f32	s14, s3, s10
 801a3d4:	ee67 7a89 	vmul.f32	s15, s15, s18
 801a3d8:	ee33 3a46 	vsub.f32	s6, s6, s12
 801a3dc:	ed82 7a00 	vstr	s14, [r2]
 801a3e0:	ee79 9ae6 	vsub.f32	s19, s19, s13
 801a3e4:	ed96 6a00 	vldr	s12, [r6]
 801a3e8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 801a3ec:	edd5 3a01 	vldr	s7, [r5, #4]
 801a3f0:	ee74 8ae7 	vsub.f32	s17, s9, s15
 801a3f4:	ed90 7a01 	vldr	s14, [r0, #4]
 801a3f8:	ee35 4ac4 	vsub.f32	s8, s11, s8
 801a3fc:	edde 4a00 	vldr	s9, [lr]
 801a400:	ee31 5ac5 	vsub.f32	s10, s3, s10
 801a404:	ee77 2a46 	vsub.f32	s5, s14, s12
 801a408:	edd1 6a01 	vldr	s13, [r1, #4]
 801a40c:	ee73 7ae4 	vsub.f32	s15, s7, s9
 801a410:	edd7 0a00 	vldr	s1, [r7]
 801a414:	ee77 5a06 	vadd.f32	s11, s14, s12
 801a418:	ed94 7a01 	vldr	s14, [r4, #4]
 801a41c:	ee33 6aa4 	vadd.f32	s12, s7, s9
 801a420:	ee32 0ae7 	vsub.f32	s0, s5, s15
 801a424:	ee78 4a66 	vsub.f32	s9, s16, s13
 801a428:	ee78 3a26 	vadd.f32	s7, s16, s13
 801a42c:	ee72 2aa7 	vadd.f32	s5, s5, s15
 801a430:	ee77 6a20 	vadd.f32	s13, s14, s1
 801a434:	ee24 4a09 	vmul.f32	s8, s8, s18
 801a438:	ee37 7a60 	vsub.f32	s14, s14, s1
 801a43c:	ee20 8a09 	vmul.f32	s16, s0, s18
 801a440:	ee75 0a86 	vadd.f32	s1, s11, s12
 801a444:	ee33 0aa6 	vadd.f32	s0, s7, s13
 801a448:	ee62 2a89 	vmul.f32	s5, s5, s18
 801a44c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801a450:	ee73 3ae6 	vsub.f32	s7, s7, s13
 801a454:	ee77 7a62 	vsub.f32	s15, s14, s5
 801a458:	ee74 5a88 	vadd.f32	s11, s9, s16
 801a45c:	ee34 8ac8 	vsub.f32	s16, s9, s16
 801a460:	ee77 4a22 	vadd.f32	s9, s14, s5
 801a464:	ee71 2a04 	vadd.f32	s5, s2, s8
 801a468:	ee31 7a44 	vsub.f32	s14, s2, s8
 801a46c:	ee30 1a60 	vsub.f32	s2, s0, s1
 801a470:	ee73 1a06 	vadd.f32	s3, s6, s12
 801a474:	ee33 6a46 	vsub.f32	s12, s6, s12
 801a478:	ee33 3ae9 	vsub.f32	s6, s7, s19
 801a47c:	ee79 6aa3 	vadd.f32	s13, s19, s7
 801a480:	ee38 4a68 	vsub.f32	s8, s16, s17
 801a484:	ee75 3ac2 	vsub.f32	s7, s11, s4
 801a488:	ee72 5a25 	vadd.f32	s11, s4, s11
 801a48c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 801a490:	ee72 4ae4 	vsub.f32	s9, s5, s9
 801a494:	ee77 2a27 	vadd.f32	s5, s14, s15
 801a498:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a49c:	ee78 7a88 	vadd.f32	s15, s17, s16
 801a4a0:	ee6e 8a05 	vmul.f32	s17, s28, s10
 801a4a4:	ee2a 8a81 	vmul.f32	s16, s21, s2
 801a4a8:	ee2a 5a85 	vmul.f32	s10, s21, s10
 801a4ac:	ee2e 1a01 	vmul.f32	s2, s28, s2
 801a4b0:	ee6f 9a21 	vmul.f32	s19, s30, s3
 801a4b4:	ee70 0a20 	vadd.f32	s1, s0, s1
 801a4b8:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 801a4bc:	ee2b 0a83 	vmul.f32	s0, s23, s6
 801a4c0:	ee2f 3a03 	vmul.f32	s6, s30, s6
 801a4c4:	edc2 0a01 	vstr	s1, [r2, #4]
 801a4c8:	ee38 8a88 	vadd.f32	s16, s17, s16
 801a4cc:	441a      	add	r2, r3
 801a4ce:	ee6c 8a23 	vmul.f32	s17, s24, s7
 801a4d2:	ee31 5a45 	vsub.f32	s10, s2, s10
 801a4d6:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 801a4da:	ed81 8a00 	vstr	s16, [r1]
 801a4de:	ee39 0a80 	vadd.f32	s0, s19, s0
 801a4e2:	ee33 3a61 	vsub.f32	s6, s6, s3
 801a4e6:	ed81 5a01 	vstr	s10, [r1, #4]
 801a4ea:	ee6f 0a82 	vmul.f32	s1, s31, s4
 801a4ee:	edcd 3a00 	vstr	s7, [sp]
 801a4f2:	ed9d 5a02 	vldr	s10, [sp, #8]
 801a4f6:	ee2d 8a06 	vmul.f32	s16, s26, s12
 801a4fa:	eddd 3a01 	vldr	s7, [sp, #4]
 801a4fe:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 801a502:	ed84 0a00 	vstr	s0, [r4]
 801a506:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a50a:	ed84 3a01 	vstr	s6, [r4, #4]
 801a50e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 801a512:	ee23 6a86 	vmul.f32	s12, s7, s12
 801a516:	eddd 3a00 	vldr	s7, [sp]
 801a51a:	ee25 5a25 	vmul.f32	s10, s10, s11
 801a51e:	4419      	add	r1, r3
 801a520:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 801a524:	441c      	add	r4, r3
 801a526:	ee6a 1a04 	vmul.f32	s3, s20, s8
 801a52a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801a52e:	ee2e 3a87 	vmul.f32	s6, s29, s14
 801a532:	ee6b 8a27 	vmul.f32	s17, s22, s15
 801a536:	ee2c 2a02 	vmul.f32	s4, s24, s4
 801a53a:	ee6d 6a26 	vmul.f32	s13, s26, s13
 801a53e:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 801a542:	ee6a 2a22 	vmul.f32	s5, s20, s5
 801a546:	ee2d 4a84 	vmul.f32	s8, s27, s8
 801a54a:	ee2b 7a07 	vmul.f32	s14, s22, s14
 801a54e:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 801a552:	ee73 3ac2 	vsub.f32	s7, s7, s4
 801a556:	ee38 8a01 	vadd.f32	s16, s16, s2
 801a55a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801a55e:	ee39 5a85 	vadd.f32	s10, s19, s10
 801a562:	ee75 4ae4 	vsub.f32	s9, s11, s9
 801a566:	ed07 8a01 	vstr	s16, [r7, #-4]
 801a56a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801a56e:	ed87 6a00 	vstr	s12, [r7]
 801a572:	ee74 2a62 	vsub.f32	s5, s8, s5
 801a576:	edc0 0a00 	vstr	s1, [r0]
 801a57a:	ee33 3a28 	vadd.f32	s6, s6, s17
 801a57e:	edc0 3a01 	vstr	s7, [r0, #4]
 801a582:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801a586:	ed0e 5a01 	vstr	s10, [lr, #-4]
 801a58a:	edce 4a00 	vstr	s9, [lr]
 801a58e:	4418      	add	r0, r3
 801a590:	ed06 0a01 	vstr	s0, [r6, #-4]
 801a594:	441f      	add	r7, r3
 801a596:	edc6 2a00 	vstr	s5, [r6]
 801a59a:	449e      	add	lr, r3
 801a59c:	ed85 3a00 	vstr	s6, [r5]
 801a5a0:	441e      	add	r6, r3
 801a5a2:	ed85 7a01 	vstr	s14, [r5, #4]
 801a5a6:	441d      	add	r5, r3
 801a5a8:	f63f aee8 	bhi.w	801a37c <arm_radix8_butterfly_f32+0x328>
 801a5ac:	9a06      	ldr	r2, [sp, #24]
 801a5ae:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a5b0:	3201      	adds	r2, #1
 801a5b2:	4611      	mov	r1, r2
 801a5b4:	9206      	str	r2, [sp, #24]
 801a5b6:	9a07      	ldr	r2, [sp, #28]
 801a5b8:	4402      	add	r2, r0
 801a5ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a5bc:	9207      	str	r2, [sp, #28]
 801a5be:	9a03      	ldr	r2, [sp, #12]
 801a5c0:	4402      	add	r2, r0
 801a5c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a5c4:	9203      	str	r2, [sp, #12]
 801a5c6:	9a04      	ldr	r2, [sp, #16]
 801a5c8:	4402      	add	r2, r0
 801a5ca:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a5cc:	9204      	str	r2, [sp, #16]
 801a5ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a5d0:	4491      	add	r9, r2
 801a5d2:	9a05      	ldr	r2, [sp, #20]
 801a5d4:	4402      	add	r2, r0
 801a5d6:	9205      	str	r2, [sp, #20]
 801a5d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a5da:	4490      	add	r8, r2
 801a5dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a5de:	3208      	adds	r2, #8
 801a5e0:	920f      	str	r2, [sp, #60]	; 0x3c
 801a5e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a5e4:	3208      	adds	r2, #8
 801a5e6:	920e      	str	r2, [sp, #56]	; 0x38
 801a5e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a5ea:	3208      	adds	r2, #8
 801a5ec:	920d      	str	r2, [sp, #52]	; 0x34
 801a5ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a5f0:	3208      	adds	r2, #8
 801a5f2:	920c      	str	r2, [sp, #48]	; 0x30
 801a5f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a5f6:	3208      	adds	r2, #8
 801a5f8:	920b      	str	r2, [sp, #44]	; 0x2c
 801a5fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a5fc:	3208      	adds	r2, #8
 801a5fe:	920a      	str	r2, [sp, #40]	; 0x28
 801a600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a602:	3208      	adds	r2, #8
 801a604:	9209      	str	r2, [sp, #36]	; 0x24
 801a606:	9a08      	ldr	r2, [sp, #32]
 801a608:	3208      	adds	r2, #8
 801a60a:	9208      	str	r2, [sp, #32]
 801a60c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a60e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a610:	4622      	mov	r2, r4
 801a612:	4288      	cmp	r0, r1
 801a614:	d005      	beq.n	801a622 <arm_radix8_butterfly_f32+0x5ce>
 801a616:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a618:	4621      	mov	r1, r4
 801a61a:	4401      	add	r1, r0
 801a61c:	9807      	ldr	r0, [sp, #28]
 801a61e:	9110      	str	r1, [sp, #64]	; 0x40
 801a620:	e676      	b.n	801a310 <arm_radix8_butterfly_f32+0x2bc>
 801a622:	4683      	mov	fp, r0
 801a624:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 801a628:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 801a62c:	e522      	b.n	801a074 <arm_radix8_butterfly_f32+0x20>
 801a62e:	b01d      	add	sp, #116	; 0x74
 801a630:	ecbd 8b10 	vpop	{d8-d15}
 801a634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a638 <__errno>:
 801a638:	4b01      	ldr	r3, [pc, #4]	; (801a640 <__errno+0x8>)
 801a63a:	6818      	ldr	r0, [r3, #0]
 801a63c:	4770      	bx	lr
 801a63e:	bf00      	nop
 801a640:	2000005c 	.word	0x2000005c

0801a644 <__libc_init_array>:
 801a644:	b570      	push	{r4, r5, r6, lr}
 801a646:	4d0d      	ldr	r5, [pc, #52]	; (801a67c <__libc_init_array+0x38>)
 801a648:	4c0d      	ldr	r4, [pc, #52]	; (801a680 <__libc_init_array+0x3c>)
 801a64a:	1b64      	subs	r4, r4, r5
 801a64c:	10a4      	asrs	r4, r4, #2
 801a64e:	2600      	movs	r6, #0
 801a650:	42a6      	cmp	r6, r4
 801a652:	d109      	bne.n	801a668 <__libc_init_array+0x24>
 801a654:	4d0b      	ldr	r5, [pc, #44]	; (801a684 <__libc_init_array+0x40>)
 801a656:	4c0c      	ldr	r4, [pc, #48]	; (801a688 <__libc_init_array+0x44>)
 801a658:	f001 fcf0 	bl	801c03c <_init>
 801a65c:	1b64      	subs	r4, r4, r5
 801a65e:	10a4      	asrs	r4, r4, #2
 801a660:	2600      	movs	r6, #0
 801a662:	42a6      	cmp	r6, r4
 801a664:	d105      	bne.n	801a672 <__libc_init_array+0x2e>
 801a666:	bd70      	pop	{r4, r5, r6, pc}
 801a668:	f855 3b04 	ldr.w	r3, [r5], #4
 801a66c:	4798      	blx	r3
 801a66e:	3601      	adds	r6, #1
 801a670:	e7ee      	b.n	801a650 <__libc_init_array+0xc>
 801a672:	f855 3b04 	ldr.w	r3, [r5], #4
 801a676:	4798      	blx	r3
 801a678:	3601      	adds	r6, #1
 801a67a:	e7f2      	b.n	801a662 <__libc_init_array+0x1e>
 801a67c:	08032250 	.word	0x08032250
 801a680:	08032250 	.word	0x08032250
 801a684:	08032250 	.word	0x08032250
 801a688:	08032254 	.word	0x08032254

0801a68c <malloc>:
 801a68c:	4b02      	ldr	r3, [pc, #8]	; (801a698 <malloc+0xc>)
 801a68e:	4601      	mov	r1, r0
 801a690:	6818      	ldr	r0, [r3, #0]
 801a692:	f000 b871 	b.w	801a778 <_malloc_r>
 801a696:	bf00      	nop
 801a698:	2000005c 	.word	0x2000005c

0801a69c <free>:
 801a69c:	4b02      	ldr	r3, [pc, #8]	; (801a6a8 <free+0xc>)
 801a69e:	4601      	mov	r1, r0
 801a6a0:	6818      	ldr	r0, [r3, #0]
 801a6a2:	f000 b819 	b.w	801a6d8 <_free_r>
 801a6a6:	bf00      	nop
 801a6a8:	2000005c 	.word	0x2000005c

0801a6ac <memcpy>:
 801a6ac:	440a      	add	r2, r1
 801a6ae:	4291      	cmp	r1, r2
 801a6b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a6b4:	d100      	bne.n	801a6b8 <memcpy+0xc>
 801a6b6:	4770      	bx	lr
 801a6b8:	b510      	push	{r4, lr}
 801a6ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a6be:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a6c2:	4291      	cmp	r1, r2
 801a6c4:	d1f9      	bne.n	801a6ba <memcpy+0xe>
 801a6c6:	bd10      	pop	{r4, pc}

0801a6c8 <memset>:
 801a6c8:	4402      	add	r2, r0
 801a6ca:	4603      	mov	r3, r0
 801a6cc:	4293      	cmp	r3, r2
 801a6ce:	d100      	bne.n	801a6d2 <memset+0xa>
 801a6d0:	4770      	bx	lr
 801a6d2:	f803 1b01 	strb.w	r1, [r3], #1
 801a6d6:	e7f9      	b.n	801a6cc <memset+0x4>

0801a6d8 <_free_r>:
 801a6d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a6da:	2900      	cmp	r1, #0
 801a6dc:	d048      	beq.n	801a770 <_free_r+0x98>
 801a6de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6e2:	9001      	str	r0, [sp, #4]
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	f1a1 0404 	sub.w	r4, r1, #4
 801a6ea:	bfb8      	it	lt
 801a6ec:	18e4      	addlt	r4, r4, r3
 801a6ee:	f000 fc4f 	bl	801af90 <__malloc_lock>
 801a6f2:	4a20      	ldr	r2, [pc, #128]	; (801a774 <_free_r+0x9c>)
 801a6f4:	9801      	ldr	r0, [sp, #4]
 801a6f6:	6813      	ldr	r3, [r2, #0]
 801a6f8:	4615      	mov	r5, r2
 801a6fa:	b933      	cbnz	r3, 801a70a <_free_r+0x32>
 801a6fc:	6063      	str	r3, [r4, #4]
 801a6fe:	6014      	str	r4, [r2, #0]
 801a700:	b003      	add	sp, #12
 801a702:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a706:	f000 bc49 	b.w	801af9c <__malloc_unlock>
 801a70a:	42a3      	cmp	r3, r4
 801a70c:	d90b      	bls.n	801a726 <_free_r+0x4e>
 801a70e:	6821      	ldr	r1, [r4, #0]
 801a710:	1862      	adds	r2, r4, r1
 801a712:	4293      	cmp	r3, r2
 801a714:	bf04      	itt	eq
 801a716:	681a      	ldreq	r2, [r3, #0]
 801a718:	685b      	ldreq	r3, [r3, #4]
 801a71a:	6063      	str	r3, [r4, #4]
 801a71c:	bf04      	itt	eq
 801a71e:	1852      	addeq	r2, r2, r1
 801a720:	6022      	streq	r2, [r4, #0]
 801a722:	602c      	str	r4, [r5, #0]
 801a724:	e7ec      	b.n	801a700 <_free_r+0x28>
 801a726:	461a      	mov	r2, r3
 801a728:	685b      	ldr	r3, [r3, #4]
 801a72a:	b10b      	cbz	r3, 801a730 <_free_r+0x58>
 801a72c:	42a3      	cmp	r3, r4
 801a72e:	d9fa      	bls.n	801a726 <_free_r+0x4e>
 801a730:	6811      	ldr	r1, [r2, #0]
 801a732:	1855      	adds	r5, r2, r1
 801a734:	42a5      	cmp	r5, r4
 801a736:	d10b      	bne.n	801a750 <_free_r+0x78>
 801a738:	6824      	ldr	r4, [r4, #0]
 801a73a:	4421      	add	r1, r4
 801a73c:	1854      	adds	r4, r2, r1
 801a73e:	42a3      	cmp	r3, r4
 801a740:	6011      	str	r1, [r2, #0]
 801a742:	d1dd      	bne.n	801a700 <_free_r+0x28>
 801a744:	681c      	ldr	r4, [r3, #0]
 801a746:	685b      	ldr	r3, [r3, #4]
 801a748:	6053      	str	r3, [r2, #4]
 801a74a:	4421      	add	r1, r4
 801a74c:	6011      	str	r1, [r2, #0]
 801a74e:	e7d7      	b.n	801a700 <_free_r+0x28>
 801a750:	d902      	bls.n	801a758 <_free_r+0x80>
 801a752:	230c      	movs	r3, #12
 801a754:	6003      	str	r3, [r0, #0]
 801a756:	e7d3      	b.n	801a700 <_free_r+0x28>
 801a758:	6825      	ldr	r5, [r4, #0]
 801a75a:	1961      	adds	r1, r4, r5
 801a75c:	428b      	cmp	r3, r1
 801a75e:	bf04      	itt	eq
 801a760:	6819      	ldreq	r1, [r3, #0]
 801a762:	685b      	ldreq	r3, [r3, #4]
 801a764:	6063      	str	r3, [r4, #4]
 801a766:	bf04      	itt	eq
 801a768:	1949      	addeq	r1, r1, r5
 801a76a:	6021      	streq	r1, [r4, #0]
 801a76c:	6054      	str	r4, [r2, #4]
 801a76e:	e7c7      	b.n	801a700 <_free_r+0x28>
 801a770:	b003      	add	sp, #12
 801a772:	bd30      	pop	{r4, r5, pc}
 801a774:	20008534 	.word	0x20008534

0801a778 <_malloc_r>:
 801a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a77a:	1ccd      	adds	r5, r1, #3
 801a77c:	f025 0503 	bic.w	r5, r5, #3
 801a780:	3508      	adds	r5, #8
 801a782:	2d0c      	cmp	r5, #12
 801a784:	bf38      	it	cc
 801a786:	250c      	movcc	r5, #12
 801a788:	2d00      	cmp	r5, #0
 801a78a:	4606      	mov	r6, r0
 801a78c:	db01      	blt.n	801a792 <_malloc_r+0x1a>
 801a78e:	42a9      	cmp	r1, r5
 801a790:	d903      	bls.n	801a79a <_malloc_r+0x22>
 801a792:	230c      	movs	r3, #12
 801a794:	6033      	str	r3, [r6, #0]
 801a796:	2000      	movs	r0, #0
 801a798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a79a:	f000 fbf9 	bl	801af90 <__malloc_lock>
 801a79e:	4921      	ldr	r1, [pc, #132]	; (801a824 <_malloc_r+0xac>)
 801a7a0:	680a      	ldr	r2, [r1, #0]
 801a7a2:	4614      	mov	r4, r2
 801a7a4:	b99c      	cbnz	r4, 801a7ce <_malloc_r+0x56>
 801a7a6:	4f20      	ldr	r7, [pc, #128]	; (801a828 <_malloc_r+0xb0>)
 801a7a8:	683b      	ldr	r3, [r7, #0]
 801a7aa:	b923      	cbnz	r3, 801a7b6 <_malloc_r+0x3e>
 801a7ac:	4621      	mov	r1, r4
 801a7ae:	4630      	mov	r0, r6
 801a7b0:	f000 f8e0 	bl	801a974 <_sbrk_r>
 801a7b4:	6038      	str	r0, [r7, #0]
 801a7b6:	4629      	mov	r1, r5
 801a7b8:	4630      	mov	r0, r6
 801a7ba:	f000 f8db 	bl	801a974 <_sbrk_r>
 801a7be:	1c43      	adds	r3, r0, #1
 801a7c0:	d123      	bne.n	801a80a <_malloc_r+0x92>
 801a7c2:	230c      	movs	r3, #12
 801a7c4:	6033      	str	r3, [r6, #0]
 801a7c6:	4630      	mov	r0, r6
 801a7c8:	f000 fbe8 	bl	801af9c <__malloc_unlock>
 801a7cc:	e7e3      	b.n	801a796 <_malloc_r+0x1e>
 801a7ce:	6823      	ldr	r3, [r4, #0]
 801a7d0:	1b5b      	subs	r3, r3, r5
 801a7d2:	d417      	bmi.n	801a804 <_malloc_r+0x8c>
 801a7d4:	2b0b      	cmp	r3, #11
 801a7d6:	d903      	bls.n	801a7e0 <_malloc_r+0x68>
 801a7d8:	6023      	str	r3, [r4, #0]
 801a7da:	441c      	add	r4, r3
 801a7dc:	6025      	str	r5, [r4, #0]
 801a7de:	e004      	b.n	801a7ea <_malloc_r+0x72>
 801a7e0:	6863      	ldr	r3, [r4, #4]
 801a7e2:	42a2      	cmp	r2, r4
 801a7e4:	bf0c      	ite	eq
 801a7e6:	600b      	streq	r3, [r1, #0]
 801a7e8:	6053      	strne	r3, [r2, #4]
 801a7ea:	4630      	mov	r0, r6
 801a7ec:	f000 fbd6 	bl	801af9c <__malloc_unlock>
 801a7f0:	f104 000b 	add.w	r0, r4, #11
 801a7f4:	1d23      	adds	r3, r4, #4
 801a7f6:	f020 0007 	bic.w	r0, r0, #7
 801a7fa:	1ac2      	subs	r2, r0, r3
 801a7fc:	d0cc      	beq.n	801a798 <_malloc_r+0x20>
 801a7fe:	1a1b      	subs	r3, r3, r0
 801a800:	50a3      	str	r3, [r4, r2]
 801a802:	e7c9      	b.n	801a798 <_malloc_r+0x20>
 801a804:	4622      	mov	r2, r4
 801a806:	6864      	ldr	r4, [r4, #4]
 801a808:	e7cc      	b.n	801a7a4 <_malloc_r+0x2c>
 801a80a:	1cc4      	adds	r4, r0, #3
 801a80c:	f024 0403 	bic.w	r4, r4, #3
 801a810:	42a0      	cmp	r0, r4
 801a812:	d0e3      	beq.n	801a7dc <_malloc_r+0x64>
 801a814:	1a21      	subs	r1, r4, r0
 801a816:	4630      	mov	r0, r6
 801a818:	f000 f8ac 	bl	801a974 <_sbrk_r>
 801a81c:	3001      	adds	r0, #1
 801a81e:	d1dd      	bne.n	801a7dc <_malloc_r+0x64>
 801a820:	e7cf      	b.n	801a7c2 <_malloc_r+0x4a>
 801a822:	bf00      	nop
 801a824:	20008534 	.word	0x20008534
 801a828:	20008538 	.word	0x20008538

0801a82c <iprintf>:
 801a82c:	b40f      	push	{r0, r1, r2, r3}
 801a82e:	4b0a      	ldr	r3, [pc, #40]	; (801a858 <iprintf+0x2c>)
 801a830:	b513      	push	{r0, r1, r4, lr}
 801a832:	681c      	ldr	r4, [r3, #0]
 801a834:	b124      	cbz	r4, 801a840 <iprintf+0x14>
 801a836:	69a3      	ldr	r3, [r4, #24]
 801a838:	b913      	cbnz	r3, 801a840 <iprintf+0x14>
 801a83a:	4620      	mov	r0, r4
 801a83c:	f000 faa4 	bl	801ad88 <__sinit>
 801a840:	ab05      	add	r3, sp, #20
 801a842:	9a04      	ldr	r2, [sp, #16]
 801a844:	68a1      	ldr	r1, [r4, #8]
 801a846:	9301      	str	r3, [sp, #4]
 801a848:	4620      	mov	r0, r4
 801a84a:	f000 fd33 	bl	801b2b4 <_vfiprintf_r>
 801a84e:	b002      	add	sp, #8
 801a850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a854:	b004      	add	sp, #16
 801a856:	4770      	bx	lr
 801a858:	2000005c 	.word	0x2000005c

0801a85c <putchar>:
 801a85c:	4b09      	ldr	r3, [pc, #36]	; (801a884 <putchar+0x28>)
 801a85e:	b513      	push	{r0, r1, r4, lr}
 801a860:	681c      	ldr	r4, [r3, #0]
 801a862:	4601      	mov	r1, r0
 801a864:	b134      	cbz	r4, 801a874 <putchar+0x18>
 801a866:	69a3      	ldr	r3, [r4, #24]
 801a868:	b923      	cbnz	r3, 801a874 <putchar+0x18>
 801a86a:	9001      	str	r0, [sp, #4]
 801a86c:	4620      	mov	r0, r4
 801a86e:	f000 fa8b 	bl	801ad88 <__sinit>
 801a872:	9901      	ldr	r1, [sp, #4]
 801a874:	68a2      	ldr	r2, [r4, #8]
 801a876:	4620      	mov	r0, r4
 801a878:	b002      	add	sp, #8
 801a87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a87e:	f000 bfdd 	b.w	801b83c <_putc_r>
 801a882:	bf00      	nop
 801a884:	2000005c 	.word	0x2000005c

0801a888 <_puts_r>:
 801a888:	b570      	push	{r4, r5, r6, lr}
 801a88a:	460e      	mov	r6, r1
 801a88c:	4605      	mov	r5, r0
 801a88e:	b118      	cbz	r0, 801a898 <_puts_r+0x10>
 801a890:	6983      	ldr	r3, [r0, #24]
 801a892:	b90b      	cbnz	r3, 801a898 <_puts_r+0x10>
 801a894:	f000 fa78 	bl	801ad88 <__sinit>
 801a898:	69ab      	ldr	r3, [r5, #24]
 801a89a:	68ac      	ldr	r4, [r5, #8]
 801a89c:	b913      	cbnz	r3, 801a8a4 <_puts_r+0x1c>
 801a89e:	4628      	mov	r0, r5
 801a8a0:	f000 fa72 	bl	801ad88 <__sinit>
 801a8a4:	4b2c      	ldr	r3, [pc, #176]	; (801a958 <_puts_r+0xd0>)
 801a8a6:	429c      	cmp	r4, r3
 801a8a8:	d120      	bne.n	801a8ec <_puts_r+0x64>
 801a8aa:	686c      	ldr	r4, [r5, #4]
 801a8ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a8ae:	07db      	lsls	r3, r3, #31
 801a8b0:	d405      	bmi.n	801a8be <_puts_r+0x36>
 801a8b2:	89a3      	ldrh	r3, [r4, #12]
 801a8b4:	0598      	lsls	r0, r3, #22
 801a8b6:	d402      	bmi.n	801a8be <_puts_r+0x36>
 801a8b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a8ba:	f000 fb03 	bl	801aec4 <__retarget_lock_acquire_recursive>
 801a8be:	89a3      	ldrh	r3, [r4, #12]
 801a8c0:	0719      	lsls	r1, r3, #28
 801a8c2:	d51d      	bpl.n	801a900 <_puts_r+0x78>
 801a8c4:	6923      	ldr	r3, [r4, #16]
 801a8c6:	b1db      	cbz	r3, 801a900 <_puts_r+0x78>
 801a8c8:	3e01      	subs	r6, #1
 801a8ca:	68a3      	ldr	r3, [r4, #8]
 801a8cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a8d0:	3b01      	subs	r3, #1
 801a8d2:	60a3      	str	r3, [r4, #8]
 801a8d4:	bb39      	cbnz	r1, 801a926 <_puts_r+0x9e>
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	da38      	bge.n	801a94c <_puts_r+0xc4>
 801a8da:	4622      	mov	r2, r4
 801a8dc:	210a      	movs	r1, #10
 801a8de:	4628      	mov	r0, r5
 801a8e0:	f000 f878 	bl	801a9d4 <__swbuf_r>
 801a8e4:	3001      	adds	r0, #1
 801a8e6:	d011      	beq.n	801a90c <_puts_r+0x84>
 801a8e8:	250a      	movs	r5, #10
 801a8ea:	e011      	b.n	801a910 <_puts_r+0x88>
 801a8ec:	4b1b      	ldr	r3, [pc, #108]	; (801a95c <_puts_r+0xd4>)
 801a8ee:	429c      	cmp	r4, r3
 801a8f0:	d101      	bne.n	801a8f6 <_puts_r+0x6e>
 801a8f2:	68ac      	ldr	r4, [r5, #8]
 801a8f4:	e7da      	b.n	801a8ac <_puts_r+0x24>
 801a8f6:	4b1a      	ldr	r3, [pc, #104]	; (801a960 <_puts_r+0xd8>)
 801a8f8:	429c      	cmp	r4, r3
 801a8fa:	bf08      	it	eq
 801a8fc:	68ec      	ldreq	r4, [r5, #12]
 801a8fe:	e7d5      	b.n	801a8ac <_puts_r+0x24>
 801a900:	4621      	mov	r1, r4
 801a902:	4628      	mov	r0, r5
 801a904:	f000 f8b8 	bl	801aa78 <__swsetup_r>
 801a908:	2800      	cmp	r0, #0
 801a90a:	d0dd      	beq.n	801a8c8 <_puts_r+0x40>
 801a90c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a912:	07da      	lsls	r2, r3, #31
 801a914:	d405      	bmi.n	801a922 <_puts_r+0x9a>
 801a916:	89a3      	ldrh	r3, [r4, #12]
 801a918:	059b      	lsls	r3, r3, #22
 801a91a:	d402      	bmi.n	801a922 <_puts_r+0x9a>
 801a91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a91e:	f000 fad2 	bl	801aec6 <__retarget_lock_release_recursive>
 801a922:	4628      	mov	r0, r5
 801a924:	bd70      	pop	{r4, r5, r6, pc}
 801a926:	2b00      	cmp	r3, #0
 801a928:	da04      	bge.n	801a934 <_puts_r+0xac>
 801a92a:	69a2      	ldr	r2, [r4, #24]
 801a92c:	429a      	cmp	r2, r3
 801a92e:	dc06      	bgt.n	801a93e <_puts_r+0xb6>
 801a930:	290a      	cmp	r1, #10
 801a932:	d004      	beq.n	801a93e <_puts_r+0xb6>
 801a934:	6823      	ldr	r3, [r4, #0]
 801a936:	1c5a      	adds	r2, r3, #1
 801a938:	6022      	str	r2, [r4, #0]
 801a93a:	7019      	strb	r1, [r3, #0]
 801a93c:	e7c5      	b.n	801a8ca <_puts_r+0x42>
 801a93e:	4622      	mov	r2, r4
 801a940:	4628      	mov	r0, r5
 801a942:	f000 f847 	bl	801a9d4 <__swbuf_r>
 801a946:	3001      	adds	r0, #1
 801a948:	d1bf      	bne.n	801a8ca <_puts_r+0x42>
 801a94a:	e7df      	b.n	801a90c <_puts_r+0x84>
 801a94c:	6823      	ldr	r3, [r4, #0]
 801a94e:	250a      	movs	r5, #10
 801a950:	1c5a      	adds	r2, r3, #1
 801a952:	6022      	str	r2, [r4, #0]
 801a954:	701d      	strb	r5, [r3, #0]
 801a956:	e7db      	b.n	801a910 <_puts_r+0x88>
 801a958:	080321d4 	.word	0x080321d4
 801a95c:	080321f4 	.word	0x080321f4
 801a960:	080321b4 	.word	0x080321b4

0801a964 <puts>:
 801a964:	4b02      	ldr	r3, [pc, #8]	; (801a970 <puts+0xc>)
 801a966:	4601      	mov	r1, r0
 801a968:	6818      	ldr	r0, [r3, #0]
 801a96a:	f7ff bf8d 	b.w	801a888 <_puts_r>
 801a96e:	bf00      	nop
 801a970:	2000005c 	.word	0x2000005c

0801a974 <_sbrk_r>:
 801a974:	b538      	push	{r3, r4, r5, lr}
 801a976:	4d06      	ldr	r5, [pc, #24]	; (801a990 <_sbrk_r+0x1c>)
 801a978:	2300      	movs	r3, #0
 801a97a:	4604      	mov	r4, r0
 801a97c:	4608      	mov	r0, r1
 801a97e:	602b      	str	r3, [r5, #0]
 801a980:	f7e9 fb34 	bl	8003fec <_sbrk>
 801a984:	1c43      	adds	r3, r0, #1
 801a986:	d102      	bne.n	801a98e <_sbrk_r+0x1a>
 801a988:	682b      	ldr	r3, [r5, #0]
 801a98a:	b103      	cbz	r3, 801a98e <_sbrk_r+0x1a>
 801a98c:	6023      	str	r3, [r4, #0]
 801a98e:	bd38      	pop	{r3, r4, r5, pc}
 801a990:	2004b02c 	.word	0x2004b02c

0801a994 <siprintf>:
 801a994:	b40e      	push	{r1, r2, r3}
 801a996:	b500      	push	{lr}
 801a998:	b09c      	sub	sp, #112	; 0x70
 801a99a:	ab1d      	add	r3, sp, #116	; 0x74
 801a99c:	9002      	str	r0, [sp, #8]
 801a99e:	9006      	str	r0, [sp, #24]
 801a9a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a9a4:	4809      	ldr	r0, [pc, #36]	; (801a9cc <siprintf+0x38>)
 801a9a6:	9107      	str	r1, [sp, #28]
 801a9a8:	9104      	str	r1, [sp, #16]
 801a9aa:	4909      	ldr	r1, [pc, #36]	; (801a9d0 <siprintf+0x3c>)
 801a9ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9b0:	9105      	str	r1, [sp, #20]
 801a9b2:	6800      	ldr	r0, [r0, #0]
 801a9b4:	9301      	str	r3, [sp, #4]
 801a9b6:	a902      	add	r1, sp, #8
 801a9b8:	f000 fb52 	bl	801b060 <_svfiprintf_r>
 801a9bc:	9b02      	ldr	r3, [sp, #8]
 801a9be:	2200      	movs	r2, #0
 801a9c0:	701a      	strb	r2, [r3, #0]
 801a9c2:	b01c      	add	sp, #112	; 0x70
 801a9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a9c8:	b003      	add	sp, #12
 801a9ca:	4770      	bx	lr
 801a9cc:	2000005c 	.word	0x2000005c
 801a9d0:	ffff0208 	.word	0xffff0208

0801a9d4 <__swbuf_r>:
 801a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9d6:	460e      	mov	r6, r1
 801a9d8:	4614      	mov	r4, r2
 801a9da:	4605      	mov	r5, r0
 801a9dc:	b118      	cbz	r0, 801a9e6 <__swbuf_r+0x12>
 801a9de:	6983      	ldr	r3, [r0, #24]
 801a9e0:	b90b      	cbnz	r3, 801a9e6 <__swbuf_r+0x12>
 801a9e2:	f000 f9d1 	bl	801ad88 <__sinit>
 801a9e6:	4b21      	ldr	r3, [pc, #132]	; (801aa6c <__swbuf_r+0x98>)
 801a9e8:	429c      	cmp	r4, r3
 801a9ea:	d12b      	bne.n	801aa44 <__swbuf_r+0x70>
 801a9ec:	686c      	ldr	r4, [r5, #4]
 801a9ee:	69a3      	ldr	r3, [r4, #24]
 801a9f0:	60a3      	str	r3, [r4, #8]
 801a9f2:	89a3      	ldrh	r3, [r4, #12]
 801a9f4:	071a      	lsls	r2, r3, #28
 801a9f6:	d52f      	bpl.n	801aa58 <__swbuf_r+0x84>
 801a9f8:	6923      	ldr	r3, [r4, #16]
 801a9fa:	b36b      	cbz	r3, 801aa58 <__swbuf_r+0x84>
 801a9fc:	6923      	ldr	r3, [r4, #16]
 801a9fe:	6820      	ldr	r0, [r4, #0]
 801aa00:	1ac0      	subs	r0, r0, r3
 801aa02:	6963      	ldr	r3, [r4, #20]
 801aa04:	b2f6      	uxtb	r6, r6
 801aa06:	4283      	cmp	r3, r0
 801aa08:	4637      	mov	r7, r6
 801aa0a:	dc04      	bgt.n	801aa16 <__swbuf_r+0x42>
 801aa0c:	4621      	mov	r1, r4
 801aa0e:	4628      	mov	r0, r5
 801aa10:	f000 f926 	bl	801ac60 <_fflush_r>
 801aa14:	bb30      	cbnz	r0, 801aa64 <__swbuf_r+0x90>
 801aa16:	68a3      	ldr	r3, [r4, #8]
 801aa18:	3b01      	subs	r3, #1
 801aa1a:	60a3      	str	r3, [r4, #8]
 801aa1c:	6823      	ldr	r3, [r4, #0]
 801aa1e:	1c5a      	adds	r2, r3, #1
 801aa20:	6022      	str	r2, [r4, #0]
 801aa22:	701e      	strb	r6, [r3, #0]
 801aa24:	6963      	ldr	r3, [r4, #20]
 801aa26:	3001      	adds	r0, #1
 801aa28:	4283      	cmp	r3, r0
 801aa2a:	d004      	beq.n	801aa36 <__swbuf_r+0x62>
 801aa2c:	89a3      	ldrh	r3, [r4, #12]
 801aa2e:	07db      	lsls	r3, r3, #31
 801aa30:	d506      	bpl.n	801aa40 <__swbuf_r+0x6c>
 801aa32:	2e0a      	cmp	r6, #10
 801aa34:	d104      	bne.n	801aa40 <__swbuf_r+0x6c>
 801aa36:	4621      	mov	r1, r4
 801aa38:	4628      	mov	r0, r5
 801aa3a:	f000 f911 	bl	801ac60 <_fflush_r>
 801aa3e:	b988      	cbnz	r0, 801aa64 <__swbuf_r+0x90>
 801aa40:	4638      	mov	r0, r7
 801aa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa44:	4b0a      	ldr	r3, [pc, #40]	; (801aa70 <__swbuf_r+0x9c>)
 801aa46:	429c      	cmp	r4, r3
 801aa48:	d101      	bne.n	801aa4e <__swbuf_r+0x7a>
 801aa4a:	68ac      	ldr	r4, [r5, #8]
 801aa4c:	e7cf      	b.n	801a9ee <__swbuf_r+0x1a>
 801aa4e:	4b09      	ldr	r3, [pc, #36]	; (801aa74 <__swbuf_r+0xa0>)
 801aa50:	429c      	cmp	r4, r3
 801aa52:	bf08      	it	eq
 801aa54:	68ec      	ldreq	r4, [r5, #12]
 801aa56:	e7ca      	b.n	801a9ee <__swbuf_r+0x1a>
 801aa58:	4621      	mov	r1, r4
 801aa5a:	4628      	mov	r0, r5
 801aa5c:	f000 f80c 	bl	801aa78 <__swsetup_r>
 801aa60:	2800      	cmp	r0, #0
 801aa62:	d0cb      	beq.n	801a9fc <__swbuf_r+0x28>
 801aa64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801aa68:	e7ea      	b.n	801aa40 <__swbuf_r+0x6c>
 801aa6a:	bf00      	nop
 801aa6c:	080321d4 	.word	0x080321d4
 801aa70:	080321f4 	.word	0x080321f4
 801aa74:	080321b4 	.word	0x080321b4

0801aa78 <__swsetup_r>:
 801aa78:	4b32      	ldr	r3, [pc, #200]	; (801ab44 <__swsetup_r+0xcc>)
 801aa7a:	b570      	push	{r4, r5, r6, lr}
 801aa7c:	681d      	ldr	r5, [r3, #0]
 801aa7e:	4606      	mov	r6, r0
 801aa80:	460c      	mov	r4, r1
 801aa82:	b125      	cbz	r5, 801aa8e <__swsetup_r+0x16>
 801aa84:	69ab      	ldr	r3, [r5, #24]
 801aa86:	b913      	cbnz	r3, 801aa8e <__swsetup_r+0x16>
 801aa88:	4628      	mov	r0, r5
 801aa8a:	f000 f97d 	bl	801ad88 <__sinit>
 801aa8e:	4b2e      	ldr	r3, [pc, #184]	; (801ab48 <__swsetup_r+0xd0>)
 801aa90:	429c      	cmp	r4, r3
 801aa92:	d10f      	bne.n	801aab4 <__swsetup_r+0x3c>
 801aa94:	686c      	ldr	r4, [r5, #4]
 801aa96:	89a3      	ldrh	r3, [r4, #12]
 801aa98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aa9c:	0719      	lsls	r1, r3, #28
 801aa9e:	d42c      	bmi.n	801aafa <__swsetup_r+0x82>
 801aaa0:	06dd      	lsls	r5, r3, #27
 801aaa2:	d411      	bmi.n	801aac8 <__swsetup_r+0x50>
 801aaa4:	2309      	movs	r3, #9
 801aaa6:	6033      	str	r3, [r6, #0]
 801aaa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801aaac:	81a3      	strh	r3, [r4, #12]
 801aaae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aab2:	e03e      	b.n	801ab32 <__swsetup_r+0xba>
 801aab4:	4b25      	ldr	r3, [pc, #148]	; (801ab4c <__swsetup_r+0xd4>)
 801aab6:	429c      	cmp	r4, r3
 801aab8:	d101      	bne.n	801aabe <__swsetup_r+0x46>
 801aaba:	68ac      	ldr	r4, [r5, #8]
 801aabc:	e7eb      	b.n	801aa96 <__swsetup_r+0x1e>
 801aabe:	4b24      	ldr	r3, [pc, #144]	; (801ab50 <__swsetup_r+0xd8>)
 801aac0:	429c      	cmp	r4, r3
 801aac2:	bf08      	it	eq
 801aac4:	68ec      	ldreq	r4, [r5, #12]
 801aac6:	e7e6      	b.n	801aa96 <__swsetup_r+0x1e>
 801aac8:	0758      	lsls	r0, r3, #29
 801aaca:	d512      	bpl.n	801aaf2 <__swsetup_r+0x7a>
 801aacc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aace:	b141      	cbz	r1, 801aae2 <__swsetup_r+0x6a>
 801aad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aad4:	4299      	cmp	r1, r3
 801aad6:	d002      	beq.n	801aade <__swsetup_r+0x66>
 801aad8:	4630      	mov	r0, r6
 801aada:	f7ff fdfd 	bl	801a6d8 <_free_r>
 801aade:	2300      	movs	r3, #0
 801aae0:	6363      	str	r3, [r4, #52]	; 0x34
 801aae2:	89a3      	ldrh	r3, [r4, #12]
 801aae4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801aae8:	81a3      	strh	r3, [r4, #12]
 801aaea:	2300      	movs	r3, #0
 801aaec:	6063      	str	r3, [r4, #4]
 801aaee:	6923      	ldr	r3, [r4, #16]
 801aaf0:	6023      	str	r3, [r4, #0]
 801aaf2:	89a3      	ldrh	r3, [r4, #12]
 801aaf4:	f043 0308 	orr.w	r3, r3, #8
 801aaf8:	81a3      	strh	r3, [r4, #12]
 801aafa:	6923      	ldr	r3, [r4, #16]
 801aafc:	b94b      	cbnz	r3, 801ab12 <__swsetup_r+0x9a>
 801aafe:	89a3      	ldrh	r3, [r4, #12]
 801ab00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ab04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab08:	d003      	beq.n	801ab12 <__swsetup_r+0x9a>
 801ab0a:	4621      	mov	r1, r4
 801ab0c:	4630      	mov	r0, r6
 801ab0e:	f000 f9ff 	bl	801af10 <__smakebuf_r>
 801ab12:	89a0      	ldrh	r0, [r4, #12]
 801ab14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ab18:	f010 0301 	ands.w	r3, r0, #1
 801ab1c:	d00a      	beq.n	801ab34 <__swsetup_r+0xbc>
 801ab1e:	2300      	movs	r3, #0
 801ab20:	60a3      	str	r3, [r4, #8]
 801ab22:	6963      	ldr	r3, [r4, #20]
 801ab24:	425b      	negs	r3, r3
 801ab26:	61a3      	str	r3, [r4, #24]
 801ab28:	6923      	ldr	r3, [r4, #16]
 801ab2a:	b943      	cbnz	r3, 801ab3e <__swsetup_r+0xc6>
 801ab2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ab30:	d1ba      	bne.n	801aaa8 <__swsetup_r+0x30>
 801ab32:	bd70      	pop	{r4, r5, r6, pc}
 801ab34:	0781      	lsls	r1, r0, #30
 801ab36:	bf58      	it	pl
 801ab38:	6963      	ldrpl	r3, [r4, #20]
 801ab3a:	60a3      	str	r3, [r4, #8]
 801ab3c:	e7f4      	b.n	801ab28 <__swsetup_r+0xb0>
 801ab3e:	2000      	movs	r0, #0
 801ab40:	e7f7      	b.n	801ab32 <__swsetup_r+0xba>
 801ab42:	bf00      	nop
 801ab44:	2000005c 	.word	0x2000005c
 801ab48:	080321d4 	.word	0x080321d4
 801ab4c:	080321f4 	.word	0x080321f4
 801ab50:	080321b4 	.word	0x080321b4

0801ab54 <__sflush_r>:
 801ab54:	898a      	ldrh	r2, [r1, #12]
 801ab56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab5a:	4605      	mov	r5, r0
 801ab5c:	0710      	lsls	r0, r2, #28
 801ab5e:	460c      	mov	r4, r1
 801ab60:	d458      	bmi.n	801ac14 <__sflush_r+0xc0>
 801ab62:	684b      	ldr	r3, [r1, #4]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	dc05      	bgt.n	801ab74 <__sflush_r+0x20>
 801ab68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	dc02      	bgt.n	801ab74 <__sflush_r+0x20>
 801ab6e:	2000      	movs	r0, #0
 801ab70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ab76:	2e00      	cmp	r6, #0
 801ab78:	d0f9      	beq.n	801ab6e <__sflush_r+0x1a>
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ab80:	682f      	ldr	r7, [r5, #0]
 801ab82:	602b      	str	r3, [r5, #0]
 801ab84:	d032      	beq.n	801abec <__sflush_r+0x98>
 801ab86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ab88:	89a3      	ldrh	r3, [r4, #12]
 801ab8a:	075a      	lsls	r2, r3, #29
 801ab8c:	d505      	bpl.n	801ab9a <__sflush_r+0x46>
 801ab8e:	6863      	ldr	r3, [r4, #4]
 801ab90:	1ac0      	subs	r0, r0, r3
 801ab92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ab94:	b10b      	cbz	r3, 801ab9a <__sflush_r+0x46>
 801ab96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ab98:	1ac0      	subs	r0, r0, r3
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	4602      	mov	r2, r0
 801ab9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aba0:	6a21      	ldr	r1, [r4, #32]
 801aba2:	4628      	mov	r0, r5
 801aba4:	47b0      	blx	r6
 801aba6:	1c43      	adds	r3, r0, #1
 801aba8:	89a3      	ldrh	r3, [r4, #12]
 801abaa:	d106      	bne.n	801abba <__sflush_r+0x66>
 801abac:	6829      	ldr	r1, [r5, #0]
 801abae:	291d      	cmp	r1, #29
 801abb0:	d82c      	bhi.n	801ac0c <__sflush_r+0xb8>
 801abb2:	4a2a      	ldr	r2, [pc, #168]	; (801ac5c <__sflush_r+0x108>)
 801abb4:	40ca      	lsrs	r2, r1
 801abb6:	07d6      	lsls	r6, r2, #31
 801abb8:	d528      	bpl.n	801ac0c <__sflush_r+0xb8>
 801abba:	2200      	movs	r2, #0
 801abbc:	6062      	str	r2, [r4, #4]
 801abbe:	04d9      	lsls	r1, r3, #19
 801abc0:	6922      	ldr	r2, [r4, #16]
 801abc2:	6022      	str	r2, [r4, #0]
 801abc4:	d504      	bpl.n	801abd0 <__sflush_r+0x7c>
 801abc6:	1c42      	adds	r2, r0, #1
 801abc8:	d101      	bne.n	801abce <__sflush_r+0x7a>
 801abca:	682b      	ldr	r3, [r5, #0]
 801abcc:	b903      	cbnz	r3, 801abd0 <__sflush_r+0x7c>
 801abce:	6560      	str	r0, [r4, #84]	; 0x54
 801abd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801abd2:	602f      	str	r7, [r5, #0]
 801abd4:	2900      	cmp	r1, #0
 801abd6:	d0ca      	beq.n	801ab6e <__sflush_r+0x1a>
 801abd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801abdc:	4299      	cmp	r1, r3
 801abde:	d002      	beq.n	801abe6 <__sflush_r+0x92>
 801abe0:	4628      	mov	r0, r5
 801abe2:	f7ff fd79 	bl	801a6d8 <_free_r>
 801abe6:	2000      	movs	r0, #0
 801abe8:	6360      	str	r0, [r4, #52]	; 0x34
 801abea:	e7c1      	b.n	801ab70 <__sflush_r+0x1c>
 801abec:	6a21      	ldr	r1, [r4, #32]
 801abee:	2301      	movs	r3, #1
 801abf0:	4628      	mov	r0, r5
 801abf2:	47b0      	blx	r6
 801abf4:	1c41      	adds	r1, r0, #1
 801abf6:	d1c7      	bne.n	801ab88 <__sflush_r+0x34>
 801abf8:	682b      	ldr	r3, [r5, #0]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d0c4      	beq.n	801ab88 <__sflush_r+0x34>
 801abfe:	2b1d      	cmp	r3, #29
 801ac00:	d001      	beq.n	801ac06 <__sflush_r+0xb2>
 801ac02:	2b16      	cmp	r3, #22
 801ac04:	d101      	bne.n	801ac0a <__sflush_r+0xb6>
 801ac06:	602f      	str	r7, [r5, #0]
 801ac08:	e7b1      	b.n	801ab6e <__sflush_r+0x1a>
 801ac0a:	89a3      	ldrh	r3, [r4, #12]
 801ac0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ac10:	81a3      	strh	r3, [r4, #12]
 801ac12:	e7ad      	b.n	801ab70 <__sflush_r+0x1c>
 801ac14:	690f      	ldr	r7, [r1, #16]
 801ac16:	2f00      	cmp	r7, #0
 801ac18:	d0a9      	beq.n	801ab6e <__sflush_r+0x1a>
 801ac1a:	0793      	lsls	r3, r2, #30
 801ac1c:	680e      	ldr	r6, [r1, #0]
 801ac1e:	bf08      	it	eq
 801ac20:	694b      	ldreq	r3, [r1, #20]
 801ac22:	600f      	str	r7, [r1, #0]
 801ac24:	bf18      	it	ne
 801ac26:	2300      	movne	r3, #0
 801ac28:	eba6 0807 	sub.w	r8, r6, r7
 801ac2c:	608b      	str	r3, [r1, #8]
 801ac2e:	f1b8 0f00 	cmp.w	r8, #0
 801ac32:	dd9c      	ble.n	801ab6e <__sflush_r+0x1a>
 801ac34:	6a21      	ldr	r1, [r4, #32]
 801ac36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ac38:	4643      	mov	r3, r8
 801ac3a:	463a      	mov	r2, r7
 801ac3c:	4628      	mov	r0, r5
 801ac3e:	47b0      	blx	r6
 801ac40:	2800      	cmp	r0, #0
 801ac42:	dc06      	bgt.n	801ac52 <__sflush_r+0xfe>
 801ac44:	89a3      	ldrh	r3, [r4, #12]
 801ac46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ac4a:	81a3      	strh	r3, [r4, #12]
 801ac4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac50:	e78e      	b.n	801ab70 <__sflush_r+0x1c>
 801ac52:	4407      	add	r7, r0
 801ac54:	eba8 0800 	sub.w	r8, r8, r0
 801ac58:	e7e9      	b.n	801ac2e <__sflush_r+0xda>
 801ac5a:	bf00      	nop
 801ac5c:	20400001 	.word	0x20400001

0801ac60 <_fflush_r>:
 801ac60:	b538      	push	{r3, r4, r5, lr}
 801ac62:	690b      	ldr	r3, [r1, #16]
 801ac64:	4605      	mov	r5, r0
 801ac66:	460c      	mov	r4, r1
 801ac68:	b913      	cbnz	r3, 801ac70 <_fflush_r+0x10>
 801ac6a:	2500      	movs	r5, #0
 801ac6c:	4628      	mov	r0, r5
 801ac6e:	bd38      	pop	{r3, r4, r5, pc}
 801ac70:	b118      	cbz	r0, 801ac7a <_fflush_r+0x1a>
 801ac72:	6983      	ldr	r3, [r0, #24]
 801ac74:	b90b      	cbnz	r3, 801ac7a <_fflush_r+0x1a>
 801ac76:	f000 f887 	bl	801ad88 <__sinit>
 801ac7a:	4b14      	ldr	r3, [pc, #80]	; (801accc <_fflush_r+0x6c>)
 801ac7c:	429c      	cmp	r4, r3
 801ac7e:	d11b      	bne.n	801acb8 <_fflush_r+0x58>
 801ac80:	686c      	ldr	r4, [r5, #4]
 801ac82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d0ef      	beq.n	801ac6a <_fflush_r+0xa>
 801ac8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ac8c:	07d0      	lsls	r0, r2, #31
 801ac8e:	d404      	bmi.n	801ac9a <_fflush_r+0x3a>
 801ac90:	0599      	lsls	r1, r3, #22
 801ac92:	d402      	bmi.n	801ac9a <_fflush_r+0x3a>
 801ac94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ac96:	f000 f915 	bl	801aec4 <__retarget_lock_acquire_recursive>
 801ac9a:	4628      	mov	r0, r5
 801ac9c:	4621      	mov	r1, r4
 801ac9e:	f7ff ff59 	bl	801ab54 <__sflush_r>
 801aca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aca4:	07da      	lsls	r2, r3, #31
 801aca6:	4605      	mov	r5, r0
 801aca8:	d4e0      	bmi.n	801ac6c <_fflush_r+0xc>
 801acaa:	89a3      	ldrh	r3, [r4, #12]
 801acac:	059b      	lsls	r3, r3, #22
 801acae:	d4dd      	bmi.n	801ac6c <_fflush_r+0xc>
 801acb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801acb2:	f000 f908 	bl	801aec6 <__retarget_lock_release_recursive>
 801acb6:	e7d9      	b.n	801ac6c <_fflush_r+0xc>
 801acb8:	4b05      	ldr	r3, [pc, #20]	; (801acd0 <_fflush_r+0x70>)
 801acba:	429c      	cmp	r4, r3
 801acbc:	d101      	bne.n	801acc2 <_fflush_r+0x62>
 801acbe:	68ac      	ldr	r4, [r5, #8]
 801acc0:	e7df      	b.n	801ac82 <_fflush_r+0x22>
 801acc2:	4b04      	ldr	r3, [pc, #16]	; (801acd4 <_fflush_r+0x74>)
 801acc4:	429c      	cmp	r4, r3
 801acc6:	bf08      	it	eq
 801acc8:	68ec      	ldreq	r4, [r5, #12]
 801acca:	e7da      	b.n	801ac82 <_fflush_r+0x22>
 801accc:	080321d4 	.word	0x080321d4
 801acd0:	080321f4 	.word	0x080321f4
 801acd4:	080321b4 	.word	0x080321b4

0801acd8 <std>:
 801acd8:	2300      	movs	r3, #0
 801acda:	b510      	push	{r4, lr}
 801acdc:	4604      	mov	r4, r0
 801acde:	e9c0 3300 	strd	r3, r3, [r0]
 801ace2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ace6:	6083      	str	r3, [r0, #8]
 801ace8:	8181      	strh	r1, [r0, #12]
 801acea:	6643      	str	r3, [r0, #100]	; 0x64
 801acec:	81c2      	strh	r2, [r0, #14]
 801acee:	6183      	str	r3, [r0, #24]
 801acf0:	4619      	mov	r1, r3
 801acf2:	2208      	movs	r2, #8
 801acf4:	305c      	adds	r0, #92	; 0x5c
 801acf6:	f7ff fce7 	bl	801a6c8 <memset>
 801acfa:	4b05      	ldr	r3, [pc, #20]	; (801ad10 <std+0x38>)
 801acfc:	6263      	str	r3, [r4, #36]	; 0x24
 801acfe:	4b05      	ldr	r3, [pc, #20]	; (801ad14 <std+0x3c>)
 801ad00:	62a3      	str	r3, [r4, #40]	; 0x28
 801ad02:	4b05      	ldr	r3, [pc, #20]	; (801ad18 <std+0x40>)
 801ad04:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ad06:	4b05      	ldr	r3, [pc, #20]	; (801ad1c <std+0x44>)
 801ad08:	6224      	str	r4, [r4, #32]
 801ad0a:	6323      	str	r3, [r4, #48]	; 0x30
 801ad0c:	bd10      	pop	{r4, pc}
 801ad0e:	bf00      	nop
 801ad10:	0801b8cd 	.word	0x0801b8cd
 801ad14:	0801b8ef 	.word	0x0801b8ef
 801ad18:	0801b927 	.word	0x0801b927
 801ad1c:	0801b94b 	.word	0x0801b94b

0801ad20 <_cleanup_r>:
 801ad20:	4901      	ldr	r1, [pc, #4]	; (801ad28 <_cleanup_r+0x8>)
 801ad22:	f000 b8af 	b.w	801ae84 <_fwalk_reent>
 801ad26:	bf00      	nop
 801ad28:	0801ac61 	.word	0x0801ac61

0801ad2c <__sfmoreglue>:
 801ad2c:	b570      	push	{r4, r5, r6, lr}
 801ad2e:	1e4a      	subs	r2, r1, #1
 801ad30:	2568      	movs	r5, #104	; 0x68
 801ad32:	4355      	muls	r5, r2
 801ad34:	460e      	mov	r6, r1
 801ad36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ad3a:	f7ff fd1d 	bl	801a778 <_malloc_r>
 801ad3e:	4604      	mov	r4, r0
 801ad40:	b140      	cbz	r0, 801ad54 <__sfmoreglue+0x28>
 801ad42:	2100      	movs	r1, #0
 801ad44:	e9c0 1600 	strd	r1, r6, [r0]
 801ad48:	300c      	adds	r0, #12
 801ad4a:	60a0      	str	r0, [r4, #8]
 801ad4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ad50:	f7ff fcba 	bl	801a6c8 <memset>
 801ad54:	4620      	mov	r0, r4
 801ad56:	bd70      	pop	{r4, r5, r6, pc}

0801ad58 <__sfp_lock_acquire>:
 801ad58:	4801      	ldr	r0, [pc, #4]	; (801ad60 <__sfp_lock_acquire+0x8>)
 801ad5a:	f000 b8b3 	b.w	801aec4 <__retarget_lock_acquire_recursive>
 801ad5e:	bf00      	nop
 801ad60:	2004b028 	.word	0x2004b028

0801ad64 <__sfp_lock_release>:
 801ad64:	4801      	ldr	r0, [pc, #4]	; (801ad6c <__sfp_lock_release+0x8>)
 801ad66:	f000 b8ae 	b.w	801aec6 <__retarget_lock_release_recursive>
 801ad6a:	bf00      	nop
 801ad6c:	2004b028 	.word	0x2004b028

0801ad70 <__sinit_lock_acquire>:
 801ad70:	4801      	ldr	r0, [pc, #4]	; (801ad78 <__sinit_lock_acquire+0x8>)
 801ad72:	f000 b8a7 	b.w	801aec4 <__retarget_lock_acquire_recursive>
 801ad76:	bf00      	nop
 801ad78:	2004b023 	.word	0x2004b023

0801ad7c <__sinit_lock_release>:
 801ad7c:	4801      	ldr	r0, [pc, #4]	; (801ad84 <__sinit_lock_release+0x8>)
 801ad7e:	f000 b8a2 	b.w	801aec6 <__retarget_lock_release_recursive>
 801ad82:	bf00      	nop
 801ad84:	2004b023 	.word	0x2004b023

0801ad88 <__sinit>:
 801ad88:	b510      	push	{r4, lr}
 801ad8a:	4604      	mov	r4, r0
 801ad8c:	f7ff fff0 	bl	801ad70 <__sinit_lock_acquire>
 801ad90:	69a3      	ldr	r3, [r4, #24]
 801ad92:	b11b      	cbz	r3, 801ad9c <__sinit+0x14>
 801ad94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad98:	f7ff bff0 	b.w	801ad7c <__sinit_lock_release>
 801ad9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ada0:	6523      	str	r3, [r4, #80]	; 0x50
 801ada2:	4b13      	ldr	r3, [pc, #76]	; (801adf0 <__sinit+0x68>)
 801ada4:	4a13      	ldr	r2, [pc, #76]	; (801adf4 <__sinit+0x6c>)
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	62a2      	str	r2, [r4, #40]	; 0x28
 801adaa:	42a3      	cmp	r3, r4
 801adac:	bf04      	itt	eq
 801adae:	2301      	moveq	r3, #1
 801adb0:	61a3      	streq	r3, [r4, #24]
 801adb2:	4620      	mov	r0, r4
 801adb4:	f000 f820 	bl	801adf8 <__sfp>
 801adb8:	6060      	str	r0, [r4, #4]
 801adba:	4620      	mov	r0, r4
 801adbc:	f000 f81c 	bl	801adf8 <__sfp>
 801adc0:	60a0      	str	r0, [r4, #8]
 801adc2:	4620      	mov	r0, r4
 801adc4:	f000 f818 	bl	801adf8 <__sfp>
 801adc8:	2200      	movs	r2, #0
 801adca:	60e0      	str	r0, [r4, #12]
 801adcc:	2104      	movs	r1, #4
 801adce:	6860      	ldr	r0, [r4, #4]
 801add0:	f7ff ff82 	bl	801acd8 <std>
 801add4:	68a0      	ldr	r0, [r4, #8]
 801add6:	2201      	movs	r2, #1
 801add8:	2109      	movs	r1, #9
 801adda:	f7ff ff7d 	bl	801acd8 <std>
 801adde:	68e0      	ldr	r0, [r4, #12]
 801ade0:	2202      	movs	r2, #2
 801ade2:	2112      	movs	r1, #18
 801ade4:	f7ff ff78 	bl	801acd8 <std>
 801ade8:	2301      	movs	r3, #1
 801adea:	61a3      	str	r3, [r4, #24]
 801adec:	e7d2      	b.n	801ad94 <__sinit+0xc>
 801adee:	bf00      	nop
 801adf0:	080321b0 	.word	0x080321b0
 801adf4:	0801ad21 	.word	0x0801ad21

0801adf8 <__sfp>:
 801adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adfa:	4607      	mov	r7, r0
 801adfc:	f7ff ffac 	bl	801ad58 <__sfp_lock_acquire>
 801ae00:	4b1e      	ldr	r3, [pc, #120]	; (801ae7c <__sfp+0x84>)
 801ae02:	681e      	ldr	r6, [r3, #0]
 801ae04:	69b3      	ldr	r3, [r6, #24]
 801ae06:	b913      	cbnz	r3, 801ae0e <__sfp+0x16>
 801ae08:	4630      	mov	r0, r6
 801ae0a:	f7ff ffbd 	bl	801ad88 <__sinit>
 801ae0e:	3648      	adds	r6, #72	; 0x48
 801ae10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ae14:	3b01      	subs	r3, #1
 801ae16:	d503      	bpl.n	801ae20 <__sfp+0x28>
 801ae18:	6833      	ldr	r3, [r6, #0]
 801ae1a:	b30b      	cbz	r3, 801ae60 <__sfp+0x68>
 801ae1c:	6836      	ldr	r6, [r6, #0]
 801ae1e:	e7f7      	b.n	801ae10 <__sfp+0x18>
 801ae20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ae24:	b9d5      	cbnz	r5, 801ae5c <__sfp+0x64>
 801ae26:	4b16      	ldr	r3, [pc, #88]	; (801ae80 <__sfp+0x88>)
 801ae28:	60e3      	str	r3, [r4, #12]
 801ae2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ae2e:	6665      	str	r5, [r4, #100]	; 0x64
 801ae30:	f000 f847 	bl	801aec2 <__retarget_lock_init_recursive>
 801ae34:	f7ff ff96 	bl	801ad64 <__sfp_lock_release>
 801ae38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ae3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ae40:	6025      	str	r5, [r4, #0]
 801ae42:	61a5      	str	r5, [r4, #24]
 801ae44:	2208      	movs	r2, #8
 801ae46:	4629      	mov	r1, r5
 801ae48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ae4c:	f7ff fc3c 	bl	801a6c8 <memset>
 801ae50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ae54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ae58:	4620      	mov	r0, r4
 801ae5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae5c:	3468      	adds	r4, #104	; 0x68
 801ae5e:	e7d9      	b.n	801ae14 <__sfp+0x1c>
 801ae60:	2104      	movs	r1, #4
 801ae62:	4638      	mov	r0, r7
 801ae64:	f7ff ff62 	bl	801ad2c <__sfmoreglue>
 801ae68:	4604      	mov	r4, r0
 801ae6a:	6030      	str	r0, [r6, #0]
 801ae6c:	2800      	cmp	r0, #0
 801ae6e:	d1d5      	bne.n	801ae1c <__sfp+0x24>
 801ae70:	f7ff ff78 	bl	801ad64 <__sfp_lock_release>
 801ae74:	230c      	movs	r3, #12
 801ae76:	603b      	str	r3, [r7, #0]
 801ae78:	e7ee      	b.n	801ae58 <__sfp+0x60>
 801ae7a:	bf00      	nop
 801ae7c:	080321b0 	.word	0x080321b0
 801ae80:	ffff0001 	.word	0xffff0001

0801ae84 <_fwalk_reent>:
 801ae84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae88:	4606      	mov	r6, r0
 801ae8a:	4688      	mov	r8, r1
 801ae8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ae90:	2700      	movs	r7, #0
 801ae92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ae96:	f1b9 0901 	subs.w	r9, r9, #1
 801ae9a:	d505      	bpl.n	801aea8 <_fwalk_reent+0x24>
 801ae9c:	6824      	ldr	r4, [r4, #0]
 801ae9e:	2c00      	cmp	r4, #0
 801aea0:	d1f7      	bne.n	801ae92 <_fwalk_reent+0xe>
 801aea2:	4638      	mov	r0, r7
 801aea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aea8:	89ab      	ldrh	r3, [r5, #12]
 801aeaa:	2b01      	cmp	r3, #1
 801aeac:	d907      	bls.n	801aebe <_fwalk_reent+0x3a>
 801aeae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aeb2:	3301      	adds	r3, #1
 801aeb4:	d003      	beq.n	801aebe <_fwalk_reent+0x3a>
 801aeb6:	4629      	mov	r1, r5
 801aeb8:	4630      	mov	r0, r6
 801aeba:	47c0      	blx	r8
 801aebc:	4307      	orrs	r7, r0
 801aebe:	3568      	adds	r5, #104	; 0x68
 801aec0:	e7e9      	b.n	801ae96 <_fwalk_reent+0x12>

0801aec2 <__retarget_lock_init_recursive>:
 801aec2:	4770      	bx	lr

0801aec4 <__retarget_lock_acquire_recursive>:
 801aec4:	4770      	bx	lr

0801aec6 <__retarget_lock_release_recursive>:
 801aec6:	4770      	bx	lr

0801aec8 <__swhatbuf_r>:
 801aec8:	b570      	push	{r4, r5, r6, lr}
 801aeca:	460e      	mov	r6, r1
 801aecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aed0:	2900      	cmp	r1, #0
 801aed2:	b096      	sub	sp, #88	; 0x58
 801aed4:	4614      	mov	r4, r2
 801aed6:	461d      	mov	r5, r3
 801aed8:	da07      	bge.n	801aeea <__swhatbuf_r+0x22>
 801aeda:	2300      	movs	r3, #0
 801aedc:	602b      	str	r3, [r5, #0]
 801aede:	89b3      	ldrh	r3, [r6, #12]
 801aee0:	061a      	lsls	r2, r3, #24
 801aee2:	d410      	bmi.n	801af06 <__swhatbuf_r+0x3e>
 801aee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aee8:	e00e      	b.n	801af08 <__swhatbuf_r+0x40>
 801aeea:	466a      	mov	r2, sp
 801aeec:	f000 fd54 	bl	801b998 <_fstat_r>
 801aef0:	2800      	cmp	r0, #0
 801aef2:	dbf2      	blt.n	801aeda <__swhatbuf_r+0x12>
 801aef4:	9a01      	ldr	r2, [sp, #4]
 801aef6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801aefa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801aefe:	425a      	negs	r2, r3
 801af00:	415a      	adcs	r2, r3
 801af02:	602a      	str	r2, [r5, #0]
 801af04:	e7ee      	b.n	801aee4 <__swhatbuf_r+0x1c>
 801af06:	2340      	movs	r3, #64	; 0x40
 801af08:	2000      	movs	r0, #0
 801af0a:	6023      	str	r3, [r4, #0]
 801af0c:	b016      	add	sp, #88	; 0x58
 801af0e:	bd70      	pop	{r4, r5, r6, pc}

0801af10 <__smakebuf_r>:
 801af10:	898b      	ldrh	r3, [r1, #12]
 801af12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801af14:	079d      	lsls	r5, r3, #30
 801af16:	4606      	mov	r6, r0
 801af18:	460c      	mov	r4, r1
 801af1a:	d507      	bpl.n	801af2c <__smakebuf_r+0x1c>
 801af1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801af20:	6023      	str	r3, [r4, #0]
 801af22:	6123      	str	r3, [r4, #16]
 801af24:	2301      	movs	r3, #1
 801af26:	6163      	str	r3, [r4, #20]
 801af28:	b002      	add	sp, #8
 801af2a:	bd70      	pop	{r4, r5, r6, pc}
 801af2c:	ab01      	add	r3, sp, #4
 801af2e:	466a      	mov	r2, sp
 801af30:	f7ff ffca 	bl	801aec8 <__swhatbuf_r>
 801af34:	9900      	ldr	r1, [sp, #0]
 801af36:	4605      	mov	r5, r0
 801af38:	4630      	mov	r0, r6
 801af3a:	f7ff fc1d 	bl	801a778 <_malloc_r>
 801af3e:	b948      	cbnz	r0, 801af54 <__smakebuf_r+0x44>
 801af40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af44:	059a      	lsls	r2, r3, #22
 801af46:	d4ef      	bmi.n	801af28 <__smakebuf_r+0x18>
 801af48:	f023 0303 	bic.w	r3, r3, #3
 801af4c:	f043 0302 	orr.w	r3, r3, #2
 801af50:	81a3      	strh	r3, [r4, #12]
 801af52:	e7e3      	b.n	801af1c <__smakebuf_r+0xc>
 801af54:	4b0d      	ldr	r3, [pc, #52]	; (801af8c <__smakebuf_r+0x7c>)
 801af56:	62b3      	str	r3, [r6, #40]	; 0x28
 801af58:	89a3      	ldrh	r3, [r4, #12]
 801af5a:	6020      	str	r0, [r4, #0]
 801af5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801af60:	81a3      	strh	r3, [r4, #12]
 801af62:	9b00      	ldr	r3, [sp, #0]
 801af64:	6163      	str	r3, [r4, #20]
 801af66:	9b01      	ldr	r3, [sp, #4]
 801af68:	6120      	str	r0, [r4, #16]
 801af6a:	b15b      	cbz	r3, 801af84 <__smakebuf_r+0x74>
 801af6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af70:	4630      	mov	r0, r6
 801af72:	f000 fd23 	bl	801b9bc <_isatty_r>
 801af76:	b128      	cbz	r0, 801af84 <__smakebuf_r+0x74>
 801af78:	89a3      	ldrh	r3, [r4, #12]
 801af7a:	f023 0303 	bic.w	r3, r3, #3
 801af7e:	f043 0301 	orr.w	r3, r3, #1
 801af82:	81a3      	strh	r3, [r4, #12]
 801af84:	89a0      	ldrh	r0, [r4, #12]
 801af86:	4305      	orrs	r5, r0
 801af88:	81a5      	strh	r5, [r4, #12]
 801af8a:	e7cd      	b.n	801af28 <__smakebuf_r+0x18>
 801af8c:	0801ad21 	.word	0x0801ad21

0801af90 <__malloc_lock>:
 801af90:	4801      	ldr	r0, [pc, #4]	; (801af98 <__malloc_lock+0x8>)
 801af92:	f7ff bf97 	b.w	801aec4 <__retarget_lock_acquire_recursive>
 801af96:	bf00      	nop
 801af98:	2004b024 	.word	0x2004b024

0801af9c <__malloc_unlock>:
 801af9c:	4801      	ldr	r0, [pc, #4]	; (801afa4 <__malloc_unlock+0x8>)
 801af9e:	f7ff bf92 	b.w	801aec6 <__retarget_lock_release_recursive>
 801afa2:	bf00      	nop
 801afa4:	2004b024 	.word	0x2004b024

0801afa8 <__ssputs_r>:
 801afa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afac:	688e      	ldr	r6, [r1, #8]
 801afae:	429e      	cmp	r6, r3
 801afb0:	4682      	mov	sl, r0
 801afb2:	460c      	mov	r4, r1
 801afb4:	4690      	mov	r8, r2
 801afb6:	461f      	mov	r7, r3
 801afb8:	d838      	bhi.n	801b02c <__ssputs_r+0x84>
 801afba:	898a      	ldrh	r2, [r1, #12]
 801afbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801afc0:	d032      	beq.n	801b028 <__ssputs_r+0x80>
 801afc2:	6825      	ldr	r5, [r4, #0]
 801afc4:	6909      	ldr	r1, [r1, #16]
 801afc6:	eba5 0901 	sub.w	r9, r5, r1
 801afca:	6965      	ldr	r5, [r4, #20]
 801afcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801afd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801afd4:	3301      	adds	r3, #1
 801afd6:	444b      	add	r3, r9
 801afd8:	106d      	asrs	r5, r5, #1
 801afda:	429d      	cmp	r5, r3
 801afdc:	bf38      	it	cc
 801afde:	461d      	movcc	r5, r3
 801afe0:	0553      	lsls	r3, r2, #21
 801afe2:	d531      	bpl.n	801b048 <__ssputs_r+0xa0>
 801afe4:	4629      	mov	r1, r5
 801afe6:	f7ff fbc7 	bl	801a778 <_malloc_r>
 801afea:	4606      	mov	r6, r0
 801afec:	b950      	cbnz	r0, 801b004 <__ssputs_r+0x5c>
 801afee:	230c      	movs	r3, #12
 801aff0:	f8ca 3000 	str.w	r3, [sl]
 801aff4:	89a3      	ldrh	r3, [r4, #12]
 801aff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801affa:	81a3      	strh	r3, [r4, #12]
 801affc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b004:	6921      	ldr	r1, [r4, #16]
 801b006:	464a      	mov	r2, r9
 801b008:	f7ff fb50 	bl	801a6ac <memcpy>
 801b00c:	89a3      	ldrh	r3, [r4, #12]
 801b00e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b016:	81a3      	strh	r3, [r4, #12]
 801b018:	6126      	str	r6, [r4, #16]
 801b01a:	6165      	str	r5, [r4, #20]
 801b01c:	444e      	add	r6, r9
 801b01e:	eba5 0509 	sub.w	r5, r5, r9
 801b022:	6026      	str	r6, [r4, #0]
 801b024:	60a5      	str	r5, [r4, #8]
 801b026:	463e      	mov	r6, r7
 801b028:	42be      	cmp	r6, r7
 801b02a:	d900      	bls.n	801b02e <__ssputs_r+0x86>
 801b02c:	463e      	mov	r6, r7
 801b02e:	4632      	mov	r2, r6
 801b030:	6820      	ldr	r0, [r4, #0]
 801b032:	4641      	mov	r1, r8
 801b034:	f000 fce4 	bl	801ba00 <memmove>
 801b038:	68a3      	ldr	r3, [r4, #8]
 801b03a:	6822      	ldr	r2, [r4, #0]
 801b03c:	1b9b      	subs	r3, r3, r6
 801b03e:	4432      	add	r2, r6
 801b040:	60a3      	str	r3, [r4, #8]
 801b042:	6022      	str	r2, [r4, #0]
 801b044:	2000      	movs	r0, #0
 801b046:	e7db      	b.n	801b000 <__ssputs_r+0x58>
 801b048:	462a      	mov	r2, r5
 801b04a:	f000 fcf3 	bl	801ba34 <_realloc_r>
 801b04e:	4606      	mov	r6, r0
 801b050:	2800      	cmp	r0, #0
 801b052:	d1e1      	bne.n	801b018 <__ssputs_r+0x70>
 801b054:	6921      	ldr	r1, [r4, #16]
 801b056:	4650      	mov	r0, sl
 801b058:	f7ff fb3e 	bl	801a6d8 <_free_r>
 801b05c:	e7c7      	b.n	801afee <__ssputs_r+0x46>
	...

0801b060 <_svfiprintf_r>:
 801b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b064:	4698      	mov	r8, r3
 801b066:	898b      	ldrh	r3, [r1, #12]
 801b068:	061b      	lsls	r3, r3, #24
 801b06a:	b09d      	sub	sp, #116	; 0x74
 801b06c:	4607      	mov	r7, r0
 801b06e:	460d      	mov	r5, r1
 801b070:	4614      	mov	r4, r2
 801b072:	d50e      	bpl.n	801b092 <_svfiprintf_r+0x32>
 801b074:	690b      	ldr	r3, [r1, #16]
 801b076:	b963      	cbnz	r3, 801b092 <_svfiprintf_r+0x32>
 801b078:	2140      	movs	r1, #64	; 0x40
 801b07a:	f7ff fb7d 	bl	801a778 <_malloc_r>
 801b07e:	6028      	str	r0, [r5, #0]
 801b080:	6128      	str	r0, [r5, #16]
 801b082:	b920      	cbnz	r0, 801b08e <_svfiprintf_r+0x2e>
 801b084:	230c      	movs	r3, #12
 801b086:	603b      	str	r3, [r7, #0]
 801b088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b08c:	e0d1      	b.n	801b232 <_svfiprintf_r+0x1d2>
 801b08e:	2340      	movs	r3, #64	; 0x40
 801b090:	616b      	str	r3, [r5, #20]
 801b092:	2300      	movs	r3, #0
 801b094:	9309      	str	r3, [sp, #36]	; 0x24
 801b096:	2320      	movs	r3, #32
 801b098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b09c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b0a0:	2330      	movs	r3, #48	; 0x30
 801b0a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b24c <_svfiprintf_r+0x1ec>
 801b0a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b0aa:	f04f 0901 	mov.w	r9, #1
 801b0ae:	4623      	mov	r3, r4
 801b0b0:	469a      	mov	sl, r3
 801b0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b0b6:	b10a      	cbz	r2, 801b0bc <_svfiprintf_r+0x5c>
 801b0b8:	2a25      	cmp	r2, #37	; 0x25
 801b0ba:	d1f9      	bne.n	801b0b0 <_svfiprintf_r+0x50>
 801b0bc:	ebba 0b04 	subs.w	fp, sl, r4
 801b0c0:	d00b      	beq.n	801b0da <_svfiprintf_r+0x7a>
 801b0c2:	465b      	mov	r3, fp
 801b0c4:	4622      	mov	r2, r4
 801b0c6:	4629      	mov	r1, r5
 801b0c8:	4638      	mov	r0, r7
 801b0ca:	f7ff ff6d 	bl	801afa8 <__ssputs_r>
 801b0ce:	3001      	adds	r0, #1
 801b0d0:	f000 80aa 	beq.w	801b228 <_svfiprintf_r+0x1c8>
 801b0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b0d6:	445a      	add	r2, fp
 801b0d8:	9209      	str	r2, [sp, #36]	; 0x24
 801b0da:	f89a 3000 	ldrb.w	r3, [sl]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	f000 80a2 	beq.w	801b228 <_svfiprintf_r+0x1c8>
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b0ee:	f10a 0a01 	add.w	sl, sl, #1
 801b0f2:	9304      	str	r3, [sp, #16]
 801b0f4:	9307      	str	r3, [sp, #28]
 801b0f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b0fa:	931a      	str	r3, [sp, #104]	; 0x68
 801b0fc:	4654      	mov	r4, sl
 801b0fe:	2205      	movs	r2, #5
 801b100:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b104:	4851      	ldr	r0, [pc, #324]	; (801b24c <_svfiprintf_r+0x1ec>)
 801b106:	f7e5 f8e3 	bl	80002d0 <memchr>
 801b10a:	9a04      	ldr	r2, [sp, #16]
 801b10c:	b9d8      	cbnz	r0, 801b146 <_svfiprintf_r+0xe6>
 801b10e:	06d0      	lsls	r0, r2, #27
 801b110:	bf44      	itt	mi
 801b112:	2320      	movmi	r3, #32
 801b114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b118:	0711      	lsls	r1, r2, #28
 801b11a:	bf44      	itt	mi
 801b11c:	232b      	movmi	r3, #43	; 0x2b
 801b11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b122:	f89a 3000 	ldrb.w	r3, [sl]
 801b126:	2b2a      	cmp	r3, #42	; 0x2a
 801b128:	d015      	beq.n	801b156 <_svfiprintf_r+0xf6>
 801b12a:	9a07      	ldr	r2, [sp, #28]
 801b12c:	4654      	mov	r4, sl
 801b12e:	2000      	movs	r0, #0
 801b130:	f04f 0c0a 	mov.w	ip, #10
 801b134:	4621      	mov	r1, r4
 801b136:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b13a:	3b30      	subs	r3, #48	; 0x30
 801b13c:	2b09      	cmp	r3, #9
 801b13e:	d94e      	bls.n	801b1de <_svfiprintf_r+0x17e>
 801b140:	b1b0      	cbz	r0, 801b170 <_svfiprintf_r+0x110>
 801b142:	9207      	str	r2, [sp, #28]
 801b144:	e014      	b.n	801b170 <_svfiprintf_r+0x110>
 801b146:	eba0 0308 	sub.w	r3, r0, r8
 801b14a:	fa09 f303 	lsl.w	r3, r9, r3
 801b14e:	4313      	orrs	r3, r2
 801b150:	9304      	str	r3, [sp, #16]
 801b152:	46a2      	mov	sl, r4
 801b154:	e7d2      	b.n	801b0fc <_svfiprintf_r+0x9c>
 801b156:	9b03      	ldr	r3, [sp, #12]
 801b158:	1d19      	adds	r1, r3, #4
 801b15a:	681b      	ldr	r3, [r3, #0]
 801b15c:	9103      	str	r1, [sp, #12]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	bfbb      	ittet	lt
 801b162:	425b      	neglt	r3, r3
 801b164:	f042 0202 	orrlt.w	r2, r2, #2
 801b168:	9307      	strge	r3, [sp, #28]
 801b16a:	9307      	strlt	r3, [sp, #28]
 801b16c:	bfb8      	it	lt
 801b16e:	9204      	strlt	r2, [sp, #16]
 801b170:	7823      	ldrb	r3, [r4, #0]
 801b172:	2b2e      	cmp	r3, #46	; 0x2e
 801b174:	d10c      	bne.n	801b190 <_svfiprintf_r+0x130>
 801b176:	7863      	ldrb	r3, [r4, #1]
 801b178:	2b2a      	cmp	r3, #42	; 0x2a
 801b17a:	d135      	bne.n	801b1e8 <_svfiprintf_r+0x188>
 801b17c:	9b03      	ldr	r3, [sp, #12]
 801b17e:	1d1a      	adds	r2, r3, #4
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	9203      	str	r2, [sp, #12]
 801b184:	2b00      	cmp	r3, #0
 801b186:	bfb8      	it	lt
 801b188:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b18c:	3402      	adds	r4, #2
 801b18e:	9305      	str	r3, [sp, #20]
 801b190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b25c <_svfiprintf_r+0x1fc>
 801b194:	7821      	ldrb	r1, [r4, #0]
 801b196:	2203      	movs	r2, #3
 801b198:	4650      	mov	r0, sl
 801b19a:	f7e5 f899 	bl	80002d0 <memchr>
 801b19e:	b140      	cbz	r0, 801b1b2 <_svfiprintf_r+0x152>
 801b1a0:	2340      	movs	r3, #64	; 0x40
 801b1a2:	eba0 000a 	sub.w	r0, r0, sl
 801b1a6:	fa03 f000 	lsl.w	r0, r3, r0
 801b1aa:	9b04      	ldr	r3, [sp, #16]
 801b1ac:	4303      	orrs	r3, r0
 801b1ae:	3401      	adds	r4, #1
 801b1b0:	9304      	str	r3, [sp, #16]
 801b1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1b6:	4826      	ldr	r0, [pc, #152]	; (801b250 <_svfiprintf_r+0x1f0>)
 801b1b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b1bc:	2206      	movs	r2, #6
 801b1be:	f7e5 f887 	bl	80002d0 <memchr>
 801b1c2:	2800      	cmp	r0, #0
 801b1c4:	d038      	beq.n	801b238 <_svfiprintf_r+0x1d8>
 801b1c6:	4b23      	ldr	r3, [pc, #140]	; (801b254 <_svfiprintf_r+0x1f4>)
 801b1c8:	bb1b      	cbnz	r3, 801b212 <_svfiprintf_r+0x1b2>
 801b1ca:	9b03      	ldr	r3, [sp, #12]
 801b1cc:	3307      	adds	r3, #7
 801b1ce:	f023 0307 	bic.w	r3, r3, #7
 801b1d2:	3308      	adds	r3, #8
 801b1d4:	9303      	str	r3, [sp, #12]
 801b1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1d8:	4433      	add	r3, r6
 801b1da:	9309      	str	r3, [sp, #36]	; 0x24
 801b1dc:	e767      	b.n	801b0ae <_svfiprintf_r+0x4e>
 801b1de:	fb0c 3202 	mla	r2, ip, r2, r3
 801b1e2:	460c      	mov	r4, r1
 801b1e4:	2001      	movs	r0, #1
 801b1e6:	e7a5      	b.n	801b134 <_svfiprintf_r+0xd4>
 801b1e8:	2300      	movs	r3, #0
 801b1ea:	3401      	adds	r4, #1
 801b1ec:	9305      	str	r3, [sp, #20]
 801b1ee:	4619      	mov	r1, r3
 801b1f0:	f04f 0c0a 	mov.w	ip, #10
 801b1f4:	4620      	mov	r0, r4
 801b1f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b1fa:	3a30      	subs	r2, #48	; 0x30
 801b1fc:	2a09      	cmp	r2, #9
 801b1fe:	d903      	bls.n	801b208 <_svfiprintf_r+0x1a8>
 801b200:	2b00      	cmp	r3, #0
 801b202:	d0c5      	beq.n	801b190 <_svfiprintf_r+0x130>
 801b204:	9105      	str	r1, [sp, #20]
 801b206:	e7c3      	b.n	801b190 <_svfiprintf_r+0x130>
 801b208:	fb0c 2101 	mla	r1, ip, r1, r2
 801b20c:	4604      	mov	r4, r0
 801b20e:	2301      	movs	r3, #1
 801b210:	e7f0      	b.n	801b1f4 <_svfiprintf_r+0x194>
 801b212:	ab03      	add	r3, sp, #12
 801b214:	9300      	str	r3, [sp, #0]
 801b216:	462a      	mov	r2, r5
 801b218:	4b0f      	ldr	r3, [pc, #60]	; (801b258 <_svfiprintf_r+0x1f8>)
 801b21a:	a904      	add	r1, sp, #16
 801b21c:	4638      	mov	r0, r7
 801b21e:	f3af 8000 	nop.w
 801b222:	1c42      	adds	r2, r0, #1
 801b224:	4606      	mov	r6, r0
 801b226:	d1d6      	bne.n	801b1d6 <_svfiprintf_r+0x176>
 801b228:	89ab      	ldrh	r3, [r5, #12]
 801b22a:	065b      	lsls	r3, r3, #25
 801b22c:	f53f af2c 	bmi.w	801b088 <_svfiprintf_r+0x28>
 801b230:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b232:	b01d      	add	sp, #116	; 0x74
 801b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b238:	ab03      	add	r3, sp, #12
 801b23a:	9300      	str	r3, [sp, #0]
 801b23c:	462a      	mov	r2, r5
 801b23e:	4b06      	ldr	r3, [pc, #24]	; (801b258 <_svfiprintf_r+0x1f8>)
 801b240:	a904      	add	r1, sp, #16
 801b242:	4638      	mov	r0, r7
 801b244:	f000 f9d4 	bl	801b5f0 <_printf_i>
 801b248:	e7eb      	b.n	801b222 <_svfiprintf_r+0x1c2>
 801b24a:	bf00      	nop
 801b24c:	08032214 	.word	0x08032214
 801b250:	0803221e 	.word	0x0803221e
 801b254:	00000000 	.word	0x00000000
 801b258:	0801afa9 	.word	0x0801afa9
 801b25c:	0803221a 	.word	0x0803221a

0801b260 <__sfputc_r>:
 801b260:	6893      	ldr	r3, [r2, #8]
 801b262:	3b01      	subs	r3, #1
 801b264:	2b00      	cmp	r3, #0
 801b266:	b410      	push	{r4}
 801b268:	6093      	str	r3, [r2, #8]
 801b26a:	da08      	bge.n	801b27e <__sfputc_r+0x1e>
 801b26c:	6994      	ldr	r4, [r2, #24]
 801b26e:	42a3      	cmp	r3, r4
 801b270:	db01      	blt.n	801b276 <__sfputc_r+0x16>
 801b272:	290a      	cmp	r1, #10
 801b274:	d103      	bne.n	801b27e <__sfputc_r+0x1e>
 801b276:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b27a:	f7ff bbab 	b.w	801a9d4 <__swbuf_r>
 801b27e:	6813      	ldr	r3, [r2, #0]
 801b280:	1c58      	adds	r0, r3, #1
 801b282:	6010      	str	r0, [r2, #0]
 801b284:	7019      	strb	r1, [r3, #0]
 801b286:	4608      	mov	r0, r1
 801b288:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b28c:	4770      	bx	lr

0801b28e <__sfputs_r>:
 801b28e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b290:	4606      	mov	r6, r0
 801b292:	460f      	mov	r7, r1
 801b294:	4614      	mov	r4, r2
 801b296:	18d5      	adds	r5, r2, r3
 801b298:	42ac      	cmp	r4, r5
 801b29a:	d101      	bne.n	801b2a0 <__sfputs_r+0x12>
 801b29c:	2000      	movs	r0, #0
 801b29e:	e007      	b.n	801b2b0 <__sfputs_r+0x22>
 801b2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2a4:	463a      	mov	r2, r7
 801b2a6:	4630      	mov	r0, r6
 801b2a8:	f7ff ffda 	bl	801b260 <__sfputc_r>
 801b2ac:	1c43      	adds	r3, r0, #1
 801b2ae:	d1f3      	bne.n	801b298 <__sfputs_r+0xa>
 801b2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b2b4 <_vfiprintf_r>:
 801b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2b8:	460d      	mov	r5, r1
 801b2ba:	b09d      	sub	sp, #116	; 0x74
 801b2bc:	4614      	mov	r4, r2
 801b2be:	4698      	mov	r8, r3
 801b2c0:	4606      	mov	r6, r0
 801b2c2:	b118      	cbz	r0, 801b2cc <_vfiprintf_r+0x18>
 801b2c4:	6983      	ldr	r3, [r0, #24]
 801b2c6:	b90b      	cbnz	r3, 801b2cc <_vfiprintf_r+0x18>
 801b2c8:	f7ff fd5e 	bl	801ad88 <__sinit>
 801b2cc:	4b89      	ldr	r3, [pc, #548]	; (801b4f4 <_vfiprintf_r+0x240>)
 801b2ce:	429d      	cmp	r5, r3
 801b2d0:	d11b      	bne.n	801b30a <_vfiprintf_r+0x56>
 801b2d2:	6875      	ldr	r5, [r6, #4]
 801b2d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b2d6:	07d9      	lsls	r1, r3, #31
 801b2d8:	d405      	bmi.n	801b2e6 <_vfiprintf_r+0x32>
 801b2da:	89ab      	ldrh	r3, [r5, #12]
 801b2dc:	059a      	lsls	r2, r3, #22
 801b2de:	d402      	bmi.n	801b2e6 <_vfiprintf_r+0x32>
 801b2e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b2e2:	f7ff fdef 	bl	801aec4 <__retarget_lock_acquire_recursive>
 801b2e6:	89ab      	ldrh	r3, [r5, #12]
 801b2e8:	071b      	lsls	r3, r3, #28
 801b2ea:	d501      	bpl.n	801b2f0 <_vfiprintf_r+0x3c>
 801b2ec:	692b      	ldr	r3, [r5, #16]
 801b2ee:	b9eb      	cbnz	r3, 801b32c <_vfiprintf_r+0x78>
 801b2f0:	4629      	mov	r1, r5
 801b2f2:	4630      	mov	r0, r6
 801b2f4:	f7ff fbc0 	bl	801aa78 <__swsetup_r>
 801b2f8:	b1c0      	cbz	r0, 801b32c <_vfiprintf_r+0x78>
 801b2fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b2fc:	07dc      	lsls	r4, r3, #31
 801b2fe:	d50e      	bpl.n	801b31e <_vfiprintf_r+0x6a>
 801b300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b304:	b01d      	add	sp, #116	; 0x74
 801b306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b30a:	4b7b      	ldr	r3, [pc, #492]	; (801b4f8 <_vfiprintf_r+0x244>)
 801b30c:	429d      	cmp	r5, r3
 801b30e:	d101      	bne.n	801b314 <_vfiprintf_r+0x60>
 801b310:	68b5      	ldr	r5, [r6, #8]
 801b312:	e7df      	b.n	801b2d4 <_vfiprintf_r+0x20>
 801b314:	4b79      	ldr	r3, [pc, #484]	; (801b4fc <_vfiprintf_r+0x248>)
 801b316:	429d      	cmp	r5, r3
 801b318:	bf08      	it	eq
 801b31a:	68f5      	ldreq	r5, [r6, #12]
 801b31c:	e7da      	b.n	801b2d4 <_vfiprintf_r+0x20>
 801b31e:	89ab      	ldrh	r3, [r5, #12]
 801b320:	0598      	lsls	r0, r3, #22
 801b322:	d4ed      	bmi.n	801b300 <_vfiprintf_r+0x4c>
 801b324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b326:	f7ff fdce 	bl	801aec6 <__retarget_lock_release_recursive>
 801b32a:	e7e9      	b.n	801b300 <_vfiprintf_r+0x4c>
 801b32c:	2300      	movs	r3, #0
 801b32e:	9309      	str	r3, [sp, #36]	; 0x24
 801b330:	2320      	movs	r3, #32
 801b332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b336:	f8cd 800c 	str.w	r8, [sp, #12]
 801b33a:	2330      	movs	r3, #48	; 0x30
 801b33c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b500 <_vfiprintf_r+0x24c>
 801b340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b344:	f04f 0901 	mov.w	r9, #1
 801b348:	4623      	mov	r3, r4
 801b34a:	469a      	mov	sl, r3
 801b34c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b350:	b10a      	cbz	r2, 801b356 <_vfiprintf_r+0xa2>
 801b352:	2a25      	cmp	r2, #37	; 0x25
 801b354:	d1f9      	bne.n	801b34a <_vfiprintf_r+0x96>
 801b356:	ebba 0b04 	subs.w	fp, sl, r4
 801b35a:	d00b      	beq.n	801b374 <_vfiprintf_r+0xc0>
 801b35c:	465b      	mov	r3, fp
 801b35e:	4622      	mov	r2, r4
 801b360:	4629      	mov	r1, r5
 801b362:	4630      	mov	r0, r6
 801b364:	f7ff ff93 	bl	801b28e <__sfputs_r>
 801b368:	3001      	adds	r0, #1
 801b36a:	f000 80aa 	beq.w	801b4c2 <_vfiprintf_r+0x20e>
 801b36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b370:	445a      	add	r2, fp
 801b372:	9209      	str	r2, [sp, #36]	; 0x24
 801b374:	f89a 3000 	ldrb.w	r3, [sl]
 801b378:	2b00      	cmp	r3, #0
 801b37a:	f000 80a2 	beq.w	801b4c2 <_vfiprintf_r+0x20e>
 801b37e:	2300      	movs	r3, #0
 801b380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b388:	f10a 0a01 	add.w	sl, sl, #1
 801b38c:	9304      	str	r3, [sp, #16]
 801b38e:	9307      	str	r3, [sp, #28]
 801b390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b394:	931a      	str	r3, [sp, #104]	; 0x68
 801b396:	4654      	mov	r4, sl
 801b398:	2205      	movs	r2, #5
 801b39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b39e:	4858      	ldr	r0, [pc, #352]	; (801b500 <_vfiprintf_r+0x24c>)
 801b3a0:	f7e4 ff96 	bl	80002d0 <memchr>
 801b3a4:	9a04      	ldr	r2, [sp, #16]
 801b3a6:	b9d8      	cbnz	r0, 801b3e0 <_vfiprintf_r+0x12c>
 801b3a8:	06d1      	lsls	r1, r2, #27
 801b3aa:	bf44      	itt	mi
 801b3ac:	2320      	movmi	r3, #32
 801b3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b3b2:	0713      	lsls	r3, r2, #28
 801b3b4:	bf44      	itt	mi
 801b3b6:	232b      	movmi	r3, #43	; 0x2b
 801b3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b3bc:	f89a 3000 	ldrb.w	r3, [sl]
 801b3c0:	2b2a      	cmp	r3, #42	; 0x2a
 801b3c2:	d015      	beq.n	801b3f0 <_vfiprintf_r+0x13c>
 801b3c4:	9a07      	ldr	r2, [sp, #28]
 801b3c6:	4654      	mov	r4, sl
 801b3c8:	2000      	movs	r0, #0
 801b3ca:	f04f 0c0a 	mov.w	ip, #10
 801b3ce:	4621      	mov	r1, r4
 801b3d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b3d4:	3b30      	subs	r3, #48	; 0x30
 801b3d6:	2b09      	cmp	r3, #9
 801b3d8:	d94e      	bls.n	801b478 <_vfiprintf_r+0x1c4>
 801b3da:	b1b0      	cbz	r0, 801b40a <_vfiprintf_r+0x156>
 801b3dc:	9207      	str	r2, [sp, #28]
 801b3de:	e014      	b.n	801b40a <_vfiprintf_r+0x156>
 801b3e0:	eba0 0308 	sub.w	r3, r0, r8
 801b3e4:	fa09 f303 	lsl.w	r3, r9, r3
 801b3e8:	4313      	orrs	r3, r2
 801b3ea:	9304      	str	r3, [sp, #16]
 801b3ec:	46a2      	mov	sl, r4
 801b3ee:	e7d2      	b.n	801b396 <_vfiprintf_r+0xe2>
 801b3f0:	9b03      	ldr	r3, [sp, #12]
 801b3f2:	1d19      	adds	r1, r3, #4
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	9103      	str	r1, [sp, #12]
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	bfbb      	ittet	lt
 801b3fc:	425b      	neglt	r3, r3
 801b3fe:	f042 0202 	orrlt.w	r2, r2, #2
 801b402:	9307      	strge	r3, [sp, #28]
 801b404:	9307      	strlt	r3, [sp, #28]
 801b406:	bfb8      	it	lt
 801b408:	9204      	strlt	r2, [sp, #16]
 801b40a:	7823      	ldrb	r3, [r4, #0]
 801b40c:	2b2e      	cmp	r3, #46	; 0x2e
 801b40e:	d10c      	bne.n	801b42a <_vfiprintf_r+0x176>
 801b410:	7863      	ldrb	r3, [r4, #1]
 801b412:	2b2a      	cmp	r3, #42	; 0x2a
 801b414:	d135      	bne.n	801b482 <_vfiprintf_r+0x1ce>
 801b416:	9b03      	ldr	r3, [sp, #12]
 801b418:	1d1a      	adds	r2, r3, #4
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	9203      	str	r2, [sp, #12]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	bfb8      	it	lt
 801b422:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b426:	3402      	adds	r4, #2
 801b428:	9305      	str	r3, [sp, #20]
 801b42a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b510 <_vfiprintf_r+0x25c>
 801b42e:	7821      	ldrb	r1, [r4, #0]
 801b430:	2203      	movs	r2, #3
 801b432:	4650      	mov	r0, sl
 801b434:	f7e4 ff4c 	bl	80002d0 <memchr>
 801b438:	b140      	cbz	r0, 801b44c <_vfiprintf_r+0x198>
 801b43a:	2340      	movs	r3, #64	; 0x40
 801b43c:	eba0 000a 	sub.w	r0, r0, sl
 801b440:	fa03 f000 	lsl.w	r0, r3, r0
 801b444:	9b04      	ldr	r3, [sp, #16]
 801b446:	4303      	orrs	r3, r0
 801b448:	3401      	adds	r4, #1
 801b44a:	9304      	str	r3, [sp, #16]
 801b44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b450:	482c      	ldr	r0, [pc, #176]	; (801b504 <_vfiprintf_r+0x250>)
 801b452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b456:	2206      	movs	r2, #6
 801b458:	f7e4 ff3a 	bl	80002d0 <memchr>
 801b45c:	2800      	cmp	r0, #0
 801b45e:	d03f      	beq.n	801b4e0 <_vfiprintf_r+0x22c>
 801b460:	4b29      	ldr	r3, [pc, #164]	; (801b508 <_vfiprintf_r+0x254>)
 801b462:	bb1b      	cbnz	r3, 801b4ac <_vfiprintf_r+0x1f8>
 801b464:	9b03      	ldr	r3, [sp, #12]
 801b466:	3307      	adds	r3, #7
 801b468:	f023 0307 	bic.w	r3, r3, #7
 801b46c:	3308      	adds	r3, #8
 801b46e:	9303      	str	r3, [sp, #12]
 801b470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b472:	443b      	add	r3, r7
 801b474:	9309      	str	r3, [sp, #36]	; 0x24
 801b476:	e767      	b.n	801b348 <_vfiprintf_r+0x94>
 801b478:	fb0c 3202 	mla	r2, ip, r2, r3
 801b47c:	460c      	mov	r4, r1
 801b47e:	2001      	movs	r0, #1
 801b480:	e7a5      	b.n	801b3ce <_vfiprintf_r+0x11a>
 801b482:	2300      	movs	r3, #0
 801b484:	3401      	adds	r4, #1
 801b486:	9305      	str	r3, [sp, #20]
 801b488:	4619      	mov	r1, r3
 801b48a:	f04f 0c0a 	mov.w	ip, #10
 801b48e:	4620      	mov	r0, r4
 801b490:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b494:	3a30      	subs	r2, #48	; 0x30
 801b496:	2a09      	cmp	r2, #9
 801b498:	d903      	bls.n	801b4a2 <_vfiprintf_r+0x1ee>
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d0c5      	beq.n	801b42a <_vfiprintf_r+0x176>
 801b49e:	9105      	str	r1, [sp, #20]
 801b4a0:	e7c3      	b.n	801b42a <_vfiprintf_r+0x176>
 801b4a2:	fb0c 2101 	mla	r1, ip, r1, r2
 801b4a6:	4604      	mov	r4, r0
 801b4a8:	2301      	movs	r3, #1
 801b4aa:	e7f0      	b.n	801b48e <_vfiprintf_r+0x1da>
 801b4ac:	ab03      	add	r3, sp, #12
 801b4ae:	9300      	str	r3, [sp, #0]
 801b4b0:	462a      	mov	r2, r5
 801b4b2:	4b16      	ldr	r3, [pc, #88]	; (801b50c <_vfiprintf_r+0x258>)
 801b4b4:	a904      	add	r1, sp, #16
 801b4b6:	4630      	mov	r0, r6
 801b4b8:	f3af 8000 	nop.w
 801b4bc:	4607      	mov	r7, r0
 801b4be:	1c78      	adds	r0, r7, #1
 801b4c0:	d1d6      	bne.n	801b470 <_vfiprintf_r+0x1bc>
 801b4c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b4c4:	07d9      	lsls	r1, r3, #31
 801b4c6:	d405      	bmi.n	801b4d4 <_vfiprintf_r+0x220>
 801b4c8:	89ab      	ldrh	r3, [r5, #12]
 801b4ca:	059a      	lsls	r2, r3, #22
 801b4cc:	d402      	bmi.n	801b4d4 <_vfiprintf_r+0x220>
 801b4ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b4d0:	f7ff fcf9 	bl	801aec6 <__retarget_lock_release_recursive>
 801b4d4:	89ab      	ldrh	r3, [r5, #12]
 801b4d6:	065b      	lsls	r3, r3, #25
 801b4d8:	f53f af12 	bmi.w	801b300 <_vfiprintf_r+0x4c>
 801b4dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b4de:	e711      	b.n	801b304 <_vfiprintf_r+0x50>
 801b4e0:	ab03      	add	r3, sp, #12
 801b4e2:	9300      	str	r3, [sp, #0]
 801b4e4:	462a      	mov	r2, r5
 801b4e6:	4b09      	ldr	r3, [pc, #36]	; (801b50c <_vfiprintf_r+0x258>)
 801b4e8:	a904      	add	r1, sp, #16
 801b4ea:	4630      	mov	r0, r6
 801b4ec:	f000 f880 	bl	801b5f0 <_printf_i>
 801b4f0:	e7e4      	b.n	801b4bc <_vfiprintf_r+0x208>
 801b4f2:	bf00      	nop
 801b4f4:	080321d4 	.word	0x080321d4
 801b4f8:	080321f4 	.word	0x080321f4
 801b4fc:	080321b4 	.word	0x080321b4
 801b500:	08032214 	.word	0x08032214
 801b504:	0803221e 	.word	0x0803221e
 801b508:	00000000 	.word	0x00000000
 801b50c:	0801b28f 	.word	0x0801b28f
 801b510:	0803221a 	.word	0x0803221a

0801b514 <_printf_common>:
 801b514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b518:	4616      	mov	r6, r2
 801b51a:	4699      	mov	r9, r3
 801b51c:	688a      	ldr	r2, [r1, #8]
 801b51e:	690b      	ldr	r3, [r1, #16]
 801b520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b524:	4293      	cmp	r3, r2
 801b526:	bfb8      	it	lt
 801b528:	4613      	movlt	r3, r2
 801b52a:	6033      	str	r3, [r6, #0]
 801b52c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b530:	4607      	mov	r7, r0
 801b532:	460c      	mov	r4, r1
 801b534:	b10a      	cbz	r2, 801b53a <_printf_common+0x26>
 801b536:	3301      	adds	r3, #1
 801b538:	6033      	str	r3, [r6, #0]
 801b53a:	6823      	ldr	r3, [r4, #0]
 801b53c:	0699      	lsls	r1, r3, #26
 801b53e:	bf42      	ittt	mi
 801b540:	6833      	ldrmi	r3, [r6, #0]
 801b542:	3302      	addmi	r3, #2
 801b544:	6033      	strmi	r3, [r6, #0]
 801b546:	6825      	ldr	r5, [r4, #0]
 801b548:	f015 0506 	ands.w	r5, r5, #6
 801b54c:	d106      	bne.n	801b55c <_printf_common+0x48>
 801b54e:	f104 0a19 	add.w	sl, r4, #25
 801b552:	68e3      	ldr	r3, [r4, #12]
 801b554:	6832      	ldr	r2, [r6, #0]
 801b556:	1a9b      	subs	r3, r3, r2
 801b558:	42ab      	cmp	r3, r5
 801b55a:	dc26      	bgt.n	801b5aa <_printf_common+0x96>
 801b55c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b560:	1e13      	subs	r3, r2, #0
 801b562:	6822      	ldr	r2, [r4, #0]
 801b564:	bf18      	it	ne
 801b566:	2301      	movne	r3, #1
 801b568:	0692      	lsls	r2, r2, #26
 801b56a:	d42b      	bmi.n	801b5c4 <_printf_common+0xb0>
 801b56c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b570:	4649      	mov	r1, r9
 801b572:	4638      	mov	r0, r7
 801b574:	47c0      	blx	r8
 801b576:	3001      	adds	r0, #1
 801b578:	d01e      	beq.n	801b5b8 <_printf_common+0xa4>
 801b57a:	6823      	ldr	r3, [r4, #0]
 801b57c:	68e5      	ldr	r5, [r4, #12]
 801b57e:	6832      	ldr	r2, [r6, #0]
 801b580:	f003 0306 	and.w	r3, r3, #6
 801b584:	2b04      	cmp	r3, #4
 801b586:	bf08      	it	eq
 801b588:	1aad      	subeq	r5, r5, r2
 801b58a:	68a3      	ldr	r3, [r4, #8]
 801b58c:	6922      	ldr	r2, [r4, #16]
 801b58e:	bf0c      	ite	eq
 801b590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b594:	2500      	movne	r5, #0
 801b596:	4293      	cmp	r3, r2
 801b598:	bfc4      	itt	gt
 801b59a:	1a9b      	subgt	r3, r3, r2
 801b59c:	18ed      	addgt	r5, r5, r3
 801b59e:	2600      	movs	r6, #0
 801b5a0:	341a      	adds	r4, #26
 801b5a2:	42b5      	cmp	r5, r6
 801b5a4:	d11a      	bne.n	801b5dc <_printf_common+0xc8>
 801b5a6:	2000      	movs	r0, #0
 801b5a8:	e008      	b.n	801b5bc <_printf_common+0xa8>
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	4652      	mov	r2, sl
 801b5ae:	4649      	mov	r1, r9
 801b5b0:	4638      	mov	r0, r7
 801b5b2:	47c0      	blx	r8
 801b5b4:	3001      	adds	r0, #1
 801b5b6:	d103      	bne.n	801b5c0 <_printf_common+0xac>
 801b5b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5c0:	3501      	adds	r5, #1
 801b5c2:	e7c6      	b.n	801b552 <_printf_common+0x3e>
 801b5c4:	18e1      	adds	r1, r4, r3
 801b5c6:	1c5a      	adds	r2, r3, #1
 801b5c8:	2030      	movs	r0, #48	; 0x30
 801b5ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b5ce:	4422      	add	r2, r4
 801b5d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b5d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b5d8:	3302      	adds	r3, #2
 801b5da:	e7c7      	b.n	801b56c <_printf_common+0x58>
 801b5dc:	2301      	movs	r3, #1
 801b5de:	4622      	mov	r2, r4
 801b5e0:	4649      	mov	r1, r9
 801b5e2:	4638      	mov	r0, r7
 801b5e4:	47c0      	blx	r8
 801b5e6:	3001      	adds	r0, #1
 801b5e8:	d0e6      	beq.n	801b5b8 <_printf_common+0xa4>
 801b5ea:	3601      	adds	r6, #1
 801b5ec:	e7d9      	b.n	801b5a2 <_printf_common+0x8e>
	...

0801b5f0 <_printf_i>:
 801b5f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b5f4:	460c      	mov	r4, r1
 801b5f6:	4691      	mov	r9, r2
 801b5f8:	7e27      	ldrb	r7, [r4, #24]
 801b5fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b5fc:	2f78      	cmp	r7, #120	; 0x78
 801b5fe:	4680      	mov	r8, r0
 801b600:	469a      	mov	sl, r3
 801b602:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b606:	d807      	bhi.n	801b618 <_printf_i+0x28>
 801b608:	2f62      	cmp	r7, #98	; 0x62
 801b60a:	d80a      	bhi.n	801b622 <_printf_i+0x32>
 801b60c:	2f00      	cmp	r7, #0
 801b60e:	f000 80d8 	beq.w	801b7c2 <_printf_i+0x1d2>
 801b612:	2f58      	cmp	r7, #88	; 0x58
 801b614:	f000 80a3 	beq.w	801b75e <_printf_i+0x16e>
 801b618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b61c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b620:	e03a      	b.n	801b698 <_printf_i+0xa8>
 801b622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b626:	2b15      	cmp	r3, #21
 801b628:	d8f6      	bhi.n	801b618 <_printf_i+0x28>
 801b62a:	a001      	add	r0, pc, #4	; (adr r0, 801b630 <_printf_i+0x40>)
 801b62c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b630:	0801b689 	.word	0x0801b689
 801b634:	0801b69d 	.word	0x0801b69d
 801b638:	0801b619 	.word	0x0801b619
 801b63c:	0801b619 	.word	0x0801b619
 801b640:	0801b619 	.word	0x0801b619
 801b644:	0801b619 	.word	0x0801b619
 801b648:	0801b69d 	.word	0x0801b69d
 801b64c:	0801b619 	.word	0x0801b619
 801b650:	0801b619 	.word	0x0801b619
 801b654:	0801b619 	.word	0x0801b619
 801b658:	0801b619 	.word	0x0801b619
 801b65c:	0801b7a9 	.word	0x0801b7a9
 801b660:	0801b6cd 	.word	0x0801b6cd
 801b664:	0801b78b 	.word	0x0801b78b
 801b668:	0801b619 	.word	0x0801b619
 801b66c:	0801b619 	.word	0x0801b619
 801b670:	0801b7cb 	.word	0x0801b7cb
 801b674:	0801b619 	.word	0x0801b619
 801b678:	0801b6cd 	.word	0x0801b6cd
 801b67c:	0801b619 	.word	0x0801b619
 801b680:	0801b619 	.word	0x0801b619
 801b684:	0801b793 	.word	0x0801b793
 801b688:	680b      	ldr	r3, [r1, #0]
 801b68a:	1d1a      	adds	r2, r3, #4
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	600a      	str	r2, [r1, #0]
 801b690:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b698:	2301      	movs	r3, #1
 801b69a:	e0a3      	b.n	801b7e4 <_printf_i+0x1f4>
 801b69c:	6825      	ldr	r5, [r4, #0]
 801b69e:	6808      	ldr	r0, [r1, #0]
 801b6a0:	062e      	lsls	r6, r5, #24
 801b6a2:	f100 0304 	add.w	r3, r0, #4
 801b6a6:	d50a      	bpl.n	801b6be <_printf_i+0xce>
 801b6a8:	6805      	ldr	r5, [r0, #0]
 801b6aa:	600b      	str	r3, [r1, #0]
 801b6ac:	2d00      	cmp	r5, #0
 801b6ae:	da03      	bge.n	801b6b8 <_printf_i+0xc8>
 801b6b0:	232d      	movs	r3, #45	; 0x2d
 801b6b2:	426d      	negs	r5, r5
 801b6b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b6b8:	485e      	ldr	r0, [pc, #376]	; (801b834 <_printf_i+0x244>)
 801b6ba:	230a      	movs	r3, #10
 801b6bc:	e019      	b.n	801b6f2 <_printf_i+0x102>
 801b6be:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b6c2:	6805      	ldr	r5, [r0, #0]
 801b6c4:	600b      	str	r3, [r1, #0]
 801b6c6:	bf18      	it	ne
 801b6c8:	b22d      	sxthne	r5, r5
 801b6ca:	e7ef      	b.n	801b6ac <_printf_i+0xbc>
 801b6cc:	680b      	ldr	r3, [r1, #0]
 801b6ce:	6825      	ldr	r5, [r4, #0]
 801b6d0:	1d18      	adds	r0, r3, #4
 801b6d2:	6008      	str	r0, [r1, #0]
 801b6d4:	0628      	lsls	r0, r5, #24
 801b6d6:	d501      	bpl.n	801b6dc <_printf_i+0xec>
 801b6d8:	681d      	ldr	r5, [r3, #0]
 801b6da:	e002      	b.n	801b6e2 <_printf_i+0xf2>
 801b6dc:	0669      	lsls	r1, r5, #25
 801b6de:	d5fb      	bpl.n	801b6d8 <_printf_i+0xe8>
 801b6e0:	881d      	ldrh	r5, [r3, #0]
 801b6e2:	4854      	ldr	r0, [pc, #336]	; (801b834 <_printf_i+0x244>)
 801b6e4:	2f6f      	cmp	r7, #111	; 0x6f
 801b6e6:	bf0c      	ite	eq
 801b6e8:	2308      	moveq	r3, #8
 801b6ea:	230a      	movne	r3, #10
 801b6ec:	2100      	movs	r1, #0
 801b6ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b6f2:	6866      	ldr	r6, [r4, #4]
 801b6f4:	60a6      	str	r6, [r4, #8]
 801b6f6:	2e00      	cmp	r6, #0
 801b6f8:	bfa2      	ittt	ge
 801b6fa:	6821      	ldrge	r1, [r4, #0]
 801b6fc:	f021 0104 	bicge.w	r1, r1, #4
 801b700:	6021      	strge	r1, [r4, #0]
 801b702:	b90d      	cbnz	r5, 801b708 <_printf_i+0x118>
 801b704:	2e00      	cmp	r6, #0
 801b706:	d04d      	beq.n	801b7a4 <_printf_i+0x1b4>
 801b708:	4616      	mov	r6, r2
 801b70a:	fbb5 f1f3 	udiv	r1, r5, r3
 801b70e:	fb03 5711 	mls	r7, r3, r1, r5
 801b712:	5dc7      	ldrb	r7, [r0, r7]
 801b714:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b718:	462f      	mov	r7, r5
 801b71a:	42bb      	cmp	r3, r7
 801b71c:	460d      	mov	r5, r1
 801b71e:	d9f4      	bls.n	801b70a <_printf_i+0x11a>
 801b720:	2b08      	cmp	r3, #8
 801b722:	d10b      	bne.n	801b73c <_printf_i+0x14c>
 801b724:	6823      	ldr	r3, [r4, #0]
 801b726:	07df      	lsls	r7, r3, #31
 801b728:	d508      	bpl.n	801b73c <_printf_i+0x14c>
 801b72a:	6923      	ldr	r3, [r4, #16]
 801b72c:	6861      	ldr	r1, [r4, #4]
 801b72e:	4299      	cmp	r1, r3
 801b730:	bfde      	ittt	le
 801b732:	2330      	movle	r3, #48	; 0x30
 801b734:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b738:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801b73c:	1b92      	subs	r2, r2, r6
 801b73e:	6122      	str	r2, [r4, #16]
 801b740:	f8cd a000 	str.w	sl, [sp]
 801b744:	464b      	mov	r3, r9
 801b746:	aa03      	add	r2, sp, #12
 801b748:	4621      	mov	r1, r4
 801b74a:	4640      	mov	r0, r8
 801b74c:	f7ff fee2 	bl	801b514 <_printf_common>
 801b750:	3001      	adds	r0, #1
 801b752:	d14c      	bne.n	801b7ee <_printf_i+0x1fe>
 801b754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b758:	b004      	add	sp, #16
 801b75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b75e:	4835      	ldr	r0, [pc, #212]	; (801b834 <_printf_i+0x244>)
 801b760:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b764:	6823      	ldr	r3, [r4, #0]
 801b766:	680e      	ldr	r6, [r1, #0]
 801b768:	061f      	lsls	r7, r3, #24
 801b76a:	f856 5b04 	ldr.w	r5, [r6], #4
 801b76e:	600e      	str	r6, [r1, #0]
 801b770:	d514      	bpl.n	801b79c <_printf_i+0x1ac>
 801b772:	07d9      	lsls	r1, r3, #31
 801b774:	bf44      	itt	mi
 801b776:	f043 0320 	orrmi.w	r3, r3, #32
 801b77a:	6023      	strmi	r3, [r4, #0]
 801b77c:	b91d      	cbnz	r5, 801b786 <_printf_i+0x196>
 801b77e:	6823      	ldr	r3, [r4, #0]
 801b780:	f023 0320 	bic.w	r3, r3, #32
 801b784:	6023      	str	r3, [r4, #0]
 801b786:	2310      	movs	r3, #16
 801b788:	e7b0      	b.n	801b6ec <_printf_i+0xfc>
 801b78a:	6823      	ldr	r3, [r4, #0]
 801b78c:	f043 0320 	orr.w	r3, r3, #32
 801b790:	6023      	str	r3, [r4, #0]
 801b792:	2378      	movs	r3, #120	; 0x78
 801b794:	4828      	ldr	r0, [pc, #160]	; (801b838 <_printf_i+0x248>)
 801b796:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b79a:	e7e3      	b.n	801b764 <_printf_i+0x174>
 801b79c:	065e      	lsls	r6, r3, #25
 801b79e:	bf48      	it	mi
 801b7a0:	b2ad      	uxthmi	r5, r5
 801b7a2:	e7e6      	b.n	801b772 <_printf_i+0x182>
 801b7a4:	4616      	mov	r6, r2
 801b7a6:	e7bb      	b.n	801b720 <_printf_i+0x130>
 801b7a8:	680b      	ldr	r3, [r1, #0]
 801b7aa:	6826      	ldr	r6, [r4, #0]
 801b7ac:	6960      	ldr	r0, [r4, #20]
 801b7ae:	1d1d      	adds	r5, r3, #4
 801b7b0:	600d      	str	r5, [r1, #0]
 801b7b2:	0635      	lsls	r5, r6, #24
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	d501      	bpl.n	801b7bc <_printf_i+0x1cc>
 801b7b8:	6018      	str	r0, [r3, #0]
 801b7ba:	e002      	b.n	801b7c2 <_printf_i+0x1d2>
 801b7bc:	0671      	lsls	r1, r6, #25
 801b7be:	d5fb      	bpl.n	801b7b8 <_printf_i+0x1c8>
 801b7c0:	8018      	strh	r0, [r3, #0]
 801b7c2:	2300      	movs	r3, #0
 801b7c4:	6123      	str	r3, [r4, #16]
 801b7c6:	4616      	mov	r6, r2
 801b7c8:	e7ba      	b.n	801b740 <_printf_i+0x150>
 801b7ca:	680b      	ldr	r3, [r1, #0]
 801b7cc:	1d1a      	adds	r2, r3, #4
 801b7ce:	600a      	str	r2, [r1, #0]
 801b7d0:	681e      	ldr	r6, [r3, #0]
 801b7d2:	6862      	ldr	r2, [r4, #4]
 801b7d4:	2100      	movs	r1, #0
 801b7d6:	4630      	mov	r0, r6
 801b7d8:	f7e4 fd7a 	bl	80002d0 <memchr>
 801b7dc:	b108      	cbz	r0, 801b7e2 <_printf_i+0x1f2>
 801b7de:	1b80      	subs	r0, r0, r6
 801b7e0:	6060      	str	r0, [r4, #4]
 801b7e2:	6863      	ldr	r3, [r4, #4]
 801b7e4:	6123      	str	r3, [r4, #16]
 801b7e6:	2300      	movs	r3, #0
 801b7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b7ec:	e7a8      	b.n	801b740 <_printf_i+0x150>
 801b7ee:	6923      	ldr	r3, [r4, #16]
 801b7f0:	4632      	mov	r2, r6
 801b7f2:	4649      	mov	r1, r9
 801b7f4:	4640      	mov	r0, r8
 801b7f6:	47d0      	blx	sl
 801b7f8:	3001      	adds	r0, #1
 801b7fa:	d0ab      	beq.n	801b754 <_printf_i+0x164>
 801b7fc:	6823      	ldr	r3, [r4, #0]
 801b7fe:	079b      	lsls	r3, r3, #30
 801b800:	d413      	bmi.n	801b82a <_printf_i+0x23a>
 801b802:	68e0      	ldr	r0, [r4, #12]
 801b804:	9b03      	ldr	r3, [sp, #12]
 801b806:	4298      	cmp	r0, r3
 801b808:	bfb8      	it	lt
 801b80a:	4618      	movlt	r0, r3
 801b80c:	e7a4      	b.n	801b758 <_printf_i+0x168>
 801b80e:	2301      	movs	r3, #1
 801b810:	4632      	mov	r2, r6
 801b812:	4649      	mov	r1, r9
 801b814:	4640      	mov	r0, r8
 801b816:	47d0      	blx	sl
 801b818:	3001      	adds	r0, #1
 801b81a:	d09b      	beq.n	801b754 <_printf_i+0x164>
 801b81c:	3501      	adds	r5, #1
 801b81e:	68e3      	ldr	r3, [r4, #12]
 801b820:	9903      	ldr	r1, [sp, #12]
 801b822:	1a5b      	subs	r3, r3, r1
 801b824:	42ab      	cmp	r3, r5
 801b826:	dcf2      	bgt.n	801b80e <_printf_i+0x21e>
 801b828:	e7eb      	b.n	801b802 <_printf_i+0x212>
 801b82a:	2500      	movs	r5, #0
 801b82c:	f104 0619 	add.w	r6, r4, #25
 801b830:	e7f5      	b.n	801b81e <_printf_i+0x22e>
 801b832:	bf00      	nop
 801b834:	08032225 	.word	0x08032225
 801b838:	08032236 	.word	0x08032236

0801b83c <_putc_r>:
 801b83c:	b570      	push	{r4, r5, r6, lr}
 801b83e:	460d      	mov	r5, r1
 801b840:	4614      	mov	r4, r2
 801b842:	4606      	mov	r6, r0
 801b844:	b118      	cbz	r0, 801b84e <_putc_r+0x12>
 801b846:	6983      	ldr	r3, [r0, #24]
 801b848:	b90b      	cbnz	r3, 801b84e <_putc_r+0x12>
 801b84a:	f7ff fa9d 	bl	801ad88 <__sinit>
 801b84e:	4b1c      	ldr	r3, [pc, #112]	; (801b8c0 <_putc_r+0x84>)
 801b850:	429c      	cmp	r4, r3
 801b852:	d124      	bne.n	801b89e <_putc_r+0x62>
 801b854:	6874      	ldr	r4, [r6, #4]
 801b856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b858:	07d8      	lsls	r0, r3, #31
 801b85a:	d405      	bmi.n	801b868 <_putc_r+0x2c>
 801b85c:	89a3      	ldrh	r3, [r4, #12]
 801b85e:	0599      	lsls	r1, r3, #22
 801b860:	d402      	bmi.n	801b868 <_putc_r+0x2c>
 801b862:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b864:	f7ff fb2e 	bl	801aec4 <__retarget_lock_acquire_recursive>
 801b868:	68a3      	ldr	r3, [r4, #8]
 801b86a:	3b01      	subs	r3, #1
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	60a3      	str	r3, [r4, #8]
 801b870:	da05      	bge.n	801b87e <_putc_r+0x42>
 801b872:	69a2      	ldr	r2, [r4, #24]
 801b874:	4293      	cmp	r3, r2
 801b876:	db1c      	blt.n	801b8b2 <_putc_r+0x76>
 801b878:	b2eb      	uxtb	r3, r5
 801b87a:	2b0a      	cmp	r3, #10
 801b87c:	d019      	beq.n	801b8b2 <_putc_r+0x76>
 801b87e:	6823      	ldr	r3, [r4, #0]
 801b880:	1c5a      	adds	r2, r3, #1
 801b882:	6022      	str	r2, [r4, #0]
 801b884:	701d      	strb	r5, [r3, #0]
 801b886:	b2ed      	uxtb	r5, r5
 801b888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b88a:	07da      	lsls	r2, r3, #31
 801b88c:	d405      	bmi.n	801b89a <_putc_r+0x5e>
 801b88e:	89a3      	ldrh	r3, [r4, #12]
 801b890:	059b      	lsls	r3, r3, #22
 801b892:	d402      	bmi.n	801b89a <_putc_r+0x5e>
 801b894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b896:	f7ff fb16 	bl	801aec6 <__retarget_lock_release_recursive>
 801b89a:	4628      	mov	r0, r5
 801b89c:	bd70      	pop	{r4, r5, r6, pc}
 801b89e:	4b09      	ldr	r3, [pc, #36]	; (801b8c4 <_putc_r+0x88>)
 801b8a0:	429c      	cmp	r4, r3
 801b8a2:	d101      	bne.n	801b8a8 <_putc_r+0x6c>
 801b8a4:	68b4      	ldr	r4, [r6, #8]
 801b8a6:	e7d6      	b.n	801b856 <_putc_r+0x1a>
 801b8a8:	4b07      	ldr	r3, [pc, #28]	; (801b8c8 <_putc_r+0x8c>)
 801b8aa:	429c      	cmp	r4, r3
 801b8ac:	bf08      	it	eq
 801b8ae:	68f4      	ldreq	r4, [r6, #12]
 801b8b0:	e7d1      	b.n	801b856 <_putc_r+0x1a>
 801b8b2:	4629      	mov	r1, r5
 801b8b4:	4622      	mov	r2, r4
 801b8b6:	4630      	mov	r0, r6
 801b8b8:	f7ff f88c 	bl	801a9d4 <__swbuf_r>
 801b8bc:	4605      	mov	r5, r0
 801b8be:	e7e3      	b.n	801b888 <_putc_r+0x4c>
 801b8c0:	080321d4 	.word	0x080321d4
 801b8c4:	080321f4 	.word	0x080321f4
 801b8c8:	080321b4 	.word	0x080321b4

0801b8cc <__sread>:
 801b8cc:	b510      	push	{r4, lr}
 801b8ce:	460c      	mov	r4, r1
 801b8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8d4:	f000 f8d4 	bl	801ba80 <_read_r>
 801b8d8:	2800      	cmp	r0, #0
 801b8da:	bfab      	itete	ge
 801b8dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b8de:	89a3      	ldrhlt	r3, [r4, #12]
 801b8e0:	181b      	addge	r3, r3, r0
 801b8e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b8e6:	bfac      	ite	ge
 801b8e8:	6563      	strge	r3, [r4, #84]	; 0x54
 801b8ea:	81a3      	strhlt	r3, [r4, #12]
 801b8ec:	bd10      	pop	{r4, pc}

0801b8ee <__swrite>:
 801b8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8f2:	461f      	mov	r7, r3
 801b8f4:	898b      	ldrh	r3, [r1, #12]
 801b8f6:	05db      	lsls	r3, r3, #23
 801b8f8:	4605      	mov	r5, r0
 801b8fa:	460c      	mov	r4, r1
 801b8fc:	4616      	mov	r6, r2
 801b8fe:	d505      	bpl.n	801b90c <__swrite+0x1e>
 801b900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b904:	2302      	movs	r3, #2
 801b906:	2200      	movs	r2, #0
 801b908:	f000 f868 	bl	801b9dc <_lseek_r>
 801b90c:	89a3      	ldrh	r3, [r4, #12]
 801b90e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b916:	81a3      	strh	r3, [r4, #12]
 801b918:	4632      	mov	r2, r6
 801b91a:	463b      	mov	r3, r7
 801b91c:	4628      	mov	r0, r5
 801b91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b922:	f000 b817 	b.w	801b954 <_write_r>

0801b926 <__sseek>:
 801b926:	b510      	push	{r4, lr}
 801b928:	460c      	mov	r4, r1
 801b92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b92e:	f000 f855 	bl	801b9dc <_lseek_r>
 801b932:	1c43      	adds	r3, r0, #1
 801b934:	89a3      	ldrh	r3, [r4, #12]
 801b936:	bf15      	itete	ne
 801b938:	6560      	strne	r0, [r4, #84]	; 0x54
 801b93a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b93e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b942:	81a3      	strheq	r3, [r4, #12]
 801b944:	bf18      	it	ne
 801b946:	81a3      	strhne	r3, [r4, #12]
 801b948:	bd10      	pop	{r4, pc}

0801b94a <__sclose>:
 801b94a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b94e:	f000 b813 	b.w	801b978 <_close_r>
	...

0801b954 <_write_r>:
 801b954:	b538      	push	{r3, r4, r5, lr}
 801b956:	4d07      	ldr	r5, [pc, #28]	; (801b974 <_write_r+0x20>)
 801b958:	4604      	mov	r4, r0
 801b95a:	4608      	mov	r0, r1
 801b95c:	4611      	mov	r1, r2
 801b95e:	2200      	movs	r2, #0
 801b960:	602a      	str	r2, [r5, #0]
 801b962:	461a      	mov	r2, r3
 801b964:	f7e8 faf1 	bl	8003f4a <_write>
 801b968:	1c43      	adds	r3, r0, #1
 801b96a:	d102      	bne.n	801b972 <_write_r+0x1e>
 801b96c:	682b      	ldr	r3, [r5, #0]
 801b96e:	b103      	cbz	r3, 801b972 <_write_r+0x1e>
 801b970:	6023      	str	r3, [r4, #0]
 801b972:	bd38      	pop	{r3, r4, r5, pc}
 801b974:	2004b02c 	.word	0x2004b02c

0801b978 <_close_r>:
 801b978:	b538      	push	{r3, r4, r5, lr}
 801b97a:	4d06      	ldr	r5, [pc, #24]	; (801b994 <_close_r+0x1c>)
 801b97c:	2300      	movs	r3, #0
 801b97e:	4604      	mov	r4, r0
 801b980:	4608      	mov	r0, r1
 801b982:	602b      	str	r3, [r5, #0]
 801b984:	f7e8 fafd 	bl	8003f82 <_close>
 801b988:	1c43      	adds	r3, r0, #1
 801b98a:	d102      	bne.n	801b992 <_close_r+0x1a>
 801b98c:	682b      	ldr	r3, [r5, #0]
 801b98e:	b103      	cbz	r3, 801b992 <_close_r+0x1a>
 801b990:	6023      	str	r3, [r4, #0]
 801b992:	bd38      	pop	{r3, r4, r5, pc}
 801b994:	2004b02c 	.word	0x2004b02c

0801b998 <_fstat_r>:
 801b998:	b538      	push	{r3, r4, r5, lr}
 801b99a:	4d07      	ldr	r5, [pc, #28]	; (801b9b8 <_fstat_r+0x20>)
 801b99c:	2300      	movs	r3, #0
 801b99e:	4604      	mov	r4, r0
 801b9a0:	4608      	mov	r0, r1
 801b9a2:	4611      	mov	r1, r2
 801b9a4:	602b      	str	r3, [r5, #0]
 801b9a6:	f7e8 faf8 	bl	8003f9a <_fstat>
 801b9aa:	1c43      	adds	r3, r0, #1
 801b9ac:	d102      	bne.n	801b9b4 <_fstat_r+0x1c>
 801b9ae:	682b      	ldr	r3, [r5, #0]
 801b9b0:	b103      	cbz	r3, 801b9b4 <_fstat_r+0x1c>
 801b9b2:	6023      	str	r3, [r4, #0]
 801b9b4:	bd38      	pop	{r3, r4, r5, pc}
 801b9b6:	bf00      	nop
 801b9b8:	2004b02c 	.word	0x2004b02c

0801b9bc <_isatty_r>:
 801b9bc:	b538      	push	{r3, r4, r5, lr}
 801b9be:	4d06      	ldr	r5, [pc, #24]	; (801b9d8 <_isatty_r+0x1c>)
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	4604      	mov	r4, r0
 801b9c4:	4608      	mov	r0, r1
 801b9c6:	602b      	str	r3, [r5, #0]
 801b9c8:	f7e8 faf7 	bl	8003fba <_isatty>
 801b9cc:	1c43      	adds	r3, r0, #1
 801b9ce:	d102      	bne.n	801b9d6 <_isatty_r+0x1a>
 801b9d0:	682b      	ldr	r3, [r5, #0]
 801b9d2:	b103      	cbz	r3, 801b9d6 <_isatty_r+0x1a>
 801b9d4:	6023      	str	r3, [r4, #0]
 801b9d6:	bd38      	pop	{r3, r4, r5, pc}
 801b9d8:	2004b02c 	.word	0x2004b02c

0801b9dc <_lseek_r>:
 801b9dc:	b538      	push	{r3, r4, r5, lr}
 801b9de:	4d07      	ldr	r5, [pc, #28]	; (801b9fc <_lseek_r+0x20>)
 801b9e0:	4604      	mov	r4, r0
 801b9e2:	4608      	mov	r0, r1
 801b9e4:	4611      	mov	r1, r2
 801b9e6:	2200      	movs	r2, #0
 801b9e8:	602a      	str	r2, [r5, #0]
 801b9ea:	461a      	mov	r2, r3
 801b9ec:	f7e8 faf0 	bl	8003fd0 <_lseek>
 801b9f0:	1c43      	adds	r3, r0, #1
 801b9f2:	d102      	bne.n	801b9fa <_lseek_r+0x1e>
 801b9f4:	682b      	ldr	r3, [r5, #0]
 801b9f6:	b103      	cbz	r3, 801b9fa <_lseek_r+0x1e>
 801b9f8:	6023      	str	r3, [r4, #0]
 801b9fa:	bd38      	pop	{r3, r4, r5, pc}
 801b9fc:	2004b02c 	.word	0x2004b02c

0801ba00 <memmove>:
 801ba00:	4288      	cmp	r0, r1
 801ba02:	b510      	push	{r4, lr}
 801ba04:	eb01 0402 	add.w	r4, r1, r2
 801ba08:	d902      	bls.n	801ba10 <memmove+0x10>
 801ba0a:	4284      	cmp	r4, r0
 801ba0c:	4623      	mov	r3, r4
 801ba0e:	d807      	bhi.n	801ba20 <memmove+0x20>
 801ba10:	1e43      	subs	r3, r0, #1
 801ba12:	42a1      	cmp	r1, r4
 801ba14:	d008      	beq.n	801ba28 <memmove+0x28>
 801ba16:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ba1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ba1e:	e7f8      	b.n	801ba12 <memmove+0x12>
 801ba20:	4402      	add	r2, r0
 801ba22:	4601      	mov	r1, r0
 801ba24:	428a      	cmp	r2, r1
 801ba26:	d100      	bne.n	801ba2a <memmove+0x2a>
 801ba28:	bd10      	pop	{r4, pc}
 801ba2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ba2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ba32:	e7f7      	b.n	801ba24 <memmove+0x24>

0801ba34 <_realloc_r>:
 801ba34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba36:	4607      	mov	r7, r0
 801ba38:	4614      	mov	r4, r2
 801ba3a:	460e      	mov	r6, r1
 801ba3c:	b921      	cbnz	r1, 801ba48 <_realloc_r+0x14>
 801ba3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ba42:	4611      	mov	r1, r2
 801ba44:	f7fe be98 	b.w	801a778 <_malloc_r>
 801ba48:	b922      	cbnz	r2, 801ba54 <_realloc_r+0x20>
 801ba4a:	f7fe fe45 	bl	801a6d8 <_free_r>
 801ba4e:	4625      	mov	r5, r4
 801ba50:	4628      	mov	r0, r5
 801ba52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba54:	f000 f826 	bl	801baa4 <_malloc_usable_size_r>
 801ba58:	42a0      	cmp	r0, r4
 801ba5a:	d20f      	bcs.n	801ba7c <_realloc_r+0x48>
 801ba5c:	4621      	mov	r1, r4
 801ba5e:	4638      	mov	r0, r7
 801ba60:	f7fe fe8a 	bl	801a778 <_malloc_r>
 801ba64:	4605      	mov	r5, r0
 801ba66:	2800      	cmp	r0, #0
 801ba68:	d0f2      	beq.n	801ba50 <_realloc_r+0x1c>
 801ba6a:	4631      	mov	r1, r6
 801ba6c:	4622      	mov	r2, r4
 801ba6e:	f7fe fe1d 	bl	801a6ac <memcpy>
 801ba72:	4631      	mov	r1, r6
 801ba74:	4638      	mov	r0, r7
 801ba76:	f7fe fe2f 	bl	801a6d8 <_free_r>
 801ba7a:	e7e9      	b.n	801ba50 <_realloc_r+0x1c>
 801ba7c:	4635      	mov	r5, r6
 801ba7e:	e7e7      	b.n	801ba50 <_realloc_r+0x1c>

0801ba80 <_read_r>:
 801ba80:	b538      	push	{r3, r4, r5, lr}
 801ba82:	4d07      	ldr	r5, [pc, #28]	; (801baa0 <_read_r+0x20>)
 801ba84:	4604      	mov	r4, r0
 801ba86:	4608      	mov	r0, r1
 801ba88:	4611      	mov	r1, r2
 801ba8a:	2200      	movs	r2, #0
 801ba8c:	602a      	str	r2, [r5, #0]
 801ba8e:	461a      	mov	r2, r3
 801ba90:	f7e8 fa3e 	bl	8003f10 <_read>
 801ba94:	1c43      	adds	r3, r0, #1
 801ba96:	d102      	bne.n	801ba9e <_read_r+0x1e>
 801ba98:	682b      	ldr	r3, [r5, #0]
 801ba9a:	b103      	cbz	r3, 801ba9e <_read_r+0x1e>
 801ba9c:	6023      	str	r3, [r4, #0]
 801ba9e:	bd38      	pop	{r3, r4, r5, pc}
 801baa0:	2004b02c 	.word	0x2004b02c

0801baa4 <_malloc_usable_size_r>:
 801baa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801baa8:	1f18      	subs	r0, r3, #4
 801baaa:	2b00      	cmp	r3, #0
 801baac:	bfbc      	itt	lt
 801baae:	580b      	ldrlt	r3, [r1, r0]
 801bab0:	18c0      	addlt	r0, r0, r3
 801bab2:	4770      	bx	lr
 801bab4:	0000      	movs	r0, r0
	...

0801bab8 <log10>:
 801bab8:	b538      	push	{r3, r4, r5, lr}
 801baba:	ed2d 8b02 	vpush	{d8}
 801babe:	ec55 4b10 	vmov	r4, r5, d0
 801bac2:	f000 f869 	bl	801bb98 <__ieee754_log10>
 801bac6:	4b1e      	ldr	r3, [pc, #120]	; (801bb40 <log10+0x88>)
 801bac8:	eeb0 8a40 	vmov.f32	s16, s0
 801bacc:	eef0 8a60 	vmov.f32	s17, s1
 801bad0:	f993 3000 	ldrsb.w	r3, [r3]
 801bad4:	3301      	adds	r3, #1
 801bad6:	d01a      	beq.n	801bb0e <log10+0x56>
 801bad8:	4622      	mov	r2, r4
 801bada:	462b      	mov	r3, r5
 801badc:	4620      	mov	r0, r4
 801bade:	4629      	mov	r1, r5
 801bae0:	f7e5 f89c 	bl	8000c1c <__aeabi_dcmpun>
 801bae4:	b998      	cbnz	r0, 801bb0e <log10+0x56>
 801bae6:	2200      	movs	r2, #0
 801bae8:	2300      	movs	r3, #0
 801baea:	4620      	mov	r0, r4
 801baec:	4629      	mov	r1, r5
 801baee:	f7e5 f877 	bl	8000be0 <__aeabi_dcmple>
 801baf2:	b160      	cbz	r0, 801bb0e <log10+0x56>
 801baf4:	2200      	movs	r2, #0
 801baf6:	2300      	movs	r3, #0
 801baf8:	4620      	mov	r0, r4
 801bafa:	4629      	mov	r1, r5
 801bafc:	f7e5 f85c 	bl	8000bb8 <__aeabi_dcmpeq>
 801bb00:	b160      	cbz	r0, 801bb1c <log10+0x64>
 801bb02:	f7fe fd99 	bl	801a638 <__errno>
 801bb06:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 801bb38 <log10+0x80>
 801bb0a:	2322      	movs	r3, #34	; 0x22
 801bb0c:	6003      	str	r3, [r0, #0]
 801bb0e:	eeb0 0a48 	vmov.f32	s0, s16
 801bb12:	eef0 0a68 	vmov.f32	s1, s17
 801bb16:	ecbd 8b02 	vpop	{d8}
 801bb1a:	bd38      	pop	{r3, r4, r5, pc}
 801bb1c:	f7fe fd8c 	bl	801a638 <__errno>
 801bb20:	ecbd 8b02 	vpop	{d8}
 801bb24:	2321      	movs	r3, #33	; 0x21
 801bb26:	6003      	str	r3, [r0, #0]
 801bb28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb2c:	4805      	ldr	r0, [pc, #20]	; (801bb44 <log10+0x8c>)
 801bb2e:	f000 b8c3 	b.w	801bcb8 <nan>
 801bb32:	bf00      	nop
 801bb34:	f3af 8000 	nop.w
 801bb38:	00000000 	.word	0x00000000
 801bb3c:	fff00000 	.word	0xfff00000
 801bb40:	200000c0 	.word	0x200000c0
 801bb44:	08032219 	.word	0x08032219

0801bb48 <sqrtf>:
 801bb48:	b508      	push	{r3, lr}
 801bb4a:	ed2d 8b02 	vpush	{d8}
 801bb4e:	eeb0 8a40 	vmov.f32	s16, s0
 801bb52:	f000 f8ab 	bl	801bcac <__ieee754_sqrtf>
 801bb56:	4b0d      	ldr	r3, [pc, #52]	; (801bb8c <sqrtf+0x44>)
 801bb58:	f993 3000 	ldrsb.w	r3, [r3]
 801bb5c:	3301      	adds	r3, #1
 801bb5e:	d011      	beq.n	801bb84 <sqrtf+0x3c>
 801bb60:	eeb4 8a48 	vcmp.f32	s16, s16
 801bb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb68:	d60c      	bvs.n	801bb84 <sqrtf+0x3c>
 801bb6a:	eddf 8a09 	vldr	s17, [pc, #36]	; 801bb90 <sqrtf+0x48>
 801bb6e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801bb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb76:	d505      	bpl.n	801bb84 <sqrtf+0x3c>
 801bb78:	f7fe fd5e 	bl	801a638 <__errno>
 801bb7c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801bb80:	2321      	movs	r3, #33	; 0x21
 801bb82:	6003      	str	r3, [r0, #0]
 801bb84:	ecbd 8b02 	vpop	{d8}
 801bb88:	bd08      	pop	{r3, pc}
 801bb8a:	bf00      	nop
 801bb8c:	200000c0 	.word	0x200000c0
	...

0801bb98 <__ieee754_log10>:
 801bb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb9c:	ec55 4b10 	vmov	r4, r5, d0
 801bba0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801bba4:	462b      	mov	r3, r5
 801bba6:	da2f      	bge.n	801bc08 <__ieee754_log10+0x70>
 801bba8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801bbac:	4322      	orrs	r2, r4
 801bbae:	d109      	bne.n	801bbc4 <__ieee754_log10+0x2c>
 801bbb0:	493b      	ldr	r1, [pc, #236]	; (801bca0 <__ieee754_log10+0x108>)
 801bbb2:	2200      	movs	r2, #0
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	2000      	movs	r0, #0
 801bbb8:	f7e4 fec0 	bl	800093c <__aeabi_ddiv>
 801bbbc:	ec41 0b10 	vmov	d0, r0, r1
 801bbc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bbc4:	2d00      	cmp	r5, #0
 801bbc6:	da09      	bge.n	801bbdc <__ieee754_log10+0x44>
 801bbc8:	ee10 2a10 	vmov	r2, s0
 801bbcc:	ee10 0a10 	vmov	r0, s0
 801bbd0:	4629      	mov	r1, r5
 801bbd2:	f7e4 fbd1 	bl	8000378 <__aeabi_dsub>
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	2300      	movs	r3, #0
 801bbda:	e7ed      	b.n	801bbb8 <__ieee754_log10+0x20>
 801bbdc:	4b31      	ldr	r3, [pc, #196]	; (801bca4 <__ieee754_log10+0x10c>)
 801bbde:	2200      	movs	r2, #0
 801bbe0:	4629      	mov	r1, r5
 801bbe2:	ee10 0a10 	vmov	r0, s0
 801bbe6:	f7e4 fd7f 	bl	80006e8 <__aeabi_dmul>
 801bbea:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801bbee:	4604      	mov	r4, r0
 801bbf0:	460d      	mov	r5, r1
 801bbf2:	460b      	mov	r3, r1
 801bbf4:	492c      	ldr	r1, [pc, #176]	; (801bca8 <__ieee754_log10+0x110>)
 801bbf6:	428b      	cmp	r3, r1
 801bbf8:	dd08      	ble.n	801bc0c <__ieee754_log10+0x74>
 801bbfa:	4622      	mov	r2, r4
 801bbfc:	462b      	mov	r3, r5
 801bbfe:	4620      	mov	r0, r4
 801bc00:	4629      	mov	r1, r5
 801bc02:	f7e4 fbbb 	bl	800037c <__adddf3>
 801bc06:	e7d9      	b.n	801bbbc <__ieee754_log10+0x24>
 801bc08:	2200      	movs	r2, #0
 801bc0a:	e7f3      	b.n	801bbf4 <__ieee754_log10+0x5c>
 801bc0c:	1518      	asrs	r0, r3, #20
 801bc0e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801bc12:	4410      	add	r0, r2
 801bc14:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 801bc18:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801bc1c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801bc20:	f7e4 fcf8 	bl	8000614 <__aeabi_i2d>
 801bc24:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801bc28:	3303      	adds	r3, #3
 801bc2a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801bc2e:	ec45 4b10 	vmov	d0, r4, r5
 801bc32:	4606      	mov	r6, r0
 801bc34:	460f      	mov	r7, r1
 801bc36:	f000 f847 	bl	801bcc8 <__ieee754_log>
 801bc3a:	a313      	add	r3, pc, #76	; (adr r3, 801bc88 <__ieee754_log10+0xf0>)
 801bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc40:	4630      	mov	r0, r6
 801bc42:	4639      	mov	r1, r7
 801bc44:	ec59 8b10 	vmov	r8, r9, d0
 801bc48:	f7e4 fd4e 	bl	80006e8 <__aeabi_dmul>
 801bc4c:	a310      	add	r3, pc, #64	; (adr r3, 801bc90 <__ieee754_log10+0xf8>)
 801bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc52:	4604      	mov	r4, r0
 801bc54:	460d      	mov	r5, r1
 801bc56:	4640      	mov	r0, r8
 801bc58:	4649      	mov	r1, r9
 801bc5a:	f7e4 fd45 	bl	80006e8 <__aeabi_dmul>
 801bc5e:	4602      	mov	r2, r0
 801bc60:	460b      	mov	r3, r1
 801bc62:	4620      	mov	r0, r4
 801bc64:	4629      	mov	r1, r5
 801bc66:	f7e4 fb89 	bl	800037c <__adddf3>
 801bc6a:	a30b      	add	r3, pc, #44	; (adr r3, 801bc98 <__ieee754_log10+0x100>)
 801bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc70:	4604      	mov	r4, r0
 801bc72:	460d      	mov	r5, r1
 801bc74:	4630      	mov	r0, r6
 801bc76:	4639      	mov	r1, r7
 801bc78:	f7e4 fd36 	bl	80006e8 <__aeabi_dmul>
 801bc7c:	4602      	mov	r2, r0
 801bc7e:	460b      	mov	r3, r1
 801bc80:	4620      	mov	r0, r4
 801bc82:	4629      	mov	r1, r5
 801bc84:	e7bd      	b.n	801bc02 <__ieee754_log10+0x6a>
 801bc86:	bf00      	nop
 801bc88:	11f12b36 	.word	0x11f12b36
 801bc8c:	3d59fef3 	.word	0x3d59fef3
 801bc90:	1526e50e 	.word	0x1526e50e
 801bc94:	3fdbcb7b 	.word	0x3fdbcb7b
 801bc98:	509f6000 	.word	0x509f6000
 801bc9c:	3fd34413 	.word	0x3fd34413
 801bca0:	c3500000 	.word	0xc3500000
 801bca4:	43500000 	.word	0x43500000
 801bca8:	7fefffff 	.word	0x7fefffff

0801bcac <__ieee754_sqrtf>:
 801bcac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801bcb0:	4770      	bx	lr
 801bcb2:	0000      	movs	r0, r0
 801bcb4:	0000      	movs	r0, r0
	...

0801bcb8 <nan>:
 801bcb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801bcc0 <nan+0x8>
 801bcbc:	4770      	bx	lr
 801bcbe:	bf00      	nop
 801bcc0:	00000000 	.word	0x00000000
 801bcc4:	7ff80000 	.word	0x7ff80000

0801bcc8 <__ieee754_log>:
 801bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bccc:	ec51 0b10 	vmov	r0, r1, d0
 801bcd0:	ed2d 8b04 	vpush	{d8-d9}
 801bcd4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801bcd8:	b083      	sub	sp, #12
 801bcda:	460d      	mov	r5, r1
 801bcdc:	da29      	bge.n	801bd32 <__ieee754_log+0x6a>
 801bcde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bce2:	4303      	orrs	r3, r0
 801bce4:	ee10 2a10 	vmov	r2, s0
 801bce8:	d10c      	bne.n	801bd04 <__ieee754_log+0x3c>
 801bcea:	49cf      	ldr	r1, [pc, #828]	; (801c028 <__ieee754_log+0x360>)
 801bcec:	2200      	movs	r2, #0
 801bcee:	2300      	movs	r3, #0
 801bcf0:	2000      	movs	r0, #0
 801bcf2:	f7e4 fe23 	bl	800093c <__aeabi_ddiv>
 801bcf6:	ec41 0b10 	vmov	d0, r0, r1
 801bcfa:	b003      	add	sp, #12
 801bcfc:	ecbd 8b04 	vpop	{d8-d9}
 801bd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd04:	2900      	cmp	r1, #0
 801bd06:	da05      	bge.n	801bd14 <__ieee754_log+0x4c>
 801bd08:	460b      	mov	r3, r1
 801bd0a:	f7e4 fb35 	bl	8000378 <__aeabi_dsub>
 801bd0e:	2200      	movs	r2, #0
 801bd10:	2300      	movs	r3, #0
 801bd12:	e7ee      	b.n	801bcf2 <__ieee754_log+0x2a>
 801bd14:	4bc5      	ldr	r3, [pc, #788]	; (801c02c <__ieee754_log+0x364>)
 801bd16:	2200      	movs	r2, #0
 801bd18:	f7e4 fce6 	bl	80006e8 <__aeabi_dmul>
 801bd1c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801bd20:	460d      	mov	r5, r1
 801bd22:	4ac3      	ldr	r2, [pc, #780]	; (801c030 <__ieee754_log+0x368>)
 801bd24:	4295      	cmp	r5, r2
 801bd26:	dd06      	ble.n	801bd36 <__ieee754_log+0x6e>
 801bd28:	4602      	mov	r2, r0
 801bd2a:	460b      	mov	r3, r1
 801bd2c:	f7e4 fb26 	bl	800037c <__adddf3>
 801bd30:	e7e1      	b.n	801bcf6 <__ieee754_log+0x2e>
 801bd32:	2300      	movs	r3, #0
 801bd34:	e7f5      	b.n	801bd22 <__ieee754_log+0x5a>
 801bd36:	152c      	asrs	r4, r5, #20
 801bd38:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801bd3c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801bd40:	441c      	add	r4, r3
 801bd42:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801bd46:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801bd4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bd4e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801bd52:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801bd56:	ea42 0105 	orr.w	r1, r2, r5
 801bd5a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801bd5e:	2200      	movs	r2, #0
 801bd60:	4bb4      	ldr	r3, [pc, #720]	; (801c034 <__ieee754_log+0x36c>)
 801bd62:	f7e4 fb09 	bl	8000378 <__aeabi_dsub>
 801bd66:	1cab      	adds	r3, r5, #2
 801bd68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bd6c:	2b02      	cmp	r3, #2
 801bd6e:	4682      	mov	sl, r0
 801bd70:	468b      	mov	fp, r1
 801bd72:	f04f 0200 	mov.w	r2, #0
 801bd76:	dc53      	bgt.n	801be20 <__ieee754_log+0x158>
 801bd78:	2300      	movs	r3, #0
 801bd7a:	f7e4 ff1d 	bl	8000bb8 <__aeabi_dcmpeq>
 801bd7e:	b1d0      	cbz	r0, 801bdb6 <__ieee754_log+0xee>
 801bd80:	2c00      	cmp	r4, #0
 801bd82:	f000 8122 	beq.w	801bfca <__ieee754_log+0x302>
 801bd86:	4620      	mov	r0, r4
 801bd88:	f7e4 fc44 	bl	8000614 <__aeabi_i2d>
 801bd8c:	a390      	add	r3, pc, #576	; (adr r3, 801bfd0 <__ieee754_log+0x308>)
 801bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd92:	4606      	mov	r6, r0
 801bd94:	460f      	mov	r7, r1
 801bd96:	f7e4 fca7 	bl	80006e8 <__aeabi_dmul>
 801bd9a:	a38f      	add	r3, pc, #572	; (adr r3, 801bfd8 <__ieee754_log+0x310>)
 801bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bda0:	4604      	mov	r4, r0
 801bda2:	460d      	mov	r5, r1
 801bda4:	4630      	mov	r0, r6
 801bda6:	4639      	mov	r1, r7
 801bda8:	f7e4 fc9e 	bl	80006e8 <__aeabi_dmul>
 801bdac:	4602      	mov	r2, r0
 801bdae:	460b      	mov	r3, r1
 801bdb0:	4620      	mov	r0, r4
 801bdb2:	4629      	mov	r1, r5
 801bdb4:	e7ba      	b.n	801bd2c <__ieee754_log+0x64>
 801bdb6:	a38a      	add	r3, pc, #552	; (adr r3, 801bfe0 <__ieee754_log+0x318>)
 801bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdbc:	4650      	mov	r0, sl
 801bdbe:	4659      	mov	r1, fp
 801bdc0:	f7e4 fc92 	bl	80006e8 <__aeabi_dmul>
 801bdc4:	4602      	mov	r2, r0
 801bdc6:	460b      	mov	r3, r1
 801bdc8:	2000      	movs	r0, #0
 801bdca:	499b      	ldr	r1, [pc, #620]	; (801c038 <__ieee754_log+0x370>)
 801bdcc:	f7e4 fad4 	bl	8000378 <__aeabi_dsub>
 801bdd0:	4652      	mov	r2, sl
 801bdd2:	4606      	mov	r6, r0
 801bdd4:	460f      	mov	r7, r1
 801bdd6:	465b      	mov	r3, fp
 801bdd8:	4650      	mov	r0, sl
 801bdda:	4659      	mov	r1, fp
 801bddc:	f7e4 fc84 	bl	80006e8 <__aeabi_dmul>
 801bde0:	4602      	mov	r2, r0
 801bde2:	460b      	mov	r3, r1
 801bde4:	4630      	mov	r0, r6
 801bde6:	4639      	mov	r1, r7
 801bde8:	f7e4 fc7e 	bl	80006e8 <__aeabi_dmul>
 801bdec:	4606      	mov	r6, r0
 801bdee:	460f      	mov	r7, r1
 801bdf0:	b914      	cbnz	r4, 801bdf8 <__ieee754_log+0x130>
 801bdf2:	4632      	mov	r2, r6
 801bdf4:	463b      	mov	r3, r7
 801bdf6:	e0a2      	b.n	801bf3e <__ieee754_log+0x276>
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	f7e4 fc0b 	bl	8000614 <__aeabi_i2d>
 801bdfe:	a374      	add	r3, pc, #464	; (adr r3, 801bfd0 <__ieee754_log+0x308>)
 801be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be04:	4680      	mov	r8, r0
 801be06:	4689      	mov	r9, r1
 801be08:	f7e4 fc6e 	bl	80006e8 <__aeabi_dmul>
 801be0c:	a372      	add	r3, pc, #456	; (adr r3, 801bfd8 <__ieee754_log+0x310>)
 801be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be12:	4604      	mov	r4, r0
 801be14:	460d      	mov	r5, r1
 801be16:	4640      	mov	r0, r8
 801be18:	4649      	mov	r1, r9
 801be1a:	f7e4 fc65 	bl	80006e8 <__aeabi_dmul>
 801be1e:	e0a7      	b.n	801bf70 <__ieee754_log+0x2a8>
 801be20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801be24:	f7e4 faaa 	bl	800037c <__adddf3>
 801be28:	4602      	mov	r2, r0
 801be2a:	460b      	mov	r3, r1
 801be2c:	4650      	mov	r0, sl
 801be2e:	4659      	mov	r1, fp
 801be30:	f7e4 fd84 	bl	800093c <__aeabi_ddiv>
 801be34:	ec41 0b18 	vmov	d8, r0, r1
 801be38:	4620      	mov	r0, r4
 801be3a:	f7e4 fbeb 	bl	8000614 <__aeabi_i2d>
 801be3e:	ec53 2b18 	vmov	r2, r3, d8
 801be42:	ec41 0b19 	vmov	d9, r0, r1
 801be46:	ec51 0b18 	vmov	r0, r1, d8
 801be4a:	f7e4 fc4d 	bl	80006e8 <__aeabi_dmul>
 801be4e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801be52:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801be56:	9301      	str	r3, [sp, #4]
 801be58:	4602      	mov	r2, r0
 801be5a:	460b      	mov	r3, r1
 801be5c:	4680      	mov	r8, r0
 801be5e:	4689      	mov	r9, r1
 801be60:	f7e4 fc42 	bl	80006e8 <__aeabi_dmul>
 801be64:	a360      	add	r3, pc, #384	; (adr r3, 801bfe8 <__ieee754_log+0x320>)
 801be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be6a:	4606      	mov	r6, r0
 801be6c:	460f      	mov	r7, r1
 801be6e:	f7e4 fc3b 	bl	80006e8 <__aeabi_dmul>
 801be72:	a35f      	add	r3, pc, #380	; (adr r3, 801bff0 <__ieee754_log+0x328>)
 801be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be78:	f7e4 fa80 	bl	800037c <__adddf3>
 801be7c:	4632      	mov	r2, r6
 801be7e:	463b      	mov	r3, r7
 801be80:	f7e4 fc32 	bl	80006e8 <__aeabi_dmul>
 801be84:	a35c      	add	r3, pc, #368	; (adr r3, 801bff8 <__ieee754_log+0x330>)
 801be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be8a:	f7e4 fa77 	bl	800037c <__adddf3>
 801be8e:	4632      	mov	r2, r6
 801be90:	463b      	mov	r3, r7
 801be92:	f7e4 fc29 	bl	80006e8 <__aeabi_dmul>
 801be96:	a35a      	add	r3, pc, #360	; (adr r3, 801c000 <__ieee754_log+0x338>)
 801be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be9c:	f7e4 fa6e 	bl	800037c <__adddf3>
 801bea0:	4642      	mov	r2, r8
 801bea2:	464b      	mov	r3, r9
 801bea4:	f7e4 fc20 	bl	80006e8 <__aeabi_dmul>
 801bea8:	a357      	add	r3, pc, #348	; (adr r3, 801c008 <__ieee754_log+0x340>)
 801beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beae:	4680      	mov	r8, r0
 801beb0:	4689      	mov	r9, r1
 801beb2:	4630      	mov	r0, r6
 801beb4:	4639      	mov	r1, r7
 801beb6:	f7e4 fc17 	bl	80006e8 <__aeabi_dmul>
 801beba:	a355      	add	r3, pc, #340	; (adr r3, 801c010 <__ieee754_log+0x348>)
 801bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bec0:	f7e4 fa5c 	bl	800037c <__adddf3>
 801bec4:	4632      	mov	r2, r6
 801bec6:	463b      	mov	r3, r7
 801bec8:	f7e4 fc0e 	bl	80006e8 <__aeabi_dmul>
 801becc:	a352      	add	r3, pc, #328	; (adr r3, 801c018 <__ieee754_log+0x350>)
 801bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bed2:	f7e4 fa53 	bl	800037c <__adddf3>
 801bed6:	4632      	mov	r2, r6
 801bed8:	463b      	mov	r3, r7
 801beda:	f7e4 fc05 	bl	80006e8 <__aeabi_dmul>
 801bede:	460b      	mov	r3, r1
 801bee0:	4602      	mov	r2, r0
 801bee2:	4649      	mov	r1, r9
 801bee4:	4640      	mov	r0, r8
 801bee6:	f7e4 fa49 	bl	800037c <__adddf3>
 801beea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801beee:	9b01      	ldr	r3, [sp, #4]
 801bef0:	3551      	adds	r5, #81	; 0x51
 801bef2:	431d      	orrs	r5, r3
 801bef4:	2d00      	cmp	r5, #0
 801bef6:	4680      	mov	r8, r0
 801bef8:	4689      	mov	r9, r1
 801befa:	dd48      	ble.n	801bf8e <__ieee754_log+0x2c6>
 801befc:	4b4e      	ldr	r3, [pc, #312]	; (801c038 <__ieee754_log+0x370>)
 801befe:	2200      	movs	r2, #0
 801bf00:	4650      	mov	r0, sl
 801bf02:	4659      	mov	r1, fp
 801bf04:	f7e4 fbf0 	bl	80006e8 <__aeabi_dmul>
 801bf08:	4652      	mov	r2, sl
 801bf0a:	465b      	mov	r3, fp
 801bf0c:	f7e4 fbec 	bl	80006e8 <__aeabi_dmul>
 801bf10:	4602      	mov	r2, r0
 801bf12:	460b      	mov	r3, r1
 801bf14:	4606      	mov	r6, r0
 801bf16:	460f      	mov	r7, r1
 801bf18:	4640      	mov	r0, r8
 801bf1a:	4649      	mov	r1, r9
 801bf1c:	f7e4 fa2e 	bl	800037c <__adddf3>
 801bf20:	ec53 2b18 	vmov	r2, r3, d8
 801bf24:	f7e4 fbe0 	bl	80006e8 <__aeabi_dmul>
 801bf28:	4680      	mov	r8, r0
 801bf2a:	4689      	mov	r9, r1
 801bf2c:	b964      	cbnz	r4, 801bf48 <__ieee754_log+0x280>
 801bf2e:	4602      	mov	r2, r0
 801bf30:	460b      	mov	r3, r1
 801bf32:	4630      	mov	r0, r6
 801bf34:	4639      	mov	r1, r7
 801bf36:	f7e4 fa1f 	bl	8000378 <__aeabi_dsub>
 801bf3a:	4602      	mov	r2, r0
 801bf3c:	460b      	mov	r3, r1
 801bf3e:	4650      	mov	r0, sl
 801bf40:	4659      	mov	r1, fp
 801bf42:	f7e4 fa19 	bl	8000378 <__aeabi_dsub>
 801bf46:	e6d6      	b.n	801bcf6 <__ieee754_log+0x2e>
 801bf48:	a321      	add	r3, pc, #132	; (adr r3, 801bfd0 <__ieee754_log+0x308>)
 801bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf4e:	ec51 0b19 	vmov	r0, r1, d9
 801bf52:	f7e4 fbc9 	bl	80006e8 <__aeabi_dmul>
 801bf56:	a320      	add	r3, pc, #128	; (adr r3, 801bfd8 <__ieee754_log+0x310>)
 801bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf5c:	4604      	mov	r4, r0
 801bf5e:	460d      	mov	r5, r1
 801bf60:	ec51 0b19 	vmov	r0, r1, d9
 801bf64:	f7e4 fbc0 	bl	80006e8 <__aeabi_dmul>
 801bf68:	4642      	mov	r2, r8
 801bf6a:	464b      	mov	r3, r9
 801bf6c:	f7e4 fa06 	bl	800037c <__adddf3>
 801bf70:	4602      	mov	r2, r0
 801bf72:	460b      	mov	r3, r1
 801bf74:	4630      	mov	r0, r6
 801bf76:	4639      	mov	r1, r7
 801bf78:	f7e4 f9fe 	bl	8000378 <__aeabi_dsub>
 801bf7c:	4652      	mov	r2, sl
 801bf7e:	465b      	mov	r3, fp
 801bf80:	f7e4 f9fa 	bl	8000378 <__aeabi_dsub>
 801bf84:	4602      	mov	r2, r0
 801bf86:	460b      	mov	r3, r1
 801bf88:	4620      	mov	r0, r4
 801bf8a:	4629      	mov	r1, r5
 801bf8c:	e7d9      	b.n	801bf42 <__ieee754_log+0x27a>
 801bf8e:	4602      	mov	r2, r0
 801bf90:	460b      	mov	r3, r1
 801bf92:	4650      	mov	r0, sl
 801bf94:	4659      	mov	r1, fp
 801bf96:	f7e4 f9ef 	bl	8000378 <__aeabi_dsub>
 801bf9a:	ec53 2b18 	vmov	r2, r3, d8
 801bf9e:	f7e4 fba3 	bl	80006e8 <__aeabi_dmul>
 801bfa2:	4606      	mov	r6, r0
 801bfa4:	460f      	mov	r7, r1
 801bfa6:	2c00      	cmp	r4, #0
 801bfa8:	f43f af23 	beq.w	801bdf2 <__ieee754_log+0x12a>
 801bfac:	a308      	add	r3, pc, #32	; (adr r3, 801bfd0 <__ieee754_log+0x308>)
 801bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfb2:	ec51 0b19 	vmov	r0, r1, d9
 801bfb6:	f7e4 fb97 	bl	80006e8 <__aeabi_dmul>
 801bfba:	a307      	add	r3, pc, #28	; (adr r3, 801bfd8 <__ieee754_log+0x310>)
 801bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfc0:	4604      	mov	r4, r0
 801bfc2:	460d      	mov	r5, r1
 801bfc4:	ec51 0b19 	vmov	r0, r1, d9
 801bfc8:	e727      	b.n	801be1a <__ieee754_log+0x152>
 801bfca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801c020 <__ieee754_log+0x358>
 801bfce:	e694      	b.n	801bcfa <__ieee754_log+0x32>
 801bfd0:	fee00000 	.word	0xfee00000
 801bfd4:	3fe62e42 	.word	0x3fe62e42
 801bfd8:	35793c76 	.word	0x35793c76
 801bfdc:	3dea39ef 	.word	0x3dea39ef
 801bfe0:	55555555 	.word	0x55555555
 801bfe4:	3fd55555 	.word	0x3fd55555
 801bfe8:	df3e5244 	.word	0xdf3e5244
 801bfec:	3fc2f112 	.word	0x3fc2f112
 801bff0:	96cb03de 	.word	0x96cb03de
 801bff4:	3fc74664 	.word	0x3fc74664
 801bff8:	94229359 	.word	0x94229359
 801bffc:	3fd24924 	.word	0x3fd24924
 801c000:	55555593 	.word	0x55555593
 801c004:	3fe55555 	.word	0x3fe55555
 801c008:	d078c69f 	.word	0xd078c69f
 801c00c:	3fc39a09 	.word	0x3fc39a09
 801c010:	1d8e78af 	.word	0x1d8e78af
 801c014:	3fcc71c5 	.word	0x3fcc71c5
 801c018:	9997fa04 	.word	0x9997fa04
 801c01c:	3fd99999 	.word	0x3fd99999
	...
 801c028:	c3500000 	.word	0xc3500000
 801c02c:	43500000 	.word	0x43500000
 801c030:	7fefffff 	.word	0x7fefffff
 801c034:	3ff00000 	.word	0x3ff00000
 801c038:	3fe00000 	.word	0x3fe00000

0801c03c <_init>:
 801c03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c03e:	bf00      	nop
 801c040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c042:	bc08      	pop	{r3}
 801c044:	469e      	mov	lr, r3
 801c046:	4770      	bx	lr

0801c048 <_fini>:
 801c048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c04a:	bf00      	nop
 801c04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c04e:	bc08      	pop	{r3}
 801c050:	469e      	mov	lr, r3
 801c052:	4770      	bx	lr
